
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 eb 00 20 21 52 00 00 b3 cf 00 00 f5 51 00 00     ... !R.......Q..
  10:	f5 51 00 00 f5 51 00 00 f5 51 00 00 00 00 00 00     .Q...Q...Q......
	...
  2c:	c1 4a 00 00 f5 51 00 00 00 00 00 00 6d 4a 00 00     .J...Q......mJ..
  3c:	f5 51 00 00                                         .Q..

00000040 <_irq_vector_table>:
  40:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  50:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  60:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  70:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  80:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  90:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  a0:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  b0:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  c0:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  d0:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  e0:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..
  f0:	71 4b 00 00 71 4b 00 00 71 4b 00 00 71 4b 00 00     qK..qK..qK..qK..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__adddf3+0x1ee>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__adddf3+0x1da>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__data_size+0x34>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__adddf3+0x16e>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__adddf3+0x16a>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__adddf3+0x184>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__adddf3+0x1d2>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__adddf3+0x1ba>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__data_size+0x42>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__data_size+0x6>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__data_size+0x24>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_d2f>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     944:	bf24      	itt	cs
     946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     94a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     94e:	d90d      	bls.n	96c <__aeabi_d2f+0x30>
     950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     964:	bf08      	it	eq
     966:	f020 0001 	biceq.w	r0, r0, #1
     96a:	4770      	bx	lr
     96c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     970:	d121      	bne.n	9b6 <__aeabi_d2f+0x7a>
     972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     976:	bfbc      	itt	lt
     978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     97c:	4770      	bxlt	lr
     97e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     982:	ea4f 5252 	mov.w	r2, r2, lsr #21
     986:	f1c2 0218 	rsb	r2, r2, #24
     98a:	f1c2 0c20 	rsb	ip, r2, #32
     98e:	fa10 f30c 	lsls.w	r3, r0, ip
     992:	fa20 f002 	lsr.w	r0, r0, r2
     996:	bf18      	it	ne
     998:	f040 0001 	orrne.w	r0, r0, #1
     99c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     9a4:	fa03 fc0c 	lsl.w	ip, r3, ip
     9a8:	ea40 000c 	orr.w	r0, r0, ip
     9ac:	fa23 f302 	lsr.w	r3, r3, r2
     9b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9b4:	e7cc      	b.n	950 <__aeabi_d2f+0x14>
     9b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     9ba:	d107      	bne.n	9cc <__aeabi_d2f+0x90>
     9bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9c0:	bf1e      	ittt	ne
     9c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9ca:	4770      	bxne	lr
     9cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <__gesf2>:
     9dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     9e0:	e006      	b.n	9f0 <__cmpsf2+0x4>
     9e2:	bf00      	nop

000009e4 <__lesf2>:
     9e4:	f04f 0c01 	mov.w	ip, #1
     9e8:	e002      	b.n	9f0 <__cmpsf2+0x4>
     9ea:	bf00      	nop

000009ec <__cmpsf2>:
     9ec:	f04f 0c01 	mov.w	ip, #1
     9f0:	f84d cd04 	str.w	ip, [sp, #-4]!
     9f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
     9f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
     9fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a00:	bf18      	it	ne
     a02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a06:	d011      	beq.n	a2c <__cmpsf2+0x40>
     a08:	b001      	add	sp, #4
     a0a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     a0e:	bf18      	it	ne
     a10:	ea90 0f01 	teqne	r0, r1
     a14:	bf58      	it	pl
     a16:	ebb2 0003 	subspl.w	r0, r2, r3
     a1a:	bf88      	it	hi
     a1c:	17c8      	asrhi	r0, r1, #31
     a1e:	bf38      	it	cc
     a20:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     a24:	bf18      	it	ne
     a26:	f040 0001 	orrne.w	r0, r0, #1
     a2a:	4770      	bx	lr
     a2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a30:	d102      	bne.n	a38 <__cmpsf2+0x4c>
     a32:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     a36:	d105      	bne.n	a44 <__cmpsf2+0x58>
     a38:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     a3c:	d1e4      	bne.n	a08 <__cmpsf2+0x1c>
     a3e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     a42:	d0e1      	beq.n	a08 <__cmpsf2+0x1c>
     a44:	f85d 0b04 	ldr.w	r0, [sp], #4
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <__aeabi_cfrcmple>:
     a4c:	4684      	mov	ip, r0
     a4e:	4608      	mov	r0, r1
     a50:	4661      	mov	r1, ip
     a52:	e7ff      	b.n	a54 <__aeabi_cfcmpeq>

00000a54 <__aeabi_cfcmpeq>:
     a54:	b50f      	push	{r0, r1, r2, r3, lr}
     a56:	f7ff ffc9 	bl	9ec <__cmpsf2>
     a5a:	2800      	cmp	r0, #0
     a5c:	bf48      	it	mi
     a5e:	f110 0f00 	cmnmi.w	r0, #0
     a62:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000a64 <__aeabi_fcmpeq>:
     a64:	f84d ed08 	str.w	lr, [sp, #-8]!
     a68:	f7ff fff4 	bl	a54 <__aeabi_cfcmpeq>
     a6c:	bf0c      	ite	eq
     a6e:	2001      	moveq	r0, #1
     a70:	2000      	movne	r0, #0
     a72:	f85d fb08 	ldr.w	pc, [sp], #8
     a76:	bf00      	nop

00000a78 <__aeabi_fcmplt>:
     a78:	f84d ed08 	str.w	lr, [sp, #-8]!
     a7c:	f7ff ffea 	bl	a54 <__aeabi_cfcmpeq>
     a80:	bf34      	ite	cc
     a82:	2001      	movcc	r0, #1
     a84:	2000      	movcs	r0, #0
     a86:	f85d fb08 	ldr.w	pc, [sp], #8
     a8a:	bf00      	nop

00000a8c <__aeabi_fcmple>:
     a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a90:	f7ff ffe0 	bl	a54 <__aeabi_cfcmpeq>
     a94:	bf94      	ite	ls
     a96:	2001      	movls	r0, #1
     a98:	2000      	movhi	r0, #0
     a9a:	f85d fb08 	ldr.w	pc, [sp], #8
     a9e:	bf00      	nop

00000aa0 <__aeabi_fcmpge>:
     aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
     aa4:	f7ff ffd2 	bl	a4c <__aeabi_cfrcmple>
     aa8:	bf94      	ite	ls
     aaa:	2001      	movls	r0, #1
     aac:	2000      	movhi	r0, #0
     aae:	f85d fb08 	ldr.w	pc, [sp], #8
     ab2:	bf00      	nop

00000ab4 <__aeabi_fcmpgt>:
     ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ab8:	f7ff ffc8 	bl	a4c <__aeabi_cfrcmple>
     abc:	bf34      	ite	cc
     abe:	2001      	movcc	r0, #1
     ac0:	2000      	movcs	r0, #0
     ac2:	f85d fb08 	ldr.w	pc, [sp], #8
     ac6:	bf00      	nop

00000ac8 <__aeabi_uldivmod>:
     ac8:	b953      	cbnz	r3, ae0 <__aeabi_uldivmod+0x18>
     aca:	b94a      	cbnz	r2, ae0 <__aeabi_uldivmod+0x18>
     acc:	2900      	cmp	r1, #0
     ace:	bf08      	it	eq
     ad0:	2800      	cmpeq	r0, #0
     ad2:	bf1c      	itt	ne
     ad4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     ad8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     adc:	f000 b80c 	b.w	af8 <__aeabi_idiv0>
     ae0:	f1ad 0c08 	sub.w	ip, sp, #8
     ae4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     ae8:	f000 f8ce 	bl	c88 <__udivmoddi4>
     aec:	f8dd e004 	ldr.w	lr, [sp, #4]
     af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     af4:	b004      	add	sp, #16
     af6:	4770      	bx	lr

00000af8 <__aeabi_idiv0>:
     af8:	4770      	bx	lr
     afa:	bf00      	nop

00000afc <__gedf2>:
     afc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     b00:	e006      	b.n	b10 <__cmpdf2+0x4>
     b02:	bf00      	nop

00000b04 <__ledf2>:
     b04:	f04f 0c01 	mov.w	ip, #1
     b08:	e002      	b.n	b10 <__cmpdf2+0x4>
     b0a:	bf00      	nop

00000b0c <__cmpdf2>:
     b0c:	f04f 0c01 	mov.w	ip, #1
     b10:	f84d cd04 	str.w	ip, [sp, #-4]!
     b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     b20:	bf18      	it	ne
     b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     b26:	d01b      	beq.n	b60 <__cmpdf2+0x54>
     b28:	b001      	add	sp, #4
     b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     b2e:	bf0c      	ite	eq
     b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     b34:	ea91 0f03 	teqne	r1, r3
     b38:	bf02      	ittt	eq
     b3a:	ea90 0f02 	teqeq	r0, r2
     b3e:	2000      	moveq	r0, #0
     b40:	4770      	bxeq	lr
     b42:	f110 0f00 	cmn.w	r0, #0
     b46:	ea91 0f03 	teq	r1, r3
     b4a:	bf58      	it	pl
     b4c:	4299      	cmppl	r1, r3
     b4e:	bf08      	it	eq
     b50:	4290      	cmpeq	r0, r2
     b52:	bf2c      	ite	cs
     b54:	17d8      	asrcs	r0, r3, #31
     b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     b5a:	f040 0001 	orr.w	r0, r0, #1
     b5e:	4770      	bx	lr
     b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b68:	d102      	bne.n	b70 <__cmpdf2+0x64>
     b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     b6e:	d107      	bne.n	b80 <__cmpdf2+0x74>
     b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b78:	d1d6      	bne.n	b28 <__cmpdf2+0x1c>
     b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     b7e:	d0d3      	beq.n	b28 <__cmpdf2+0x1c>
     b80:	f85d 0b04 	ldr.w	r0, [sp], #4
     b84:	4770      	bx	lr
     b86:	bf00      	nop

00000b88 <__aeabi_cdrcmple>:
     b88:	4684      	mov	ip, r0
     b8a:	4610      	mov	r0, r2
     b8c:	4662      	mov	r2, ip
     b8e:	468c      	mov	ip, r1
     b90:	4619      	mov	r1, r3
     b92:	4663      	mov	r3, ip
     b94:	e000      	b.n	b98 <__aeabi_cdcmpeq>
     b96:	bf00      	nop

00000b98 <__aeabi_cdcmpeq>:
     b98:	b501      	push	{r0, lr}
     b9a:	f7ff ffb7 	bl	b0c <__cmpdf2>
     b9e:	2800      	cmp	r0, #0
     ba0:	bf48      	it	mi
     ba2:	f110 0f00 	cmnmi.w	r0, #0
     ba6:	bd01      	pop	{r0, pc}

00000ba8 <__aeabi_dcmpeq>:
     ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
     bac:	f7ff fff4 	bl	b98 <__aeabi_cdcmpeq>
     bb0:	bf0c      	ite	eq
     bb2:	2001      	moveq	r0, #1
     bb4:	2000      	movne	r0, #0
     bb6:	f85d fb08 	ldr.w	pc, [sp], #8
     bba:	bf00      	nop

00000bbc <__aeabi_dcmplt>:
     bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
     bc0:	f7ff ffea 	bl	b98 <__aeabi_cdcmpeq>
     bc4:	bf34      	ite	cc
     bc6:	2001      	movcc	r0, #1
     bc8:	2000      	movcs	r0, #0
     bca:	f85d fb08 	ldr.w	pc, [sp], #8
     bce:	bf00      	nop

00000bd0 <__aeabi_dcmple>:
     bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
     bd4:	f7ff ffe0 	bl	b98 <__aeabi_cdcmpeq>
     bd8:	bf94      	ite	ls
     bda:	2001      	movls	r0, #1
     bdc:	2000      	movhi	r0, #0
     bde:	f85d fb08 	ldr.w	pc, [sp], #8
     be2:	bf00      	nop

00000be4 <__aeabi_dcmpge>:
     be4:	f84d ed08 	str.w	lr, [sp, #-8]!
     be8:	f7ff ffce 	bl	b88 <__aeabi_cdrcmple>
     bec:	bf94      	ite	ls
     bee:	2001      	movls	r0, #1
     bf0:	2000      	movhi	r0, #0
     bf2:	f85d fb08 	ldr.w	pc, [sp], #8
     bf6:	bf00      	nop

00000bf8 <__aeabi_dcmpgt>:
     bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
     bfc:	f7ff ffc4 	bl	b88 <__aeabi_cdrcmple>
     c00:	bf34      	ite	cc
     c02:	2001      	movcc	r0, #1
     c04:	2000      	movcs	r0, #0
     c06:	f85d fb08 	ldr.w	pc, [sp], #8
     c0a:	bf00      	nop

00000c0c <__aeabi_dcmpun>:
     c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     c14:	d102      	bne.n	c1c <__aeabi_dcmpun+0x10>
     c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     c1a:	d10a      	bne.n	c32 <__aeabi_dcmpun+0x26>
     c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     c24:	d102      	bne.n	c2c <__aeabi_dcmpun+0x20>
     c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     c2a:	d102      	bne.n	c32 <__aeabi_dcmpun+0x26>
     c2c:	f04f 0000 	mov.w	r0, #0
     c30:	4770      	bx	lr
     c32:	f04f 0001 	mov.w	r0, #1
     c36:	4770      	bx	lr

00000c38 <__aeabi_d2iz>:
     c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
     c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     c40:	d215      	bcs.n	c6e <__aeabi_d2iz+0x36>
     c42:	d511      	bpl.n	c68 <__aeabi_d2iz+0x30>
     c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     c4c:	d912      	bls.n	c74 <__aeabi_d2iz+0x3c>
     c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     c5e:	fa23 f002 	lsr.w	r0, r3, r2
     c62:	bf18      	it	ne
     c64:	4240      	negne	r0, r0
     c66:	4770      	bx	lr
     c68:	f04f 0000 	mov.w	r0, #0
     c6c:	4770      	bx	lr
     c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     c72:	d105      	bne.n	c80 <__aeabi_d2iz+0x48>
     c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     c78:	bf08      	it	eq
     c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     c7e:	4770      	bx	lr
     c80:	f04f 0000 	mov.w	r0, #0
     c84:	4770      	bx	lr
     c86:	bf00      	nop

00000c88 <__udivmoddi4>:
     c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c8c:	4607      	mov	r7, r0
     c8e:	468c      	mov	ip, r1
     c90:	4608      	mov	r0, r1
     c92:	9e09      	ldr	r6, [sp, #36]	; 0x24
     c94:	4615      	mov	r5, r2
     c96:	463c      	mov	r4, r7
     c98:	4619      	mov	r1, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	f040 80c6 	bne.w	e2c <__udivmoddi4+0x1a4>
     ca0:	4282      	cmp	r2, r0
     ca2:	fab2 f782 	clz	r7, r2
     ca6:	d946      	bls.n	d36 <__udivmoddi4+0xae>
     ca8:	b14f      	cbz	r7, cbe <__udivmoddi4+0x36>
     caa:	f1c7 0e20 	rsb	lr, r7, #32
     cae:	fa24 fe0e 	lsr.w	lr, r4, lr
     cb2:	fa00 f307 	lsl.w	r3, r0, r7
     cb6:	40bd      	lsls	r5, r7
     cb8:	ea4e 0c03 	orr.w	ip, lr, r3
     cbc:	40bc      	lsls	r4, r7
     cbe:	ea4f 4815 	mov.w	r8, r5, lsr #16
     cc2:	fa1f fe85 	uxth.w	lr, r5
     cc6:	fbbc f9f8 	udiv	r9, ip, r8
     cca:	0c22      	lsrs	r2, r4, #16
     ccc:	fb08 c319 	mls	r3, r8, r9, ip
     cd0:	fb09 fa0e 	mul.w	sl, r9, lr
     cd4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     cd8:	459a      	cmp	sl, r3
     cda:	d928      	bls.n	d2e <__udivmoddi4+0xa6>
     cdc:	18eb      	adds	r3, r5, r3
     cde:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     ce2:	d204      	bcs.n	cee <__udivmoddi4+0x66>
     ce4:	459a      	cmp	sl, r3
     ce6:	d902      	bls.n	cee <__udivmoddi4+0x66>
     ce8:	f1a9 0002 	sub.w	r0, r9, #2
     cec:	442b      	add	r3, r5
     cee:	eba3 030a 	sub.w	r3, r3, sl
     cf2:	b2a4      	uxth	r4, r4
     cf4:	fbb3 f2f8 	udiv	r2, r3, r8
     cf8:	fb08 3312 	mls	r3, r8, r2, r3
     cfc:	fb02 fe0e 	mul.w	lr, r2, lr
     d00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     d04:	45a6      	cmp	lr, r4
     d06:	d914      	bls.n	d32 <__udivmoddi4+0xaa>
     d08:	192c      	adds	r4, r5, r4
     d0a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     d0e:	d203      	bcs.n	d18 <__udivmoddi4+0x90>
     d10:	45a6      	cmp	lr, r4
     d12:	d901      	bls.n	d18 <__udivmoddi4+0x90>
     d14:	1e93      	subs	r3, r2, #2
     d16:	442c      	add	r4, r5
     d18:	eba4 040e 	sub.w	r4, r4, lr
     d1c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     d20:	b11e      	cbz	r6, d2a <__udivmoddi4+0xa2>
     d22:	40fc      	lsrs	r4, r7
     d24:	2300      	movs	r3, #0
     d26:	6034      	str	r4, [r6, #0]
     d28:	6073      	str	r3, [r6, #4]
     d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d2e:	4648      	mov	r0, r9
     d30:	e7dd      	b.n	cee <__udivmoddi4+0x66>
     d32:	4613      	mov	r3, r2
     d34:	e7f0      	b.n	d18 <__udivmoddi4+0x90>
     d36:	b902      	cbnz	r2, d3a <__udivmoddi4+0xb2>
     d38:	deff      	udf	#255	; 0xff
     d3a:	bb87      	cbnz	r7, d9e <__udivmoddi4+0x116>
     d3c:	1a83      	subs	r3, r0, r2
     d3e:	2101      	movs	r1, #1
     d40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     d44:	b2aa      	uxth	r2, r5
     d46:	fbb3 fcfe 	udiv	ip, r3, lr
     d4a:	0c20      	lsrs	r0, r4, #16
     d4c:	fb0e 331c 	mls	r3, lr, ip, r3
     d50:	fb0c f802 	mul.w	r8, ip, r2
     d54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     d58:	4598      	cmp	r8, r3
     d5a:	d963      	bls.n	e24 <__udivmoddi4+0x19c>
     d5c:	18eb      	adds	r3, r5, r3
     d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     d62:	d204      	bcs.n	d6e <__udivmoddi4+0xe6>
     d64:	4598      	cmp	r8, r3
     d66:	d902      	bls.n	d6e <__udivmoddi4+0xe6>
     d68:	f1ac 0002 	sub.w	r0, ip, #2
     d6c:	442b      	add	r3, r5
     d6e:	eba3 0308 	sub.w	r3, r3, r8
     d72:	b2a4      	uxth	r4, r4
     d74:	fbb3 fcfe 	udiv	ip, r3, lr
     d78:	fb0e 331c 	mls	r3, lr, ip, r3
     d7c:	fb0c f202 	mul.w	r2, ip, r2
     d80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     d84:	42a2      	cmp	r2, r4
     d86:	d94f      	bls.n	e28 <__udivmoddi4+0x1a0>
     d88:	192c      	adds	r4, r5, r4
     d8a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     d8e:	d204      	bcs.n	d9a <__udivmoddi4+0x112>
     d90:	42a2      	cmp	r2, r4
     d92:	d902      	bls.n	d9a <__udivmoddi4+0x112>
     d94:	f1ac 0302 	sub.w	r3, ip, #2
     d98:	442c      	add	r4, r5
     d9a:	1aa4      	subs	r4, r4, r2
     d9c:	e7be      	b.n	d1c <__udivmoddi4+0x94>
     d9e:	f1c7 0c20 	rsb	ip, r7, #32
     da2:	fa20 f80c 	lsr.w	r8, r0, ip
     da6:	fa00 f307 	lsl.w	r3, r0, r7
     daa:	fa24 fc0c 	lsr.w	ip, r4, ip
     dae:	40bd      	lsls	r5, r7
     db0:	ea4c 0203 	orr.w	r2, ip, r3
     db4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     db8:	b2ab      	uxth	r3, r5
     dba:	fbb8 fcfe 	udiv	ip, r8, lr
     dbe:	0c11      	lsrs	r1, r2, #16
     dc0:	fb0e 801c 	mls	r0, lr, ip, r8
     dc4:	fb0c f903 	mul.w	r9, ip, r3
     dc8:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     dcc:	4581      	cmp	r9, r0
     dce:	fa04 f407 	lsl.w	r4, r4, r7
     dd2:	d923      	bls.n	e1c <__udivmoddi4+0x194>
     dd4:	1828      	adds	r0, r5, r0
     dd6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     dda:	d204      	bcs.n	de6 <__udivmoddi4+0x15e>
     ddc:	4581      	cmp	r9, r0
     dde:	d902      	bls.n	de6 <__udivmoddi4+0x15e>
     de0:	f1ac 0102 	sub.w	r1, ip, #2
     de4:	4428      	add	r0, r5
     de6:	eba0 0009 	sub.w	r0, r0, r9
     dea:	b292      	uxth	r2, r2
     dec:	fbb0 fcfe 	udiv	ip, r0, lr
     df0:	fb0e 001c 	mls	r0, lr, ip, r0
     df4:	fb0c f803 	mul.w	r8, ip, r3
     df8:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     dfc:	4598      	cmp	r8, r3
     dfe:	d90f      	bls.n	e20 <__udivmoddi4+0x198>
     e00:	18eb      	adds	r3, r5, r3
     e02:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     e06:	d204      	bcs.n	e12 <__udivmoddi4+0x18a>
     e08:	4598      	cmp	r8, r3
     e0a:	d902      	bls.n	e12 <__udivmoddi4+0x18a>
     e0c:	f1ac 0202 	sub.w	r2, ip, #2
     e10:	442b      	add	r3, r5
     e12:	eba3 0308 	sub.w	r3, r3, r8
     e16:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     e1a:	e791      	b.n	d40 <__udivmoddi4+0xb8>
     e1c:	4661      	mov	r1, ip
     e1e:	e7e2      	b.n	de6 <__udivmoddi4+0x15e>
     e20:	4662      	mov	r2, ip
     e22:	e7f6      	b.n	e12 <__udivmoddi4+0x18a>
     e24:	4660      	mov	r0, ip
     e26:	e7a2      	b.n	d6e <__udivmoddi4+0xe6>
     e28:	4663      	mov	r3, ip
     e2a:	e7b6      	b.n	d9a <__udivmoddi4+0x112>
     e2c:	4283      	cmp	r3, r0
     e2e:	d905      	bls.n	e3c <__udivmoddi4+0x1b4>
     e30:	b10e      	cbz	r6, e36 <__udivmoddi4+0x1ae>
     e32:	e9c6 7000 	strd	r7, r0, [r6]
     e36:	2100      	movs	r1, #0
     e38:	4608      	mov	r0, r1
     e3a:	e776      	b.n	d2a <__udivmoddi4+0xa2>
     e3c:	fab3 f183 	clz	r1, r3
     e40:	b981      	cbnz	r1, e64 <__udivmoddi4+0x1dc>
     e42:	4283      	cmp	r3, r0
     e44:	d301      	bcc.n	e4a <__udivmoddi4+0x1c2>
     e46:	42ba      	cmp	r2, r7
     e48:	d80a      	bhi.n	e60 <__udivmoddi4+0x1d8>
     e4a:	1abc      	subs	r4, r7, r2
     e4c:	eb60 0303 	sbc.w	r3, r0, r3
     e50:	2001      	movs	r0, #1
     e52:	469c      	mov	ip, r3
     e54:	2e00      	cmp	r6, #0
     e56:	d068      	beq.n	f2a <__udivmoddi4+0x2a2>
     e58:	e9c6 4c00 	strd	r4, ip, [r6]
     e5c:	2100      	movs	r1, #0
     e5e:	e764      	b.n	d2a <__udivmoddi4+0xa2>
     e60:	4608      	mov	r0, r1
     e62:	e7f7      	b.n	e54 <__udivmoddi4+0x1cc>
     e64:	f1c1 0c20 	rsb	ip, r1, #32
     e68:	408b      	lsls	r3, r1
     e6a:	fa22 f40c 	lsr.w	r4, r2, ip
     e6e:	431c      	orrs	r4, r3
     e70:	fa02 f501 	lsl.w	r5, r2, r1
     e74:	fa00 f301 	lsl.w	r3, r0, r1
     e78:	fa27 f20c 	lsr.w	r2, r7, ip
     e7c:	fa20 fb0c 	lsr.w	fp, r0, ip
     e80:	ea4f 4914 	mov.w	r9, r4, lsr #16
     e84:	4313      	orrs	r3, r2
     e86:	fbbb f8f9 	udiv	r8, fp, r9
     e8a:	fa1f fe84 	uxth.w	lr, r4
     e8e:	fb09 bb18 	mls	fp, r9, r8, fp
     e92:	0c1a      	lsrs	r2, r3, #16
     e94:	fb08 fa0e 	mul.w	sl, r8, lr
     e98:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     e9c:	4592      	cmp	sl, r2
     e9e:	fa07 f701 	lsl.w	r7, r7, r1
     ea2:	d93e      	bls.n	f22 <__udivmoddi4+0x29a>
     ea4:	18a2      	adds	r2, r4, r2
     ea6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     eaa:	d204      	bcs.n	eb6 <__udivmoddi4+0x22e>
     eac:	4592      	cmp	sl, r2
     eae:	d902      	bls.n	eb6 <__udivmoddi4+0x22e>
     eb0:	f1a8 0002 	sub.w	r0, r8, #2
     eb4:	4422      	add	r2, r4
     eb6:	eba2 020a 	sub.w	r2, r2, sl
     eba:	b29b      	uxth	r3, r3
     ebc:	fbb2 f8f9 	udiv	r8, r2, r9
     ec0:	fb09 2218 	mls	r2, r9, r8, r2
     ec4:	fb08 fe0e 	mul.w	lr, r8, lr
     ec8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     ecc:	4596      	cmp	lr, r2
     ece:	d92a      	bls.n	f26 <__udivmoddi4+0x29e>
     ed0:	18a2      	adds	r2, r4, r2
     ed2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     ed6:	d204      	bcs.n	ee2 <__udivmoddi4+0x25a>
     ed8:	4596      	cmp	lr, r2
     eda:	d902      	bls.n	ee2 <__udivmoddi4+0x25a>
     edc:	f1a8 0302 	sub.w	r3, r8, #2
     ee0:	4422      	add	r2, r4
     ee2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     ee6:	fba0 9305 	umull	r9, r3, r0, r5
     eea:	eba2 020e 	sub.w	r2, r2, lr
     eee:	429a      	cmp	r2, r3
     ef0:	46ce      	mov	lr, r9
     ef2:	4698      	mov	r8, r3
     ef4:	d302      	bcc.n	efc <__udivmoddi4+0x274>
     ef6:	d106      	bne.n	f06 <__udivmoddi4+0x27e>
     ef8:	454f      	cmp	r7, r9
     efa:	d204      	bcs.n	f06 <__udivmoddi4+0x27e>
     efc:	ebb9 0e05 	subs.w	lr, r9, r5
     f00:	eb63 0804 	sbc.w	r8, r3, r4
     f04:	3801      	subs	r0, #1
     f06:	b186      	cbz	r6, f2a <__udivmoddi4+0x2a2>
     f08:	ebb7 030e 	subs.w	r3, r7, lr
     f0c:	eb62 0708 	sbc.w	r7, r2, r8
     f10:	fa07 fc0c 	lsl.w	ip, r7, ip
     f14:	40cb      	lsrs	r3, r1
     f16:	ea4c 0303 	orr.w	r3, ip, r3
     f1a:	40cf      	lsrs	r7, r1
     f1c:	e9c6 3700 	strd	r3, r7, [r6]
     f20:	e79c      	b.n	e5c <__udivmoddi4+0x1d4>
     f22:	4640      	mov	r0, r8
     f24:	e7c7      	b.n	eb6 <__udivmoddi4+0x22e>
     f26:	4643      	mov	r3, r8
     f28:	e7db      	b.n	ee2 <__udivmoddi4+0x25a>
     f2a:	4631      	mov	r1, r6
     f2c:	e6fd      	b.n	d2a <__udivmoddi4+0xa2>

00000f2e <strcmp>:
     f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
     f32:	f811 3b01 	ldrb.w	r3, [r1], #1
     f36:	2a01      	cmp	r2, #1
     f38:	bf28      	it	cs
     f3a:	429a      	cmpcs	r2, r3
     f3c:	d0f7      	beq.n	f2e <strcmp>
     f3e:	1ad0      	subs	r0, r2, r3
     f40:	4770      	bx	lr

00000f42 <strlen>:
     f42:	4603      	mov	r3, r0
     f44:	f813 2b01 	ldrb.w	r2, [r3], #1
     f48:	2a00      	cmp	r2, #0
     f4a:	d1fb      	bne.n	f44 <strlen+0x2>
     f4c:	1a18      	subs	r0, r3, r0
     f4e:	3801      	subs	r0, #1
     f50:	4770      	bx	lr
     f52:	0000      	movs	r0, r0
     f54:	0000      	movs	r0, r0
	...

00000f58 <guideLineSearch>:
#define NOB_WIDTH 5	/* WIDTH of the sensor area */


/* Function that detects he position and agle of the guideline */
/* Very crude implemenation. Just for illustration purposes */
int guideLineSearch(uint8_t imageBuf[IMGWIDTH][IMGWIDTH], int16_t *pos_, float *angle) {
     f58:	b570      	push	{r4, r5, r6, lr}
	int i, gf_pos;

	*pos_=-1;
     f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
int guideLineSearch(uint8_t imageBuf[IMGWIDTH][IMGWIDTH], int16_t *pos_, float *angle) {
     f5e:	4615      	mov	r5, r2
	gf_pos=-1;

    int flag_mais_que_uma_guideline_gn =0;
     f60:	2200      	movs	r2, #0
	*pos_=-1;
     f62:	800b      	strh	r3, [r1, #0]
int guideLineSearch(uint8_t imageBuf[IMGWIDTH][IMGWIDTH], int16_t *pos_, float *angle) {
     f64:	460c      	mov	r4, r1
	// 		printf("%d ",imageBuf[i][j]);
	// 	}
	// 	printf("\n");
	// }
	
	for(i=0; i < IMGWIDTH; i++) {
     f66:	4613      	mov	r3, r2
     f68:	1e41      	subs	r1, r0, #1
		if(imageBuf[GN_ROW][i] == GUIDELINE_COLOR) {
     f6a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
     f6e:	2eff      	cmp	r6, #255	; 0xff
     f70:	d102      	bne.n	f78 <guideLineSearch+0x20>
			if (flag_mais_que_uma_guideline_gn ==0){
     f72:	b93a      	cbnz	r2, f84 <guideLineSearch+0x2c>
                *pos_ = i;
     f74:	8023      	strh	r3, [r4, #0]
                flag_mais_que_uma_guideline_gn =1;
     f76:	2201      	movs	r2, #1
	for(i=0; i < IMGWIDTH; i++) {
     f78:	3301      	adds	r3, #1
     f7a:	2b80      	cmp	r3, #128	; 0x80
     f7c:	d1f5      	bne.n	f6a <guideLineSearch+0x12>
	gf_pos=-1;
     f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f82:	e008      	b.n	f96 <guideLineSearch+0x3e>
            }
            else if(imageBuf[GN_ROW][i-1] != GUIDELINE_COLOR){
     f84:	f811 6c01 	ldrb.w	r6, [r1, #-1]
     f88:	2eff      	cmp	r6, #255	; 0xff
     f8a:	d0f5      	beq.n	f78 <guideLineSearch+0x20>
                *pos_ = -2;
     f8c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
     f90:	8023      	strh	r3, [r4, #0]
				gf_pos = -2;
     f92:	f06f 0201 	mvn.w	r2, #1
	int flag_mais_que_uma_guideline_gf =0;
     f96:	2100      	movs	r1, #0
     f98:	f500 507e 	add.w	r0, r0, #16256	; 0x3f80
			
		}			
	}
	
	
	for(i=0; i < IMGWIDTH; i++) {
     f9c:	460b      	mov	r3, r1
		if(imageBuf[GF_ROW][i] == GUIDELINE_COLOR) {
     f9e:	f810 6b01 	ldrb.w	r6, [r0], #1
     fa2:	2eff      	cmp	r6, #255	; 0xff
     fa4:	d11a      	bne.n	fdc <guideLineSearch+0x84>
            if (flag_mais_que_uma_guideline_gf ==0){
     fa6:	b1b9      	cbz	r1, fd8 <guideLineSearch+0x80>
			    gf_pos = i;
                flag_mais_que_uma_guideline_gf =1;
            }
            else if (imageBuf[GF_ROW][i-1] != GUIDELINE_COLOR){
     fa8:	f810 6c02 	ldrb.w	r6, [r0, #-2]
     fac:	2eff      	cmp	r6, #255	; 0xff
     fae:	d015      	beq.n	fdc <guideLineSearch+0x84>
                gf_pos = -2;
				*pos_  = -2;
     fb0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
     fb4:	8023      	strh	r3, [r4, #0]
                gf_pos = -2;
     fb6:	f06f 0201 	mvn.w	r2, #1
			
		}			
	}		
    
	// printk("POSSSSSSSSSS: %d %d",*pos_, gf_pos);
	if(*pos_ == -1 || gf_pos == -1) {
     fba:	f9b4 1000 	ldrsh.w	r1, [r4]
     fbe:	1c4b      	adds	r3, r1, #1
     fc0:	d001      	beq.n	fc6 <guideLineSearch+0x6e>
     fc2:	1c56      	adds	r6, r2, #1
     fc4:	d10e      	bne.n	fe4 <guideLineSearch+0x8c>
		printf("\nFailed to find guideline pos_=%d, gf_pos=%d", *pos_, gf_pos);
     fc6:	4828      	ldr	r0, [pc, #160]	; (1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
     fc8:	f00a fa7c 	bl	b4c4 <iprintf>
		*pos_ = -1;
     fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
		gf_pos = -1;
		return -1;
	}
    if(*pos_ == -2 || gf_pos == -2) {
		printf("\nMore than one guideline detected", *pos_, gf_pos);
		*pos_ = -2;
     fd0:	8023      	strh	r3, [r4, #0]
		gf_pos = -2;
		return -1;
     fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
	
	return 0;	

   
}
     fd6:	bd70      	pop	{r4, r5, r6, pc}
     fd8:	461a      	mov	r2, r3
                flag_mais_que_uma_guideline_gf =1;
     fda:	2101      	movs	r1, #1
	for(i=0; i < IMGWIDTH; i++) {
     fdc:	3301      	adds	r3, #1
     fde:	2b80      	cmp	r3, #128	; 0x80
     fe0:	d1dd      	bne.n	f9e <guideLineSearch+0x46>
     fe2:	e7ea      	b.n	fba <guideLineSearch+0x62>
    if(*pos_ == -2 || gf_pos == -2) {
     fe4:	1c88      	adds	r0, r1, #2
     fe6:	d001      	beq.n	fec <guideLineSearch+0x94>
     fe8:	1c93      	adds	r3, r2, #2
     fea:	d105      	bne.n	ff8 <guideLineSearch+0xa0>
		printf("\nMore than one guideline detected", *pos_, gf_pos);
     fec:	481f      	ldr	r0, [pc, #124]	; (106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
     fee:	f00a fa69 	bl	b4c4 <iprintf>
		*pos_ = -2;
     ff2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
     ff6:	e7eb      	b.n	fd0 <guideLineSearch+0x78>
	if(*pos_==gf_pos){
     ff8:	428a      	cmp	r2, r1
     ffa:	d103      	bne.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
		*angle=0;
     ffc:	2300      	movs	r3, #0
     ffe:	602b      	str	r3, [r5, #0]
	return 0;	
    1000:	2000      	movs	r0, #0
    1002:	e7e8      	b.n	fd6 <guideLineSearch+0x7e>
		float aux = (atan2(*pos_ - gf_pos, GN_ROW - GF_ROW));
    1004:	1a88      	subs	r0, r1, r2
    1006:	f7ff fa1d 	bl	444 <__aeabi_i2d>
    100a:	4b19      	ldr	r3, [pc, #100]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    100c:	2200      	movs	r2, #0
    100e:	f00c fd2e 	bl	da6e <atan2>
    1012:	f7ff fc93 	bl	93c <__aeabi_d2f>
		if(aux<0){
    1016:	2100      	movs	r1, #0
		float aux = (atan2(*pos_ - gf_pos, GN_ROW - GF_ROW));
    1018:	4606      	mov	r6, r0
		if(aux<0){
    101a:	f7ff fd2d 	bl	a78 <__aeabi_fcmplt>
    101e:	4604      	mov	r4, r0
			*angle = (aux + PI)*-1;
    1020:	4630      	mov	r0, r6
		if(aux<0){
    1022:	b164      	cbz	r4, 103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
			*angle = (aux + PI)*-1;
    1024:	f7ff fa20 	bl	468 <__aeabi_f2d>
    1028:	a30d      	add	r3, pc, #52	; (adr r3, 1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
    102a:	e9d3 2300 	ldrd	r2, r3, [r3]
    102e:	f7ff f8bd 	bl	1ac <__adddf3>
    1032:	f7ff fc83 	bl	93c <__aeabi_d2f>
    1036:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    103a:	6028      	str	r0, [r5, #0]
    103c:	e7e0      	b.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
			*angle = PI - aux;
    103e:	f7ff fa13 	bl	468 <__aeabi_f2d>
    1042:	4602      	mov	r2, r0
    1044:	460b      	mov	r3, r1
    1046:	a106      	add	r1, pc, #24	; (adr r1, 1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
    1048:	e9d1 0100 	ldrd	r0, r1, [r1]
    104c:	f7ff f8ac 	bl	1a8 <__aeabi_dsub>
    1050:	f7ff fc74 	bl	93c <__aeabi_d2f>
    1054:	6028      	str	r0, [r5, #0]
	return 0;	
    1056:	4620      	mov	r0, r4
    1058:	e7bd      	b.n	fd6 <guideLineSearch+0x7e>
    105a:	bf00      	nop
    105c:	f3af 8000 	nop.w
    1060:	53c8d4f1 	.word	0x53c8d4f1
    1064:	400921fb 	.word	0x400921fb
    1068:	0000ea44 	.word	0x0000ea44
    106c:	0000ea71 	.word	0x0000ea71
    1070:	c05fc000 	.word	0xc05fc000
    1074:	00000000 	.word	0x00000000

00001078 <__ieee754_atan2>:
    1078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    107c:	4692      	mov	sl, r2
    107e:	4699      	mov	r9, r3
    1080:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    1084:	461f      	mov	r7, r3
    1086:	f1ca 0300 	rsb	r3, sl, #0
    108a:	f8df e184 	ldr.w	lr, [pc, #388]	; 1210 <__ieee754_atan2+0x198>
    108e:	ea43 030a 	orr.w	r3, r3, sl
    1092:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
    1096:	4573      	cmp	r3, lr
    1098:	4604      	mov	r4, r0
    109a:	460d      	mov	r5, r1
    109c:	d808      	bhi.n	10b0 <__ieee754_atan2+0x38>
    109e:	4246      	negs	r6, r0
    10a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    10a4:	4306      	orrs	r6, r0
    10a6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
    10aa:	4576      	cmp	r6, lr
    10ac:	468c      	mov	ip, r1
    10ae:	d908      	bls.n	10c2 <__ieee754_atan2+0x4a>
    10b0:	4652      	mov	r2, sl
    10b2:	464b      	mov	r3, r9
    10b4:	4620      	mov	r0, r4
    10b6:	4629      	mov	r1, r5
    10b8:	f7ff f878 	bl	1ac <__adddf3>
    10bc:	4604      	mov	r4, r0
    10be:	460d      	mov	r5, r1
    10c0:	e019      	b.n	10f6 <__ieee754_atan2+0x7e>
    10c2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
    10c6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    10ca:	ea56 060a 	orrs.w	r6, r6, sl
    10ce:	d103      	bne.n	10d8 <__ieee754_atan2+0x60>
    10d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10d4:	f000 b8a4 	b.w	1220 <atan>
    10d8:	17be      	asrs	r6, r7, #30
    10da:	f006 0602 	and.w	r6, r6, #2
    10de:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
    10e2:	ea53 0100 	orrs.w	r1, r3, r0
    10e6:	d10a      	bne.n	10fe <__ieee754_atan2+0x86>
    10e8:	2e02      	cmp	r6, #2
    10ea:	d067      	beq.n	11bc <__ieee754_atan2+0x144>
    10ec:	2e03      	cmp	r6, #3
    10ee:	d102      	bne.n	10f6 <__ieee754_atan2+0x7e>
    10f0:	a53b      	add	r5, pc, #236	; (adr r5, 11e0 <__ieee754_atan2+0x168>)
    10f2:	e9d5 4500 	ldrd	r4, r5, [r5]
    10f6:	4620      	mov	r0, r4
    10f8:	4629      	mov	r1, r5
    10fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10fe:	ea52 010a 	orrs.w	r1, r2, sl
    1102:	d106      	bne.n	1112 <__ieee754_atan2+0x9a>
    1104:	f1bc 0f00 	cmp.w	ip, #0
    1108:	da63      	bge.n	11d2 <__ieee754_atan2+0x15a>
    110a:	a537      	add	r5, pc, #220	; (adr r5, 11e8 <__ieee754_atan2+0x170>)
    110c:	e9d5 4500 	ldrd	r4, r5, [r5]
    1110:	e7f1      	b.n	10f6 <__ieee754_atan2+0x7e>
    1112:	4572      	cmp	r2, lr
    1114:	d10f      	bne.n	1136 <__ieee754_atan2+0xbe>
    1116:	4293      	cmp	r3, r2
    1118:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    111c:	d107      	bne.n	112e <__ieee754_atan2+0xb6>
    111e:	2e02      	cmp	r6, #2
    1120:	d850      	bhi.n	11c4 <__ieee754_atan2+0x14c>
    1122:	4b3c      	ldr	r3, [pc, #240]	; (1214 <__ieee754_atan2+0x19c>)
    1124:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    1128:	e9d6 4500 	ldrd	r4, r5, [r6]
    112c:	e7e3      	b.n	10f6 <__ieee754_atan2+0x7e>
    112e:	2e02      	cmp	r6, #2
    1130:	d84c      	bhi.n	11cc <__ieee754_atan2+0x154>
    1132:	4b39      	ldr	r3, [pc, #228]	; (1218 <__ieee754_atan2+0x1a0>)
    1134:	e7f6      	b.n	1124 <__ieee754_atan2+0xac>
    1136:	4573      	cmp	r3, lr
    1138:	d0e4      	beq.n	1104 <__ieee754_atan2+0x8c>
    113a:	1a9b      	subs	r3, r3, r2
    113c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
    1140:	ea4f 5223 	mov.w	r2, r3, asr #20
    1144:	da20      	bge.n	1188 <__ieee754_atan2+0x110>
    1146:	2f00      	cmp	r7, #0
    1148:	da01      	bge.n	114e <__ieee754_atan2+0xd6>
    114a:	323c      	adds	r2, #60	; 0x3c
    114c:	db20      	blt.n	1190 <__ieee754_atan2+0x118>
    114e:	4652      	mov	r2, sl
    1150:	464b      	mov	r3, r9
    1152:	4620      	mov	r0, r4
    1154:	4629      	mov	r1, r5
    1156:	f7ff fb09 	bl	76c <__aeabi_ddiv>
    115a:	f00c fc8a 	bl	da72 <fabs>
    115e:	f000 f85f 	bl	1220 <atan>
    1162:	4604      	mov	r4, r0
    1164:	460d      	mov	r5, r1
    1166:	2e01      	cmp	r6, #1
    1168:	d015      	beq.n	1196 <__ieee754_atan2+0x11e>
    116a:	2e02      	cmp	r6, #2
    116c:	d017      	beq.n	119e <__ieee754_atan2+0x126>
    116e:	2e00      	cmp	r6, #0
    1170:	d0c1      	beq.n	10f6 <__ieee754_atan2+0x7e>
    1172:	a31f      	add	r3, pc, #124	; (adr r3, 11f0 <__ieee754_atan2+0x178>)
    1174:	e9d3 2300 	ldrd	r2, r3, [r3]
    1178:	4620      	mov	r0, r4
    117a:	4629      	mov	r1, r5
    117c:	f7ff f814 	bl	1a8 <__aeabi_dsub>
    1180:	a31d      	add	r3, pc, #116	; (adr r3, 11f8 <__ieee754_atan2+0x180>)
    1182:	e9d3 2300 	ldrd	r2, r3, [r3]
    1186:	e016      	b.n	11b6 <__ieee754_atan2+0x13e>
    1188:	a51d      	add	r5, pc, #116	; (adr r5, 1200 <__ieee754_atan2+0x188>)
    118a:	e9d5 4500 	ldrd	r4, r5, [r5]
    118e:	e7ea      	b.n	1166 <__ieee754_atan2+0xee>
    1190:	2400      	movs	r4, #0
    1192:	2500      	movs	r5, #0
    1194:	e7e7      	b.n	1166 <__ieee754_atan2+0xee>
    1196:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    119a:	461d      	mov	r5, r3
    119c:	e7ab      	b.n	10f6 <__ieee754_atan2+0x7e>
    119e:	a314      	add	r3, pc, #80	; (adr r3, 11f0 <__ieee754_atan2+0x178>)
    11a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    11a4:	4620      	mov	r0, r4
    11a6:	4629      	mov	r1, r5
    11a8:	f7fe fffe 	bl	1a8 <__aeabi_dsub>
    11ac:	4602      	mov	r2, r0
    11ae:	460b      	mov	r3, r1
    11b0:	a111      	add	r1, pc, #68	; (adr r1, 11f8 <__ieee754_atan2+0x180>)
    11b2:	e9d1 0100 	ldrd	r0, r1, [r1]
    11b6:	f7fe fff7 	bl	1a8 <__aeabi_dsub>
    11ba:	e77f      	b.n	10bc <__ieee754_atan2+0x44>
    11bc:	a50e      	add	r5, pc, #56	; (adr r5, 11f8 <__ieee754_atan2+0x180>)
    11be:	e9d5 4500 	ldrd	r4, r5, [r5]
    11c2:	e798      	b.n	10f6 <__ieee754_atan2+0x7e>
    11c4:	a510      	add	r5, pc, #64	; (adr r5, 1208 <__ieee754_atan2+0x190>)
    11c6:	e9d5 4500 	ldrd	r4, r5, [r5]
    11ca:	e794      	b.n	10f6 <__ieee754_atan2+0x7e>
    11cc:	2400      	movs	r4, #0
    11ce:	2500      	movs	r5, #0
    11d0:	e791      	b.n	10f6 <__ieee754_atan2+0x7e>
    11d2:	a50b      	add	r5, pc, #44	; (adr r5, 1200 <__ieee754_atan2+0x188>)
    11d4:	e9d5 4500 	ldrd	r4, r5, [r5]
    11d8:	e78d      	b.n	10f6 <__ieee754_atan2+0x7e>
    11da:	bf00      	nop
    11dc:	f3af 8000 	nop.w
    11e0:	54442d18 	.word	0x54442d18
    11e4:	c00921fb 	.word	0xc00921fb
    11e8:	54442d18 	.word	0x54442d18
    11ec:	bff921fb 	.word	0xbff921fb
    11f0:	33145c07 	.word	0x33145c07
    11f4:	3ca1a626 	.word	0x3ca1a626
    11f8:	54442d18 	.word	0x54442d18
    11fc:	400921fb 	.word	0x400921fb
    1200:	54442d18 	.word	0x54442d18
    1204:	3ff921fb 	.word	0x3ff921fb
    1208:	54442d18 	.word	0x54442d18
    120c:	3fe921fb 	.word	0x3fe921fb
    1210:	7ff00000 	.word	0x7ff00000
    1214:	0000e448 	.word	0x0000e448
    1218:	0000e460 	.word	0x0000e460
    121c:	00000000 	.word	0x00000000

00001220 <atan>:
    1220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1224:	4bb6      	ldr	r3, [pc, #728]	; (1500 <atan+0x2e0>)
    1226:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    122a:	429e      	cmp	r6, r3
    122c:	4604      	mov	r4, r0
    122e:	460d      	mov	r5, r1
    1230:	468b      	mov	fp, r1
    1232:	dd17      	ble.n	1264 <atan+0x44>
    1234:	4bb3      	ldr	r3, [pc, #716]	; (1504 <atan+0x2e4>)
    1236:	429e      	cmp	r6, r3
    1238:	dc01      	bgt.n	123e <atan+0x1e>
    123a:	d109      	bne.n	1250 <atan+0x30>
    123c:	b140      	cbz	r0, 1250 <atan+0x30>
    123e:	4622      	mov	r2, r4
    1240:	462b      	mov	r3, r5
    1242:	4620      	mov	r0, r4
    1244:	4629      	mov	r1, r5
    1246:	f7fe ffb1 	bl	1ac <__adddf3>
    124a:	4604      	mov	r4, r0
    124c:	460d      	mov	r5, r1
    124e:	e005      	b.n	125c <atan+0x3c>
    1250:	f1bb 0f00 	cmp.w	fp, #0
    1254:	4cac      	ldr	r4, [pc, #688]	; (1508 <atan+0x2e8>)
    1256:	f300 8121 	bgt.w	149c <atan+0x27c>
    125a:	4dac      	ldr	r5, [pc, #688]	; (150c <atan+0x2ec>)
    125c:	4620      	mov	r0, r4
    125e:	4629      	mov	r1, r5
    1260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1264:	4baa      	ldr	r3, [pc, #680]	; (1510 <atan+0x2f0>)
    1266:	429e      	cmp	r6, r3
    1268:	dc11      	bgt.n	128e <atan+0x6e>
    126a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
    126e:	429e      	cmp	r6, r3
    1270:	dc0a      	bgt.n	1288 <atan+0x68>
    1272:	a38b      	add	r3, pc, #556	; (adr r3, 14a0 <atan+0x280>)
    1274:	e9d3 2300 	ldrd	r2, r3, [r3]
    1278:	f7fe ff98 	bl	1ac <__adddf3>
    127c:	4ba5      	ldr	r3, [pc, #660]	; (1514 <atan+0x2f4>)
    127e:	2200      	movs	r2, #0
    1280:	f7ff fcba 	bl	bf8 <__aeabi_dcmpgt>
    1284:	2800      	cmp	r0, #0
    1286:	d1e9      	bne.n	125c <atan+0x3c>
    1288:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    128c:	e027      	b.n	12de <atan+0xbe>
    128e:	f00c fbf0 	bl	da72 <fabs>
    1292:	4ba1      	ldr	r3, [pc, #644]	; (1518 <atan+0x2f8>)
    1294:	429e      	cmp	r6, r3
    1296:	4604      	mov	r4, r0
    1298:	460d      	mov	r5, r1
    129a:	f300 80b8 	bgt.w	140e <atan+0x1ee>
    129e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
    12a2:	429e      	cmp	r6, r3
    12a4:	f300 809c 	bgt.w	13e0 <atan+0x1c0>
    12a8:	4602      	mov	r2, r0
    12aa:	460b      	mov	r3, r1
    12ac:	f7fe ff7e 	bl	1ac <__adddf3>
    12b0:	4b98      	ldr	r3, [pc, #608]	; (1514 <atan+0x2f4>)
    12b2:	2200      	movs	r2, #0
    12b4:	f7fe ff78 	bl	1a8 <__aeabi_dsub>
    12b8:	2200      	movs	r2, #0
    12ba:	4606      	mov	r6, r0
    12bc:	460f      	mov	r7, r1
    12be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12c2:	4620      	mov	r0, r4
    12c4:	4629      	mov	r1, r5
    12c6:	f7fe ff71 	bl	1ac <__adddf3>
    12ca:	4602      	mov	r2, r0
    12cc:	460b      	mov	r3, r1
    12ce:	4630      	mov	r0, r6
    12d0:	4639      	mov	r1, r7
    12d2:	f7ff fa4b 	bl	76c <__aeabi_ddiv>
    12d6:	f04f 0a00 	mov.w	sl, #0
    12da:	4604      	mov	r4, r0
    12dc:	460d      	mov	r5, r1
    12de:	4622      	mov	r2, r4
    12e0:	462b      	mov	r3, r5
    12e2:	4620      	mov	r0, r4
    12e4:	4629      	mov	r1, r5
    12e6:	f7ff f917 	bl	518 <__aeabi_dmul>
    12ea:	4602      	mov	r2, r0
    12ec:	460b      	mov	r3, r1
    12ee:	4680      	mov	r8, r0
    12f0:	4689      	mov	r9, r1
    12f2:	f7ff f911 	bl	518 <__aeabi_dmul>
    12f6:	a36c      	add	r3, pc, #432	; (adr r3, 14a8 <atan+0x288>)
    12f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    12fc:	4606      	mov	r6, r0
    12fe:	460f      	mov	r7, r1
    1300:	f7ff f90a 	bl	518 <__aeabi_dmul>
    1304:	a36a      	add	r3, pc, #424	; (adr r3, 14b0 <atan+0x290>)
    1306:	e9d3 2300 	ldrd	r2, r3, [r3]
    130a:	f7fe ff4f 	bl	1ac <__adddf3>
    130e:	4632      	mov	r2, r6
    1310:	463b      	mov	r3, r7
    1312:	f7ff f901 	bl	518 <__aeabi_dmul>
    1316:	a368      	add	r3, pc, #416	; (adr r3, 14b8 <atan+0x298>)
    1318:	e9d3 2300 	ldrd	r2, r3, [r3]
    131c:	f7fe ff46 	bl	1ac <__adddf3>
    1320:	4632      	mov	r2, r6
    1322:	463b      	mov	r3, r7
    1324:	f7ff f8f8 	bl	518 <__aeabi_dmul>
    1328:	a365      	add	r3, pc, #404	; (adr r3, 14c0 <atan+0x2a0>)
    132a:	e9d3 2300 	ldrd	r2, r3, [r3]
    132e:	f7fe ff3d 	bl	1ac <__adddf3>
    1332:	4632      	mov	r2, r6
    1334:	463b      	mov	r3, r7
    1336:	f7ff f8ef 	bl	518 <__aeabi_dmul>
    133a:	a363      	add	r3, pc, #396	; (adr r3, 14c8 <atan+0x2a8>)
    133c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1340:	f7fe ff34 	bl	1ac <__adddf3>
    1344:	4632      	mov	r2, r6
    1346:	463b      	mov	r3, r7
    1348:	f7ff f8e6 	bl	518 <__aeabi_dmul>
    134c:	a360      	add	r3, pc, #384	; (adr r3, 14d0 <atan+0x2b0>)
    134e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1352:	f7fe ff2b 	bl	1ac <__adddf3>
    1356:	4642      	mov	r2, r8
    1358:	464b      	mov	r3, r9
    135a:	f7ff f8dd 	bl	518 <__aeabi_dmul>
    135e:	a35e      	add	r3, pc, #376	; (adr r3, 14d8 <atan+0x2b8>)
    1360:	e9d3 2300 	ldrd	r2, r3, [r3]
    1364:	4680      	mov	r8, r0
    1366:	4689      	mov	r9, r1
    1368:	4630      	mov	r0, r6
    136a:	4639      	mov	r1, r7
    136c:	f7ff f8d4 	bl	518 <__aeabi_dmul>
    1370:	a35b      	add	r3, pc, #364	; (adr r3, 14e0 <atan+0x2c0>)
    1372:	e9d3 2300 	ldrd	r2, r3, [r3]
    1376:	f7fe ff17 	bl	1a8 <__aeabi_dsub>
    137a:	4632      	mov	r2, r6
    137c:	463b      	mov	r3, r7
    137e:	f7ff f8cb 	bl	518 <__aeabi_dmul>
    1382:	a359      	add	r3, pc, #356	; (adr r3, 14e8 <atan+0x2c8>)
    1384:	e9d3 2300 	ldrd	r2, r3, [r3]
    1388:	f7fe ff0e 	bl	1a8 <__aeabi_dsub>
    138c:	4632      	mov	r2, r6
    138e:	463b      	mov	r3, r7
    1390:	f7ff f8c2 	bl	518 <__aeabi_dmul>
    1394:	a356      	add	r3, pc, #344	; (adr r3, 14f0 <atan+0x2d0>)
    1396:	e9d3 2300 	ldrd	r2, r3, [r3]
    139a:	f7fe ff05 	bl	1a8 <__aeabi_dsub>
    139e:	4632      	mov	r2, r6
    13a0:	463b      	mov	r3, r7
    13a2:	f7ff f8b9 	bl	518 <__aeabi_dmul>
    13a6:	a354      	add	r3, pc, #336	; (adr r3, 14f8 <atan+0x2d8>)
    13a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    13ac:	f7fe fefc 	bl	1a8 <__aeabi_dsub>
    13b0:	4632      	mov	r2, r6
    13b2:	463b      	mov	r3, r7
    13b4:	f7ff f8b0 	bl	518 <__aeabi_dmul>
    13b8:	4602      	mov	r2, r0
    13ba:	460b      	mov	r3, r1
    13bc:	4640      	mov	r0, r8
    13be:	4649      	mov	r1, r9
    13c0:	f7fe fef4 	bl	1ac <__adddf3>
    13c4:	4622      	mov	r2, r4
    13c6:	462b      	mov	r3, r5
    13c8:	f7ff f8a6 	bl	518 <__aeabi_dmul>
    13cc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    13d0:	4602      	mov	r2, r0
    13d2:	460b      	mov	r3, r1
    13d4:	d144      	bne.n	1460 <atan+0x240>
    13d6:	4620      	mov	r0, r4
    13d8:	4629      	mov	r1, r5
    13da:	f7fe fee5 	bl	1a8 <__aeabi_dsub>
    13de:	e734      	b.n	124a <atan+0x2a>
    13e0:	4b4c      	ldr	r3, [pc, #304]	; (1514 <atan+0x2f4>)
    13e2:	2200      	movs	r2, #0
    13e4:	f7fe fee0 	bl	1a8 <__aeabi_dsub>
    13e8:	4b4a      	ldr	r3, [pc, #296]	; (1514 <atan+0x2f4>)
    13ea:	4606      	mov	r6, r0
    13ec:	460f      	mov	r7, r1
    13ee:	2200      	movs	r2, #0
    13f0:	4620      	mov	r0, r4
    13f2:	4629      	mov	r1, r5
    13f4:	f7fe feda 	bl	1ac <__adddf3>
    13f8:	4602      	mov	r2, r0
    13fa:	460b      	mov	r3, r1
    13fc:	4630      	mov	r0, r6
    13fe:	4639      	mov	r1, r7
    1400:	f7ff f9b4 	bl	76c <__aeabi_ddiv>
    1404:	f04f 0a01 	mov.w	sl, #1
    1408:	4604      	mov	r4, r0
    140a:	460d      	mov	r5, r1
    140c:	e767      	b.n	12de <atan+0xbe>
    140e:	4b43      	ldr	r3, [pc, #268]	; (151c <atan+0x2fc>)
    1410:	429e      	cmp	r6, r3
    1412:	da1a      	bge.n	144a <atan+0x22a>
    1414:	4b42      	ldr	r3, [pc, #264]	; (1520 <atan+0x300>)
    1416:	2200      	movs	r2, #0
    1418:	f7fe fec6 	bl	1a8 <__aeabi_dsub>
    141c:	4b40      	ldr	r3, [pc, #256]	; (1520 <atan+0x300>)
    141e:	4606      	mov	r6, r0
    1420:	460f      	mov	r7, r1
    1422:	2200      	movs	r2, #0
    1424:	4620      	mov	r0, r4
    1426:	4629      	mov	r1, r5
    1428:	f7ff f876 	bl	518 <__aeabi_dmul>
    142c:	4b39      	ldr	r3, [pc, #228]	; (1514 <atan+0x2f4>)
    142e:	2200      	movs	r2, #0
    1430:	f7fe febc 	bl	1ac <__adddf3>
    1434:	4602      	mov	r2, r0
    1436:	460b      	mov	r3, r1
    1438:	4630      	mov	r0, r6
    143a:	4639      	mov	r1, r7
    143c:	f7ff f996 	bl	76c <__aeabi_ddiv>
    1440:	f04f 0a02 	mov.w	sl, #2
    1444:	4604      	mov	r4, r0
    1446:	460d      	mov	r5, r1
    1448:	e749      	b.n	12de <atan+0xbe>
    144a:	4602      	mov	r2, r0
    144c:	460b      	mov	r3, r1
    144e:	2000      	movs	r0, #0
    1450:	4934      	ldr	r1, [pc, #208]	; (1524 <atan+0x304>)
    1452:	f7ff f98b 	bl	76c <__aeabi_ddiv>
    1456:	f04f 0a03 	mov.w	sl, #3
    145a:	4604      	mov	r4, r0
    145c:	460d      	mov	r5, r1
    145e:	e73e      	b.n	12de <atan+0xbe>
    1460:	4b31      	ldr	r3, [pc, #196]	; (1528 <atan+0x308>)
    1462:	4e32      	ldr	r6, [pc, #200]	; (152c <atan+0x30c>)
    1464:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
    1468:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
    146c:	e9da 2300 	ldrd	r2, r3, [sl]
    1470:	f7fe fe9a 	bl	1a8 <__aeabi_dsub>
    1474:	4622      	mov	r2, r4
    1476:	462b      	mov	r3, r5
    1478:	f7fe fe96 	bl	1a8 <__aeabi_dsub>
    147c:	4602      	mov	r2, r0
    147e:	460b      	mov	r3, r1
    1480:	e9d6 0100 	ldrd	r0, r1, [r6]
    1484:	f7fe fe90 	bl	1a8 <__aeabi_dsub>
    1488:	f1bb 0f00 	cmp.w	fp, #0
    148c:	4604      	mov	r4, r0
    148e:	460d      	mov	r5, r1
    1490:	f6bf aee4 	bge.w	125c <atan+0x3c>
    1494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    1498:	461d      	mov	r5, r3
    149a:	e6df      	b.n	125c <atan+0x3c>
    149c:	4d24      	ldr	r5, [pc, #144]	; (1530 <atan+0x310>)
    149e:	e6dd      	b.n	125c <atan+0x3c>
    14a0:	8800759c 	.word	0x8800759c
    14a4:	7e37e43c 	.word	0x7e37e43c
    14a8:	e322da11 	.word	0xe322da11
    14ac:	3f90ad3a 	.word	0x3f90ad3a
    14b0:	24760deb 	.word	0x24760deb
    14b4:	3fa97b4b 	.word	0x3fa97b4b
    14b8:	a0d03d51 	.word	0xa0d03d51
    14bc:	3fb10d66 	.word	0x3fb10d66
    14c0:	c54c206e 	.word	0xc54c206e
    14c4:	3fb745cd 	.word	0x3fb745cd
    14c8:	920083ff 	.word	0x920083ff
    14cc:	3fc24924 	.word	0x3fc24924
    14d0:	5555550d 	.word	0x5555550d
    14d4:	3fd55555 	.word	0x3fd55555
    14d8:	2c6a6c2f 	.word	0x2c6a6c2f
    14dc:	bfa2b444 	.word	0xbfa2b444
    14e0:	52defd9a 	.word	0x52defd9a
    14e4:	3fadde2d 	.word	0x3fadde2d
    14e8:	af749a6d 	.word	0xaf749a6d
    14ec:	3fb3b0f2 	.word	0x3fb3b0f2
    14f0:	fe231671 	.word	0xfe231671
    14f4:	3fbc71c6 	.word	0x3fbc71c6
    14f8:	9998ebc4 	.word	0x9998ebc4
    14fc:	3fc99999 	.word	0x3fc99999
    1500:	440fffff 	.word	0x440fffff
    1504:	7ff00000 	.word	0x7ff00000
    1508:	54442d18 	.word	0x54442d18
    150c:	bff921fb 	.word	0xbff921fb
    1510:	3fdbffff 	.word	0x3fdbffff
    1514:	3ff00000 	.word	0x3ff00000
    1518:	3ff2ffff 	.word	0x3ff2ffff
    151c:	40038000 	.word	0x40038000
    1520:	3ff80000 	.word	0x3ff80000
    1524:	bff00000 	.word	0xbff00000
    1528:	0000e498 	.word	0x0000e498
    152c:	0000e478 	.word	0x0000e478
    1530:	3ff921fb 	.word	0x3ff921fb
    1534:	00000000 	.word	0x00000000

00001538 <_dtoa_r>:
    1538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    153c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    153e:	b099      	sub	sp, #100	; 0x64
    1540:	4616      	mov	r6, r2
    1542:	461f      	mov	r7, r3
    1544:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1548:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    154c:	4605      	mov	r5, r0
    154e:	b974      	cbnz	r4, 156e <_dtoa_r+0x36>
    1550:	2010      	movs	r0, #16
    1552:	f009 fb11 	bl	ab78 <malloc>
    1556:	4602      	mov	r2, r0
    1558:	6268      	str	r0, [r5, #36]	; 0x24
    155a:	b920      	cbnz	r0, 1566 <_dtoa_r+0x2e>
    155c:	4ba8      	ldr	r3, [pc, #672]	; (1800 <_dtoa_r+0x2c8>)
    155e:	21ea      	movs	r1, #234	; 0xea
    1560:	48a8      	ldr	r0, [pc, #672]	; (1804 <_dtoa_r+0x2cc>)
    1562:	f00b f89f 	bl	c6a4 <__assert_func>
    1566:	e9c0 4401 	strd	r4, r4, [r0, #4]
    156a:	6004      	str	r4, [r0, #0]
    156c:	60c4      	str	r4, [r0, #12]
    156e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1570:	6819      	ldr	r1, [r3, #0]
    1572:	b151      	cbz	r1, 158a <_dtoa_r+0x52>
    1574:	685a      	ldr	r2, [r3, #4]
    1576:	604a      	str	r2, [r1, #4]
    1578:	2301      	movs	r3, #1
    157a:	4093      	lsls	r3, r2
    157c:	608b      	str	r3, [r1, #8]
    157e:	4628      	mov	r0, r5
    1580:	f00a fbcc 	bl	bd1c <_Bfree>
    1584:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1586:	2200      	movs	r2, #0
    1588:	601a      	str	r2, [r3, #0]
    158a:	1e3b      	subs	r3, r7, #0
    158c:	bfb9      	ittee	lt
    158e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    1592:	9305      	strlt	r3, [sp, #20]
    1594:	2300      	movge	r3, #0
    1596:	f8c8 3000 	strge.w	r3, [r8]
    159a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    159e:	4b9a      	ldr	r3, [pc, #616]	; (1808 <_dtoa_r+0x2d0>)
    15a0:	bfbc      	itt	lt
    15a2:	2201      	movlt	r2, #1
    15a4:	f8c8 2000 	strlt.w	r2, [r8]
    15a8:	ea33 0309 	bics.w	r3, r3, r9
    15ac:	d119      	bne.n	15e2 <_dtoa_r+0xaa>
    15ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
    15b0:	f242 730f 	movw	r3, #9999	; 0x270f
    15b4:	6013      	str	r3, [r2, #0]
    15b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    15ba:	4333      	orrs	r3, r6
    15bc:	f000 8580 	beq.w	20c0 <_dtoa_r+0xb88>
    15c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    15c2:	b953      	cbnz	r3, 15da <_dtoa_r+0xa2>
    15c4:	4b91      	ldr	r3, [pc, #580]	; (180c <_dtoa_r+0x2d4>)
    15c6:	e022      	b.n	160e <_dtoa_r+0xd6>
    15c8:	4b91      	ldr	r3, [pc, #580]	; (1810 <_dtoa_r+0x2d8>)
    15ca:	9303      	str	r3, [sp, #12]
    15cc:	3308      	adds	r3, #8
    15ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    15d0:	6013      	str	r3, [r2, #0]
    15d2:	9803      	ldr	r0, [sp, #12]
    15d4:	b019      	add	sp, #100	; 0x64
    15d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15da:	4b8c      	ldr	r3, [pc, #560]	; (180c <_dtoa_r+0x2d4>)
    15dc:	9303      	str	r3, [sp, #12]
    15de:	3303      	adds	r3, #3
    15e0:	e7f5      	b.n	15ce <_dtoa_r+0x96>
    15e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    15e6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    15ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    15ee:	2200      	movs	r2, #0
    15f0:	2300      	movs	r3, #0
    15f2:	f7ff fad9 	bl	ba8 <__aeabi_dcmpeq>
    15f6:	4680      	mov	r8, r0
    15f8:	b158      	cbz	r0, 1612 <_dtoa_r+0xda>
    15fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
    15fc:	2301      	movs	r3, #1
    15fe:	6013      	str	r3, [r2, #0]
    1600:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1602:	2b00      	cmp	r3, #0
    1604:	f000 8559 	beq.w	20ba <_dtoa_r+0xb82>
    1608:	4882      	ldr	r0, [pc, #520]	; (1814 <_dtoa_r+0x2dc>)
    160a:	6018      	str	r0, [r3, #0]
    160c:	1e43      	subs	r3, r0, #1
    160e:	9303      	str	r3, [sp, #12]
    1610:	e7df      	b.n	15d2 <_dtoa_r+0x9a>
    1612:	ab16      	add	r3, sp, #88	; 0x58
    1614:	9301      	str	r3, [sp, #4]
    1616:	ab17      	add	r3, sp, #92	; 0x5c
    1618:	9300      	str	r3, [sp, #0]
    161a:	4628      	mov	r0, r5
    161c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1620:	f00a fdf4 	bl	c20c <__d2b>
    1624:	f3c9 540a 	ubfx	r4, r9, #20, #11
    1628:	4683      	mov	fp, r0
    162a:	2c00      	cmp	r4, #0
    162c:	d07e      	beq.n	172c <_dtoa_r+0x1f4>
    162e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1630:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    1634:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    163c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    1640:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1644:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    1648:	4b73      	ldr	r3, [pc, #460]	; (1818 <_dtoa_r+0x2e0>)
    164a:	2200      	movs	r2, #0
    164c:	f7fe fdac 	bl	1a8 <__aeabi_dsub>
    1650:	a365      	add	r3, pc, #404	; (adr r3, 17e8 <_dtoa_r+0x2b0>)
    1652:	e9d3 2300 	ldrd	r2, r3, [r3]
    1656:	f7fe ff5f 	bl	518 <__aeabi_dmul>
    165a:	a365      	add	r3, pc, #404	; (adr r3, 17f0 <_dtoa_r+0x2b8>)
    165c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1660:	f7fe fda4 	bl	1ac <__adddf3>
    1664:	4606      	mov	r6, r0
    1666:	4620      	mov	r0, r4
    1668:	460f      	mov	r7, r1
    166a:	f7fe feeb 	bl	444 <__aeabi_i2d>
    166e:	a362      	add	r3, pc, #392	; (adr r3, 17f8 <_dtoa_r+0x2c0>)
    1670:	e9d3 2300 	ldrd	r2, r3, [r3]
    1674:	f7fe ff50 	bl	518 <__aeabi_dmul>
    1678:	4602      	mov	r2, r0
    167a:	460b      	mov	r3, r1
    167c:	4630      	mov	r0, r6
    167e:	4639      	mov	r1, r7
    1680:	f7fe fd94 	bl	1ac <__adddf3>
    1684:	4606      	mov	r6, r0
    1686:	460f      	mov	r7, r1
    1688:	f7ff fad6 	bl	c38 <__aeabi_d2iz>
    168c:	2200      	movs	r2, #0
    168e:	4682      	mov	sl, r0
    1690:	2300      	movs	r3, #0
    1692:	4630      	mov	r0, r6
    1694:	4639      	mov	r1, r7
    1696:	f7ff fa91 	bl	bbc <__aeabi_dcmplt>
    169a:	b148      	cbz	r0, 16b0 <_dtoa_r+0x178>
    169c:	4650      	mov	r0, sl
    169e:	f7fe fed1 	bl	444 <__aeabi_i2d>
    16a2:	4632      	mov	r2, r6
    16a4:	463b      	mov	r3, r7
    16a6:	f7ff fa7f 	bl	ba8 <__aeabi_dcmpeq>
    16aa:	b908      	cbnz	r0, 16b0 <_dtoa_r+0x178>
    16ac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    16b0:	f1ba 0f16 	cmp.w	sl, #22
    16b4:	d857      	bhi.n	1766 <_dtoa_r+0x22e>
    16b6:	4b59      	ldr	r3, [pc, #356]	; (181c <_dtoa_r+0x2e4>)
    16b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    16bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    16c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    16c4:	f7ff fa7a 	bl	bbc <__aeabi_dcmplt>
    16c8:	2800      	cmp	r0, #0
    16ca:	d04e      	beq.n	176a <_dtoa_r+0x232>
    16cc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    16d0:	2300      	movs	r3, #0
    16d2:	930f      	str	r3, [sp, #60]	; 0x3c
    16d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    16d6:	1b1c      	subs	r4, r3, r4
    16d8:	1e63      	subs	r3, r4, #1
    16da:	9309      	str	r3, [sp, #36]	; 0x24
    16dc:	bf45      	ittet	mi
    16de:	f1c4 0301 	rsbmi	r3, r4, #1
    16e2:	9306      	strmi	r3, [sp, #24]
    16e4:	2300      	movpl	r3, #0
    16e6:	2300      	movmi	r3, #0
    16e8:	bf4c      	ite	mi
    16ea:	9309      	strmi	r3, [sp, #36]	; 0x24
    16ec:	9306      	strpl	r3, [sp, #24]
    16ee:	f1ba 0f00 	cmp.w	sl, #0
    16f2:	db3c      	blt.n	176e <_dtoa_r+0x236>
    16f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16f6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    16fa:	4453      	add	r3, sl
    16fc:	9309      	str	r3, [sp, #36]	; 0x24
    16fe:	2300      	movs	r3, #0
    1700:	930a      	str	r3, [sp, #40]	; 0x28
    1702:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1704:	2b09      	cmp	r3, #9
    1706:	f200 808d 	bhi.w	1824 <_dtoa_r+0x2ec>
    170a:	2b05      	cmp	r3, #5
    170c:	bfc4      	itt	gt
    170e:	3b04      	subgt	r3, #4
    1710:	9322      	strgt	r3, [sp, #136]	; 0x88
    1712:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1714:	f1a3 0302 	sub.w	r3, r3, #2
    1718:	bfcc      	ite	gt
    171a:	2400      	movgt	r4, #0
    171c:	2401      	movle	r4, #1
    171e:	2b03      	cmp	r3, #3
    1720:	f200 808c 	bhi.w	183c <_dtoa_r+0x304>
    1724:	e8df f003 	tbb	[pc, r3]
    1728:	5b4d4f2d 	.word	0x5b4d4f2d
    172c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1730:	441c      	add	r4, r3
    1732:	f204 4332 	addw	r3, r4, #1074	; 0x432
    1736:	2b20      	cmp	r3, #32
    1738:	bfc3      	ittte	gt
    173a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    173e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1742:	fa09 f303 	lslgt.w	r3, r9, r3
    1746:	f1c3 0320 	rsble	r3, r3, #32
    174a:	bfc6      	itte	gt
    174c:	fa26 f000 	lsrgt.w	r0, r6, r0
    1750:	4318      	orrgt	r0, r3
    1752:	fa06 f003 	lslle.w	r0, r6, r3
    1756:	f7fe fe65 	bl	424 <__aeabi_ui2d>
    175a:	2301      	movs	r3, #1
    175c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    1760:	3c01      	subs	r4, #1
    1762:	9313      	str	r3, [sp, #76]	; 0x4c
    1764:	e770      	b.n	1648 <_dtoa_r+0x110>
    1766:	2301      	movs	r3, #1
    1768:	e7b3      	b.n	16d2 <_dtoa_r+0x19a>
    176a:	900f      	str	r0, [sp, #60]	; 0x3c
    176c:	e7b2      	b.n	16d4 <_dtoa_r+0x19c>
    176e:	9b06      	ldr	r3, [sp, #24]
    1770:	eba3 030a 	sub.w	r3, r3, sl
    1774:	9306      	str	r3, [sp, #24]
    1776:	f1ca 0300 	rsb	r3, sl, #0
    177a:	930a      	str	r3, [sp, #40]	; 0x28
    177c:	2300      	movs	r3, #0
    177e:	930e      	str	r3, [sp, #56]	; 0x38
    1780:	e7bf      	b.n	1702 <_dtoa_r+0x1ca>
    1782:	2300      	movs	r3, #0
    1784:	930b      	str	r3, [sp, #44]	; 0x2c
    1786:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1788:	2b00      	cmp	r3, #0
    178a:	dc5a      	bgt.n	1842 <_dtoa_r+0x30a>
    178c:	f04f 0901 	mov.w	r9, #1
    1790:	f8cd 9020 	str.w	r9, [sp, #32]
    1794:	464b      	mov	r3, r9
    1796:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    179a:	6a68      	ldr	r0, [r5, #36]	; 0x24
    179c:	2200      	movs	r2, #0
    179e:	6042      	str	r2, [r0, #4]
    17a0:	2204      	movs	r2, #4
    17a2:	f102 0614 	add.w	r6, r2, #20
    17a6:	429e      	cmp	r6, r3
    17a8:	6841      	ldr	r1, [r0, #4]
    17aa:	d950      	bls.n	184e <_dtoa_r+0x316>
    17ac:	4628      	mov	r0, r5
    17ae:	f00a fa75 	bl	bc9c <_Balloc>
    17b2:	9003      	str	r0, [sp, #12]
    17b4:	2800      	cmp	r0, #0
    17b6:	d14e      	bne.n	1856 <_dtoa_r+0x31e>
    17b8:	4b19      	ldr	r3, [pc, #100]	; (1820 <_dtoa_r+0x2e8>)
    17ba:	4602      	mov	r2, r0
    17bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    17c0:	e6ce      	b.n	1560 <_dtoa_r+0x28>
    17c2:	2301      	movs	r3, #1
    17c4:	e7de      	b.n	1784 <_dtoa_r+0x24c>
    17c6:	2300      	movs	r3, #0
    17c8:	930b      	str	r3, [sp, #44]	; 0x2c
    17ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    17cc:	eb0a 0903 	add.w	r9, sl, r3
    17d0:	f109 0301 	add.w	r3, r9, #1
    17d4:	2b01      	cmp	r3, #1
    17d6:	9308      	str	r3, [sp, #32]
    17d8:	bfb8      	it	lt
    17da:	2301      	movlt	r3, #1
    17dc:	e7dd      	b.n	179a <_dtoa_r+0x262>
    17de:	2301      	movs	r3, #1
    17e0:	e7f2      	b.n	17c8 <_dtoa_r+0x290>
    17e2:	bf00      	nop
    17e4:	f3af 8000 	nop.w
    17e8:	636f4361 	.word	0x636f4361
    17ec:	3fd287a7 	.word	0x3fd287a7
    17f0:	8b60c8b3 	.word	0x8b60c8b3
    17f4:	3fc68a28 	.word	0x3fc68a28
    17f8:	509f79fb 	.word	0x509f79fb
    17fc:	3fd34413 	.word	0x3fd34413
    1800:	00010d9b 	.word	0x00010d9b
    1804:	00010db2 	.word	0x00010db2
    1808:	7ff00000 	.word	0x7ff00000
    180c:	00010d97 	.word	0x00010d97
    1810:	00010d8e 	.word	0x00010d8e
    1814:	0000f7be 	.word	0x0000f7be
    1818:	3ff80000 	.word	0x3ff80000
    181c:	0000e4e0 	.word	0x0000e4e0
    1820:	00010e0e 	.word	0x00010e0e
    1824:	2401      	movs	r4, #1
    1826:	2300      	movs	r3, #0
    1828:	9322      	str	r3, [sp, #136]	; 0x88
    182a:	940b      	str	r4, [sp, #44]	; 0x2c
    182c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    1830:	2200      	movs	r2, #0
    1832:	f8cd 9020 	str.w	r9, [sp, #32]
    1836:	2312      	movs	r3, #18
    1838:	9223      	str	r2, [sp, #140]	; 0x8c
    183a:	e7ae      	b.n	179a <_dtoa_r+0x262>
    183c:	2301      	movs	r3, #1
    183e:	930b      	str	r3, [sp, #44]	; 0x2c
    1840:	e7f4      	b.n	182c <_dtoa_r+0x2f4>
    1842:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    1846:	f8cd 9020 	str.w	r9, [sp, #32]
    184a:	464b      	mov	r3, r9
    184c:	e7a5      	b.n	179a <_dtoa_r+0x262>
    184e:	3101      	adds	r1, #1
    1850:	6041      	str	r1, [r0, #4]
    1852:	0052      	lsls	r2, r2, #1
    1854:	e7a5      	b.n	17a2 <_dtoa_r+0x26a>
    1856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1858:	9a03      	ldr	r2, [sp, #12]
    185a:	601a      	str	r2, [r3, #0]
    185c:	9b08      	ldr	r3, [sp, #32]
    185e:	2b0e      	cmp	r3, #14
    1860:	f200 80a8 	bhi.w	19b4 <_dtoa_r+0x47c>
    1864:	2c00      	cmp	r4, #0
    1866:	f000 80a5 	beq.w	19b4 <_dtoa_r+0x47c>
    186a:	f1ba 0f00 	cmp.w	sl, #0
    186e:	dd34      	ble.n	18da <_dtoa_r+0x3a2>
    1870:	4a9a      	ldr	r2, [pc, #616]	; (1adc <_dtoa_r+0x5a4>)
    1872:	f00a 030f 	and.w	r3, sl, #15
    1876:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    187a:	e9d3 3400 	ldrd	r3, r4, [r3]
    187e:	f41a 7f80 	tst.w	sl, #256	; 0x100
    1882:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1886:	ea4f 142a 	mov.w	r4, sl, asr #4
    188a:	d016      	beq.n	18ba <_dtoa_r+0x382>
    188c:	4b94      	ldr	r3, [pc, #592]	; (1ae0 <_dtoa_r+0x5a8>)
    188e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1892:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    1896:	f7fe ff69 	bl	76c <__aeabi_ddiv>
    189a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    189e:	f004 040f 	and.w	r4, r4, #15
    18a2:	2703      	movs	r7, #3
    18a4:	4e8e      	ldr	r6, [pc, #568]	; (1ae0 <_dtoa_r+0x5a8>)
    18a6:	b954      	cbnz	r4, 18be <_dtoa_r+0x386>
    18a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    18ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    18b0:	f7fe ff5c 	bl	76c <__aeabi_ddiv>
    18b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    18b8:	e029      	b.n	190e <_dtoa_r+0x3d6>
    18ba:	2702      	movs	r7, #2
    18bc:	e7f2      	b.n	18a4 <_dtoa_r+0x36c>
    18be:	07e1      	lsls	r1, r4, #31
    18c0:	d508      	bpl.n	18d4 <_dtoa_r+0x39c>
    18c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    18c6:	e9d6 2300 	ldrd	r2, r3, [r6]
    18ca:	f7fe fe25 	bl	518 <__aeabi_dmul>
    18ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    18d2:	3701      	adds	r7, #1
    18d4:	1064      	asrs	r4, r4, #1
    18d6:	3608      	adds	r6, #8
    18d8:	e7e5      	b.n	18a6 <_dtoa_r+0x36e>
    18da:	f000 80a5 	beq.w	1a28 <_dtoa_r+0x4f0>
    18de:	f1ca 0400 	rsb	r4, sl, #0
    18e2:	4b7e      	ldr	r3, [pc, #504]	; (1adc <_dtoa_r+0x5a4>)
    18e4:	4e7e      	ldr	r6, [pc, #504]	; (1ae0 <_dtoa_r+0x5a8>)
    18e6:	f004 020f 	and.w	r2, r4, #15
    18ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    18ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    18f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    18f6:	f7fe fe0f 	bl	518 <__aeabi_dmul>
    18fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
    18fe:	1124      	asrs	r4, r4, #4
    1900:	2300      	movs	r3, #0
    1902:	2702      	movs	r7, #2
    1904:	2c00      	cmp	r4, #0
    1906:	f040 8084 	bne.w	1a12 <_dtoa_r+0x4da>
    190a:	2b00      	cmp	r3, #0
    190c:	d1d2      	bne.n	18b4 <_dtoa_r+0x37c>
    190e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1910:	2b00      	cmp	r3, #0
    1912:	f000 808b 	beq.w	1a2c <_dtoa_r+0x4f4>
    1916:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    191a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    191e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1922:	4b70      	ldr	r3, [pc, #448]	; (1ae4 <_dtoa_r+0x5ac>)
    1924:	2200      	movs	r2, #0
    1926:	f7ff f949 	bl	bbc <__aeabi_dcmplt>
    192a:	2800      	cmp	r0, #0
    192c:	d07e      	beq.n	1a2c <_dtoa_r+0x4f4>
    192e:	9b08      	ldr	r3, [sp, #32]
    1930:	2b00      	cmp	r3, #0
    1932:	d07b      	beq.n	1a2c <_dtoa_r+0x4f4>
    1934:	f1b9 0f00 	cmp.w	r9, #0
    1938:	dd38      	ble.n	19ac <_dtoa_r+0x474>
    193a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    193e:	4b6a      	ldr	r3, [pc, #424]	; (1ae8 <_dtoa_r+0x5b0>)
    1940:	2200      	movs	r2, #0
    1942:	f7fe fde9 	bl	518 <__aeabi_dmul>
    1946:	e9cd 0104 	strd	r0, r1, [sp, #16]
    194a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
    194e:	3701      	adds	r7, #1
    1950:	464c      	mov	r4, r9
    1952:	4638      	mov	r0, r7
    1954:	f7fe fd76 	bl	444 <__aeabi_i2d>
    1958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    195c:	f7fe fddc 	bl	518 <__aeabi_dmul>
    1960:	4b62      	ldr	r3, [pc, #392]	; (1aec <_dtoa_r+0x5b4>)
    1962:	2200      	movs	r2, #0
    1964:	f7fe fc22 	bl	1ac <__adddf3>
    1968:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    196c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1970:	9611      	str	r6, [sp, #68]	; 0x44
    1972:	2c00      	cmp	r4, #0
    1974:	d15d      	bne.n	1a32 <_dtoa_r+0x4fa>
    1976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    197a:	4b5d      	ldr	r3, [pc, #372]	; (1af0 <_dtoa_r+0x5b8>)
    197c:	2200      	movs	r2, #0
    197e:	f7fe fc13 	bl	1a8 <__aeabi_dsub>
    1982:	4602      	mov	r2, r0
    1984:	460b      	mov	r3, r1
    1986:	e9cd 2304 	strd	r2, r3, [sp, #16]
    198a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    198c:	4633      	mov	r3, r6
    198e:	f7ff f933 	bl	bf8 <__aeabi_dcmpgt>
    1992:	2800      	cmp	r0, #0
    1994:	f040 829c 	bne.w	1ed0 <_dtoa_r+0x998>
    1998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    199c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    199e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    19a2:	f7ff f90b 	bl	bbc <__aeabi_dcmplt>
    19a6:	2800      	cmp	r0, #0
    19a8:	f040 8290 	bne.w	1ecc <_dtoa_r+0x994>
    19ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    19b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    19b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    19b6:	2b00      	cmp	r3, #0
    19b8:	f2c0 8152 	blt.w	1c60 <_dtoa_r+0x728>
    19bc:	f1ba 0f0e 	cmp.w	sl, #14
    19c0:	f300 814e 	bgt.w	1c60 <_dtoa_r+0x728>
    19c4:	4b45      	ldr	r3, [pc, #276]	; (1adc <_dtoa_r+0x5a4>)
    19c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    19ca:	e9d3 3400 	ldrd	r3, r4, [r3]
    19ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
    19d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    19d4:	2b00      	cmp	r3, #0
    19d6:	f280 80db 	bge.w	1b90 <_dtoa_r+0x658>
    19da:	9b08      	ldr	r3, [sp, #32]
    19dc:	2b00      	cmp	r3, #0
    19de:	f300 80d7 	bgt.w	1b90 <_dtoa_r+0x658>
    19e2:	f040 8272 	bne.w	1eca <_dtoa_r+0x992>
    19e6:	4b42      	ldr	r3, [pc, #264]	; (1af0 <_dtoa_r+0x5b8>)
    19e8:	2200      	movs	r2, #0
    19ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    19ee:	f7fe fd93 	bl	518 <__aeabi_dmul>
    19f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    19f6:	f7ff f8f5 	bl	be4 <__aeabi_dcmpge>
    19fa:	9c08      	ldr	r4, [sp, #32]
    19fc:	4626      	mov	r6, r4
    19fe:	2800      	cmp	r0, #0
    1a00:	f040 8248 	bne.w	1e94 <_dtoa_r+0x95c>
    1a04:	9f03      	ldr	r7, [sp, #12]
    1a06:	2331      	movs	r3, #49	; 0x31
    1a08:	f807 3b01 	strb.w	r3, [r7], #1
    1a0c:	f10a 0a01 	add.w	sl, sl, #1
    1a10:	e244      	b.n	1e9c <_dtoa_r+0x964>
    1a12:	07e2      	lsls	r2, r4, #31
    1a14:	d505      	bpl.n	1a22 <_dtoa_r+0x4ea>
    1a16:	e9d6 2300 	ldrd	r2, r3, [r6]
    1a1a:	f7fe fd7d 	bl	518 <__aeabi_dmul>
    1a1e:	3701      	adds	r7, #1
    1a20:	2301      	movs	r3, #1
    1a22:	1064      	asrs	r4, r4, #1
    1a24:	3608      	adds	r6, #8
    1a26:	e76d      	b.n	1904 <_dtoa_r+0x3cc>
    1a28:	2702      	movs	r7, #2
    1a2a:	e770      	b.n	190e <_dtoa_r+0x3d6>
    1a2c:	9c08      	ldr	r4, [sp, #32]
    1a2e:	46d0      	mov	r8, sl
    1a30:	e78f      	b.n	1952 <_dtoa_r+0x41a>
    1a32:	9903      	ldr	r1, [sp, #12]
    1a34:	4b29      	ldr	r3, [pc, #164]	; (1adc <_dtoa_r+0x5a4>)
    1a36:	4421      	add	r1, r4
    1a38:	9112      	str	r1, [sp, #72]	; 0x48
    1a3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1a40:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1a44:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1a48:	2900      	cmp	r1, #0
    1a4a:	d055      	beq.n	1af8 <_dtoa_r+0x5c0>
    1a4c:	4929      	ldr	r1, [pc, #164]	; (1af4 <_dtoa_r+0x5bc>)
    1a4e:	2000      	movs	r0, #0
    1a50:	f7fe fe8c 	bl	76c <__aeabi_ddiv>
    1a54:	463b      	mov	r3, r7
    1a56:	4632      	mov	r2, r6
    1a58:	f7fe fba6 	bl	1a8 <__aeabi_dsub>
    1a5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1a60:	9f03      	ldr	r7, [sp, #12]
    1a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1a66:	f7ff f8e7 	bl	c38 <__aeabi_d2iz>
    1a6a:	4604      	mov	r4, r0
    1a6c:	f7fe fcea 	bl	444 <__aeabi_i2d>
    1a70:	4602      	mov	r2, r0
    1a72:	460b      	mov	r3, r1
    1a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1a78:	f7fe fb96 	bl	1a8 <__aeabi_dsub>
    1a7c:	3430      	adds	r4, #48	; 0x30
    1a7e:	4602      	mov	r2, r0
    1a80:	460b      	mov	r3, r1
    1a82:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1a86:	f807 4b01 	strb.w	r4, [r7], #1
    1a8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1a8e:	f7ff f895 	bl	bbc <__aeabi_dcmplt>
    1a92:	2800      	cmp	r0, #0
    1a94:	d174      	bne.n	1b80 <_dtoa_r+0x648>
    1a96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1a9a:	4912      	ldr	r1, [pc, #72]	; (1ae4 <_dtoa_r+0x5ac>)
    1a9c:	2000      	movs	r0, #0
    1a9e:	f7fe fb83 	bl	1a8 <__aeabi_dsub>
    1aa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1aa6:	f7ff f889 	bl	bbc <__aeabi_dcmplt>
    1aaa:	2800      	cmp	r0, #0
    1aac:	f040 80b7 	bne.w	1c1e <_dtoa_r+0x6e6>
    1ab0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1ab2:	429f      	cmp	r7, r3
    1ab4:	f43f af7a 	beq.w	19ac <_dtoa_r+0x474>
    1ab8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1abc:	4b0a      	ldr	r3, [pc, #40]	; (1ae8 <_dtoa_r+0x5b0>)
    1abe:	2200      	movs	r2, #0
    1ac0:	f7fe fd2a 	bl	518 <__aeabi_dmul>
    1ac4:	4b08      	ldr	r3, [pc, #32]	; (1ae8 <_dtoa_r+0x5b0>)
    1ac6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1aca:	2200      	movs	r2, #0
    1acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1ad0:	f7fe fd22 	bl	518 <__aeabi_dmul>
    1ad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1ad8:	e7c3      	b.n	1a62 <_dtoa_r+0x52a>
    1ada:	bf00      	nop
    1adc:	0000e4e0 	.word	0x0000e4e0
    1ae0:	0000e4b8 	.word	0x0000e4b8
    1ae4:	3ff00000 	.word	0x3ff00000
    1ae8:	40240000 	.word	0x40240000
    1aec:	401c0000 	.word	0x401c0000
    1af0:	40140000 	.word	0x40140000
    1af4:	3fe00000 	.word	0x3fe00000
    1af8:	4630      	mov	r0, r6
    1afa:	4639      	mov	r1, r7
    1afc:	f7fe fd0c 	bl	518 <__aeabi_dmul>
    1b00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1b04:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b06:	9c03      	ldr	r4, [sp, #12]
    1b08:	9314      	str	r3, [sp, #80]	; 0x50
    1b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b0e:	f7ff f893 	bl	c38 <__aeabi_d2iz>
    1b12:	9015      	str	r0, [sp, #84]	; 0x54
    1b14:	f7fe fc96 	bl	444 <__aeabi_i2d>
    1b18:	4602      	mov	r2, r0
    1b1a:	460b      	mov	r3, r1
    1b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b20:	f7fe fb42 	bl	1a8 <__aeabi_dsub>
    1b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b26:	3330      	adds	r3, #48	; 0x30
    1b28:	f804 3b01 	strb.w	r3, [r4], #1
    1b2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b2e:	429c      	cmp	r4, r3
    1b30:	4606      	mov	r6, r0
    1b32:	460f      	mov	r7, r1
    1b34:	f04f 0200 	mov.w	r2, #0
    1b38:	d124      	bne.n	1b84 <_dtoa_r+0x64c>
    1b3a:	4ba4      	ldr	r3, [pc, #656]	; (1dcc <_dtoa_r+0x894>)
    1b3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1b40:	f7fe fb34 	bl	1ac <__adddf3>
    1b44:	4602      	mov	r2, r0
    1b46:	460b      	mov	r3, r1
    1b48:	4630      	mov	r0, r6
    1b4a:	4639      	mov	r1, r7
    1b4c:	f7ff f854 	bl	bf8 <__aeabi_dcmpgt>
    1b50:	2800      	cmp	r0, #0
    1b52:	d163      	bne.n	1c1c <_dtoa_r+0x6e4>
    1b54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1b58:	499c      	ldr	r1, [pc, #624]	; (1dcc <_dtoa_r+0x894>)
    1b5a:	2000      	movs	r0, #0
    1b5c:	f7fe fb24 	bl	1a8 <__aeabi_dsub>
    1b60:	4602      	mov	r2, r0
    1b62:	460b      	mov	r3, r1
    1b64:	4630      	mov	r0, r6
    1b66:	4639      	mov	r1, r7
    1b68:	f7ff f828 	bl	bbc <__aeabi_dcmplt>
    1b6c:	2800      	cmp	r0, #0
    1b6e:	f43f af1d 	beq.w	19ac <_dtoa_r+0x474>
    1b72:	9f14      	ldr	r7, [sp, #80]	; 0x50
    1b74:	1e7b      	subs	r3, r7, #1
    1b76:	9314      	str	r3, [sp, #80]	; 0x50
    1b78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    1b7c:	2b30      	cmp	r3, #48	; 0x30
    1b7e:	d0f8      	beq.n	1b72 <_dtoa_r+0x63a>
    1b80:	46c2      	mov	sl, r8
    1b82:	e03b      	b.n	1bfc <_dtoa_r+0x6c4>
    1b84:	4b92      	ldr	r3, [pc, #584]	; (1dd0 <_dtoa_r+0x898>)
    1b86:	f7fe fcc7 	bl	518 <__aeabi_dmul>
    1b8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1b8e:	e7bc      	b.n	1b0a <_dtoa_r+0x5d2>
    1b90:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    1b94:	9f03      	ldr	r7, [sp, #12]
    1b96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1b9a:	4640      	mov	r0, r8
    1b9c:	4649      	mov	r1, r9
    1b9e:	f7fe fde5 	bl	76c <__aeabi_ddiv>
    1ba2:	f7ff f849 	bl	c38 <__aeabi_d2iz>
    1ba6:	4604      	mov	r4, r0
    1ba8:	f7fe fc4c 	bl	444 <__aeabi_i2d>
    1bac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1bb0:	f7fe fcb2 	bl	518 <__aeabi_dmul>
    1bb4:	f104 0630 	add.w	r6, r4, #48	; 0x30
    1bb8:	4602      	mov	r2, r0
    1bba:	460b      	mov	r3, r1
    1bbc:	4640      	mov	r0, r8
    1bbe:	4649      	mov	r1, r9
    1bc0:	f7fe faf2 	bl	1a8 <__aeabi_dsub>
    1bc4:	f807 6b01 	strb.w	r6, [r7], #1
    1bc8:	9e03      	ldr	r6, [sp, #12]
    1bca:	f8dd c020 	ldr.w	ip, [sp, #32]
    1bce:	1bbe      	subs	r6, r7, r6
    1bd0:	45b4      	cmp	ip, r6
    1bd2:	4602      	mov	r2, r0
    1bd4:	460b      	mov	r3, r1
    1bd6:	d136      	bne.n	1c46 <_dtoa_r+0x70e>
    1bd8:	f7fe fae8 	bl	1ac <__adddf3>
    1bdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1be0:	4680      	mov	r8, r0
    1be2:	4689      	mov	r9, r1
    1be4:	f7ff f808 	bl	bf8 <__aeabi_dcmpgt>
    1be8:	bb58      	cbnz	r0, 1c42 <_dtoa_r+0x70a>
    1bea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1bee:	4640      	mov	r0, r8
    1bf0:	4649      	mov	r1, r9
    1bf2:	f7fe ffd9 	bl	ba8 <__aeabi_dcmpeq>
    1bf6:	b108      	cbz	r0, 1bfc <_dtoa_r+0x6c4>
    1bf8:	07e1      	lsls	r1, r4, #31
    1bfa:	d422      	bmi.n	1c42 <_dtoa_r+0x70a>
    1bfc:	4628      	mov	r0, r5
    1bfe:	4659      	mov	r1, fp
    1c00:	f00a f88c 	bl	bd1c <_Bfree>
    1c04:	2300      	movs	r3, #0
    1c06:	703b      	strb	r3, [r7, #0]
    1c08:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1c0a:	f10a 0001 	add.w	r0, sl, #1
    1c0e:	6018      	str	r0, [r3, #0]
    1c10:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1c12:	2b00      	cmp	r3, #0
    1c14:	f43f acdd 	beq.w	15d2 <_dtoa_r+0x9a>
    1c18:	601f      	str	r7, [r3, #0]
    1c1a:	e4da      	b.n	15d2 <_dtoa_r+0x9a>
    1c1c:	4627      	mov	r7, r4
    1c1e:	463b      	mov	r3, r7
    1c20:	461f      	mov	r7, r3
    1c22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    1c26:	2a39      	cmp	r2, #57	; 0x39
    1c28:	d107      	bne.n	1c3a <_dtoa_r+0x702>
    1c2a:	9a03      	ldr	r2, [sp, #12]
    1c2c:	429a      	cmp	r2, r3
    1c2e:	d1f7      	bne.n	1c20 <_dtoa_r+0x6e8>
    1c30:	9903      	ldr	r1, [sp, #12]
    1c32:	2230      	movs	r2, #48	; 0x30
    1c34:	f108 0801 	add.w	r8, r8, #1
    1c38:	700a      	strb	r2, [r1, #0]
    1c3a:	781a      	ldrb	r2, [r3, #0]
    1c3c:	3201      	adds	r2, #1
    1c3e:	701a      	strb	r2, [r3, #0]
    1c40:	e79e      	b.n	1b80 <_dtoa_r+0x648>
    1c42:	46d0      	mov	r8, sl
    1c44:	e7eb      	b.n	1c1e <_dtoa_r+0x6e6>
    1c46:	4b62      	ldr	r3, [pc, #392]	; (1dd0 <_dtoa_r+0x898>)
    1c48:	2200      	movs	r2, #0
    1c4a:	f7fe fc65 	bl	518 <__aeabi_dmul>
    1c4e:	2200      	movs	r2, #0
    1c50:	2300      	movs	r3, #0
    1c52:	4680      	mov	r8, r0
    1c54:	4689      	mov	r9, r1
    1c56:	f7fe ffa7 	bl	ba8 <__aeabi_dcmpeq>
    1c5a:	2800      	cmp	r0, #0
    1c5c:	d09b      	beq.n	1b96 <_dtoa_r+0x65e>
    1c5e:	e7cd      	b.n	1bfc <_dtoa_r+0x6c4>
    1c60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1c62:	2a00      	cmp	r2, #0
    1c64:	f000 80d0 	beq.w	1e08 <_dtoa_r+0x8d0>
    1c68:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1c6a:	2a01      	cmp	r2, #1
    1c6c:	f300 80b2 	bgt.w	1dd4 <_dtoa_r+0x89c>
    1c70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    1c72:	2a00      	cmp	r2, #0
    1c74:	f000 80a6 	beq.w	1dc4 <_dtoa_r+0x88c>
    1c78:	f203 4333 	addw	r3, r3, #1075	; 0x433
    1c7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1c7e:	9f06      	ldr	r7, [sp, #24]
    1c80:	9a06      	ldr	r2, [sp, #24]
    1c82:	441a      	add	r2, r3
    1c84:	9206      	str	r2, [sp, #24]
    1c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1c88:	2101      	movs	r1, #1
    1c8a:	441a      	add	r2, r3
    1c8c:	4628      	mov	r0, r5
    1c8e:	9209      	str	r2, [sp, #36]	; 0x24
    1c90:	f00a f8ac 	bl	bdec <__i2b>
    1c94:	4606      	mov	r6, r0
    1c96:	2f00      	cmp	r7, #0
    1c98:	dd0c      	ble.n	1cb4 <_dtoa_r+0x77c>
    1c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	dd09      	ble.n	1cb4 <_dtoa_r+0x77c>
    1ca0:	42bb      	cmp	r3, r7
    1ca2:	9a06      	ldr	r2, [sp, #24]
    1ca4:	bfa8      	it	ge
    1ca6:	463b      	movge	r3, r7
    1ca8:	1ad2      	subs	r2, r2, r3
    1caa:	9206      	str	r2, [sp, #24]
    1cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1cae:	1aff      	subs	r7, r7, r3
    1cb0:	1ad3      	subs	r3, r2, r3
    1cb2:	9309      	str	r3, [sp, #36]	; 0x24
    1cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1cb6:	b1f3      	cbz	r3, 1cf6 <_dtoa_r+0x7be>
    1cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1cba:	2b00      	cmp	r3, #0
    1cbc:	f000 80a8 	beq.w	1e10 <_dtoa_r+0x8d8>
    1cc0:	2c00      	cmp	r4, #0
    1cc2:	dd10      	ble.n	1ce6 <_dtoa_r+0x7ae>
    1cc4:	4631      	mov	r1, r6
    1cc6:	4622      	mov	r2, r4
    1cc8:	4628      	mov	r0, r5
    1cca:	f00a f94d 	bl	bf68 <__pow5mult>
    1cce:	465a      	mov	r2, fp
    1cd0:	4601      	mov	r1, r0
    1cd2:	4606      	mov	r6, r0
    1cd4:	4628      	mov	r0, r5
    1cd6:	f00a f89f 	bl	be18 <__multiply>
    1cda:	4659      	mov	r1, fp
    1cdc:	4680      	mov	r8, r0
    1cde:	4628      	mov	r0, r5
    1ce0:	f00a f81c 	bl	bd1c <_Bfree>
    1ce4:	46c3      	mov	fp, r8
    1ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ce8:	1b1a      	subs	r2, r3, r4
    1cea:	d004      	beq.n	1cf6 <_dtoa_r+0x7be>
    1cec:	4659      	mov	r1, fp
    1cee:	4628      	mov	r0, r5
    1cf0:	f00a f93a 	bl	bf68 <__pow5mult>
    1cf4:	4683      	mov	fp, r0
    1cf6:	2101      	movs	r1, #1
    1cf8:	4628      	mov	r0, r5
    1cfa:	f00a f877 	bl	bdec <__i2b>
    1cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1d00:	2b00      	cmp	r3, #0
    1d02:	4604      	mov	r4, r0
    1d04:	f340 8086 	ble.w	1e14 <_dtoa_r+0x8dc>
    1d08:	461a      	mov	r2, r3
    1d0a:	4601      	mov	r1, r0
    1d0c:	4628      	mov	r0, r5
    1d0e:	f00a f92b 	bl	bf68 <__pow5mult>
    1d12:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1d14:	2b01      	cmp	r3, #1
    1d16:	4604      	mov	r4, r0
    1d18:	dd7f      	ble.n	1e1a <_dtoa_r+0x8e2>
    1d1a:	f04f 0800 	mov.w	r8, #0
    1d1e:	6923      	ldr	r3, [r4, #16]
    1d20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1d24:	6918      	ldr	r0, [r3, #16]
    1d26:	f00c f89a 	bl	de5e <__hi0bits>
    1d2a:	f1c0 0020 	rsb	r0, r0, #32
    1d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d30:	4418      	add	r0, r3
    1d32:	f010 001f 	ands.w	r0, r0, #31
    1d36:	f000 8092 	beq.w	1e5e <_dtoa_r+0x926>
    1d3a:	f1c0 0320 	rsb	r3, r0, #32
    1d3e:	2b04      	cmp	r3, #4
    1d40:	f340 808a 	ble.w	1e58 <_dtoa_r+0x920>
    1d44:	f1c0 001c 	rsb	r0, r0, #28
    1d48:	9b06      	ldr	r3, [sp, #24]
    1d4a:	4403      	add	r3, r0
    1d4c:	9306      	str	r3, [sp, #24]
    1d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d50:	4403      	add	r3, r0
    1d52:	4407      	add	r7, r0
    1d54:	9309      	str	r3, [sp, #36]	; 0x24
    1d56:	9b06      	ldr	r3, [sp, #24]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	dd05      	ble.n	1d68 <_dtoa_r+0x830>
    1d5c:	4659      	mov	r1, fp
    1d5e:	461a      	mov	r2, r3
    1d60:	4628      	mov	r0, r5
    1d62:	f00a f95b 	bl	c01c <__lshift>
    1d66:	4683      	mov	fp, r0
    1d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	dd05      	ble.n	1d7a <_dtoa_r+0x842>
    1d6e:	4621      	mov	r1, r4
    1d70:	461a      	mov	r2, r3
    1d72:	4628      	mov	r0, r5
    1d74:	f00a f952 	bl	c01c <__lshift>
    1d78:	4604      	mov	r4, r0
    1d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d070      	beq.n	1e62 <_dtoa_r+0x92a>
    1d80:	4621      	mov	r1, r4
    1d82:	4658      	mov	r0, fp
    1d84:	f00c f8b8 	bl	def8 <__mcmp>
    1d88:	2800      	cmp	r0, #0
    1d8a:	da6a      	bge.n	1e62 <_dtoa_r+0x92a>
    1d8c:	2300      	movs	r3, #0
    1d8e:	4659      	mov	r1, fp
    1d90:	220a      	movs	r2, #10
    1d92:	4628      	mov	r0, r5
    1d94:	f009 ffe4 	bl	bd60 <__multadd>
    1d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    1d9e:	4683      	mov	fp, r0
    1da0:	2b00      	cmp	r3, #0
    1da2:	f000 8194 	beq.w	20ce <_dtoa_r+0xb96>
    1da6:	4631      	mov	r1, r6
    1da8:	2300      	movs	r3, #0
    1daa:	220a      	movs	r2, #10
    1dac:	4628      	mov	r0, r5
    1dae:	f009 ffd7 	bl	bd60 <__multadd>
    1db2:	f1b9 0f00 	cmp.w	r9, #0
    1db6:	4606      	mov	r6, r0
    1db8:	f300 8093 	bgt.w	1ee2 <_dtoa_r+0x9aa>
    1dbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1dbe:	2b02      	cmp	r3, #2
    1dc0:	dc57      	bgt.n	1e72 <_dtoa_r+0x93a>
    1dc2:	e08e      	b.n	1ee2 <_dtoa_r+0x9aa>
    1dc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1dc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    1dca:	e757      	b.n	1c7c <_dtoa_r+0x744>
    1dcc:	3fe00000 	.word	0x3fe00000
    1dd0:	40240000 	.word	0x40240000
    1dd4:	9b08      	ldr	r3, [sp, #32]
    1dd6:	1e5c      	subs	r4, r3, #1
    1dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dda:	42a3      	cmp	r3, r4
    1ddc:	bfbf      	itttt	lt
    1dde:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    1de0:	940a      	strlt	r4, [sp, #40]	; 0x28
    1de2:	1ae2      	sublt	r2, r4, r3
    1de4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    1de6:	bfb6      	itet	lt
    1de8:	189b      	addlt	r3, r3, r2
    1dea:	1b1c      	subge	r4, r3, r4
    1dec:	930e      	strlt	r3, [sp, #56]	; 0x38
    1dee:	9b08      	ldr	r3, [sp, #32]
    1df0:	bfb8      	it	lt
    1df2:	2400      	movlt	r4, #0
    1df4:	2b00      	cmp	r3, #0
    1df6:	bfb9      	ittee	lt
    1df8:	9b06      	ldrlt	r3, [sp, #24]
    1dfa:	9a08      	ldrlt	r2, [sp, #32]
    1dfc:	9f06      	ldrge	r7, [sp, #24]
    1dfe:	9b08      	ldrge	r3, [sp, #32]
    1e00:	bfbc      	itt	lt
    1e02:	1a9f      	sublt	r7, r3, r2
    1e04:	2300      	movlt	r3, #0
    1e06:	e73b      	b.n	1c80 <_dtoa_r+0x748>
    1e08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1e0a:	9f06      	ldr	r7, [sp, #24]
    1e0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    1e0e:	e742      	b.n	1c96 <_dtoa_r+0x75e>
    1e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e12:	e76b      	b.n	1cec <_dtoa_r+0x7b4>
    1e14:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1e16:	2b01      	cmp	r3, #1
    1e18:	dc19      	bgt.n	1e4e <_dtoa_r+0x916>
    1e1a:	9b04      	ldr	r3, [sp, #16]
    1e1c:	b9bb      	cbnz	r3, 1e4e <_dtoa_r+0x916>
    1e1e:	9b05      	ldr	r3, [sp, #20]
    1e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1e24:	b99b      	cbnz	r3, 1e4e <_dtoa_r+0x916>
    1e26:	9b05      	ldr	r3, [sp, #20]
    1e28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1e2c:	0d1b      	lsrs	r3, r3, #20
    1e2e:	051b      	lsls	r3, r3, #20
    1e30:	b183      	cbz	r3, 1e54 <_dtoa_r+0x91c>
    1e32:	9b06      	ldr	r3, [sp, #24]
    1e34:	3301      	adds	r3, #1
    1e36:	9306      	str	r3, [sp, #24]
    1e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e3a:	3301      	adds	r3, #1
    1e3c:	9309      	str	r3, [sp, #36]	; 0x24
    1e3e:	f04f 0801 	mov.w	r8, #1
    1e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1e44:	2b00      	cmp	r3, #0
    1e46:	f47f af6a 	bne.w	1d1e <_dtoa_r+0x7e6>
    1e4a:	2001      	movs	r0, #1
    1e4c:	e76f      	b.n	1d2e <_dtoa_r+0x7f6>
    1e4e:	f04f 0800 	mov.w	r8, #0
    1e52:	e7f6      	b.n	1e42 <_dtoa_r+0x90a>
    1e54:	4698      	mov	r8, r3
    1e56:	e7f4      	b.n	1e42 <_dtoa_r+0x90a>
    1e58:	f43f af7d 	beq.w	1d56 <_dtoa_r+0x81e>
    1e5c:	4618      	mov	r0, r3
    1e5e:	301c      	adds	r0, #28
    1e60:	e772      	b.n	1d48 <_dtoa_r+0x810>
    1e62:	9b08      	ldr	r3, [sp, #32]
    1e64:	2b00      	cmp	r3, #0
    1e66:	dc36      	bgt.n	1ed6 <_dtoa_r+0x99e>
    1e68:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1e6a:	2b02      	cmp	r3, #2
    1e6c:	dd33      	ble.n	1ed6 <_dtoa_r+0x99e>
    1e6e:	f8dd 9020 	ldr.w	r9, [sp, #32]
    1e72:	f1b9 0f00 	cmp.w	r9, #0
    1e76:	d10d      	bne.n	1e94 <_dtoa_r+0x95c>
    1e78:	4621      	mov	r1, r4
    1e7a:	464b      	mov	r3, r9
    1e7c:	2205      	movs	r2, #5
    1e7e:	4628      	mov	r0, r5
    1e80:	f009 ff6e 	bl	bd60 <__multadd>
    1e84:	4601      	mov	r1, r0
    1e86:	4604      	mov	r4, r0
    1e88:	4658      	mov	r0, fp
    1e8a:	f00c f835 	bl	def8 <__mcmp>
    1e8e:	2800      	cmp	r0, #0
    1e90:	f73f adb8 	bgt.w	1a04 <_dtoa_r+0x4cc>
    1e94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1e96:	9f03      	ldr	r7, [sp, #12]
    1e98:	ea6f 0a03 	mvn.w	sl, r3
    1e9c:	f04f 0800 	mov.w	r8, #0
    1ea0:	4621      	mov	r1, r4
    1ea2:	4628      	mov	r0, r5
    1ea4:	f009 ff3a 	bl	bd1c <_Bfree>
    1ea8:	2e00      	cmp	r6, #0
    1eaa:	f43f aea7 	beq.w	1bfc <_dtoa_r+0x6c4>
    1eae:	f1b8 0f00 	cmp.w	r8, #0
    1eb2:	d005      	beq.n	1ec0 <_dtoa_r+0x988>
    1eb4:	45b0      	cmp	r8, r6
    1eb6:	d003      	beq.n	1ec0 <_dtoa_r+0x988>
    1eb8:	4641      	mov	r1, r8
    1eba:	4628      	mov	r0, r5
    1ebc:	f009 ff2e 	bl	bd1c <_Bfree>
    1ec0:	4631      	mov	r1, r6
    1ec2:	4628      	mov	r0, r5
    1ec4:	f009 ff2a 	bl	bd1c <_Bfree>
    1ec8:	e698      	b.n	1bfc <_dtoa_r+0x6c4>
    1eca:	2400      	movs	r4, #0
    1ecc:	4626      	mov	r6, r4
    1ece:	e7e1      	b.n	1e94 <_dtoa_r+0x95c>
    1ed0:	46c2      	mov	sl, r8
    1ed2:	4626      	mov	r6, r4
    1ed4:	e596      	b.n	1a04 <_dtoa_r+0x4cc>
    1ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
    1edc:	2b00      	cmp	r3, #0
    1ede:	f000 80fd 	beq.w	20dc <_dtoa_r+0xba4>
    1ee2:	2f00      	cmp	r7, #0
    1ee4:	dd05      	ble.n	1ef2 <_dtoa_r+0x9ba>
    1ee6:	4631      	mov	r1, r6
    1ee8:	463a      	mov	r2, r7
    1eea:	4628      	mov	r0, r5
    1eec:	f00a f896 	bl	c01c <__lshift>
    1ef0:	4606      	mov	r6, r0
    1ef2:	f1b8 0f00 	cmp.w	r8, #0
    1ef6:	d05c      	beq.n	1fb2 <_dtoa_r+0xa7a>
    1ef8:	6871      	ldr	r1, [r6, #4]
    1efa:	4628      	mov	r0, r5
    1efc:	f009 fece 	bl	bc9c <_Balloc>
    1f00:	4607      	mov	r7, r0
    1f02:	b928      	cbnz	r0, 1f10 <_dtoa_r+0x9d8>
    1f04:	4b80      	ldr	r3, [pc, #512]	; (2108 <_dtoa_r+0xbd0>)
    1f06:	4602      	mov	r2, r0
    1f08:	f240 21ea 	movw	r1, #746	; 0x2ea
    1f0c:	f7ff bb28 	b.w	1560 <_dtoa_r+0x28>
    1f10:	6932      	ldr	r2, [r6, #16]
    1f12:	3202      	adds	r2, #2
    1f14:	0092      	lsls	r2, r2, #2
    1f16:	f106 010c 	add.w	r1, r6, #12
    1f1a:	300c      	adds	r0, #12
    1f1c:	f00b fdac 	bl	da78 <memcpy>
    1f20:	2201      	movs	r2, #1
    1f22:	4639      	mov	r1, r7
    1f24:	4628      	mov	r0, r5
    1f26:	f00a f879 	bl	c01c <__lshift>
    1f2a:	9b03      	ldr	r3, [sp, #12]
    1f2c:	3301      	adds	r3, #1
    1f2e:	9308      	str	r3, [sp, #32]
    1f30:	9b03      	ldr	r3, [sp, #12]
    1f32:	444b      	add	r3, r9
    1f34:	930a      	str	r3, [sp, #40]	; 0x28
    1f36:	9b04      	ldr	r3, [sp, #16]
    1f38:	f003 0301 	and.w	r3, r3, #1
    1f3c:	46b0      	mov	r8, r6
    1f3e:	9309      	str	r3, [sp, #36]	; 0x24
    1f40:	4606      	mov	r6, r0
    1f42:	9b08      	ldr	r3, [sp, #32]
    1f44:	4621      	mov	r1, r4
    1f46:	3b01      	subs	r3, #1
    1f48:	4658      	mov	r0, fp
    1f4a:	9304      	str	r3, [sp, #16]
    1f4c:	f00b fecb 	bl	dce6 <quorem>
    1f50:	4603      	mov	r3, r0
    1f52:	3330      	adds	r3, #48	; 0x30
    1f54:	9006      	str	r0, [sp, #24]
    1f56:	4641      	mov	r1, r8
    1f58:	4658      	mov	r0, fp
    1f5a:	930b      	str	r3, [sp, #44]	; 0x2c
    1f5c:	f00b ffcc 	bl	def8 <__mcmp>
    1f60:	4632      	mov	r2, r6
    1f62:	4681      	mov	r9, r0
    1f64:	4621      	mov	r1, r4
    1f66:	4628      	mov	r0, r5
    1f68:	f00a f8c8 	bl	c0fc <__mdiff>
    1f6c:	68c2      	ldr	r2, [r0, #12]
    1f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f70:	4607      	mov	r7, r0
    1f72:	bb02      	cbnz	r2, 1fb6 <_dtoa_r+0xa7e>
    1f74:	4601      	mov	r1, r0
    1f76:	4658      	mov	r0, fp
    1f78:	f00b ffbe 	bl	def8 <__mcmp>
    1f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f7e:	4602      	mov	r2, r0
    1f80:	4639      	mov	r1, r7
    1f82:	4628      	mov	r0, r5
    1f84:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    1f88:	f009 fec8 	bl	bd1c <_Bfree>
    1f8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1f90:	9f08      	ldr	r7, [sp, #32]
    1f92:	ea43 0102 	orr.w	r1, r3, r2
    1f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f98:	430b      	orrs	r3, r1
    1f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f9c:	d10d      	bne.n	1fba <_dtoa_r+0xa82>
    1f9e:	2b39      	cmp	r3, #57	; 0x39
    1fa0:	d029      	beq.n	1ff6 <_dtoa_r+0xabe>
    1fa2:	f1b9 0f00 	cmp.w	r9, #0
    1fa6:	dd01      	ble.n	1fac <_dtoa_r+0xa74>
    1fa8:	9b06      	ldr	r3, [sp, #24]
    1faa:	3331      	adds	r3, #49	; 0x31
    1fac:	9a04      	ldr	r2, [sp, #16]
    1fae:	7013      	strb	r3, [r2, #0]
    1fb0:	e776      	b.n	1ea0 <_dtoa_r+0x968>
    1fb2:	4630      	mov	r0, r6
    1fb4:	e7b9      	b.n	1f2a <_dtoa_r+0x9f2>
    1fb6:	2201      	movs	r2, #1
    1fb8:	e7e2      	b.n	1f80 <_dtoa_r+0xa48>
    1fba:	f1b9 0f00 	cmp.w	r9, #0
    1fbe:	db06      	blt.n	1fce <_dtoa_r+0xa96>
    1fc0:	9922      	ldr	r1, [sp, #136]	; 0x88
    1fc2:	ea41 0909 	orr.w	r9, r1, r9
    1fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1fc8:	ea59 0101 	orrs.w	r1, r9, r1
    1fcc:	d120      	bne.n	2010 <_dtoa_r+0xad8>
    1fce:	2a00      	cmp	r2, #0
    1fd0:	ddec      	ble.n	1fac <_dtoa_r+0xa74>
    1fd2:	4659      	mov	r1, fp
    1fd4:	2201      	movs	r2, #1
    1fd6:	4628      	mov	r0, r5
    1fd8:	9308      	str	r3, [sp, #32]
    1fda:	f00a f81f 	bl	c01c <__lshift>
    1fde:	4621      	mov	r1, r4
    1fe0:	4683      	mov	fp, r0
    1fe2:	f00b ff89 	bl	def8 <__mcmp>
    1fe6:	2800      	cmp	r0, #0
    1fe8:	9b08      	ldr	r3, [sp, #32]
    1fea:	dc02      	bgt.n	1ff2 <_dtoa_r+0xaba>
    1fec:	d1de      	bne.n	1fac <_dtoa_r+0xa74>
    1fee:	07da      	lsls	r2, r3, #31
    1ff0:	d5dc      	bpl.n	1fac <_dtoa_r+0xa74>
    1ff2:	2b39      	cmp	r3, #57	; 0x39
    1ff4:	d1d8      	bne.n	1fa8 <_dtoa_r+0xa70>
    1ff6:	9a04      	ldr	r2, [sp, #16]
    1ff8:	2339      	movs	r3, #57	; 0x39
    1ffa:	7013      	strb	r3, [r2, #0]
    1ffc:	463b      	mov	r3, r7
    1ffe:	461f      	mov	r7, r3
    2000:	3b01      	subs	r3, #1
    2002:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2006:	2a39      	cmp	r2, #57	; 0x39
    2008:	d050      	beq.n	20ac <_dtoa_r+0xb74>
    200a:	3201      	adds	r2, #1
    200c:	701a      	strb	r2, [r3, #0]
    200e:	e747      	b.n	1ea0 <_dtoa_r+0x968>
    2010:	2a00      	cmp	r2, #0
    2012:	dd03      	ble.n	201c <_dtoa_r+0xae4>
    2014:	2b39      	cmp	r3, #57	; 0x39
    2016:	d0ee      	beq.n	1ff6 <_dtoa_r+0xabe>
    2018:	3301      	adds	r3, #1
    201a:	e7c7      	b.n	1fac <_dtoa_r+0xa74>
    201c:	9a08      	ldr	r2, [sp, #32]
    201e:	990a      	ldr	r1, [sp, #40]	; 0x28
    2020:	f802 3c01 	strb.w	r3, [r2, #-1]
    2024:	428a      	cmp	r2, r1
    2026:	d02a      	beq.n	207e <_dtoa_r+0xb46>
    2028:	4659      	mov	r1, fp
    202a:	2300      	movs	r3, #0
    202c:	220a      	movs	r2, #10
    202e:	4628      	mov	r0, r5
    2030:	f009 fe96 	bl	bd60 <__multadd>
    2034:	45b0      	cmp	r8, r6
    2036:	4683      	mov	fp, r0
    2038:	f04f 0300 	mov.w	r3, #0
    203c:	f04f 020a 	mov.w	r2, #10
    2040:	4641      	mov	r1, r8
    2042:	4628      	mov	r0, r5
    2044:	d107      	bne.n	2056 <_dtoa_r+0xb1e>
    2046:	f009 fe8b 	bl	bd60 <__multadd>
    204a:	4680      	mov	r8, r0
    204c:	4606      	mov	r6, r0
    204e:	9b08      	ldr	r3, [sp, #32]
    2050:	3301      	adds	r3, #1
    2052:	9308      	str	r3, [sp, #32]
    2054:	e775      	b.n	1f42 <_dtoa_r+0xa0a>
    2056:	f009 fe83 	bl	bd60 <__multadd>
    205a:	4631      	mov	r1, r6
    205c:	4680      	mov	r8, r0
    205e:	2300      	movs	r3, #0
    2060:	220a      	movs	r2, #10
    2062:	4628      	mov	r0, r5
    2064:	f009 fe7c 	bl	bd60 <__multadd>
    2068:	4606      	mov	r6, r0
    206a:	e7f0      	b.n	204e <_dtoa_r+0xb16>
    206c:	f1b9 0f00 	cmp.w	r9, #0
    2070:	9a03      	ldr	r2, [sp, #12]
    2072:	bfcc      	ite	gt
    2074:	464f      	movgt	r7, r9
    2076:	2701      	movle	r7, #1
    2078:	4417      	add	r7, r2
    207a:	f04f 0800 	mov.w	r8, #0
    207e:	4659      	mov	r1, fp
    2080:	2201      	movs	r2, #1
    2082:	4628      	mov	r0, r5
    2084:	9308      	str	r3, [sp, #32]
    2086:	f009 ffc9 	bl	c01c <__lshift>
    208a:	4621      	mov	r1, r4
    208c:	4683      	mov	fp, r0
    208e:	f00b ff33 	bl	def8 <__mcmp>
    2092:	2800      	cmp	r0, #0
    2094:	dcb2      	bgt.n	1ffc <_dtoa_r+0xac4>
    2096:	d102      	bne.n	209e <_dtoa_r+0xb66>
    2098:	9b08      	ldr	r3, [sp, #32]
    209a:	07db      	lsls	r3, r3, #31
    209c:	d4ae      	bmi.n	1ffc <_dtoa_r+0xac4>
    209e:	463b      	mov	r3, r7
    20a0:	461f      	mov	r7, r3
    20a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    20a6:	2a30      	cmp	r2, #48	; 0x30
    20a8:	d0fa      	beq.n	20a0 <_dtoa_r+0xb68>
    20aa:	e6f9      	b.n	1ea0 <_dtoa_r+0x968>
    20ac:	9a03      	ldr	r2, [sp, #12]
    20ae:	429a      	cmp	r2, r3
    20b0:	d1a5      	bne.n	1ffe <_dtoa_r+0xac6>
    20b2:	f10a 0a01 	add.w	sl, sl, #1
    20b6:	2331      	movs	r3, #49	; 0x31
    20b8:	e779      	b.n	1fae <_dtoa_r+0xa76>
    20ba:	4b14      	ldr	r3, [pc, #80]	; (210c <_dtoa_r+0xbd4>)
    20bc:	f7ff baa7 	b.w	160e <_dtoa_r+0xd6>
    20c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    20c2:	2b00      	cmp	r3, #0
    20c4:	f47f aa80 	bne.w	15c8 <_dtoa_r+0x90>
    20c8:	4b11      	ldr	r3, [pc, #68]	; (2110 <_dtoa_r+0xbd8>)
    20ca:	f7ff baa0 	b.w	160e <_dtoa_r+0xd6>
    20ce:	f1b9 0f00 	cmp.w	r9, #0
    20d2:	dc03      	bgt.n	20dc <_dtoa_r+0xba4>
    20d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    20d6:	2b02      	cmp	r3, #2
    20d8:	f73f aecb 	bgt.w	1e72 <_dtoa_r+0x93a>
    20dc:	9f03      	ldr	r7, [sp, #12]
    20de:	4621      	mov	r1, r4
    20e0:	4658      	mov	r0, fp
    20e2:	f00b fe00 	bl	dce6 <quorem>
    20e6:	f100 0330 	add.w	r3, r0, #48	; 0x30
    20ea:	f807 3b01 	strb.w	r3, [r7], #1
    20ee:	9a03      	ldr	r2, [sp, #12]
    20f0:	1aba      	subs	r2, r7, r2
    20f2:	4591      	cmp	r9, r2
    20f4:	ddba      	ble.n	206c <_dtoa_r+0xb34>
    20f6:	4659      	mov	r1, fp
    20f8:	2300      	movs	r3, #0
    20fa:	220a      	movs	r2, #10
    20fc:	4628      	mov	r0, r5
    20fe:	f009 fe2f 	bl	bd60 <__multadd>
    2102:	4683      	mov	fp, r0
    2104:	e7eb      	b.n	20de <_dtoa_r+0xba6>
    2106:	bf00      	nop
    2108:	00010e0e 	.word	0x00010e0e
    210c:	0000f7bd 	.word	0x0000f7bd
    2110:	00010d8e 	.word	0x00010d8e

00002114 <thread_D_code>:
void thread_D_code(void *argA , void *argB, void *argC){
    2114:	b5f0      	push	{r4, r5, r6, r7, lr}
    2116:	b085      	sub	sp, #20
    timing_init();
    2118:	f003 fbc6 	bl	58a8 <timing_init>
    timing_start();
    211c:	f003 fbd0 	bl	58c0 <timing_start>
        printk("\nTem obstaculos na CSA? Sim=1 / Nao=0 -->%d",obstaculos_na_CSA);
    2120:	4c19      	ldr	r4, [pc, #100]	; (2188 <thread_D_code+0x74>)
    2122:	4e1a      	ldr	r6, [pc, #104]	; (218c <thread_D_code+0x78>)
        printk("\nNumero de obstaculos detetados:%d",num_Obstaculos);
    2124:	4d1a      	ldr	r5, [pc, #104]	; (2190 <thread_D_code+0x7c>)
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	return board_timing_counter_get();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	return soc_timing_counter_get();
#else
	return arch_timing_counter_get();
    2126:	f003 f937 	bl	5398 <arch_timing_counter_get>
		start_time = timing_counter_get();
    212a:	e9cd 0100 	strd	r0, r1, [sp]
        printk("\nTem obstaculos na CSA? Sim=1 / Nao=0 -->%d",obstaculos_na_CSA);
    212e:	6821      	ldr	r1, [r4, #0]
    2130:	4630      	mov	r0, r6
    2132:	f00a fdf4 	bl	cd1e <printk>
        printk("\nNumero de obstaculos detetados:%d",num_Obstaculos);
    2136:	6829      	ldr	r1, [r5, #0]
    2138:	4816      	ldr	r0, [pc, #88]	; (2194 <thread_D_code+0x80>)
    213a:	f00a fdf0 	bl	cd1e <printk>
        printf("\nRobot position=%d, guideline angle = %f",pos_,angle);
    213e:	4b16      	ldr	r3, [pc, #88]	; (2198 <thread_D_code+0x84>)
    2140:	6818      	ldr	r0, [r3, #0]
    2142:	f7fe f991 	bl	468 <__aeabi_f2d>
    2146:	460b      	mov	r3, r1
    2148:	4914      	ldr	r1, [pc, #80]	; (219c <thread_D_code+0x88>)
    214a:	4602      	mov	r2, r0
    214c:	7809      	ldrb	r1, [r1, #0]
    214e:	4814      	ldr	r0, [pc, #80]	; (21a0 <thread_D_code+0x8c>)
    2150:	f009 f9b8 	bl	b4c4 <iprintf>
    2154:	f003 f920 	bl	5398 <arch_timing_counter_get>
		end_time = timing_counter_get();
    2158:	e9cd 0102 	strd	r0, r1, [sp, #8]
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	return board_timing_cycles_get(start, end);
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	return soc_timing_cycles_get(start, end);
#else
	return arch_timing_cycles_get(start, end);
    215c:	a902      	add	r1, sp, #8
    215e:	4668      	mov	r0, sp
    2160:	f00a ff3e 	bl	cfe0 <arch_timing_cycles_get>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	return board_timing_cycles_to_ns(cycles);
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	return soc_timing_cycles_to_ns(cycles);
#else
	return arch_timing_cycles_to_ns(cycles);
    2164:	f00a ff45 	bl	cff2 <arch_timing_cycles_to_ns>
    2168:	460b      	mov	r3, r1
		if (total_ns >time_taken_D){
    216a:	490e      	ldr	r1, [pc, #56]	; (21a4 <thread_D_code+0x90>)
    216c:	4602      	mov	r2, r0
    216e:	e9d1 7000 	ldrd	r7, r0, [r1]
    2172:	4297      	cmp	r7, r2
    2174:	4198      	sbcs	r0, r3
    2176:	d204      	bcs.n	2182 <thread_D_code+0x6e>
			printk("\nD took ->%lld (ns)",total_ns);
    2178:	480b      	ldr	r0, [pc, #44]	; (21a8 <thread_D_code+0x94>)
			time_taken_D = total_ns;
    217a:	e9c1 2300 	strd	r2, r3, [r1]
			printk("\nD took ->%lld (ns)",total_ns);
    217e:	f00a fdce 	bl	cd1e <printk>
		k_msleep(1000);
    2182:	f00a fd46 	bl	cc12 <k_msleep.constprop.0.isra.0>
		start_time = timing_counter_get();
    2186:	e7ce      	b.n	2126 <thread_D_code+0x12>
    2188:	20000998 	.word	0x20000998
    218c:	0000e8e8 	.word	0x0000e8e8
    2190:	20000994 	.word	0x20000994
    2194:	0000e914 	.word	0x0000e914
    2198:	20000970 	.word	0x20000970
    219c:	200052f4 	.word	0x200052f4
    21a0:	0000e937 	.word	0x0000e937
    21a4:	20000690 	.word	0x20000690
    21a8:	0000e960 	.word	0x0000e960

000021ac <uart_cb>:
{
    21ac:	b510      	push	{r4, lr}
    switch (evt->type) {
    21ae:	780b      	ldrb	r3, [r1, #0]
    21b0:	2b02      	cmp	r3, #2
    21b2:	d002      	beq.n	21ba <uart_cb+0xe>
    21b4:	2b05      	cmp	r3, #5
    21b6:	d00e      	beq.n	21d6 <uart_cb+0x2a>
}
    21b8:	bd10      	pop	{r4, pc}
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    21ba:	e9d1 0202 	ldrd	r0, r2, [r1, #8]
            memcpy(&rx_chars[uart_rxbuf_nchar],&(rx_buf[evt->data.rx.offset]),evt->data.rx.len); 
    21be:	4c0e      	ldr	r4, [pc, #56]	; (21f8 <uart_cb+0x4c>)
    21c0:	490e      	ldr	r1, [pc, #56]	; (21fc <uart_cb+0x50>)
    21c2:	6823      	ldr	r3, [r4, #0]
    21c4:	4401      	add	r1, r0
    21c6:	480e      	ldr	r0, [pc, #56]	; (2200 <uart_cb+0x54>)
    21c8:	4418      	add	r0, r3
    21ca:	f00b fc55 	bl	da78 <memcpy>
            uart_rxbuf_nchar++;           
    21ce:	6823      	ldr	r3, [r4, #0]
    21d0:	3301      	adds	r3, #1
    21d2:	6023      	str	r3, [r4, #0]
}
    21d4:	e7f0      	b.n	21b8 <uart_cb+0xc>
		    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    21d6:	4b0b      	ldr	r3, [pc, #44]	; (2204 <uart_cb+0x58>)
    21d8:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    21da:	6883      	ldr	r3, [r0, #8]
    21dc:	4907      	ldr	r1, [pc, #28]	; (21fc <uart_cb+0x50>)
    21de:	68dc      	ldr	r4, [r3, #12]
    21e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    21e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    21e8:	47a0      	blx	r4
            if (err) {
    21ea:	2800      	cmp	r0, #0
    21ec:	d0e4      	beq.n	21b8 <uart_cb+0xc>
                exit(FATAL_ERR);                
    21ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    21f2:	f008 fcad 	bl	ab50 <exit>
    21f6:	bf00      	nop
    21f8:	200009b4 	.word	0x200009b4
    21fc:	200052f5 	.word	0x200052f5
    2200:	200092f5 	.word	0x200092f5
    2204:	200009b0 	.word	0x200009b0

00002208 <main>:
void main(void) {
    2208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    220c:	2600      	movs	r6, #0
    220e:	b089      	sub	sp, #36	; 0x24
    2210:	2700      	movs	r7, #0
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2212:	2400      	movs	r4, #0
    2214:	2302      	movs	r3, #2
    2216:	e9cd 3403 	strd	r3, r4, [sp, #12]
    221a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    221e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2222:	4b59      	ldr	r3, [pc, #356]	; (2388 <main+0x180>)
    2224:	4959      	ldr	r1, [pc, #356]	; (238c <main+0x184>)
    2226:	9400      	str	r4, [sp, #0]
    2228:	f44f 6280 	mov.w	r2, #1024	; 0x400
    222c:	4858      	ldr	r0, [pc, #352]	; (2390 <main+0x188>)
    222e:	f006 fb29 	bl	8884 <z_impl_k_thread_create>
	thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
    2232:	4b58      	ldr	r3, [pc, #352]	; (2394 <main+0x18c>)
    2234:	6018      	str	r0, [r3, #0]
    2236:	2305      	movs	r3, #5
    2238:	e9cd 4302 	strd	r4, r3, [sp, #8]
    223c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    2240:	e9cd 4400 	strd	r4, r4, [sp]
    2244:	4b54      	ldr	r3, [pc, #336]	; (2398 <main+0x190>)
    2246:	4955      	ldr	r1, [pc, #340]	; (239c <main+0x194>)
    2248:	9404      	str	r4, [sp, #16]
    224a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    224e:	4854      	ldr	r0, [pc, #336]	; (23a0 <main+0x198>)
    2250:	f006 fb18 	bl	8884 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
    2254:	4b53      	ldr	r3, [pc, #332]	; (23a4 <main+0x19c>)
    2256:	6018      	str	r0, [r3, #0]
    2258:	2304      	movs	r3, #4
    225a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    225e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    2262:	e9cd 4400 	strd	r4, r4, [sp]
    2266:	4b50      	ldr	r3, [pc, #320]	; (23a8 <main+0x1a0>)
    2268:	4950      	ldr	r1, [pc, #320]	; (23ac <main+0x1a4>)
    226a:	9404      	str	r4, [sp, #16]
    226c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2270:	484f      	ldr	r0, [pc, #316]	; (23b0 <main+0x1a8>)
    2272:	f006 fb07 	bl	8884 <z_impl_k_thread_create>
    thread_C_tid = k_thread_create(&thread_C_data, thread_C_stack,
    2276:	4b4f      	ldr	r3, [pc, #316]	; (23b4 <main+0x1ac>)
    2278:	6018      	str	r0, [r3, #0]
    227a:	2303      	movs	r3, #3
    227c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    2280:	e9cd 6706 	strd	r6, r7, [sp, #24]
    2284:	e9cd 4400 	strd	r4, r4, [sp]
    2288:	4b4b      	ldr	r3, [pc, #300]	; (23b8 <main+0x1b0>)
    228a:	494c      	ldr	r1, [pc, #304]	; (23bc <main+0x1b4>)
    228c:	9404      	str	r4, [sp, #16]
    228e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2292:	484b      	ldr	r0, [pc, #300]	; (23c0 <main+0x1b8>)
    2294:	f006 faf6 	bl	8884 <z_impl_k_thread_create>
    thread_D_tid = k_thread_create(&thread_D_data, thread_D_stack,
    2298:	4b4a      	ldr	r3, [pc, #296]	; (23c4 <main+0x1bc>)
    229a:	6018      	str	r0, [r3, #0]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    229c:	484a      	ldr	r0, [pc, #296]	; (23c8 <main+0x1c0>)
    uart_dev= device_get_binding(DT_LABEL(UART_NODE));
    229e:	4d4b      	ldr	r5, [pc, #300]	; (23cc <main+0x1c4>)
    22a0:	f006 f812 	bl	82c8 <z_impl_device_get_binding>
    22a4:	6028      	str	r0, [r5, #0]
    if (uart_dev == NULL) {
    22a6:	b930      	cbnz	r0, 22b6 <main+0xae>
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NODE));
    22a8:	4947      	ldr	r1, [pc, #284]	; (23c8 <main+0x1c0>)
    22aa:	4849      	ldr	r0, [pc, #292]	; (23d0 <main+0x1c8>)
} 
    22ac:	b009      	add	sp, #36	; 0x24
    22ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    22b2:	f00a bd34 	b.w	cd1e <printk>
        printk("UART binding successful\n\r");
    22b6:	4847      	ldr	r0, [pc, #284]	; (23d4 <main+0x1cc>)
    22b8:	f00a fd31 	bl	cd1e <printk>
    err = uart_configure(uart_dev, &uart_cfg);
    22bc:	6828      	ldr	r0, [r5, #0]
	if (api->configure == NULL) {
    22be:	6883      	ldr	r3, [r0, #8]
    22c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22c2:	b92b      	cbnz	r3, 22d0 <main+0xc8>
        printk("uart_configure() error. Invalid configuration\n\r");
    22c4:	4844      	ldr	r0, [pc, #272]	; (23d8 <main+0x1d0>)
} 
    22c6:	b009      	add	sp, #36	; 0x24
    22c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        printk("uart_configure() error. Invalid configuration\n\r");
    22cc:	f00a bd27 	b.w	cd1e <printk>
	return api->configure(dev, cfg);
    22d0:	4942      	ldr	r1, [pc, #264]	; (23dc <main+0x1d4>)
    22d2:	4798      	blx	r3
    if (err == -ENOSYS) { /* If invalid configuration */
    22d4:	3058      	adds	r0, #88	; 0x58
    22d6:	d0f5      	beq.n	22c4 <main+0xbc>
    err = uart_callback_set(uart_dev, uart_cb, NULL);
    22d8:	6828      	ldr	r0, [r5, #0]
	if (api->callback_set == NULL) {
    22da:	6883      	ldr	r3, [r0, #8]
    22dc:	681b      	ldr	r3, [r3, #0]
    22de:	b133      	cbz	r3, 22ee <main+0xe6>
	return api->callback_set(dev, callback, user_data);
    22e0:	493f      	ldr	r1, [pc, #252]	; (23e0 <main+0x1d8>)
    22e2:	4622      	mov	r2, r4
    22e4:	4798      	blx	r3
    if (err) {
    22e6:	4601      	mov	r1, r0
    22e8:	b120      	cbz	r0, 22f4 <main+0xec>
        printk("uart_callback_set() error. Error code:%d\n\r",err);
    22ea:	483e      	ldr	r0, [pc, #248]	; (23e4 <main+0x1dc>)
    22ec:	e7de      	b.n	22ac <main+0xa4>
		return -ENOSYS;
    22ee:	f06f 0157 	mvn.w	r1, #87	; 0x57
    22f2:	e7fa      	b.n	22ea <main+0xe2>
    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    22f4:	6828      	ldr	r0, [r5, #0]
	return api->rx_enable(dev, buf, len, timeout);
    22f6:	6883      	ldr	r3, [r0, #8]
    22f8:	493b      	ldr	r1, [pc, #236]	; (23e8 <main+0x1e0>)
    22fa:	68dc      	ldr	r4, [r3, #12]
    22fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2304:	47a0      	blx	r4
    if (err) {
    2306:	4601      	mov	r1, r0
    2308:	bb68      	cbnz	r0, 2366 <main+0x15e>
        if(uart_rxbuf_nchar > 0) {
    230a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23ec <main+0x1e4>
			if (primeira_imagem ==0){
    230e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 23f0 <main+0x1e8>
    2312:	4d38      	ldr	r5, [pc, #224]	; (23f4 <main+0x1ec>)
        k_msleep(MAIN_SLEEP_TIME_MS);
    2314:	f00a fc7d 	bl	cc12 <k_msleep.constprop.0.isra.0>
        if(uart_rxbuf_nchar > 0) {
    2318:	f8d9 3000 	ldr.w	r3, [r9]
    231c:	2b00      	cmp	r3, #0
    231e:	ddf9      	ble.n	2314 <main+0x10c>
            uart_rxbuf_nchar = 0;           /* Reset counter */
    2320:	2400      	movs	r4, #0
    2322:	4a35      	ldr	r2, [pc, #212]	; (23f8 <main+0x1f0>)
    2324:	4b35      	ldr	r3, [pc, #212]	; (23fc <main+0x1f4>)
    2326:	f8c9 4000 	str.w	r4, [r9]
					contador_j++;
    232a:	3401      	adds	r4, #1
				img[contador_i][contador_j] = rx_chars[j];
    232c:	f812 1b01 	ldrb.w	r1, [r2], #1
    2330:	f803 1b01 	strb.w	r1, [r3], #1
			for (int j = 0;j< 128*128;j++){
    2334:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
    2338:	d1f7      	bne.n	232a <main+0x122>
			if (primeira_imagem ==0){
    233a:	f8da 3000 	ldr.w	r3, [sl]
    233e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2400 <main+0x1f8>
    2342:	4f30      	ldr	r7, [pc, #192]	; (2404 <main+0x1fc>)
    2344:	4e30      	ldr	r6, [pc, #192]	; (2408 <main+0x200>)
    2346:	b983      	cbnz	r3, 236a <main+0x162>
				cab_id = open_cab("cab",4,128*128,img);
    2348:	4b2c      	ldr	r3, [pc, #176]	; (23fc <main+0x1f4>)
    234a:	4830      	ldr	r0, [pc, #192]	; (240c <main+0x204>)
    234c:	4622      	mov	r2, r4
    234e:	2104      	movs	r1, #4
    2350:	f000 f952 	bl	25f8 <open_cab>
				primeira_imagem = 1;
    2354:	2301      	movs	r3, #1
				cab_id = open_cab("cab",4,128*128,img);
    2356:	6028      	str	r0, [r5, #0]
				primeira_imagem = 1;
    2358:	f8ca 3000 	str.w	r3, [sl]
				flag_A =1;
    235c:	f8c8 3000 	str.w	r3, [r8]
				flag_B =1;
    2360:	603b      	str	r3, [r7, #0]
				flag_C = 1;
    2362:	6033      	str	r3, [r6, #0]
				contador_j =0;
    2364:	e7d6      	b.n	2314 <main+0x10c>
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    2366:	482a      	ldr	r0, [pc, #168]	; (2410 <main+0x208>)
    2368:	e7a0      	b.n	22ac <main+0xa4>
				uint8_t *buffer = reserve(cab_id);
    236a:	6828      	ldr	r0, [r5, #0]
    236c:	f000 f9a8 	bl	26c0 <reserve>
    2370:	4922      	ldr	r1, [pc, #136]	; (23fc <main+0x1f4>)
    2372:	4683      	mov	fp, r0
    2374:	4622      	mov	r2, r4
    2376:	f00b fb7f 	bl	da78 <memcpy>
				put_mes(buffer,cab_id);
    237a:	6829      	ldr	r1, [r5, #0]
    237c:	4658      	mov	r0, fp
    237e:	f00a fc7e 	bl	cc7e <put_mes>
				flag_A =1;
    2382:	2301      	movs	r3, #1
    2384:	e7ea      	b.n	235c <main+0x154>
    2386:	bf00      	nop
    2388:	000024b9 	.word	0x000024b9
    238c:	2000d720 	.word	0x2000d720
    2390:	20000478 	.word	0x20000478
    2394:	200009a0 	.word	0x200009a0
    2398:	00002559 	.word	0x00002559
    239c:	2000db40 	.word	0x2000db40
    23a0:	200004f8 	.word	0x200004f8
    23a4:	200009a4 	.word	0x200009a4
    23a8:	00002415 	.word	0x00002415
    23ac:	2000df60 	.word	0x2000df60
    23b0:	20000578 	.word	0x20000578
    23b4:	200009a8 	.word	0x200009a8
    23b8:	00002115 	.word	0x00002115
    23bc:	2000e380 	.word	0x2000e380
    23c0:	200005f8 	.word	0x200005f8
    23c4:	200009ac 	.word	0x200009ac
    23c8:	0000e974 	.word	0x0000e974
    23cc:	200009b0 	.word	0x200009b0
    23d0:	0000e97b 	.word	0x0000e97b
    23d4:	0000e9a7 	.word	0x0000e9a7
    23d8:	0000e9c1 	.word	0x0000e9c1
    23dc:	0000e5a8 	.word	0x0000e5a8
    23e0:	000021ad 	.word	0x000021ad
    23e4:	0000e9f1 	.word	0x0000e9f1
    23e8:	200052f5 	.word	0x200052f5
    23ec:	200009b4 	.word	0x200009b4
    23f0:	2000099c 	.word	0x2000099c
    23f4:	20000974 	.word	0x20000974
    23f8:	200092f5 	.word	0x200092f5
    23fc:	200012f4 	.word	0x200012f4
    2400:	20000978 	.word	0x20000978
    2404:	2000097c 	.word	0x2000097c
    2408:	20000980 	.word	0x20000980
    240c:	0000ead4 	.word	0x0000ead4
    2410:	0000ea1c 	.word	0x0000ea1c

00002414 <thread_C_code>:
{
    2414:	b5f0      	push	{r4, r5, r6, r7, lr}
    2416:	b085      	sub	sp, #20
    timing_init();
    2418:	f003 fa46 	bl	58a8 <timing_init>
    timing_start();
    241c:	f003 fa50 	bl	58c0 <timing_start>
		if (flag_C ==1){
    2420:	4c1c      	ldr	r4, [pc, #112]	; (2494 <thread_C_code+0x80>)
			imagem = get_mes(cab_id);
    2422:	4d1d      	ldr	r5, [pc, #116]	; (2498 <thread_C_code+0x84>)
	return arch_timing_counter_get();
    2424:	f002 ffb8 	bl	5398 <arch_timing_counter_get>
		if (flag_C ==1){
    2428:	6823      	ldr	r3, [r4, #0]
    242a:	2b01      	cmp	r3, #1
        start_time = timing_counter_get();
    242c:	e9cd 0100 	strd	r0, r1, [sp]
		if (flag_C ==1){
    2430:	d115      	bne.n	245e <thread_C_code+0x4a>
			imagem = get_mes(cab_id);
    2432:	6828      	ldr	r0, [r5, #0]
    2434:	4f19      	ldr	r7, [pc, #100]	; (249c <thread_C_code+0x88>)
    2436:	4e1a      	ldr	r6, [pc, #104]	; (24a0 <thread_C_code+0x8c>)
    2438:	f000 f976 	bl	2728 <get_mes>
			if (primeira_imagem == 1){
    243c:	4b19      	ldr	r3, [pc, #100]	; (24a4 <thread_C_code+0x90>)
			imagem = get_mes(cab_id);
    243e:	6038      	str	r0, [r7, #0]
			if (primeira_imagem == 1){
    2440:	681b      	ldr	r3, [r3, #0]
    2442:	2b01      	cmp	r3, #1
    2444:	d103      	bne.n	244e <thread_C_code+0x3a>
				unget(imagem_C,cab_id);
    2446:	6829      	ldr	r1, [r5, #0]
    2448:	6830      	ldr	r0, [r6, #0]
    244a:	f000 f987 	bl	275c <unget>
			imagem_C = imagem;
    244e:	6838      	ldr	r0, [r7, #0]
			int res = guideLineSearch(imagem, &pos_, &angle);
    2450:	4a15      	ldr	r2, [pc, #84]	; (24a8 <thread_C_code+0x94>)
    2452:	4916      	ldr	r1, [pc, #88]	; (24ac <thread_C_code+0x98>)
			imagem_C = imagem;
    2454:	6030      	str	r0, [r6, #0]
			int res = guideLineSearch(imagem, &pos_, &angle);
    2456:	f7fe fd7f 	bl	f58 <guideLineSearch>
			flag_C =0;
    245a:	2300      	movs	r3, #0
    245c:	6023      	str	r3, [r4, #0]
    245e:	f002 ff9b 	bl	5398 <arch_timing_counter_get>
		end_time = timing_counter_get();
    2462:	e9cd 0102 	strd	r0, r1, [sp, #8]
	return arch_timing_cycles_get(start, end);
    2466:	a902      	add	r1, sp, #8
    2468:	4668      	mov	r0, sp
    246a:	f00a fdb9 	bl	cfe0 <arch_timing_cycles_get>
	return arch_timing_cycles_to_ns(cycles);
    246e:	f00a fdc0 	bl	cff2 <arch_timing_cycles_to_ns>
    2472:	460b      	mov	r3, r1
		if (total_ns >time_taken_C){
    2474:	490e      	ldr	r1, [pc, #56]	; (24b0 <thread_C_code+0x9c>)
    2476:	4602      	mov	r2, r0
    2478:	e9d1 6000 	ldrd	r6, r0, [r1]
    247c:	4296      	cmp	r6, r2
    247e:	4198      	sbcs	r0, r3
    2480:	d204      	bcs.n	248c <thread_C_code+0x78>
			printk("\nC took ->%lld (ns)",total_ns);
    2482:	480c      	ldr	r0, [pc, #48]	; (24b4 <thread_C_code+0xa0>)
			time_taken_C = total_ns;
    2484:	e9c1 2300 	strd	r2, r3, [r1]
			printk("\nC took ->%lld (ns)",total_ns);
    2488:	f00a fc49 	bl	cd1e <printk>
		k_msleep(1000);
    248c:	f00a fbc1 	bl	cc12 <k_msleep.constprop.0.isra.0>
        start_time = timing_counter_get();
    2490:	e7c8      	b.n	2424 <thread_C_code+0x10>
    2492:	bf00      	nop
    2494:	20000980 	.word	0x20000980
    2498:	20000974 	.word	0x20000974
    249c:	20000984 	.word	0x20000984
    24a0:	20000990 	.word	0x20000990
    24a4:	2000099c 	.word	0x2000099c
    24a8:	20000970 	.word	0x20000970
    24ac:	200052f4 	.word	0x200052f4
    24b0:	20000688 	.word	0x20000688
    24b4:	0000ea93 	.word	0x0000ea93

000024b8 <thread_A_code>:
{
    24b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ba:	b085      	sub	sp, #20
    timing_init();
    24bc:	f003 f9f4 	bl	58a8 <timing_init>
    timing_start();
    24c0:	f003 f9fe 	bl	58c0 <timing_start>
		if (flag_A ==1){
    24c4:	4c1c      	ldr	r4, [pc, #112]	; (2538 <thread_A_code+0x80>)
			imagem = get_mes(cab_id);
    24c6:	4d1d      	ldr	r5, [pc, #116]	; (253c <thread_A_code+0x84>)
	return arch_timing_counter_get();
    24c8:	f002 ff66 	bl	5398 <arch_timing_counter_get>
		if (flag_A ==1){
    24cc:	6823      	ldr	r3, [r4, #0]
    24ce:	2b01      	cmp	r3, #1
        start_time = timing_counter_get();
    24d0:	e9cd 0100 	strd	r0, r1, [sp]
		if (flag_A ==1){
    24d4:	d115      	bne.n	2502 <thread_A_code+0x4a>
			imagem = get_mes(cab_id);
    24d6:	6828      	ldr	r0, [r5, #0]
    24d8:	4f19      	ldr	r7, [pc, #100]	; (2540 <thread_A_code+0x88>)
    24da:	4e1a      	ldr	r6, [pc, #104]	; (2544 <thread_A_code+0x8c>)
    24dc:	f000 f924 	bl	2728 <get_mes>
			if (primeira_imagem == 1){
    24e0:	4b19      	ldr	r3, [pc, #100]	; (2548 <thread_A_code+0x90>)
			imagem = get_mes(cab_id);
    24e2:	6038      	str	r0, [r7, #0]
			if (primeira_imagem == 1){
    24e4:	681b      	ldr	r3, [r3, #0]
    24e6:	2b01      	cmp	r3, #1
    24e8:	d103      	bne.n	24f2 <thread_A_code+0x3a>
				unget(imagem_A,cab_id);
    24ea:	6829      	ldr	r1, [r5, #0]
    24ec:	6830      	ldr	r0, [r6, #0]
    24ee:	f000 f935 	bl	275c <unget>
			imagem_A = imagem;
    24f2:	6838      	ldr	r0, [r7, #0]
    24f4:	6030      	str	r0, [r6, #0]
			obstaculos_na_CSA = nearObstSearch(imagem);
    24f6:	f00a fb91 	bl	cc1c <nearObstSearch>
    24fa:	4b14      	ldr	r3, [pc, #80]	; (254c <thread_A_code+0x94>)
    24fc:	6018      	str	r0, [r3, #0]
			flag_A = 0;
    24fe:	2300      	movs	r3, #0
    2500:	6023      	str	r3, [r4, #0]
    2502:	f002 ff49 	bl	5398 <arch_timing_counter_get>
		end_time = timing_counter_get();
    2506:	e9cd 0102 	strd	r0, r1, [sp, #8]
	return arch_timing_cycles_get(start, end);
    250a:	a902      	add	r1, sp, #8
    250c:	4668      	mov	r0, sp
    250e:	f00a fd67 	bl	cfe0 <arch_timing_cycles_get>
	return arch_timing_cycles_to_ns(cycles);
    2512:	f00a fd6e 	bl	cff2 <arch_timing_cycles_to_ns>
    2516:	460b      	mov	r3, r1
		if (total_ns >time_taken_A){
    2518:	490d      	ldr	r1, [pc, #52]	; (2550 <thread_A_code+0x98>)
    251a:	4602      	mov	r2, r0
    251c:	e9d1 6000 	ldrd	r6, r0, [r1]
    2520:	4296      	cmp	r6, r2
    2522:	4198      	sbcs	r0, r3
    2524:	d204      	bcs.n	2530 <thread_A_code+0x78>
			printk("\nA took ->%lld (ns)",total_ns);
    2526:	480b      	ldr	r0, [pc, #44]	; (2554 <thread_A_code+0x9c>)
			time_taken_A = total_ns;
    2528:	e9c1 2300 	strd	r2, r3, [r1]
			printk("\nA took ->%lld (ns)",total_ns);
    252c:	f00a fbf7 	bl	cd1e <printk>
		k_msleep(1000);
    2530:	f00a fb6f 	bl	cc12 <k_msleep.constprop.0.isra.0>
        start_time = timing_counter_get();
    2534:	e7c8      	b.n	24c8 <thread_A_code+0x10>
    2536:	bf00      	nop
    2538:	20000978 	.word	0x20000978
    253c:	20000974 	.word	0x20000974
    2540:	20000984 	.word	0x20000984
    2544:	20000988 	.word	0x20000988
    2548:	2000099c 	.word	0x2000099c
    254c:	20000998 	.word	0x20000998
    2550:	20000678 	.word	0x20000678
    2554:	0000eaa7 	.word	0x0000eaa7

00002558 <thread_B_code>:
{
    2558:	b5f0      	push	{r4, r5, r6, r7, lr}
    255a:	b085      	sub	sp, #20
    timing_init();
    255c:	f003 f9a4 	bl	58a8 <timing_init>
    timing_start();
    2560:	f003 f9ae 	bl	58c0 <timing_start>
		if (flag_B ==1){
    2564:	4c1c      	ldr	r4, [pc, #112]	; (25d8 <thread_B_code+0x80>)
			imagem= get_mes(cab_id);
    2566:	4d1d      	ldr	r5, [pc, #116]	; (25dc <thread_B_code+0x84>)
	return arch_timing_counter_get();
    2568:	f002 ff16 	bl	5398 <arch_timing_counter_get>
		if (flag_B ==1){
    256c:	6823      	ldr	r3, [r4, #0]
    256e:	2b01      	cmp	r3, #1
		start_time = timing_counter_get();
    2570:	e9cd 0100 	strd	r0, r1, [sp]
		if (flag_B ==1){
    2574:	d115      	bne.n	25a2 <thread_B_code+0x4a>
			imagem= get_mes(cab_id);
    2576:	6828      	ldr	r0, [r5, #0]
    2578:	4f19      	ldr	r7, [pc, #100]	; (25e0 <thread_B_code+0x88>)
    257a:	4e1a      	ldr	r6, [pc, #104]	; (25e4 <thread_B_code+0x8c>)
    257c:	f000 f8d4 	bl	2728 <get_mes>
			if (primeira_imagem == 1){
    2580:	4b19      	ldr	r3, [pc, #100]	; (25e8 <thread_B_code+0x90>)
			imagem= get_mes(cab_id);
    2582:	6038      	str	r0, [r7, #0]
			if (primeira_imagem == 1){
    2584:	681b      	ldr	r3, [r3, #0]
    2586:	2b01      	cmp	r3, #1
    2588:	d103      	bne.n	2592 <thread_B_code+0x3a>
				unget(imagem_B,cab_id);
    258a:	6829      	ldr	r1, [r5, #0]
    258c:	6830      	ldr	r0, [r6, #0]
    258e:	f000 f8e5 	bl	275c <unget>
			imagem_B = imagem;
    2592:	6838      	ldr	r0, [r7, #0]
    2594:	6030      	str	r0, [r6, #0]
			num_Obstaculos = obstCount(imagem);
    2596:	f00a fb5a 	bl	cc4e <obstCount>
    259a:	4b14      	ldr	r3, [pc, #80]	; (25ec <thread_B_code+0x94>)
    259c:	6018      	str	r0, [r3, #0]
			flag_B =0;
    259e:	2300      	movs	r3, #0
    25a0:	6023      	str	r3, [r4, #0]
    25a2:	f002 fef9 	bl	5398 <arch_timing_counter_get>
		end_time = timing_counter_get();
    25a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
	return arch_timing_cycles_get(start, end);
    25aa:	a902      	add	r1, sp, #8
    25ac:	4668      	mov	r0, sp
    25ae:	f00a fd17 	bl	cfe0 <arch_timing_cycles_get>
	return arch_timing_cycles_to_ns(cycles);
    25b2:	f00a fd1e 	bl	cff2 <arch_timing_cycles_to_ns>
    25b6:	460b      	mov	r3, r1
		if (total_ns >time_taken_B){
    25b8:	490d      	ldr	r1, [pc, #52]	; (25f0 <thread_B_code+0x98>)
    25ba:	4602      	mov	r2, r0
    25bc:	e9d1 6000 	ldrd	r6, r0, [r1]
    25c0:	4296      	cmp	r6, r2
    25c2:	4198      	sbcs	r0, r3
    25c4:	d204      	bcs.n	25d0 <thread_B_code+0x78>
			printk("\nB took ->%lld (ns)",total_ns);
    25c6:	480b      	ldr	r0, [pc, #44]	; (25f4 <thread_B_code+0x9c>)
			time_taken_B = total_ns;
    25c8:	e9c1 2300 	strd	r2, r3, [r1]
			printk("\nB took ->%lld (ns)",total_ns);
    25cc:	f00a fba7 	bl	cd1e <printk>
		k_msleep(1000);
    25d0:	f00a fb1f 	bl	cc12 <k_msleep.constprop.0.isra.0>
		start_time = timing_counter_get();
    25d4:	e7c8      	b.n	2568 <thread_B_code+0x10>
    25d6:	bf00      	nop
    25d8:	2000097c 	.word	0x2000097c
    25dc:	20000974 	.word	0x20000974
    25e0:	20000984 	.word	0x20000984
    25e4:	2000098c 	.word	0x2000098c
    25e8:	2000099c 	.word	0x2000099c
    25ec:	20000994 	.word	0x20000994
    25f0:	20000680 	.word	0x20000680
    25f4:	0000eabb 	.word	0x0000eabb

000025f8 <open_cab>:
int glob_dim=0;
uint8_t *  aux1;

int pos = 0;

cab * open_cab(char * name,int num,int dim, uint8_t *  first){
    25f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25fc:	b083      	sub	sp, #12
    25fe:	af00      	add	r7, sp, #0
    
    glob_num = num+1;
    2600:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 26b4 <open_cab+0xbc>
cab * open_cab(char * name,int num,int dim, uint8_t *  first){
    2604:	607b      	str	r3, [r7, #4]
    glob_dim = dim;
    2606:	4b2c      	ldr	r3, [pc, #176]	; (26b8 <open_cab+0xc0>)
    glob_num = num+1;
    2608:	f101 0a01 	add.w	sl, r1, #1
cab * open_cab(char * name,int num,int dim, uint8_t *  first){
    260c:	4606      	mov	r6, r0
    

    cab* ptr = (cab*)malloc(sizeof(cab));
    260e:	2018      	movs	r0, #24
cab * open_cab(char * name,int num,int dim, uint8_t *  first){
    2610:	4688      	mov	r8, r1
    2612:	4614      	mov	r4, r2
    glob_num = num+1;
    2614:	f8cb a000 	str.w	sl, [fp]
    glob_dim = dim;
    2618:	601a      	str	r2, [r3, #0]
    cab* ptr = (cab*)malloc(sizeof(cab));
    261a:	f008 faad 	bl	ab78 <malloc>
    if (ptr == NULL) { perror("open_cab"); exit(2); }
    261e:	4681      	mov	r9, r0
    2620:	b928      	cbnz	r0, 262e <open_cab+0x36>
    memcpy(ptr->array,aux,sizeof(aux));
    
    uint8_t * s ;
    s =  ( uint8_t * ) malloc((num+1)*dim*sizeof( uint8_t  ));
    // printf("%d",(num+1)*dim*sizeof( uint8_t  ));
    if (s == NULL) { free(ptr); perror("open_cab"); exit(2); }
    2622:	4826      	ldr	r0, [pc, #152]	; (26bc <open_cab+0xc4>)
    2624:	f008 ff46 	bl	b4b4 <perror>
    2628:	2002      	movs	r0, #2
    262a:	f008 fa91 	bl	ab50 <exit>
    char *str = (char*) malloc(strlen(name)*sizeof(char));
    262e:	4630      	mov	r0, r6
    2630:	f7fe fc87 	bl	f42 <strlen>
    2634:	f008 faa0 	bl	ab78 <malloc>
    2638:	4605      	mov	r5, r0
    int *a = (int*)malloc((num+1)*sizeof(int));
    263a:	ea4f 008a 	mov.w	r0, sl, lsl #2
    263e:	f008 fa9b 	bl	ab78 <malloc>
    int aux[glob_num];
    2642:	f8db 3000 	ldr.w	r3, [fp]
    ptr->array = a;
    2646:	f8c9 000c 	str.w	r0, [r9, #12]
    int aux[glob_num];
    264a:	009a      	lsls	r2, r3, #2
    264c:	1dd1      	adds	r1, r2, #7
    264e:	f021 0107 	bic.w	r1, r1, #7
    2652:	ebad 0d01 	sub.w	sp, sp, r1
    for (int i=0;i< glob_num;i++){
    2656:	f04f 0c00 	mov.w	ip, #0
    int aux[glob_num];
    265a:	4669      	mov	r1, sp
        aux[i] =0;
    265c:	46e3      	mov	fp, ip
    for (int i=0;i< glob_num;i++){
    265e:	459c      	cmp	ip, r3
    2660:	db0b      	blt.n	267a <open_cab+0x82>
    2662:	f00b fa09 	bl	da78 <memcpy>
    s =  ( uint8_t * ) malloc((num+1)*dim*sizeof( uint8_t  ));
    2666:	fb04 f00a 	mul.w	r0, r4, sl
    266a:	f008 fa85 	bl	ab78 <malloc>
    if (s == NULL) { free(ptr); perror("open_cab"); exit(2); }
    266e:	4682      	mov	sl, r0
    2670:	b940      	cbnz	r0, 2684 <open_cab+0x8c>
    2672:	4648      	mov	r0, r9
    2674:	f008 fa88 	bl	ab88 <free>
    2678:	e7d3      	b.n	2622 <open_cab+0x2a>
        aux[i] =0;
    267a:	f841 b02c 	str.w	fp, [r1, ip, lsl #2]
    for (int i=0;i< glob_num;i++){
    267e:	f10c 0c01 	add.w	ip, ip, #1
    2682:	e7ec      	b.n	265e <open_cab+0x66>

    
    
    ptr->num = num;
    ptr->dim = dim;
    2684:	e9c9 4801 	strd	r4, r8, [r9, #4]
    
    ptr->name = str;   
    2688:	f8c9 5000 	str.w	r5, [r9]
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    268c:	4631      	mov	r1, r6
    268e:	4628      	mov	r0, r5
    2690:	f00b fb13 	bl	dcba <strcpy>
    2694:	2200      	movs	r2, #0
    strcpy(ptr->name, name);

    
    
    for (int i=0;i<dim;i++){
    2696:	42a2      	cmp	r2, r4
    2698:	db06      	blt.n	26a8 <open_cab+0xb0>
    ptr->img_base = &s[0];
    ptr->img_last = &s[0];
    
    return ptr;
    
}
    269a:	4648      	mov	r0, r9
    269c:	370c      	adds	r7, #12
    ptr->img_last = &s[0];
    269e:	e9c9 aa04 	strd	sl, sl, [r9, #16]
}
    26a2:	46bd      	mov	sp, r7
    26a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        s[i] = first[i];
    26a8:	687b      	ldr	r3, [r7, #4]
    26aa:	5c99      	ldrb	r1, [r3, r2]
    26ac:	f80a 1002 	strb.w	r1, [sl, r2]
    for (int i=0;i<dim;i++){
    26b0:	3201      	adds	r2, #1
    26b2:	e7f0      	b.n	2696 <open_cab+0x9e>
    26b4:	200009bc 	.word	0x200009bc
    26b8:	200009b8 	.word	0x200009b8
    26bc:	0000eacf 	.word	0x0000eacf

000026c0 <reserve>:

uint8_t* reserve(cab * cab_id){
    26c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26c2:	4602      	mov	r2, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    26c4:	f04f 0320 	mov.w	r3, #32
    26c8:	f3ef 8511 	mrs	r5, BASEPRI
    26cc:	f383 8812 	msr	BASEPRI_MAX, r3
    26d0:	f3bf 8f6f 	isb	sy
    int key = irq_lock();
    pos =0;
    uint8_t* aux_base = cab_id->img_base;


    for(int i = 0;i< glob_num;i++){
    26d4:	4911      	ldr	r1, [pc, #68]	; (271c <reserve+0x5c>)
    pos =0;
    26d6:	4c12      	ldr	r4, [pc, #72]	; (2720 <reserve+0x60>)
    for(int i = 0;i< glob_num;i++){
    26d8:	680e      	ldr	r6, [r1, #0]
            // printf("\npos: %d",pos);
            irq_unlock(key);
            return aux_base;
        }
        else{
            aux_base = aux_base + glob_dim;
    26da:	4912      	ldr	r1, [pc, #72]	; (2724 <reserve+0x64>)
    uint8_t* aux_base = cab_id->img_base;
    26dc:	6900      	ldr	r0, [r0, #16]
            aux_base = aux_base + glob_dim;
    26de:	f8d1 c000 	ldr.w	ip, [r1]
    pos =0;
    26e2:	2300      	movs	r3, #0
    26e4:	6023      	str	r3, [r4, #0]
    for(int i = 0;i< glob_num;i++){
    26e6:	429e      	cmp	r6, r3
    26e8:	dc05      	bgt.n	26f6 <reserve+0x36>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    26ea:	f385 8811 	msr	BASEPRI, r5
    26ee:	f3bf 8f6f 	isb	sy
        }
    }
    
    // printf("\n RESERVE NÃO É POSSIVEL - NAO HA BUFFERS DISPONIVEIS (%d BUFFERS EM USO)",pos);
    irq_unlock(key);
    return NULL;
    26f2:	2000      	movs	r0, #0
    26f4:	e00b      	b.n	270e <reserve+0x4e>
        if (aux_base !=  cab_id->img_last && cab_id->array[pos]==0){
    26f6:	6957      	ldr	r7, [r2, #20]
    26f8:	6821      	ldr	r1, [r4, #0]
    26fa:	4287      	cmp	r7, r0
    26fc:	d008      	beq.n	2710 <reserve+0x50>
    26fe:	68d7      	ldr	r7, [r2, #12]
    2700:	f857 7021 	ldr.w	r7, [r7, r1, lsl #2]
    2704:	b927      	cbnz	r7, 2710 <reserve+0x50>
    2706:	f385 8811 	msr	BASEPRI, r5
    270a:	f3bf 8f6f 	isb	sy
   
    
    
    

}
    270e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pos++;
    2710:	3101      	adds	r1, #1
            aux_base = aux_base + glob_dim;
    2712:	4460      	add	r0, ip
            pos++;
    2714:	6021      	str	r1, [r4, #0]
    for(int i = 0;i< glob_num;i++){
    2716:	3301      	adds	r3, #1
    2718:	e7e5      	b.n	26e6 <reserve+0x26>
    271a:	bf00      	nop
    271c:	200009bc 	.word	0x200009bc
    2720:	200009c0 	.word	0x200009c0
    2724:	200009b8 	.word	0x200009b8

00002728 <get_mes>:
   
    
   
}

uint8_t* get_mes(cab * cab_id){
    2728:	b510      	push	{r4, lr}
    272a:	4603      	mov	r3, r0
	__asm__ volatile(
    272c:	f04f 0220 	mov.w	r2, #32
    2730:	f3ef 8411 	mrs	r4, BASEPRI
    2734:	f382 8812 	msr	BASEPRI_MAX, r2
    2738:	f3bf 8f6f 	isb	sy
// 				get_array();
// 			printf("]");
    int key = irq_lock();
    uint8_t* get_mes = cab_id->img_last;
    // printf("\nAUmentei????");
    cab_id->array[pos]=cab_id->array[pos]+1;
    273c:	4a06      	ldr	r2, [pc, #24]	; (2758 <get_mes+0x30>)
    uint8_t* get_mes = cab_id->img_last;
    273e:	6940      	ldr	r0, [r0, #20]
    cab_id->array[pos]=cab_id->array[pos]+1;
    2740:	6811      	ldr	r1, [r2, #0]
    2742:	68da      	ldr	r2, [r3, #12]
    2744:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    2748:	3301      	adds	r3, #1
    274a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	__asm__ volatile(
    274e:	f384 8811 	msr	BASEPRI, r4
    2752:	f3bf 8f6f 	isb	sy
    irq_unlock(key);
    return get_mes ;
    
    
}
    2756:	bd10      	pop	{r4, pc}
    2758:	200009c0 	.word	0x200009c0

0000275c <unget>:

void unget(uint8_t * mes_pointer, cab * cab_id){
    275c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    275e:	f04f 0320 	mov.w	r3, #32
    2762:	f3ef 8411 	mrs	r4, BASEPRI
    2766:	f383 8812 	msr	BASEPRI_MAX, r3
    276a:	f3bf 8f6f 	isb	sy
	// 			get_array();
	// 		printf("]");
    int key = irq_lock();
    uint8_t* aux_base = cab_id->img_base;
    int i;
    for(i = 0;i< glob_num;i++){
    276e:	4b0f      	ldr	r3, [pc, #60]	; (27ac <unget+0x50>)
    uint8_t* aux_base = cab_id->img_base;
    2770:	690a      	ldr	r2, [r1, #16]
    for(i = 0;i< glob_num;i++){
    2772:	681d      	ldr	r5, [r3, #0]
        if(aux_base == mes_pointer){
            break;
        }
        aux_base = aux_base + glob_dim; 
    2774:	4b0e      	ldr	r3, [pc, #56]	; (27b0 <unget+0x54>)
    2776:	681e      	ldr	r6, [r3, #0]
    for(i = 0;i< glob_num;i++){
    2778:	2300      	movs	r3, #0
    277a:	429d      	cmp	r5, r3
    277c:	dd01      	ble.n	2782 <unget+0x26>
        if(aux_base == mes_pointer){
    277e:	4282      	cmp	r2, r0
    2780:	d10a      	bne.n	2798 <unget+0x3c>
    }
    // printf("\nI:%d",i);
    if(cab_id->array[i]>0){
    2782:	68ca      	ldr	r2, [r1, #12]
    2784:	009d      	lsls	r5, r3, #2
    2786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    278a:	2b00      	cmp	r3, #0
    278c:	dc07      	bgt.n	279e <unget+0x42>
	__asm__ volatile(
    278e:	f384 8811 	msr	BASEPRI, r4
    2792:	f3bf 8f6f 	isb	sy
    } else {
        // printf("\nJÁ NÃO TEM TAREFAS");
    }
    
    irq_unlock(key);
}
    2796:	bd70      	pop	{r4, r5, r6, pc}
        aux_base = aux_base + glob_dim; 
    2798:	4432      	add	r2, r6
    for(i = 0;i< glob_num;i++){
    279a:	3301      	adds	r3, #1
    279c:	e7ed      	b.n	277a <unget+0x1e>
        if(mes_pointer != cab_id->img_last){
    279e:	6949      	ldr	r1, [r1, #20]
    27a0:	4281      	cmp	r1, r0
            cab_id->array[i]=cab_id->array[i]-1;
    27a2:	bf1c      	itt	ne
    27a4:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    27a8:	5153      	strne	r3, [r2, r5]
    27aa:	e7f0      	b.n	278e <unget+0x32>
    27ac:	200009bc 	.word	0x200009bc
    27b0:	200009b8 	.word	0x200009b8

000027b4 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    27b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27b8:	b08d      	sub	sp, #52	; 0x34
    27ba:	461f      	mov	r7, r3
    27bc:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    27be:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    27c2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    27c6:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    27c8:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    27ca:	0782      	lsls	r2, r0, #30
    27cc:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    27d0:	9304      	str	r3, [sp, #16]
{
    27d2:	4605      	mov	r5, r0
    27d4:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    27d6:	f040 8258 	bne.w	2c8a <cbvprintf_package+0x4d6>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    27da:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    27dc:	2800      	cmp	r0, #0
    27de:	f040 8257 	bne.w	2c90 <cbvprintf_package+0x4dc>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    27e2:	f001 0607 	and.w	r6, r1, #7
    27e6:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    27e8:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    27ec:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
    27f0:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
    27f4:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    27f6:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    27fa:	4652      	mov	r2, sl
	bool parsing = false;
    27fc:	4651      	mov	r1, sl
	size = sizeof(char *);
    27fe:	f8cd 8000 	str.w	r8, [sp]

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    2802:	b105      	cbz	r5, 2806 <cbvprintf_package+0x52>
				*(const char **)buf = s;
    2804:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2806:	9804      	ldr	r0, [sp, #16]
    2808:	2800      	cmp	r0, #0
    280a:	dc07      	bgt.n	281c <cbvprintf_package+0x68>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    280c:	48cb      	ldr	r0, [pc, #812]	; (2b3c <cbvprintf_package+0x388>)
    280e:	4287      	cmp	r7, r0
    2810:	f0c0 8148 	bcc.w	2aa4 <cbvprintf_package+0x2f0>
    2814:	48ca      	ldr	r0, [pc, #808]	; (2b40 <cbvprintf_package+0x38c>)
    2816:	4287      	cmp	r7, r0
    2818:	f080 8144 	bcs.w	2aa4 <cbvprintf_package+0x2f0>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    281c:	9802      	ldr	r0, [sp, #8]
    281e:	f010 0e02 	ands.w	lr, r0, #2
    2822:	f000 8164 	beq.w	2aee <cbvprintf_package+0x33a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2826:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    282a:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    282c:	f1be 0f00 	cmp.w	lr, #0
    2830:	f000 813e 	beq.w	2ab0 <cbvprintf_package+0x2fc>
    2834:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    2838:	f0c0 813a 	bcc.w	2ab0 <cbvprintf_package+0x2fc>
					__ASSERT(false, "String with too many arguments");
    283c:	49c1      	ldr	r1, [pc, #772]	; (2b44 <cbvprintf_package+0x390>)
    283e:	4ac2      	ldr	r2, [pc, #776]	; (2b48 <cbvprintf_package+0x394>)
    2840:	48c2      	ldr	r0, [pc, #776]	; (2b4c <cbvprintf_package+0x398>)
    2842:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    2846:	f00a fb1e 	bl	ce86 <assert_print>
    284a:	48c1      	ldr	r0, [pc, #772]	; (2b50 <cbvprintf_package+0x39c>)
    284c:	f00a fb1b 	bl	ce86 <assert_print>
    2850:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
    2854:	48bc      	ldr	r0, [pc, #752]	; (2b48 <cbvprintf_package+0x394>)
    2856:	f00a fb0f 	bl	ce78 <assert_post_action>
					return -EINVAL;
    285a:	f06f 0015 	mvn.w	r0, #21
    285e:	e0fb      	b.n	2a58 <cbvprintf_package+0x2a4>
		if (!parsing) {
    2860:	b941      	cbnz	r1, 2874 <cbvprintf_package+0xc0>
			if (*fmt == '%') {
    2862:	2825      	cmp	r0, #37	; 0x25
    2864:	f040 8147 	bne.w	2af6 <cbvprintf_package+0x342>
				parsing = true;
    2868:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    286a:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
    286e:	f8cd 8000 	str.w	r8, [sp]
    2872:	e140      	b.n	2af6 <cbvprintf_package+0x342>
		switch (*fmt) {
    2874:	282b      	cmp	r0, #43	; 0x2b
    2876:	d825      	bhi.n	28c4 <cbvprintf_package+0x110>
    2878:	281f      	cmp	r0, #31
    287a:	d801      	bhi.n	2880 <cbvprintf_package+0xcc>
			parsing = false;
    287c:	2100      	movs	r1, #0
    287e:	e13a      	b.n	2af6 <cbvprintf_package+0x342>
		switch (*fmt) {
    2880:	f1a0 0c20 	sub.w	ip, r0, #32
    2884:	f1bc 0f0b 	cmp.w	ip, #11
    2888:	d8f8      	bhi.n	287c <cbvprintf_package+0xc8>
    288a:	f20f 0e08 	addw	lr, pc, #8
    288e:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    2892:	bf00      	nop
    2894:	00002af7 	.word	0x00002af7
    2898:	0000287d 	.word	0x0000287d
    289c:	0000287d 	.word	0x0000287d
    28a0:	00002af7 	.word	0x00002af7
    28a4:	0000287d 	.word	0x0000287d
    28a8:	0000287d 	.word	0x0000287d
    28ac:	0000287d 	.word	0x0000287d
    28b0:	0000287d 	.word	0x0000287d
    28b4:	0000287d 	.word	0x0000287d
    28b8:	0000287d 	.word	0x0000287d
    28bc:	00002a73 	.word	0x00002a73
    28c0:	00002af7 	.word	0x00002af7
    28c4:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
    28c8:	fa5f fe8c 	uxtb.w	lr, ip
    28cc:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
    28d0:	d8d4      	bhi.n	287c <cbvprintf_package+0xc8>
    28d2:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
    28d6:	d8d1      	bhi.n	287c <cbvprintf_package+0xc8>
    28d8:	f20f 0e04 	addw	lr, pc, #4
    28dc:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    28e0:	00002af7 	.word	0x00002af7
    28e4:	00002af7 	.word	0x00002af7
    28e8:	0000287d 	.word	0x0000287d
    28ec:	00002af7 	.word	0x00002af7
    28f0:	00002af7 	.word	0x00002af7
    28f4:	00002af7 	.word	0x00002af7
    28f8:	00002af7 	.word	0x00002af7
    28fc:	00002af7 	.word	0x00002af7
    2900:	00002af7 	.word	0x00002af7
    2904:	00002af7 	.word	0x00002af7
    2908:	00002af7 	.word	0x00002af7
    290c:	00002af7 	.word	0x00002af7
    2910:	00002af7 	.word	0x00002af7
    2914:	0000287d 	.word	0x0000287d
    2918:	0000287d 	.word	0x0000287d
    291c:	0000287d 	.word	0x0000287d
    2920:	0000287d 	.word	0x0000287d
    2924:	0000287d 	.word	0x0000287d
    2928:	0000287d 	.word	0x0000287d
    292c:	0000287d 	.word	0x0000287d
    2930:	00002a37 	.word	0x00002a37
    2934:	0000287d 	.word	0x0000287d
    2938:	0000287d 	.word	0x0000287d
    293c:	0000287d 	.word	0x0000287d
    2940:	00002a37 	.word	0x00002a37
    2944:	00002a37 	.word	0x00002a37
    2948:	00002a37 	.word	0x00002a37
    294c:	0000287d 	.word	0x0000287d
    2950:	0000287d 	.word	0x0000287d
    2954:	0000287d 	.word	0x0000287d
    2958:	0000287d 	.word	0x0000287d
    295c:	00002af7 	.word	0x00002af7
    2960:	0000287d 	.word	0x0000287d
    2964:	0000287d 	.word	0x0000287d
    2968:	0000287d 	.word	0x0000287d
    296c:	0000287d 	.word	0x0000287d
    2970:	0000287d 	.word	0x0000287d
    2974:	0000287d 	.word	0x0000287d
    2978:	0000287d 	.word	0x0000287d
    297c:	0000287d 	.word	0x0000287d
    2980:	0000287d 	.word	0x0000287d
    2984:	0000287d 	.word	0x0000287d
    2988:	0000287d 	.word	0x0000287d
    298c:	00002a19 	.word	0x00002a19
    2990:	0000287d 	.word	0x0000287d
    2994:	0000287d 	.word	0x0000287d
    2998:	0000287d 	.word	0x0000287d
    299c:	0000287d 	.word	0x0000287d
    29a0:	0000287d 	.word	0x0000287d
    29a4:	0000287d 	.word	0x0000287d
    29a8:	0000287d 	.word	0x0000287d
    29ac:	0000287d 	.word	0x0000287d
    29b0:	00002a37 	.word	0x00002a37
    29b4:	0000287d 	.word	0x0000287d
    29b8:	00002a19 	.word	0x00002a19
    29bc:	00002a19 	.word	0x00002a19
    29c0:	00002a37 	.word	0x00002a37
    29c4:	00002a37 	.word	0x00002a37
    29c8:	00002a37 	.word	0x00002a37
    29cc:	00002af7 	.word	0x00002af7
    29d0:	00002a19 	.word	0x00002a19
    29d4:	00002a67 	.word	0x00002a67
    29d8:	0000287d 	.word	0x0000287d
    29dc:	00002af7 	.word	0x00002af7
    29e0:	0000287d 	.word	0x0000287d
    29e4:	00002a6d 	.word	0x00002a6d
    29e8:	00002a19 	.word	0x00002a19
    29ec:	00002a6d 	.word	0x00002a6d
    29f0:	0000287d 	.word	0x0000287d
    29f4:	0000287d 	.word	0x0000287d
    29f8:	00002a6d 	.word	0x00002a6d
    29fc:	0000286b 	.word	0x0000286b
    2a00:	00002a19 	.word	0x00002a19
    2a04:	0000287d 	.word	0x0000287d
    2a08:	0000287d 	.word	0x0000287d
    2a0c:	00002a19 	.word	0x00002a19
    2a10:	0000287d 	.word	0x0000287d
    2a14:	0000286b 	.word	0x0000286b
			if (fmt[-1] == 'l') {
    2a18:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    2a1c:	296c      	cmp	r1, #108	; 0x6c
    2a1e:	d127      	bne.n	2a70 <cbvprintf_package+0x2bc>
				if (fmt[-2] == 'l') {
    2a20:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    2a24:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
    2a26:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
    2a2a:	d038      	beq.n	2a9e <cbvprintf_package+0x2ea>
			align = VA_STACK_ALIGN(void *);
    2a2c:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
    2a30:	f8cd 8000 	str.w	r8, [sp]
    2a34:	e01d      	b.n	2a72 <cbvprintf_package+0x2be>
				v.ld = va_arg(ap, long double);
    2a36:	f109 0907 	add.w	r9, r9, #7
    2a3a:	f029 0907 	bic.w	r9, r9, #7
			buf = (void *) ROUND_UP(buf, align);
    2a3e:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    2a40:	e8f9 0102 	ldrd	r0, r1, [r9], #8
			buf = (void *) ROUND_UP(buf, align);
    2a44:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    2a48:	b15d      	cbz	r5, 2a62 <cbvprintf_package+0x2ae>
				if (BUF_OFFSET + size > len) {
    2a4a:	f8dd e014 	ldr.w	lr, [sp, #20]
    2a4e:	44a6      	add	lr, r4
    2a50:	45b6      	cmp	lr, r6
    2a52:	d904      	bls.n	2a5e <cbvprintf_package+0x2aa>
					return -ENOSPC;
    2a54:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    2a58:	b00d      	add	sp, #52	; 0x34
    2a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
    2a5e:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
    2a62:	3408      	adds	r4, #8
			parsing = false;
    2a64:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
    2a66:	f04f 0808 	mov.w	r8, #8
    2a6a:	e700      	b.n	286e <cbvprintf_package+0xba>
			parsing = false;
    2a6c:	2100      	movs	r1, #0
    2a6e:	e7dd      	b.n	2a2c <cbvprintf_package+0x278>
			parsing = false;
    2a70:	2100      	movs	r1, #0
		buf = (void *) ROUND_UP(buf, align);
    2a72:	3c01      	subs	r4, #1
    2a74:	4444      	add	r4, r8
    2a76:	f1c8 0c00 	rsb	ip, r8, #0
    2a7a:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    2a7e:	b135      	cbz	r5, 2a8e <cbvprintf_package+0x2da>
    2a80:	f8dd c000 	ldr.w	ip, [sp]
    2a84:	ebac 0c05 	sub.w	ip, ip, r5
    2a88:	44a4      	add	ip, r4
    2a8a:	4566      	cmp	r6, ip
    2a8c:	d3e2      	bcc.n	2a54 <cbvprintf_package+0x2a0>
		if (*fmt == 's') {
    2a8e:	2873      	cmp	r0, #115	; 0x73
    2a90:	d170      	bne.n	2b74 <cbvprintf_package+0x3c0>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2a92:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
    2a94:	f859 7b04 	ldr.w	r7, [r9], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2a98:	3801      	subs	r0, #1
    2a9a:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    2a9c:	e6b1      	b.n	2802 <cbvprintf_package+0x4e>
					align = VA_STACK_ALIGN(long long);
    2a9e:	f04f 0808 	mov.w	r8, #8
    2aa2:	e7c5      	b.n	2a30 <cbvprintf_package+0x27c>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    2aa4:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2aa6:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    2aaa:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
    2aae:	e6bc      	b.n	282a <cbvprintf_package+0x76>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    2ab0:	2a0f      	cmp	r2, #15
    2ab2:	d90c      	bls.n	2ace <cbvprintf_package+0x31a>
					__ASSERT(false, "str_ptr_pos[] too small");
    2ab4:	4923      	ldr	r1, [pc, #140]	; (2b44 <cbvprintf_package+0x390>)
    2ab6:	4a24      	ldr	r2, [pc, #144]	; (2b48 <cbvprintf_package+0x394>)
    2ab8:	4824      	ldr	r0, [pc, #144]	; (2b4c <cbvprintf_package+0x398>)
    2aba:	f240 13f5 	movw	r3, #501	; 0x1f5
    2abe:	f00a f9e2 	bl	ce86 <assert_print>
    2ac2:	4824      	ldr	r0, [pc, #144]	; (2b54 <cbvprintf_package+0x3a0>)
    2ac4:	f00a f9df 	bl	ce86 <assert_print>
    2ac8:	f240 11f5 	movw	r1, #501	; 0x1f5
    2acc:	e6c2      	b.n	2854 <cbvprintf_package+0xa0>
				if (buf0 != NULL) {
    2ace:	b375      	cbz	r5, 2b2e <cbvprintf_package+0x37a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    2ad0:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    2ad4:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
    2ad8:	4496      	add	lr, r2
    2ada:	f1bc 0f00 	cmp.w	ip, #0
    2ade:	d020      	beq.n	2b22 <cbvprintf_package+0x36e>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    2ae0:	f060 007f 	orn	r0, r0, #127	; 0x7f
    2ae4:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
    2ae8:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    2aec:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
    2aee:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
    2af2:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    2af4:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
    2af6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    2afa:	2800      	cmp	r0, #0
    2afc:	f47f aeb0 	bne.w	2860 <cbvprintf_package+0xac>
	if (BUF_OFFSET / sizeof(int) > 255) {
    2b00:	1b61      	subs	r1, r4, r5
    2b02:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    2b06:	d35f      	bcc.n	2bc8 <cbvprintf_package+0x414>
		__ASSERT(false, "too many format args");
    2b08:	490e      	ldr	r1, [pc, #56]	; (2b44 <cbvprintf_package+0x390>)
    2b0a:	4a0f      	ldr	r2, [pc, #60]	; (2b48 <cbvprintf_package+0x394>)
    2b0c:	480f      	ldr	r0, [pc, #60]	; (2b4c <cbvprintf_package+0x398>)
    2b0e:	f240 233d 	movw	r3, #573	; 0x23d
    2b12:	f00a f9b8 	bl	ce86 <assert_print>
    2b16:	4810      	ldr	r0, [pc, #64]	; (2b58 <cbvprintf_package+0x3a4>)
    2b18:	f00a f9b5 	bl	ce86 <assert_print>
    2b1c:	f240 213d 	movw	r1, #573	; 0x23d
    2b20:	e698      	b.n	2854 <cbvprintf_package+0xa0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    2b22:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
    2b26:	9803      	ldr	r0, [sp, #12]
    2b28:	3001      	adds	r0, #1
    2b2a:	9003      	str	r0, [sp, #12]
    2b2c:	e7de      	b.n	2aec <cbvprintf_package+0x338>
				} else if (is_ro || rws_pos_en) {
    2b2e:	f1bc 0f00 	cmp.w	ip, #0
    2b32:	d101      	bne.n	2b38 <cbvprintf_package+0x384>
    2b34:	9801      	ldr	r0, [sp, #4]
    2b36:	b188      	cbz	r0, 2b5c <cbvprintf_package+0x3a8>
					len += 1;
    2b38:	3601      	adds	r6, #1
    2b3a:	e7d7      	b.n	2aec <cbvprintf_package+0x338>
    2b3c:	0000e114 	.word	0x0000e114
    2b40:	00010ed0 	.word	0x00010ed0
    2b44:	0000f7bd 	.word	0x0000f7bd
    2b48:	0000ead8 	.word	0x0000ead8
    2b4c:	0000eb06 	.word	0x0000eb06
    2b50:	0000eb23 	.word	0x0000eb23
    2b54:	0000eb44 	.word	0x0000eb44
    2b58:	0000eb73 	.word	0x0000eb73
					len += strlen(s) + 1 + 1;
    2b5c:	4638      	mov	r0, r7
    2b5e:	e9cd 2106 	strd	r2, r1, [sp, #24]
    2b62:	9305      	str	r3, [sp, #20]
    2b64:	f7fe f9ed 	bl	f42 <strlen>
    2b68:	3602      	adds	r6, #2
    2b6a:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    2b6e:	9b05      	ldr	r3, [sp, #20]
    2b70:	4406      	add	r6, r0
    2b72:	e7bb      	b.n	2aec <cbvprintf_package+0x338>
		} else if (size == sizeof(int)) {
    2b74:	9800      	ldr	r0, [sp, #0]
    2b76:	2804      	cmp	r0, #4
    2b78:	d108      	bne.n	2b8c <cbvprintf_package+0x3d8>
			int v = va_arg(ap, int);
    2b7a:	f109 0c04 	add.w	ip, r9, #4
			if (buf0 != NULL) {
    2b7e:	b115      	cbz	r5, 2b86 <cbvprintf_package+0x3d2>
			int v = va_arg(ap, int);
    2b80:	f8d9 0000 	ldr.w	r0, [r9]
				*(int *)buf = v;
    2b84:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    2b86:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
    2b88:	46e1      	mov	r9, ip
    2b8a:	e7b4      	b.n	2af6 <cbvprintf_package+0x342>
		} else if (size == sizeof(long long)) {
    2b8c:	9800      	ldr	r0, [sp, #0]
    2b8e:	2808      	cmp	r0, #8
    2b90:	d10c      	bne.n	2bac <cbvprintf_package+0x3f8>
			long long v = va_arg(ap, long long);
    2b92:	f109 0007 	add.w	r0, r9, #7
    2b96:	f020 0007 	bic.w	r0, r0, #7
    2b9a:	f100 0908 	add.w	r9, r0, #8
			if (buf0 != NULL) {
    2b9e:	b11d      	cbz	r5, 2ba8 <cbvprintf_package+0x3f4>
			long long v = va_arg(ap, long long);
    2ba0:	e9d0 bc00 	ldrd	fp, ip, [r0]
    2ba4:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    2ba8:	3408      	adds	r4, #8
    2baa:	e7a4      	b.n	2af6 <cbvprintf_package+0x342>
			__ASSERT(false, "unexpected size %u", size);
    2bac:	4a3a      	ldr	r2, [pc, #232]	; (2c98 <cbvprintf_package+0x4e4>)
    2bae:	493b      	ldr	r1, [pc, #236]	; (2c9c <cbvprintf_package+0x4e8>)
    2bb0:	483b      	ldr	r0, [pc, #236]	; (2ca0 <cbvprintf_package+0x4ec>)
    2bb2:	f240 2331 	movw	r3, #561	; 0x231
    2bb6:	f00a f966 	bl	ce86 <assert_print>
    2bba:	9900      	ldr	r1, [sp, #0]
    2bbc:	4839      	ldr	r0, [pc, #228]	; (2ca4 <cbvprintf_package+0x4f0>)
    2bbe:	f00a f962 	bl	ce86 <assert_print>
    2bc2:	f240 2131 	movw	r1, #561	; 0x231
    2bc6:	e645      	b.n	2854 <cbvprintf_package+0xa0>
	if (buf0 == NULL) {
    2bc8:	b91d      	cbnz	r5, 2bd2 <cbvprintf_package+0x41e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    2bca:	f1a6 0408 	sub.w	r4, r6, #8
    2bce:	1860      	adds	r0, r4, r1
    2bd0:	e742      	b.n	2a58 <cbvprintf_package+0x2a4>
	if (rws_pos_en) {
    2bd2:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
    2bd4:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
    2bd6:	0889      	lsrs	r1, r1, #2
    2bd8:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
    2bda:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
    2bde:	b1a3      	cbz	r3, 2c0a <cbvprintf_package+0x456>
		buf0[1] = 0;
    2be0:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
    2be2:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
    2be4:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    2be8:	f1ba 0f00 	cmp.w	sl, #0
    2bec:	d006      	beq.n	2bfc <cbvprintf_package+0x448>
    2bee:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    2bf0:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
    2bf4:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
    2bf8:	4562      	cmp	r2, ip
    2bfa:	d10a      	bne.n	2c12 <cbvprintf_package+0x45e>
    2bfc:	f10d 0820 	add.w	r8, sp, #32
    2c00:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
    2c04:	f1c5 0b01 	rsb	fp, r5, #1
    2c08:	e039      	b.n	2c7e <cbvprintf_package+0x4ca>
		buf0[3] = 0;
    2c0a:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
    2c0c:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
    2c0e:	70eb      	strb	r3, [r5, #3]
    2c10:	e7e8      	b.n	2be4 <cbvprintf_package+0x430>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    2c12:	f810 1b01 	ldrb.w	r1, [r0], #1
    2c16:	060b      	lsls	r3, r1, #24
    2c18:	d508      	bpl.n	2c2c <cbvprintf_package+0x478>
			if (BUF_OFFSET + 1 > len) {
    2c1a:	eb04 080e 	add.w	r8, r4, lr
    2c1e:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    2c20:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    2c24:	f4ff af16 	bcc.w	2a54 <cbvprintf_package+0x2a0>
			*buf++ = pos;
    2c28:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    2c2c:	f10c 0c01 	add.w	ip, ip, #1
    2c30:	e7e2      	b.n	2bf8 <cbvprintf_package+0x444>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    2c32:	f1ba 0f00 	cmp.w	sl, #0
    2c36:	d003      	beq.n	2c40 <cbvprintf_package+0x48c>
    2c38:	f998 2000 	ldrsb.w	r2, [r8]
    2c3c:	2a00      	cmp	r2, #0
    2c3e:	db1c      	blt.n	2c7a <cbvprintf_package+0x4c6>
		if (rws_pos_en) {
    2c40:	9b01      	ldr	r3, [sp, #4]
    2c42:	bb03      	cbnz	r3, 2c86 <cbvprintf_package+0x4d2>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    2c44:	f898 2000 	ldrb.w	r2, [r8]
    2c48:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    2c4c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    2c50:	4638      	mov	r0, r7
    2c52:	f7fe f976 	bl	f42 <strlen>
    2c56:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    2c58:	eb04 010b 	add.w	r1, r4, fp
    2c5c:	4411      	add	r1, r2
    2c5e:	428e      	cmp	r6, r1
    2c60:	f4ff aef8 	bcc.w	2a54 <cbvprintf_package+0x2a0>
		*buf++ = str_ptr_pos[i];
    2c64:	f898 1000 	ldrb.w	r1, [r8]
    2c68:	f804 1b01 	strb.w	r1, [r4], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2c6c:	4639      	mov	r1, r7
    2c6e:	4620      	mov	r0, r4
    2c70:	9200      	str	r2, [sp, #0]
    2c72:	f00a ff01 	bl	da78 <memcpy>
		buf += size;
    2c76:	9a00      	ldr	r2, [sp, #0]
    2c78:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    2c7a:	f108 0801 	add.w	r8, r8, #1
    2c7e:	45c1      	cmp	r9, r8
    2c80:	d1d7      	bne.n	2c32 <cbvprintf_package+0x47e>
	return BUF_OFFSET;
    2c82:	1b60      	subs	r0, r4, r5
    2c84:	e6e8      	b.n	2a58 <cbvprintf_package+0x2a4>
			size = 0;
    2c86:	2200      	movs	r2, #0
    2c88:	e7e6      	b.n	2c58 <cbvprintf_package+0x4a4>
		return -EFAULT;
    2c8a:	f06f 000d 	mvn.w	r0, #13
    2c8e:	e6e3      	b.n	2a58 <cbvprintf_package+0x2a4>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    2c90:	2907      	cmp	r1, #7
    2c92:	f63f adab 	bhi.w	27ec <cbvprintf_package+0x38>
    2c96:	e6dd      	b.n	2a54 <cbvprintf_package+0x2a0>
    2c98:	0000ead8 	.word	0x0000ead8
    2c9c:	0000f7bd 	.word	0x0000f7bd
    2ca0:	0000eb06 	.word	0x0000eb06
    2ca4:	0000eb5e 	.word	0x0000eb5e

00002ca8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    2ca8:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    2caa:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    2cac:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    2cae:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    2cb2:	2c03      	cmp	r4, #3
{
    2cb4:	4605      	mov	r5, r0
	switch (method) {
    2cb6:	d002      	beq.n	2cbe <sys_notify_finalize+0x16>
    2cb8:	b12c      	cbz	r4, 2cc6 <sys_notify_finalize+0x1e>
    2cba:	2000      	movs	r0, #0
    2cbc:	e000      	b.n	2cc0 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    2cbe:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    2cc0:	2300      	movs	r3, #0
    2cc2:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    2cc4:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    2cc6:	4a05      	ldr	r2, [pc, #20]	; (2cdc <sys_notify_finalize+0x34>)
    2cc8:	4905      	ldr	r1, [pc, #20]	; (2ce0 <sys_notify_finalize+0x38>)
    2cca:	4806      	ldr	r0, [pc, #24]	; (2ce4 <sys_notify_finalize+0x3c>)
    2ccc:	2345      	movs	r3, #69	; 0x45
    2cce:	f00a f8da 	bl	ce86 <assert_print>
    2cd2:	4802      	ldr	r0, [pc, #8]	; (2cdc <sys_notify_finalize+0x34>)
    2cd4:	2145      	movs	r1, #69	; 0x45
    2cd6:	f00a f8cf 	bl	ce78 <assert_post_action>
    2cda:	e7ee      	b.n	2cba <sys_notify_finalize+0x12>
    2cdc:	0000eb8a 	.word	0x0000eb8a
    2ce0:	0000f7bd 	.word	0x0000f7bd
    2ce4:	0000eb06 	.word	0x0000eb06

00002ce8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    2ce8:	4b01      	ldr	r3, [pc, #4]	; (2cf0 <__printk_hook_install+0x8>)
    2cea:	6018      	str	r0, [r3, #0]
}
    2cec:	4770      	bx	lr
    2cee:	bf00      	nop
    2cf0:	20000098 	.word	0x20000098

00002cf4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2cf8:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    2cfc:	9200      	str	r2, [sp, #0]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2cfe:	f019 0f08 	tst.w	r9, #8
{
    2d02:	4604      	mov	r4, r0
	if (processing) {
    2d04:	d022      	beq.n	2d4c <process_event+0x58>
		if (evt == EVT_COMPLETE) {
    2d06:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2d08:	bf0c      	ite	eq
    2d0a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2d0e:	f049 0920 	orrne.w	r9, r9, #32
    2d12:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    2d16:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2d18:	4620      	mov	r0, r4
    2d1a:	f005 fe99 	bl	8a50 <z_spin_unlock_valid>
    2d1e:	b968      	cbnz	r0, 2d3c <process_event+0x48>
    2d20:	4a9b      	ldr	r2, [pc, #620]	; (2f90 <process_event+0x29c>)
    2d22:	499c      	ldr	r1, [pc, #624]	; (2f94 <process_event+0x2a0>)
    2d24:	489c      	ldr	r0, [pc, #624]	; (2f98 <process_event+0x2a4>)
    2d26:	23b9      	movs	r3, #185	; 0xb9
    2d28:	f00a f8ad 	bl	ce86 <assert_print>
    2d2c:	489b      	ldr	r0, [pc, #620]	; (2f9c <process_event+0x2a8>)
    2d2e:	4621      	mov	r1, r4
    2d30:	f00a f8a9 	bl	ce86 <assert_print>
    2d34:	4896      	ldr	r0, [pc, #600]	; (2f90 <process_event+0x29c>)
    2d36:	21b9      	movs	r1, #185	; 0xb9
    2d38:	f00a f89e 	bl	ce78 <assert_post_action>
    2d3c:	9b00      	ldr	r3, [sp, #0]
    2d3e:	f383 8811 	msr	BASEPRI, r3
    2d42:	f3bf 8f6f 	isb	sy
}
    2d46:	b003      	add	sp, #12
    2d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    2d4c:	4f94      	ldr	r7, [pc, #592]	; (2fa0 <process_event+0x2ac>)
    2d4e:	f8df 8248 	ldr.w	r8, [pc, #584]	; 2f98 <process_event+0x2a4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2d52:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    2d56:	2902      	cmp	r1, #2
    2d58:	d106      	bne.n	2d68 <process_event+0x74>
			evt = process_recheck(mgr);
    2d5a:	4620      	mov	r0, r4
    2d5c:	f009 ffec 	bl	cd38 <process_recheck>
		if (evt == EVT_NOP) {
    2d60:	2800      	cmp	r0, #0
    2d62:	d0d8      	beq.n	2d16 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    2d64:	2801      	cmp	r0, #1
    2d66:	d164      	bne.n	2e32 <process_event+0x13e>
			res = mgr->last_res;
    2d68:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2d6c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    2d6e:	f1bb 0f00 	cmp.w	fp, #0
    2d72:	da19      	bge.n	2da8 <process_event+0xb4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2d74:	2600      	movs	r6, #0
		*clients = mgr->clients;
    2d76:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2d78:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    2d7c:	e9c4 6600 	strd	r6, r6, [r4]
    2d80:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2d84:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2d86:	8ba3      	ldrh	r3, [r4, #28]
    2d88:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2d8c:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2d8e:	9201      	str	r2, [sp, #4]
				   && !sys_slist_is_empty(&mgr->monitors);
    2d90:	d003      	beq.n	2d9a <process_event+0xa6>
		if (do_monitors
    2d92:	68a2      	ldr	r2, [r4, #8]
    2d94:	2a00      	cmp	r2, #0
    2d96:	f040 8113 	bne.w	2fc0 <process_event+0x2cc>
		    || !sys_slist_is_empty(&clients)
    2d9a:	b915      	cbnz	r5, 2da2 <process_event+0xae>
		    || (transit != NULL)) {
    2d9c:	2e00      	cmp	r6, #0
    2d9e:	f000 8159 	beq.w	3054 <process_event+0x360>
    2da2:	f04f 0a00 	mov.w	sl, #0
    2da6:	e10d      	b.n	2fc4 <process_event+0x2d0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2da8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2dac:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2dae:	2901      	cmp	r1, #1
    2db0:	d820      	bhi.n	2df4 <process_event+0x100>
	list->head = NULL;
    2db2:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2db4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    2db8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    2dba:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2dbc:	b29b      	uxth	r3, r3
	list->tail = NULL;
    2dbe:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    2dc2:	d10a      	bne.n	2dda <process_event+0xe6>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2dc4:	b13d      	cbz	r5, 2dd6 <process_event+0xe2>
    2dc6:	8be2      	ldrh	r2, [r4, #30]
    2dc8:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    2dca:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    2dcc:	3201      	adds	r2, #1
    2dce:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2dd0:	2900      	cmp	r1, #0
    2dd2:	d1fa      	bne.n	2dca <process_event+0xd6>
    2dd4:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2dd6:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    2dda:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2ddc:	4620      	mov	r0, r4
    2dde:	f009 ffab 	bl	cd38 <process_recheck>
    2de2:	4606      	mov	r6, r0
    2de4:	2800      	cmp	r0, #0
    2de6:	d0ce      	beq.n	2d86 <process_event+0x92>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2de8:	8ba3      	ldrh	r3, [r4, #28]
    2dea:	f043 0320 	orr.w	r3, r3, #32
    2dee:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    2df0:	2600      	movs	r6, #0
    2df2:	e7c8      	b.n	2d86 <process_event+0x92>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2df4:	2a04      	cmp	r2, #4
    2df6:	d10d      	bne.n	2e14 <process_event+0x120>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2df8:	f023 0307 	bic.w	r3, r3, #7
    2dfc:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    2dfe:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2e00:	4620      	mov	r0, r4
    2e02:	f009 ff99 	bl	cd38 <process_recheck>
    2e06:	4605      	mov	r5, r0
    2e08:	b188      	cbz	r0, 2e2e <process_event+0x13a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2e0a:	f042 0220 	orr.w	r2, r2, #32
    2e0e:	83a2      	strh	r2, [r4, #28]
    2e10:	2500      	movs	r5, #0
    2e12:	e7ed      	b.n	2df0 <process_event+0xfc>
		__ASSERT_NO_MSG(false);
    2e14:	4963      	ldr	r1, [pc, #396]	; (2fa4 <process_event+0x2b0>)
    2e16:	f240 131b 	movw	r3, #283	; 0x11b
    2e1a:	463a      	mov	r2, r7
    2e1c:	4640      	mov	r0, r8
    2e1e:	f00a f832 	bl	ce86 <assert_print>
    2e22:	f240 111b 	movw	r1, #283	; 0x11b
    2e26:	4638      	mov	r0, r7
    2e28:	f00a f826 	bl	ce78 <assert_post_action>
    2e2c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    2e2e:	462e      	mov	r6, r5
    2e30:	e7a9      	b.n	2d86 <process_event+0x92>
		} else if (evt == EVT_START) {
    2e32:	2803      	cmp	r0, #3
    2e34:	d134      	bne.n	2ea0 <process_event+0x1ac>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    2e36:	f1b9 0f00 	cmp.w	r9, #0
    2e3a:	d00b      	beq.n	2e54 <process_event+0x160>
    2e3c:	495a      	ldr	r1, [pc, #360]	; (2fa8 <process_event+0x2b4>)
    2e3e:	4640      	mov	r0, r8
    2e40:	f44f 73ab 	mov.w	r3, #342	; 0x156
    2e44:	463a      	mov	r2, r7
    2e46:	f00a f81e 	bl	ce86 <assert_print>
    2e4a:	f44f 71ab 	mov.w	r1, #342	; 0x156
    2e4e:	4638      	mov	r0, r7
    2e50:	f00a f812 	bl	ce78 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2e54:	6823      	ldr	r3, [r4, #0]
    2e56:	b95b      	cbnz	r3, 2e70 <process_event+0x17c>
    2e58:	4954      	ldr	r1, [pc, #336]	; (2fac <process_event+0x2b8>)
    2e5a:	4640      	mov	r0, r8
    2e5c:	f240 1357 	movw	r3, #343	; 0x157
    2e60:	463a      	mov	r2, r7
    2e62:	f00a f810 	bl	ce86 <assert_print>
    2e66:	f240 1157 	movw	r1, #343	; 0x157
    2e6a:	4638      	mov	r0, r7
    2e6c:	f00a f804 	bl	ce78 <assert_post_action>
			transit = mgr->transitions->start;
    2e70:	6923      	ldr	r3, [r4, #16]
    2e72:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    2e74:	b95e      	cbnz	r6, 2e8e <process_event+0x19a>
    2e76:	494e      	ldr	r1, [pc, #312]	; (2fb0 <process_event+0x2bc>)
    2e78:	4640      	mov	r0, r8
    2e7a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    2e7e:	463a      	mov	r2, r7
    2e80:	f00a f801 	bl	ce86 <assert_print>
    2e84:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    2e88:	4638      	mov	r0, r7
    2e8a:	f009 fff5 	bl	ce78 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2e8e:	8ba3      	ldrh	r3, [r4, #28]
    2e90:	f023 0307 	bic.w	r3, r3, #7
    2e94:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    2e98:	83a3      	strh	r3, [r4, #28]
}
    2e9a:	2500      	movs	r5, #0
		res = 0;
    2e9c:	46ab      	mov	fp, r5
}
    2e9e:	e772      	b.n	2d86 <process_event+0x92>
		} else if (evt == EVT_STOP) {
    2ea0:	2804      	cmp	r0, #4
    2ea2:	d131      	bne.n	2f08 <process_event+0x214>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    2ea4:	f1b9 0f02 	cmp.w	r9, #2
    2ea8:	d00b      	beq.n	2ec2 <process_event+0x1ce>
    2eaa:	4942      	ldr	r1, [pc, #264]	; (2fb4 <process_event+0x2c0>)
    2eac:	4640      	mov	r0, r8
    2eae:	f240 135d 	movw	r3, #349	; 0x15d
    2eb2:	463a      	mov	r2, r7
    2eb4:	f009 ffe7 	bl	ce86 <assert_print>
    2eb8:	f240 115d 	movw	r1, #349	; 0x15d
    2ebc:	4638      	mov	r0, r7
    2ebe:	f009 ffdb 	bl	ce78 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2ec2:	8be3      	ldrh	r3, [r4, #30]
    2ec4:	b15b      	cbz	r3, 2ede <process_event+0x1ea>
    2ec6:	493c      	ldr	r1, [pc, #240]	; (2fb8 <process_event+0x2c4>)
    2ec8:	4640      	mov	r0, r8
    2eca:	f44f 73af 	mov.w	r3, #350	; 0x15e
    2ece:	463a      	mov	r2, r7
    2ed0:	f009 ffd9 	bl	ce86 <assert_print>
    2ed4:	f44f 71af 	mov.w	r1, #350	; 0x15e
    2ed8:	4638      	mov	r0, r7
    2eda:	f009 ffcd 	bl	ce78 <assert_post_action>
			transit = mgr->transitions->stop;
    2ede:	6923      	ldr	r3, [r4, #16]
    2ee0:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    2ee2:	b95e      	cbnz	r6, 2efc <process_event+0x208>
    2ee4:	4932      	ldr	r1, [pc, #200]	; (2fb0 <process_event+0x2bc>)
    2ee6:	4640      	mov	r0, r8
    2ee8:	f240 1361 	movw	r3, #353	; 0x161
    2eec:	463a      	mov	r2, r7
    2eee:	f009 ffca 	bl	ce86 <assert_print>
    2ef2:	f240 1161 	movw	r1, #353	; 0x161
    2ef6:	4638      	mov	r0, r7
    2ef8:	f009 ffbe 	bl	ce78 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2efc:	8ba3      	ldrh	r3, [r4, #28]
    2efe:	f023 0307 	bic.w	r3, r3, #7
    2f02:	f043 0304 	orr.w	r3, r3, #4
    2f06:	e7c7      	b.n	2e98 <process_event+0x1a4>
		} else if (evt == EVT_RESET) {
    2f08:	2805      	cmp	r0, #5
    2f0a:	d131      	bne.n	2f70 <process_event+0x27c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2f0c:	f1b9 0f01 	cmp.w	r9, #1
    2f10:	d00b      	beq.n	2f2a <process_event+0x236>
    2f12:	492a      	ldr	r1, [pc, #168]	; (2fbc <process_event+0x2c8>)
    2f14:	4640      	mov	r0, r8
    2f16:	f44f 73b2 	mov.w	r3, #356	; 0x164
    2f1a:	463a      	mov	r2, r7
    2f1c:	f009 ffb3 	bl	ce86 <assert_print>
    2f20:	f44f 71b2 	mov.w	r1, #356	; 0x164
    2f24:	4638      	mov	r0, r7
    2f26:	f009 ffa7 	bl	ce78 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2f2a:	6823      	ldr	r3, [r4, #0]
    2f2c:	b95b      	cbnz	r3, 2f46 <process_event+0x252>
    2f2e:	491f      	ldr	r1, [pc, #124]	; (2fac <process_event+0x2b8>)
    2f30:	4640      	mov	r0, r8
    2f32:	f240 1365 	movw	r3, #357	; 0x165
    2f36:	463a      	mov	r2, r7
    2f38:	f009 ffa5 	bl	ce86 <assert_print>
    2f3c:	f240 1165 	movw	r1, #357	; 0x165
    2f40:	4638      	mov	r0, r7
    2f42:	f009 ff99 	bl	ce78 <assert_post_action>
			transit = mgr->transitions->reset;
    2f46:	6923      	ldr	r3, [r4, #16]
    2f48:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    2f4a:	b95e      	cbnz	r6, 2f64 <process_event+0x270>
    2f4c:	4918      	ldr	r1, [pc, #96]	; (2fb0 <process_event+0x2bc>)
    2f4e:	4640      	mov	r0, r8
    2f50:	f44f 73b4 	mov.w	r3, #360	; 0x168
    2f54:	463a      	mov	r2, r7
    2f56:	f009 ff96 	bl	ce86 <assert_print>
    2f5a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    2f5e:	4638      	mov	r0, r7
    2f60:	f009 ff8a 	bl	ce78 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2f64:	8ba3      	ldrh	r3, [r4, #28]
    2f66:	f023 0307 	bic.w	r3, r3, #7
    2f6a:	f043 0305 	orr.w	r3, r3, #5
    2f6e:	e793      	b.n	2e98 <process_event+0x1a4>
			__ASSERT_NO_MSG(false);
    2f70:	490c      	ldr	r1, [pc, #48]	; (2fa4 <process_event+0x2b0>)
    2f72:	f240 136b 	movw	r3, #363	; 0x16b
    2f76:	463a      	mov	r2, r7
    2f78:	4640      	mov	r0, r8
    2f7a:	f009 ff84 	bl	ce86 <assert_print>
    2f7e:	2500      	movs	r5, #0
    2f80:	f240 116b 	movw	r1, #363	; 0x16b
    2f84:	4638      	mov	r0, r7
    2f86:	f009 ff77 	bl	ce78 <assert_post_action>
		onoff_transition_fn transit = NULL;
    2f8a:	462e      	mov	r6, r5
    2f8c:	e786      	b.n	2e9c <process_event+0x1a8>
    2f8e:	bf00      	nop
    2f90:	0000ec50 	.word	0x0000ec50
    2f94:	0000ec7d 	.word	0x0000ec7d
    2f98:	0000eb06 	.word	0x0000eb06
    2f9c:	0000ec94 	.word	0x0000ec94
    2fa0:	0000ebad 	.word	0x0000ebad
    2fa4:	0000f7bd 	.word	0x0000f7bd
    2fa8:	0000ebcf 	.word	0x0000ebcf
    2fac:	0000ebdb 	.word	0x0000ebdb
    2fb0:	0000ebfe 	.word	0x0000ebfe
    2fb4:	0000ec15 	.word	0x0000ec15
    2fb8:	0000ec2b 	.word	0x0000ec2b
    2fbc:	0000ec3a 	.word	0x0000ec3a
				   && !sys_slist_is_empty(&mgr->monitors);
    2fc0:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2fc4:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    2fc8:	f104 0914 	add.w	r9, r4, #20
			mgr->flags = flags;
    2fcc:	83a3      	strh	r3, [r4, #28]
    2fce:	4648      	mov	r0, r9
    2fd0:	f005 fd3e 	bl	8a50 <z_spin_unlock_valid>
    2fd4:	b968      	cbnz	r0, 2ff2 <process_event+0x2fe>
    2fd6:	4a38      	ldr	r2, [pc, #224]	; (30b8 <process_event+0x3c4>)
    2fd8:	4938      	ldr	r1, [pc, #224]	; (30bc <process_event+0x3c8>)
    2fda:	23b9      	movs	r3, #185	; 0xb9
    2fdc:	4640      	mov	r0, r8
    2fde:	f009 ff52 	bl	ce86 <assert_print>
    2fe2:	4837      	ldr	r0, [pc, #220]	; (30c0 <process_event+0x3cc>)
    2fe4:	4649      	mov	r1, r9
    2fe6:	f009 ff4e 	bl	ce86 <assert_print>
    2fea:	4833      	ldr	r0, [pc, #204]	; (30b8 <process_event+0x3c4>)
    2fec:	21b9      	movs	r1, #185	; 0xb9
    2fee:	f009 ff43 	bl	ce78 <assert_post_action>
    2ff2:	9b00      	ldr	r3, [sp, #0]
    2ff4:	f383 8811 	msr	BASEPRI, r3
    2ff8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2ffc:	f1ba 0f00 	cmp.w	sl, #0
    3000:	d137      	bne.n	3072 <process_event+0x37e>
	while (!sys_slist_is_empty(list)) {
    3002:	2d00      	cmp	r5, #0
    3004:	d147      	bne.n	3096 <process_event+0x3a2>
			if (transit != NULL) {
    3006:	b116      	cbz	r6, 300e <process_event+0x31a>
				transit(mgr, transition_complete);
    3008:	492e      	ldr	r1, [pc, #184]	; (30c4 <process_event+0x3d0>)
    300a:	4620      	mov	r0, r4
    300c:	47b0      	blx	r6
	__asm__ volatile(
    300e:	f04f 0320 	mov.w	r3, #32
    3012:	f3ef 8b11 	mrs	fp, BASEPRI
    3016:	f383 8812 	msr	BASEPRI_MAX, r3
    301a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    301e:	4648      	mov	r0, r9
	k.key = arch_irq_lock();
    3020:	f8cd b000 	str.w	fp, [sp]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3024:	f005 fd06 	bl	8a34 <z_spin_lock_valid>
    3028:	b968      	cbnz	r0, 3046 <process_event+0x352>
    302a:	4a23      	ldr	r2, [pc, #140]	; (30b8 <process_event+0x3c4>)
    302c:	4926      	ldr	r1, [pc, #152]	; (30c8 <process_event+0x3d4>)
    302e:	238e      	movs	r3, #142	; 0x8e
    3030:	4640      	mov	r0, r8
    3032:	f009 ff28 	bl	ce86 <assert_print>
    3036:	4825      	ldr	r0, [pc, #148]	; (30cc <process_event+0x3d8>)
    3038:	4649      	mov	r1, r9
    303a:	f009 ff24 	bl	ce86 <assert_print>
    303e:	481e      	ldr	r0, [pc, #120]	; (30b8 <process_event+0x3c4>)
    3040:	218e      	movs	r1, #142	; 0x8e
    3042:	f009 ff19 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    3046:	4648      	mov	r0, r9
    3048:	f005 fd12 	bl	8a70 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    304c:	8ba3      	ldrh	r3, [r4, #28]
    304e:	f023 0308 	bic.w	r3, r3, #8
    3052:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3054:	8ba3      	ldrh	r3, [r4, #28]
    3056:	06da      	lsls	r2, r3, #27
    3058:	d525      	bpl.n	30a6 <process_event+0x3b2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    305a:	f023 0310 	bic.w	r3, r3, #16
    305e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    3060:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3062:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    3066:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    306a:	2900      	cmp	r1, #0
    306c:	f47f ae73 	bne.w	2d56 <process_event+0x62>
out:
    3070:	e651      	b.n	2d16 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3072:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3074:	2900      	cmp	r1, #0
    3076:	d0c4      	beq.n	3002 <process_event+0x30e>
	return node->next;
    3078:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    307c:	684b      	ldr	r3, [r1, #4]
    307e:	9a01      	ldr	r2, [sp, #4]
    3080:	469c      	mov	ip, r3
    3082:	4620      	mov	r0, r4
    3084:	465b      	mov	r3, fp
    3086:	47e0      	blx	ip
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3088:	f1ba 0f00 	cmp.w	sl, #0
    308c:	d0b9      	beq.n	3002 <process_event+0x30e>
    308e:	4651      	mov	r1, sl
    3090:	f8da a000 	ldr.w	sl, [sl]
    3094:	e7f2      	b.n	307c <process_event+0x388>
    3096:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    3098:	9a01      	ldr	r2, [sp, #4]
    309a:	682d      	ldr	r5, [r5, #0]
    309c:	465b      	mov	r3, fp
    309e:	4620      	mov	r0, r4
    30a0:	f009 fe66 	bl	cd70 <notify_one>
    30a4:	e7ad      	b.n	3002 <process_event+0x30e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    30a6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    30aa:	bf1e      	ittt	ne
    30ac:	f023 0320 	bicne.w	r3, r3, #32
    30b0:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    30b2:	2102      	movne	r1, #2
    30b4:	e7d5      	b.n	3062 <process_event+0x36e>
    30b6:	bf00      	nop
    30b8:	0000ec50 	.word	0x0000ec50
    30bc:	0000ec7d 	.word	0x0000ec7d
    30c0:	0000ec94 	.word	0x0000ec94
    30c4:	000030d1 	.word	0x000030d1
    30c8:	0000eca9 	.word	0x0000eca9
    30cc:	0000ecbe 	.word	0x0000ecbe

000030d0 <transition_complete>:
{
    30d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30d2:	4604      	mov	r4, r0
    30d4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    30d6:	f100 0614 	add.w	r6, r0, #20
    30da:	f04f 0320 	mov.w	r3, #32
    30de:	f3ef 8711 	mrs	r7, BASEPRI
    30e2:	f383 8812 	msr	BASEPRI_MAX, r3
    30e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    30ea:	4630      	mov	r0, r6
    30ec:	f005 fca2 	bl	8a34 <z_spin_lock_valid>
    30f0:	b968      	cbnz	r0, 310e <transition_complete+0x3e>
    30f2:	4a0c      	ldr	r2, [pc, #48]	; (3124 <transition_complete+0x54>)
    30f4:	490c      	ldr	r1, [pc, #48]	; (3128 <transition_complete+0x58>)
    30f6:	480d      	ldr	r0, [pc, #52]	; (312c <transition_complete+0x5c>)
    30f8:	238e      	movs	r3, #142	; 0x8e
    30fa:	f009 fec4 	bl	ce86 <assert_print>
    30fe:	480c      	ldr	r0, [pc, #48]	; (3130 <transition_complete+0x60>)
    3100:	4631      	mov	r1, r6
    3102:	f009 fec0 	bl	ce86 <assert_print>
    3106:	4807      	ldr	r0, [pc, #28]	; (3124 <transition_complete+0x54>)
    3108:	218e      	movs	r1, #142	; 0x8e
    310a:	f009 feb5 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    310e:	4630      	mov	r0, r6
    3110:	f005 fcae 	bl	8a70 <z_spin_lock_set_owner>
	mgr->last_res = res;
    3114:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    3116:	463a      	mov	r2, r7
    3118:	4620      	mov	r0, r4
    311a:	2101      	movs	r1, #1
}
    311c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    3120:	f7ff bde8 	b.w	2cf4 <process_event>
    3124:	0000ec50 	.word	0x0000ec50
    3128:	0000eca9 	.word	0x0000eca9
    312c:	0000eb06 	.word	0x0000eb06
    3130:	0000ecbe 	.word	0x0000ecbe

00003134 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3138:	4604      	mov	r4, r0
    313a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    313c:	f009 fe2e 	bl	cd9c <validate_args>

	if (rv < 0) {
    3140:	1e05      	subs	r5, r0, #0
    3142:	db5e      	blt.n	3202 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    3144:	f104 0914 	add.w	r9, r4, #20
    3148:	f04f 0320 	mov.w	r3, #32
    314c:	f3ef 8a11 	mrs	sl, BASEPRI
    3150:	f383 8812 	msr	BASEPRI_MAX, r3
    3154:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3158:	4648      	mov	r0, r9
    315a:	f005 fc6b 	bl	8a34 <z_spin_lock_valid>
    315e:	b968      	cbnz	r0, 317c <onoff_request+0x48>
    3160:	4a38      	ldr	r2, [pc, #224]	; (3244 <onoff_request+0x110>)
    3162:	4939      	ldr	r1, [pc, #228]	; (3248 <onoff_request+0x114>)
    3164:	4839      	ldr	r0, [pc, #228]	; (324c <onoff_request+0x118>)
    3166:	238e      	movs	r3, #142	; 0x8e
    3168:	f009 fe8d 	bl	ce86 <assert_print>
    316c:	4838      	ldr	r0, [pc, #224]	; (3250 <onoff_request+0x11c>)
    316e:	4649      	mov	r1, r9
    3170:	f009 fe89 	bl	ce86 <assert_print>
    3174:	4833      	ldr	r0, [pc, #204]	; (3244 <onoff_request+0x110>)
    3176:	218e      	movs	r1, #142	; 0x8e
    3178:	f009 fe7e 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    317c:	4648      	mov	r0, r9
    317e:	f005 fc77 	bl	8a70 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3182:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3184:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3186:	f64f 71ff 	movw	r1, #65535	; 0xffff
    318a:	428b      	cmp	r3, r1
    318c:	f002 0607 	and.w	r6, r2, #7
    3190:	d050      	beq.n	3234 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    3192:	2e02      	cmp	r6, #2
    3194:	d124      	bne.n	31e0 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3196:	3301      	adds	r3, #1
    3198:	83e3      	strh	r3, [r4, #30]
	rv = state;
    319a:	4635      	mov	r5, r6
		notify = true;
    319c:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    31a0:	4648      	mov	r0, r9
    31a2:	f005 fc55 	bl	8a50 <z_spin_unlock_valid>
    31a6:	b968      	cbnz	r0, 31c4 <onoff_request+0x90>
    31a8:	4a26      	ldr	r2, [pc, #152]	; (3244 <onoff_request+0x110>)
    31aa:	492a      	ldr	r1, [pc, #168]	; (3254 <onoff_request+0x120>)
    31ac:	4827      	ldr	r0, [pc, #156]	; (324c <onoff_request+0x118>)
    31ae:	23b9      	movs	r3, #185	; 0xb9
    31b0:	f009 fe69 	bl	ce86 <assert_print>
    31b4:	4828      	ldr	r0, [pc, #160]	; (3258 <onoff_request+0x124>)
    31b6:	4649      	mov	r1, r9
    31b8:	f009 fe65 	bl	ce86 <assert_print>
    31bc:	4821      	ldr	r0, [pc, #132]	; (3244 <onoff_request+0x110>)
    31be:	21b9      	movs	r1, #185	; 0xb9
    31c0:	f009 fe5a 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    31c4:	f38a 8811 	msr	BASEPRI, sl
    31c8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    31cc:	f1b8 0f00 	cmp.w	r8, #0
    31d0:	d017      	beq.n	3202 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    31d2:	2300      	movs	r3, #0
    31d4:	4632      	mov	r2, r6
    31d6:	4639      	mov	r1, r7
    31d8:	4620      	mov	r0, r4
    31da:	f009 fdc9 	bl	cd70 <notify_one>
    31de:	e010      	b.n	3202 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    31e0:	0793      	lsls	r3, r2, #30
    31e2:	d001      	beq.n	31e8 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    31e4:	2e06      	cmp	r6, #6
    31e6:	d10f      	bne.n	3208 <onoff_request+0xd4>
	parent->next = child;
    31e8:	2300      	movs	r3, #0
    31ea:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    31ec:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    31ee:	b9f3      	cbnz	r3, 322e <onoff_request+0xfa>
	list->head = node;
    31f0:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    31f4:	4635      	mov	r5, r6
    31f6:	b9fe      	cbnz	r6, 3238 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    31f8:	4652      	mov	r2, sl
    31fa:	2102      	movs	r1, #2
    31fc:	4620      	mov	r0, r4
    31fe:	f7ff fd79 	bl	2cf4 <process_event>
		}
	}

	return rv;
}
    3202:	4628      	mov	r0, r5
    3204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    3208:	2e05      	cmp	r6, #5
    320a:	d018      	beq.n	323e <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    320c:	2e01      	cmp	r6, #1
    320e:	d00b      	beq.n	3228 <onoff_request+0xf4>
    3210:	4912      	ldr	r1, [pc, #72]	; (325c <onoff_request+0x128>)
    3212:	480e      	ldr	r0, [pc, #56]	; (324c <onoff_request+0x118>)
    3214:	4a12      	ldr	r2, [pc, #72]	; (3260 <onoff_request+0x12c>)
    3216:	f240 13c9 	movw	r3, #457	; 0x1c9
    321a:	f009 fe34 	bl	ce86 <assert_print>
    321e:	4810      	ldr	r0, [pc, #64]	; (3260 <onoff_request+0x12c>)
    3220:	f240 11c9 	movw	r1, #457	; 0x1c9
    3224:	f009 fe28 	bl	ce78 <assert_post_action>
		rv = -EIO;
    3228:	f06f 0504 	mvn.w	r5, #4
    322c:	e004      	b.n	3238 <onoff_request+0x104>
	parent->next = child;
    322e:	601f      	str	r7, [r3, #0]
	list->tail = node;
    3230:	6067      	str	r7, [r4, #4]
}
    3232:	e7df      	b.n	31f4 <onoff_request+0xc0>
		rv = -EAGAIN;
    3234:	f06f 050a 	mvn.w	r5, #10
    3238:	f04f 0800 	mov.w	r8, #0
    323c:	e7b0      	b.n	31a0 <onoff_request+0x6c>
		rv = -ENOTSUP;
    323e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    3242:	e7f9      	b.n	3238 <onoff_request+0x104>
    3244:	0000ec50 	.word	0x0000ec50
    3248:	0000eca9 	.word	0x0000eca9
    324c:	0000eb06 	.word	0x0000eb06
    3250:	0000ecbe 	.word	0x0000ecbe
    3254:	0000ec7d 	.word	0x0000ec7d
    3258:	0000ec94 	.word	0x0000ec94
    325c:	0000ec3a 	.word	0x0000ec3a
    3260:	0000ebad 	.word	0x0000ebad

00003264 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    3264:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    3268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    326c:	4604      	mov	r4, r0
    326e:	460e      	mov	r6, r1
    3270:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    3272:	d36a      	bcc.n	334a <sys_heap_init+0xe6>
    3274:	493e      	ldr	r1, [pc, #248]	; (3370 <sys_heap_init+0x10c>)
    3276:	4a3f      	ldr	r2, [pc, #252]	; (3374 <sys_heap_init+0x110>)
    3278:	483f      	ldr	r0, [pc, #252]	; (3378 <sys_heap_init+0x114>)
    327a:	f240 13e3 	movw	r3, #483	; 0x1e3
    327e:	f009 fe02 	bl	ce86 <assert_print>
    3282:	483e      	ldr	r0, [pc, #248]	; (337c <sys_heap_init+0x118>)
    3284:	f009 fdff 	bl	ce86 <assert_print>
    3288:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    328c:	4839      	ldr	r0, [pc, #228]	; (3374 <sys_heap_init+0x110>)
    328e:	f009 fdf3 	bl	ce78 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    3292:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    3294:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    3296:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    3298:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    329c:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    32a0:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    32a2:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    32a4:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    32a8:	d80e      	bhi.n	32c8 <sys_heap_init+0x64>
    32aa:	4935      	ldr	r1, [pc, #212]	; (3380 <sys_heap_init+0x11c>)
    32ac:	4a31      	ldr	r2, [pc, #196]	; (3374 <sys_heap_init+0x110>)
    32ae:	4832      	ldr	r0, [pc, #200]	; (3378 <sys_heap_init+0x114>)
    32b0:	f240 13f3 	movw	r3, #499	; 0x1f3
    32b4:	f009 fde7 	bl	ce86 <assert_print>
    32b8:	4832      	ldr	r0, [pc, #200]	; (3384 <sys_heap_init+0x120>)
    32ba:	f009 fde4 	bl	ce86 <assert_print>
    32be:	482d      	ldr	r0, [pc, #180]	; (3374 <sys_heap_init+0x110>)
    32c0:	f240 11f3 	movw	r1, #499	; 0x1f3
    32c4:	f009 fdd8 	bl	ce78 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    32c8:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    32ca:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    32ce:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    32d2:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    32d6:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    32d8:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    32da:	2300      	movs	r3, #0
    32dc:	08e4      	lsrs	r4, r4, #3
    32de:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    32e0:	1c63      	adds	r3, r4, #1
    32e2:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    32e4:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    32e6:	d90e      	bls.n	3306 <sys_heap_init+0xa2>
    32e8:	4927      	ldr	r1, [pc, #156]	; (3388 <sys_heap_init+0x124>)
    32ea:	4a22      	ldr	r2, [pc, #136]	; (3374 <sys_heap_init+0x110>)
    32ec:	4822      	ldr	r0, [pc, #136]	; (3378 <sys_heap_init+0x114>)
    32ee:	f44f 7301 	mov.w	r3, #516	; 0x204
    32f2:	f009 fdc8 	bl	ce86 <assert_print>
    32f6:	4823      	ldr	r0, [pc, #140]	; (3384 <sys_heap_init+0x120>)
    32f8:	f009 fdc5 	bl	ce86 <assert_print>
    32fc:	481d      	ldr	r0, [pc, #116]	; (3374 <sys_heap_init+0x110>)
    32fe:	f44f 7101 	mov.w	r1, #516	; 0x204
    3302:	f009 fdb9 	bl	ce78 <assert_post_action>
    3306:	f105 0310 	add.w	r3, r5, #16
    330a:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    330e:	2200      	movs	r2, #0

	for (int i = 0; i < nb_buckets; i++) {
    3310:	4598      	cmp	r8, r3
    3312:	d129      	bne.n	3368 <sys_heap_init+0x104>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    3314:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    3316:	f043 0301 	orr.w	r3, r3, #1
    331a:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    331c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    3320:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    3322:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    3324:	802a      	strh	r2, [r5, #0]
    3326:	8048      	strh	r0, [r1, #2]
    3328:	19a9      	adds	r1, r5, r6
    332a:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    332e:	804a      	strh	r2, [r1, #2]
    3330:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    3332:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    3336:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    3338:	885a      	ldrh	r2, [r3, #2]
    333a:	f042 0201 	orr.w	r2, r2, #1
    333e:	4628      	mov	r0, r5
    3340:	805a      	strh	r2, [r3, #2]
}
    3342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    3346:	f009 bd5a 	b.w	cdfe <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    334a:	2a04      	cmp	r2, #4
    334c:	d8a1      	bhi.n	3292 <sys_heap_init+0x2e>
    334e:	490f      	ldr	r1, [pc, #60]	; (338c <sys_heap_init+0x128>)
    3350:	4a08      	ldr	r2, [pc, #32]	; (3374 <sys_heap_init+0x110>)
    3352:	4809      	ldr	r0, [pc, #36]	; (3378 <sys_heap_init+0x114>)
    3354:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    3358:	f009 fd95 	bl	ce86 <assert_print>
    335c:	4809      	ldr	r0, [pc, #36]	; (3384 <sys_heap_init+0x120>)
    335e:	f009 fd92 	bl	ce86 <assert_print>
    3362:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    3366:	e791      	b.n	328c <sys_heap_init+0x28>
		h->buckets[i].next = 0;
    3368:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
    336c:	e7d0      	b.n	3310 <sys_heap_init+0xac>
    336e:	bf00      	nop
    3370:	0000eda2 	.word	0x0000eda2
    3374:	0000ecd6 	.word	0x0000ecd6
    3378:	0000eb06 	.word	0x0000eb06
    337c:	0000edb8 	.word	0x0000edb8
    3380:	0000ee09 	.word	0x0000ee09
    3384:	0000edf0 	.word	0x0000edf0
    3388:	0000ee32 	.word	0x0000ee32
    338c:	0000edcf 	.word	0x0000edcf

00003390 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    3390:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    3392:	4e08      	ldr	r6, [pc, #32]	; (33b4 <extract_decimal+0x24>)
    3394:	6802      	ldr	r2, [r0, #0]
{
    3396:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
    3398:	270a      	movs	r7, #10
	size_t val = 0;
    339a:	2000      	movs	r0, #0
    339c:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
    339e:	3201      	adds	r2, #1
    33a0:	780c      	ldrb	r4, [r1, #0]
    33a2:	5da5      	ldrb	r5, [r4, r6]
    33a4:	076d      	lsls	r5, r5, #29
    33a6:	d401      	bmi.n	33ac <extract_decimal+0x1c>
	}
	*str = sp;
    33a8:	6019      	str	r1, [r3, #0]
	return val;
}
    33aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    33ac:	fb07 4000 	mla	r0, r7, r0, r4
    33b0:	3830      	subs	r0, #48	; 0x30
    33b2:	e7f3      	b.n	339c <extract_decimal+0xc>
    33b4:	000105ca 	.word	0x000105ca

000033b8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    33b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33bc:	4615      	mov	r5, r2
    33be:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    33c0:	78d3      	ldrb	r3, [r2, #3]
    33c2:	4a22      	ldr	r2, [pc, #136]	; (344c <encode_uint+0x94>)
    33c4:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
    33c8:	2b6f      	cmp	r3, #111	; 0x6f
{
    33ca:	4680      	mov	r8, r0
    33cc:	460f      	mov	r7, r1
    33ce:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    33d2:	d029      	beq.n	3428 <encode_uint+0x70>
    33d4:	d824      	bhi.n	3420 <encode_uint+0x68>
		return 16;
    33d6:	2b58      	cmp	r3, #88	; 0x58
    33d8:	bf14      	ite	ne
    33da:	260a      	movne	r6, #10
    33dc:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    33de:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    33e2:	4632      	mov	r2, r6
    33e4:	2300      	movs	r3, #0
    33e6:	4640      	mov	r0, r8
    33e8:	4639      	mov	r1, r7
    33ea:	f7fd fb6d 	bl	ac8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    33ee:	2a09      	cmp	r2, #9
    33f0:	b2d4      	uxtb	r4, r2
    33f2:	d81e      	bhi.n	3432 <encode_uint+0x7a>
    33f4:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    33f6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    33f8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    33fa:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    33fe:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    3402:	d301      	bcc.n	3408 <encode_uint+0x50>
    3404:	45d1      	cmp	r9, sl
    3406:	d811      	bhi.n	342c <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    3408:	782b      	ldrb	r3, [r5, #0]
    340a:	069b      	lsls	r3, r3, #26
    340c:	d505      	bpl.n	341a <encode_uint+0x62>
		if (radix == 8) {
    340e:	2e08      	cmp	r6, #8
    3410:	d115      	bne.n	343e <encode_uint+0x86>
			conv->altform_0 = true;
    3412:	78ab      	ldrb	r3, [r5, #2]
    3414:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    3418:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    341a:	4648      	mov	r0, r9
    341c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    3420:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    3424:	2b70      	cmp	r3, #112	; 0x70
    3426:	e7d7      	b.n	33d8 <encode_uint+0x20>
	switch (specifier) {
    3428:	2608      	movs	r6, #8
    342a:	e7d8      	b.n	33de <encode_uint+0x26>
		value /= radix;
    342c:	4680      	mov	r8, r0
    342e:	460f      	mov	r7, r1
    3430:	e7d7      	b.n	33e2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3432:	f1bb 0f01 	cmp.w	fp, #1
    3436:	bf0c      	ite	eq
    3438:	3437      	addeq	r4, #55	; 0x37
    343a:	3457      	addne	r4, #87	; 0x57
    343c:	e7db      	b.n	33f6 <encode_uint+0x3e>
		} else if (radix == 16) {
    343e:	2e10      	cmp	r6, #16
    3440:	d1eb      	bne.n	341a <encode_uint+0x62>
			conv->altform_0c = true;
    3442:	78ab      	ldrb	r3, [r5, #2]
    3444:	f043 0310 	orr.w	r3, r3, #16
    3448:	e7e6      	b.n	3418 <encode_uint+0x60>
    344a:	bf00      	nop
    344c:	000105ca 	.word	0x000105ca

00003450 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3454:	4682      	mov	sl, r0
    3456:	b093      	sub	sp, #76	; 0x4c
    3458:	468b      	mov	fp, r1
    345a:	4691      	mov	r9, r2
    345c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    345e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3460:	f899 0000 	ldrb.w	r0, [r9]
    3464:	b908      	cbnz	r0, 346a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    3466:	4628      	mov	r0, r5
    3468:	e33d      	b.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
			OUTC(*fp++);
    346a:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
    346e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    3470:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    3472:	d006      	beq.n	3482 <cbvprintf+0x32>
			OUTC('%');
    3474:	4659      	mov	r1, fp
    3476:	47d0      	blx	sl
    3478:	2800      	cmp	r0, #0
    347a:	f2c0 8334 	blt.w	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    347e:	3501      	adds	r5, #1
			break;
    3480:	e1f5      	b.n	386e <cbvprintf+0x41e>
		} state = {
    3482:	2218      	movs	r2, #24
    3484:	2100      	movs	r1, #0
    3486:	a80c      	add	r0, sp, #48	; 0x30
    3488:	f00a fb04 	bl	da94 <memset>
	if (*sp == '%') {
    348c:	f899 3001 	ldrb.w	r3, [r9, #1]
    3490:	2b25      	cmp	r3, #37	; 0x25
    3492:	d05a      	beq.n	354a <cbvprintf+0xfa>
    3494:	f109 0201 	add.w	r2, r9, #1
    3498:	4616      	mov	r6, r2
		switch (*sp) {
    349a:	f812 3b01 	ldrb.w	r3, [r2], #1
    349e:	2b2b      	cmp	r3, #43	; 0x2b
    34a0:	f000 808b 	beq.w	35ba <cbvprintf+0x16a>
    34a4:	d879      	bhi.n	359a <cbvprintf+0x14a>
    34a6:	2b20      	cmp	r3, #32
    34a8:	f000 808c 	beq.w	35c4 <cbvprintf+0x174>
    34ac:	2b23      	cmp	r3, #35	; 0x23
    34ae:	f000 808e 	beq.w	35ce <cbvprintf+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
    34b2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    34b6:	f003 0244 	and.w	r2, r3, #68	; 0x44
    34ba:	2a44      	cmp	r2, #68	; 0x44
    34bc:	d103      	bne.n	34c6 <cbvprintf+0x76>
		conv->flag_zero = false;
    34be:	f36f 1386 	bfc	r3, #6, #1
    34c2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    34c6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    34ca:	9605      	str	r6, [sp, #20]
    34cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    34d0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    34d4:	7833      	ldrb	r3, [r6, #0]
    34d6:	2b2a      	cmp	r3, #42	; 0x2a
    34d8:	d17e      	bne.n	35d8 <cbvprintf+0x188>
		conv->width_star = true;
    34da:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    34de:	f043 0301 	orr.w	r3, r3, #1
    34e2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    34e6:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    34e8:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    34ea:	781a      	ldrb	r2, [r3, #0]
    34ec:	2a2e      	cmp	r2, #46	; 0x2e
    34ee:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    34f2:	bf0c      	ite	eq
    34f4:	2101      	moveq	r1, #1
    34f6:	2100      	movne	r1, #0
    34f8:	f361 0241 	bfi	r2, r1, #1, #1
    34fc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    3500:	d10b      	bne.n	351a <cbvprintf+0xca>
	++sp;
    3502:	1c5a      	adds	r2, r3, #1
    3504:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    3506:	785a      	ldrb	r2, [r3, #1]
    3508:	2a2a      	cmp	r2, #42	; 0x2a
    350a:	d17b      	bne.n	3604 <cbvprintf+0x1b4>
		conv->prec_star = true;
    350c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3510:	f042 0204 	orr.w	r2, r2, #4
    3514:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    3518:	3302      	adds	r3, #2
	switch (*sp) {
    351a:	4619      	mov	r1, r3
    351c:	f811 0b01 	ldrb.w	r0, [r1], #1
    3520:	286c      	cmp	r0, #108	; 0x6c
    3522:	f000 80b6 	beq.w	3692 <cbvprintf+0x242>
    3526:	d87d      	bhi.n	3624 <cbvprintf+0x1d4>
    3528:	2868      	cmp	r0, #104	; 0x68
    352a:	f000 8084 	beq.w	3636 <cbvprintf+0x1e6>
    352e:	286a      	cmp	r0, #106	; 0x6a
    3530:	f000 80b9 	beq.w	36a6 <cbvprintf+0x256>
    3534:	284c      	cmp	r0, #76	; 0x4c
    3536:	f000 80bd 	beq.w	36b4 <cbvprintf+0x264>
		conv->length_mod = LENGTH_NONE;
    353a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    353e:	f36f 02c6 	bfc	r2, #3, #4
    3542:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    3546:	4619      	mov	r1, r3
    3548:	e080      	b.n	364c <cbvprintf+0x1fc>
		conv->specifier = *sp++;
    354a:	f109 0202 	add.w	r2, r9, #2
    354e:	9202      	str	r2, [sp, #8]
    3550:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    3554:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3558:	07d9      	lsls	r1, r3, #31
    355a:	f140 814a 	bpl.w	37f2 <cbvprintf+0x3a2>
			width = va_arg(ap, int);
    355e:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    3562:	f1b8 0f00 	cmp.w	r8, #0
    3566:	da07      	bge.n	3578 <cbvprintf+0x128>
				conv->flag_dash = true;
    3568:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    356c:	f042 0204 	orr.w	r2, r2, #4
    3570:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    3574:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    3578:	075a      	lsls	r2, r3, #29
    357a:	f140 8143 	bpl.w	3804 <cbvprintf+0x3b4>
			int arg = va_arg(ap, int);
    357e:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    3582:	2f00      	cmp	r7, #0
    3584:	f280 8142 	bge.w	380c <cbvprintf+0x3bc>
				conv->prec_present = false;
    3588:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    358c:	f36f 0341 	bfc	r3, #1, #1
    3590:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    3594:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    3598:	e138      	b.n	380c <cbvprintf+0x3bc>
		switch (*sp) {
    359a:	2b2d      	cmp	r3, #45	; 0x2d
    359c:	d006      	beq.n	35ac <cbvprintf+0x15c>
    359e:	2b30      	cmp	r3, #48	; 0x30
    35a0:	d187      	bne.n	34b2 <cbvprintf+0x62>
			conv->flag_zero = true;
    35a2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    35a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    35aa:	e003      	b.n	35b4 <cbvprintf+0x164>
			conv->flag_dash = true;
    35ac:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    35b0:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    35b4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    35b8:	e76e      	b.n	3498 <cbvprintf+0x48>
			conv->flag_plus = true;
    35ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    35be:	f043 0308 	orr.w	r3, r3, #8
    35c2:	e7f7      	b.n	35b4 <cbvprintf+0x164>
			conv->flag_space = true;
    35c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    35c8:	f043 0310 	orr.w	r3, r3, #16
    35cc:	e7f2      	b.n	35b4 <cbvprintf+0x164>
			conv->flag_hash = true;
    35ce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    35d2:	f043 0320 	orr.w	r3, r3, #32
    35d6:	e7ed      	b.n	35b4 <cbvprintf+0x164>
	size_t width = extract_decimal(&sp);
    35d8:	a805      	add	r0, sp, #20
    35da:	f7ff fed9 	bl	3390 <extract_decimal>
	if (sp != wp) {
    35de:	9b05      	ldr	r3, [sp, #20]
    35e0:	42b3      	cmp	r3, r6
    35e2:	d081      	beq.n	34e8 <cbvprintf+0x98>
		conv->unsupported |= ((conv->width_value < 0)
    35e4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    35e8:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    35ea:	f3c1 0240 	ubfx	r2, r1, #1, #1
    35ee:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    35f2:	0052      	lsls	r2, r2, #1
    35f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    35f8:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    35fc:	430a      	orrs	r2, r1
    35fe:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    3602:	e771      	b.n	34e8 <cbvprintf+0x98>
	size_t prec = extract_decimal(&sp);
    3604:	a805      	add	r0, sp, #20
    3606:	f7ff fec3 	bl	3390 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    360a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    360e:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    3610:	f3c3 0240 	ubfx	r2, r3, #1, #1
    3614:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    3618:	f360 0341 	bfi	r3, r0, #1, #1
    361c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    3620:	9b05      	ldr	r3, [sp, #20]
    3622:	e77a      	b.n	351a <cbvprintf+0xca>
	switch (*sp) {
    3624:	2874      	cmp	r0, #116	; 0x74
    3626:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    362a:	d040      	beq.n	36ae <cbvprintf+0x25e>
    362c:	287a      	cmp	r0, #122	; 0x7a
    362e:	d184      	bne.n	353a <cbvprintf+0xea>
		conv->length_mod = LENGTH_Z;
    3630:	4613      	mov	r3, r2
    3632:	2206      	movs	r2, #6
    3634:	e028      	b.n	3688 <cbvprintf+0x238>
		if (*++sp == 'h') {
    3636:	785a      	ldrb	r2, [r3, #1]
    3638:	2a68      	cmp	r2, #104	; 0x68
    363a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    363e:	d121      	bne.n	3684 <cbvprintf+0x234>
			conv->length_mod = LENGTH_HH;
    3640:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    3642:	f361 02c6 	bfi	r2, r1, #3, #4
    3646:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    364a:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    364c:	460b      	mov	r3, r1
    364e:	f813 2b01 	ldrb.w	r2, [r3], #1
    3652:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    3654:	2a78      	cmp	r2, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    3656:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    365a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    365e:	f200 80c0 	bhi.w	37e2 <cbvprintf+0x392>
    3662:	2a57      	cmp	r2, #87	; 0x57
    3664:	d833      	bhi.n	36ce <cbvprintf+0x27e>
    3666:	2a41      	cmp	r2, #65	; 0x41
    3668:	d003      	beq.n	3672 <cbvprintf+0x222>
    366a:	3a45      	subs	r2, #69	; 0x45
    366c:	2a02      	cmp	r2, #2
    366e:	f200 80b8 	bhi.w	37e2 <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
    3672:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3676:	2204      	movs	r2, #4
    3678:	f362 0302 	bfi	r3, r2, #0, #3
    367c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    3680:	2301      	movs	r3, #1
			break;
    3682:	e085      	b.n	3790 <cbvprintf+0x340>
			conv->length_mod = LENGTH_H;
    3684:	4613      	mov	r3, r2
    3686:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    3688:	f362 03c6 	bfi	r3, r2, #3, #4
    368c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    3690:	e7dc      	b.n	364c <cbvprintf+0x1fc>
		if (*++sp == 'l') {
    3692:	785a      	ldrb	r2, [r3, #1]
    3694:	2a6c      	cmp	r2, #108	; 0x6c
    3696:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    369a:	d101      	bne.n	36a0 <cbvprintf+0x250>
			conv->length_mod = LENGTH_LL;
    369c:	2104      	movs	r1, #4
    369e:	e7d0      	b.n	3642 <cbvprintf+0x1f2>
			conv->length_mod = LENGTH_L;
    36a0:	4613      	mov	r3, r2
    36a2:	2203      	movs	r2, #3
    36a4:	e7f0      	b.n	3688 <cbvprintf+0x238>
		conv->length_mod = LENGTH_J;
    36a6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    36aa:	2205      	movs	r2, #5
    36ac:	e7ec      	b.n	3688 <cbvprintf+0x238>
		conv->length_mod = LENGTH_T;
    36ae:	4613      	mov	r3, r2
    36b0:	2207      	movs	r2, #7
    36b2:	e7e9      	b.n	3688 <cbvprintf+0x238>
		conv->unsupported = true;
    36b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    36b8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    36bc:	f023 0302 	bic.w	r3, r3, #2
    36c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    36c4:	f043 0302 	orr.w	r3, r3, #2
    36c8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    36cc:	e7be      	b.n	364c <cbvprintf+0x1fc>
	switch (conv->specifier) {
    36ce:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    36d2:	2920      	cmp	r1, #32
    36d4:	f200 8085 	bhi.w	37e2 <cbvprintf+0x392>
    36d8:	a001      	add	r0, pc, #4	; (adr r0, 36e0 <cbvprintf+0x290>)
    36da:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    36de:	bf00      	nop
    36e0:	000037a5 	.word	0x000037a5
    36e4:	000037e3 	.word	0x000037e3
    36e8:	000037e3 	.word	0x000037e3
    36ec:	000037e3 	.word	0x000037e3
    36f0:	000037e3 	.word	0x000037e3
    36f4:	000037e3 	.word	0x000037e3
    36f8:	000037e3 	.word	0x000037e3
    36fc:	000037e3 	.word	0x000037e3
    3700:	000037e3 	.word	0x000037e3
    3704:	00003673 	.word	0x00003673
    3708:	000037e3 	.word	0x000037e3
    370c:	000037a5 	.word	0x000037a5
    3710:	00003765 	.word	0x00003765
    3714:	00003673 	.word	0x00003673
    3718:	00003673 	.word	0x00003673
    371c:	00003673 	.word	0x00003673
    3720:	000037e3 	.word	0x000037e3
    3724:	00003765 	.word	0x00003765
    3728:	000037e3 	.word	0x000037e3
    372c:	000037e3 	.word	0x000037e3
    3730:	000037e3 	.word	0x000037e3
    3734:	000037e3 	.word	0x000037e3
    3738:	000037ad 	.word	0x000037ad
    373c:	000037a5 	.word	0x000037a5
    3740:	000037c9 	.word	0x000037c9
    3744:	000037e3 	.word	0x000037e3
    3748:	000037e3 	.word	0x000037e3
    374c:	000037c9 	.word	0x000037c9
    3750:	000037e3 	.word	0x000037e3
    3754:	000037a5 	.word	0x000037a5
    3758:	000037e3 	.word	0x000037e3
    375c:	000037e3 	.word	0x000037e3
    3760:	000037a5 	.word	0x000037a5
		conv->specifier_cat = SPECIFIER_SINT;
    3764:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    3768:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    376a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    376e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3772:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    3774:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    3778:	bf02      	ittt	eq
    377a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    377e:	f041 0101 	orreq.w	r1, r1, #1
    3782:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    3786:	2a63      	cmp	r2, #99	; 0x63
    3788:	d131      	bne.n	37ee <cbvprintf+0x39e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    378a:	3b00      	subs	r3, #0
    378c:	bf18      	it	ne
    378e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    3790:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3794:	f3c2 0140 	ubfx	r1, r2, #1, #1
    3798:	430b      	orrs	r3, r1
    379a:	f363 0241 	bfi	r2, r3, #1, #1
    379e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    37a2:	e6d7      	b.n	3554 <cbvprintf+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
    37a4:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    37a8:	2002      	movs	r0, #2
    37aa:	e7de      	b.n	376a <cbvprintf+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
    37ac:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    37b0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    37b4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    37b8:	2103      	movs	r1, #3
    37ba:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    37be:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    37c0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    37c4:	4143      	adcs	r3, r0
    37c6:	e7e3      	b.n	3790 <cbvprintf+0x340>
		conv->specifier_cat = SPECIFIER_PTR;
    37c8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    37cc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    37ce:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    37d2:	f361 0202 	bfi	r2, r1, #0, #3
    37d6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    37da:	bf14      	ite	ne
    37dc:	2301      	movne	r3, #1
    37de:	2300      	moveq	r3, #0
    37e0:	e7d6      	b.n	3790 <cbvprintf+0x340>
		conv->invalid = true;
    37e2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    37e6:	f043 0301 	orr.w	r3, r3, #1
    37ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    37ee:	2300      	movs	r3, #0
    37f0:	e7ce      	b.n	3790 <cbvprintf+0x340>
		} else if (conv->width_present) {
    37f2:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    37f6:	2a00      	cmp	r2, #0
			width = conv->width_value;
    37f8:	bfb4      	ite	lt
    37fa:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    37fe:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    3802:	e6b9      	b.n	3578 <cbvprintf+0x128>
		} else if (conv->prec_present) {
    3804:	079f      	lsls	r7, r3, #30
    3806:	f57f aec5 	bpl.w	3594 <cbvprintf+0x144>
			precision = conv->prec_value;
    380a:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    380c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    3810:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3812:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    3816:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    381a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    381e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3820:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    3824:	d139      	bne.n	389a <cbvprintf+0x44a>
			switch (length_mod) {
    3826:	1ecb      	subs	r3, r1, #3
    3828:	2b04      	cmp	r3, #4
    382a:	d823      	bhi.n	3874 <cbvprintf+0x424>
    382c:	e8df f003 	tbb	[pc, r3]
    3830:	22090903 	.word	0x22090903
    3834:	22          	.byte	0x22
    3835:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    3836:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    383a:	17da      	asrs	r2, r3, #31
    383c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    3840:	e006      	b.n	3850 <cbvprintf+0x400>
					(sint_value_type)va_arg(ap, intmax_t);
    3842:	3407      	adds	r4, #7
    3844:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    3848:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    384c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    3850:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3854:	f013 0603 	ands.w	r6, r3, #3
    3858:	d057      	beq.n	390a <cbvprintf+0x4ba>
			OUTS(sp, fp);
    385a:	9b02      	ldr	r3, [sp, #8]
    385c:	464a      	mov	r2, r9
    385e:	4659      	mov	r1, fp
    3860:	4650      	mov	r0, sl
    3862:	f009 faf3 	bl	ce4c <outs>
    3866:	2800      	cmp	r0, #0
    3868:	f2c0 813d 	blt.w	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    386c:	4405      	add	r5, r0
			OUTS(bps, bpe);
    386e:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3872:	e5f5      	b.n	3460 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3874:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    3878:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    387a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    387e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    3882:	d105      	bne.n	3890 <cbvprintf+0x440>
				value->uint = (unsigned char)value->uint;
    3884:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    3888:	930c      	str	r3, [sp, #48]	; 0x30
    388a:	2300      	movs	r3, #0
    388c:	930d      	str	r3, [sp, #52]	; 0x34
    388e:	e7df      	b.n	3850 <cbvprintf+0x400>
			} else if (length_mod == LENGTH_H) {
    3890:	2902      	cmp	r1, #2
    3892:	d1dd      	bne.n	3850 <cbvprintf+0x400>
				value->sint = (short)value->sint;
    3894:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    3898:	e7cf      	b.n	383a <cbvprintf+0x3ea>
		} else if (specifier_cat == SPECIFIER_UINT) {
    389a:	2b02      	cmp	r3, #2
    389c:	d123      	bne.n	38e6 <cbvprintf+0x496>
			switch (length_mod) {
    389e:	1ecb      	subs	r3, r1, #3
    38a0:	2b04      	cmp	r3, #4
    38a2:	d813      	bhi.n	38cc <cbvprintf+0x47c>
    38a4:	e8df f003 	tbb	[pc, r3]
    38a8:	120a0a03 	.word	0x120a0a03
    38ac:	12          	.byte	0x12
    38ad:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    38ae:	6822      	ldr	r2, [r4, #0]
    38b0:	920c      	str	r2, [sp, #48]	; 0x30
    38b2:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    38b4:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    38b6:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    38b8:	4604      	mov	r4, r0
    38ba:	e7c9      	b.n	3850 <cbvprintf+0x400>
					(uint_value_type)va_arg(ap,
    38bc:	1de0      	adds	r0, r4, #7
    38be:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    38c2:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    38c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    38ca:	e7f5      	b.n	38b8 <cbvprintf+0x468>
					(uint_value_type)va_arg(ap, size_t);
    38cc:	f854 3b04 	ldr.w	r3, [r4], #4
    38d0:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    38d2:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    38d4:	f04f 0300 	mov.w	r3, #0
    38d8:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    38da:	d0d3      	beq.n	3884 <cbvprintf+0x434>
			} else if (length_mod == LENGTH_H) {
    38dc:	2902      	cmp	r1, #2
    38de:	d1b7      	bne.n	3850 <cbvprintf+0x400>
				value->uint = (unsigned short)value->uint;
    38e0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    38e4:	e7d0      	b.n	3888 <cbvprintf+0x438>
		} else if (specifier_cat == SPECIFIER_FP) {
    38e6:	2b04      	cmp	r3, #4
    38e8:	d109      	bne.n	38fe <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, long long);
    38ea:	1de3      	adds	r3, r4, #7
    38ec:	f023 0307 	bic.w	r3, r3, #7
    38f0:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    38f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    38f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    38fc:	e7a8      	b.n	3850 <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_PTR) {
    38fe:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    3900:	bf04      	itt	eq
    3902:	f854 3b04 	ldreq.w	r3, [r4], #4
    3906:	930c      	streq	r3, [sp, #48]	; 0x30
    3908:	e7a2      	b.n	3850 <cbvprintf+0x400>
		switch (conv->specifier) {
    390a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    390e:	2878      	cmp	r0, #120	; 0x78
    3910:	d8ad      	bhi.n	386e <cbvprintf+0x41e>
    3912:	2862      	cmp	r0, #98	; 0x62
    3914:	d820      	bhi.n	3958 <cbvprintf+0x508>
    3916:	2825      	cmp	r0, #37	; 0x25
    3918:	f43f adac 	beq.w	3474 <cbvprintf+0x24>
    391c:	2858      	cmp	r0, #88	; 0x58
    391e:	d1a6      	bne.n	386e <cbvprintf+0x41e>
			bps = encode_uint(value->uint, conv, buf, bpe);
    3920:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    3924:	9300      	str	r3, [sp, #0]
    3926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    392a:	ab06      	add	r3, sp, #24
    392c:	aa0e      	add	r2, sp, #56	; 0x38
    392e:	f7ff fd43 	bl	33b8 <encode_uint>
    3932:	4681      	mov	r9, r0
			if (precision >= 0) {
    3934:	2f00      	cmp	r7, #0
    3936:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    393a:	db0b      	blt.n	3954 <cbvprintf+0x504>
				conv->flag_zero = false;
    393c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    3940:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    3944:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    3948:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    394a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    394e:	d901      	bls.n	3954 <cbvprintf+0x504>
					conv->pad0_value = precision - (int)len;
    3950:	1afb      	subs	r3, r7, r3
    3952:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    3954:	4607      	mov	r7, r0
    3956:	e03c      	b.n	39d2 <cbvprintf+0x582>
		switch (conv->specifier) {
    3958:	3863      	subs	r0, #99	; 0x63
    395a:	2815      	cmp	r0, #21
    395c:	d887      	bhi.n	386e <cbvprintf+0x41e>
    395e:	a201      	add	r2, pc, #4	; (adr r2, 3964 <cbvprintf+0x514>)
    3960:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    3964:	000039e3 	.word	0x000039e3
    3968:	00003a45 	.word	0x00003a45
    396c:	0000386f 	.word	0x0000386f
    3970:	0000386f 	.word	0x0000386f
    3974:	0000386f 	.word	0x0000386f
    3978:	0000386f 	.word	0x0000386f
    397c:	00003a45 	.word	0x00003a45
    3980:	0000386f 	.word	0x0000386f
    3984:	0000386f 	.word	0x0000386f
    3988:	0000386f 	.word	0x0000386f
    398c:	0000386f 	.word	0x0000386f
    3990:	00003a9f 	.word	0x00003a9f
    3994:	00003a6d 	.word	0x00003a6d
    3998:	00003a71 	.word	0x00003a71
    399c:	0000386f 	.word	0x0000386f
    39a0:	0000386f 	.word	0x0000386f
    39a4:	000039bd 	.word	0x000039bd
    39a8:	0000386f 	.word	0x0000386f
    39ac:	00003a6d 	.word	0x00003a6d
    39b0:	0000386f 	.word	0x0000386f
    39b4:	0000386f 	.word	0x0000386f
    39b8:	00003a6d 	.word	0x00003a6d
			if (precision >= 0) {
    39bc:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    39be:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    39c2:	db0a      	blt.n	39da <cbvprintf+0x58a>
				len = strnlen(bps, precision);
    39c4:	4639      	mov	r1, r7
    39c6:	4648      	mov	r0, r9
    39c8:	f00a f97f 	bl	dcca <strnlen>
			bpe = bps + len;
    39cc:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    39d0:	2600      	movs	r6, #0
		if (bps == NULL) {
    39d2:	f1b9 0f00 	cmp.w	r9, #0
    39d6:	d10c      	bne.n	39f2 <cbvprintf+0x5a2>
    39d8:	e749      	b.n	386e <cbvprintf+0x41e>
				len = strlen(bps);
    39da:	4648      	mov	r0, r9
    39dc:	f7fd fab1 	bl	f42 <strlen>
    39e0:	e7f4      	b.n	39cc <cbvprintf+0x57c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    39e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    39e4:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    39e8:	2600      	movs	r6, #0
			bpe = buf + 1;
    39ea:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    39ee:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    39f2:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    39f6:	b106      	cbz	r6, 39fa <cbvprintf+0x5aa>
			nj_len += 1U;
    39f8:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    39fa:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    39fe:	06d0      	lsls	r0, r2, #27
    3a00:	d566      	bpl.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
			nj_len += 2U;
    3a02:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    3a04:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    3a06:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    3a08:	bf48      	it	mi
    3a0a:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    3a0c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    3a0e:	bf48      	it	mi
    3a10:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    3a12:	f1b8 0f00 	cmp.w	r8, #0
    3a16:	dd73      	ble.n	3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
			if (!conv->flag_dash) {
    3a18:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    3a1c:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    3a20:	f3c2 0380 	ubfx	r3, r2, #2, #1
    3a24:	9303      	str	r3, [sp, #12]
    3a26:	0753      	lsls	r3, r2, #29
    3a28:	d46a      	bmi.n	3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
				if (conv->flag_zero) {
    3a2a:	0650      	lsls	r0, r2, #25
    3a2c:	d55e      	bpl.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
					if (sign != 0) {
    3a2e:	b13e      	cbz	r6, 3a40 <cbvprintf+0x5f0>
						OUTC(sign);
    3a30:	4659      	mov	r1, fp
    3a32:	4630      	mov	r0, r6
    3a34:	47d0      	blx	sl
    3a36:	2800      	cmp	r0, #0
    3a38:	db55      	blt.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
						sign = 0;
    3a3a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    3a3c:	3501      	adds	r5, #1
						sign = 0;
    3a3e:	461e      	mov	r6, r3
					pad = '0';
    3a40:	2330      	movs	r3, #48	; 0x30
    3a42:	e054      	b.n	3aee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x56>
			if (conv->flag_plus) {
    3a44:	071e      	lsls	r6, r3, #28
    3a46:	d40f      	bmi.n	3a68 <cbvprintf+0x618>
				sign = ' ';
    3a48:	f013 0610 	ands.w	r6, r3, #16
    3a4c:	bf18      	it	ne
    3a4e:	2620      	movne	r6, #32
			sint = value->sint;
    3a50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    3a54:	2b00      	cmp	r3, #0
    3a56:	f6bf af63 	bge.w	3920 <cbvprintf+0x4d0>
				value->uint = (uint_value_type)-sint;
    3a5a:	4252      	negs	r2, r2
    3a5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3a60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    3a64:	262d      	movs	r6, #45	; 0x2d
    3a66:	e75b      	b.n	3920 <cbvprintf+0x4d0>
				sign = '+';
    3a68:	262b      	movs	r6, #43	; 0x2b
    3a6a:	e7f1      	b.n	3a50 <cbvprintf+0x600>
		switch (conv->specifier) {
    3a6c:	2600      	movs	r6, #0
    3a6e:	e757      	b.n	3920 <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
    3a70:	980c      	ldr	r0, [sp, #48]	; 0x30
    3a72:	b340      	cbz	r0, 3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3a74:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    3a78:	9300      	str	r3, [sp, #0]
    3a7a:	aa0e      	add	r2, sp, #56	; 0x38
    3a7c:	ab06      	add	r3, sp, #24
    3a7e:	2100      	movs	r1, #0
    3a80:	f7ff fc9a 	bl	33b8 <encode_uint>
				conv->altform_0c = true;
    3a84:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    3a88:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3a8c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    3a90:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3a94:	4681      	mov	r9, r0
				conv->altform_0c = true;
    3a96:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    3a9a:	2600      	movs	r6, #0
				goto prec_int_pad0;
    3a9c:	e74a      	b.n	3934 <cbvprintf+0x4e4>
				store_count(conv, value->ptr, count);
    3a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    3aa0:	2907      	cmp	r1, #7
    3aa2:	f63f aee4 	bhi.w	386e <cbvprintf+0x41e>
    3aa6:	e8df f001 	tbb	[pc, r1]
    3aaa:	040c      	.short	0x040c
    3aac:	08080c06 	.word	0x08080c06
    3ab0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    3ab2:	701d      	strb	r5, [r3, #0]
		break;
    3ab4:	e6db      	b.n	386e <cbvprintf+0x41e>
		*(short *)dp = (short)count;
    3ab6:	801d      	strh	r5, [r3, #0]
		break;
    3ab8:	e6d9      	b.n	386e <cbvprintf+0x41e>
		*(intmax_t *)dp = (intmax_t)count;
    3aba:	17ea      	asrs	r2, r5, #31
    3abc:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    3ac0:	e6d5      	b.n	386e <cbvprintf+0x41e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3ac2:	601d      	str	r5, [r3, #0]
		break;
    3ac4:	e6d3      	b.n	386e <cbvprintf+0x41e>
			bpe = bps + 5;
    3ac6:	4f2e      	ldr	r7, [pc, #184]	; (3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    3ac8:	4606      	mov	r6, r0
			bps = "(nil)";
    3aca:	f1a7 0905 	sub.w	r9, r7, #5
    3ace:	e790      	b.n	39f2 <cbvprintf+0x5a2>
		} else if (conv->altform_0) {
    3ad0:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    3ad2:	bf48      	it	mi
    3ad4:	3301      	addmi	r3, #1
    3ad6:	e795      	b.n	3a04 <cbvprintf+0x5b4>
					OUTC(pad);
    3ad8:	4618      	mov	r0, r3
    3ada:	4659      	mov	r1, fp
    3adc:	9303      	str	r3, [sp, #12]
    3ade:	47d0      	blx	sl
    3ae0:	2800      	cmp	r0, #0
    3ae2:	9b03      	ldr	r3, [sp, #12]
    3ae4:	da04      	bge.n	3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>
#undef OUTS
#undef OUTC
}
    3ae6:	b013      	add	sp, #76	; 0x4c
    3ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    3aec:	2320      	movs	r3, #32
    3aee:	4445      	add	r5, r8
    3af0:	4642      	mov	r2, r8
				while (width-- > 0) {
    3af2:	2a00      	cmp	r2, #0
    3af4:	eba5 0108 	sub.w	r1, r5, r8
    3af8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3afc:	dcec      	bgt.n	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3afe:	460d      	mov	r5, r1
		if (sign != 0) {
    3b00:	b12e      	cbz	r6, 3b0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x76>
			OUTC(sign);
    3b02:	4659      	mov	r1, fp
    3b04:	4630      	mov	r0, r6
    3b06:	47d0      	blx	sl
    3b08:	2800      	cmp	r0, #0
    3b0a:	dbec      	blt.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3b0c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    3b0e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3b12:	06d9      	lsls	r1, r3, #27
    3b14:	d401      	bmi.n	3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
    3b16:	071a      	lsls	r2, r3, #28
    3b18:	d505      	bpl.n	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
				OUTC('0');
    3b1a:	4659      	mov	r1, fp
    3b1c:	2030      	movs	r0, #48	; 0x30
    3b1e:	47d0      	blx	sl
    3b20:	2800      	cmp	r0, #0
    3b22:	dbe0      	blt.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3b24:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3b26:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3b2a:	06db      	lsls	r3, r3, #27
    3b2c:	d506      	bpl.n	3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>
				OUTC(conv->specifier);
    3b2e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    3b32:	4659      	mov	r1, fp
    3b34:	47d0      	blx	sl
    3b36:	2800      	cmp	r0, #0
    3b38:	dbd5      	blt.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3b3a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    3b3c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    3b3e:	442e      	add	r6, r5
    3b40:	1b73      	subs	r3, r6, r5
    3b42:	2b00      	cmp	r3, #0
    3b44:	dc15      	bgt.n	3b72 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xda>
			OUTS(bps, bpe);
    3b46:	463b      	mov	r3, r7
    3b48:	464a      	mov	r2, r9
    3b4a:	4659      	mov	r1, fp
    3b4c:	4650      	mov	r0, sl
    3b4e:	f009 f97d 	bl	ce4c <outs>
    3b52:	2800      	cmp	r0, #0
    3b54:	dbc7      	blt.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3b56:	4405      	add	r5, r0
		while (width > 0) {
    3b58:	44a8      	add	r8, r5
    3b5a:	eba8 0305 	sub.w	r3, r8, r5
    3b5e:	2b00      	cmp	r3, #0
    3b60:	f77f ae85 	ble.w	386e <cbvprintf+0x41e>
			OUTC(' ');
    3b64:	4659      	mov	r1, fp
    3b66:	2020      	movs	r0, #32
    3b68:	47d0      	blx	sl
    3b6a:	2800      	cmp	r0, #0
    3b6c:	dbbb      	blt.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3b6e:	3501      	adds	r5, #1
			--width;
    3b70:	e7f3      	b.n	3b5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc2>
				OUTC('0');
    3b72:	4659      	mov	r1, fp
    3b74:	2030      	movs	r0, #48	; 0x30
    3b76:	47d0      	blx	sl
    3b78:	2800      	cmp	r0, #0
    3b7a:	dbb4      	blt.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3b7c:	3501      	adds	r5, #1
    3b7e:	e7df      	b.n	3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>
    3b80:	0000ee62 	.word	0x0000ee62

00003b84 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    3b84:	b508      	push	{r3, lr}
	__asm__ volatile(
    3b86:	f04f 0220 	mov.w	r2, #32
    3b8a:	f3ef 8311 	mrs	r3, BASEPRI
    3b8e:	f382 8812 	msr	BASEPRI_MAX, r2
    3b92:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    3b96:	f001 fe67 	bl	5868 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    3b9a:	4803      	ldr	r0, [pc, #12]	; (3ba8 <sys_reboot+0x24>)
    3b9c:	f009 f8bf 	bl	cd1e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3ba0:	f000 fe70 	bl	4884 <arch_cpu_idle>
    3ba4:	e7fc      	b.n	3ba0 <sys_reboot+0x1c>
    3ba6:	bf00      	nop
    3ba8:	0000ee63 	.word	0x0000ee63

00003bac <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    3bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3bb0:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    3bb2:	460c      	mov	r4, r1
    3bb4:	b959      	cbnz	r1, 3bce <msg_process+0x22>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    3bb6:	4d12      	ldr	r5, [pc, #72]	; (3c00 <msg_process+0x54>)
    3bb8:	4b12      	ldr	r3, [pc, #72]	; (3c04 <msg_process+0x58>)
	__ASSERT_NO_MSG(msg != NULL);
    3bba:	4f13      	ldr	r7, [pc, #76]	; (3c08 <msg_process+0x5c>)
    3bbc:	f8df 904c 	ldr.w	r9, [pc, #76]	; 3c0c <msg_process+0x60>
    3bc0:	f8df a04c 	ldr.w	sl, [pc, #76]	; 3c10 <msg_process+0x64>
	return __log_backends_end - __log_backends_start;
    3bc4:	1b5b      	subs	r3, r3, r5
    3bc6:	ea4f 1823 	mov.w	r8, r3, asr #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    3bca:	4544      	cmp	r4, r8
    3bcc:	db01      	blt.n	3bd2 <msg_process+0x26>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    3bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (log_backend_is_active(backend) &&
    3bd2:	4628      	mov	r0, r5
    3bd4:	f009 f965 	bl	cea2 <log_backend_is_active>
    3bd8:	b178      	cbz	r0, 3bfa <msg_process+0x4e>
	__ASSERT_NO_MSG(msg != NULL);
    3bda:	b94e      	cbnz	r6, 3bf0 <msg_process+0x44>
    3bdc:	4649      	mov	r1, r9
    3bde:	4650      	mov	r0, sl
    3be0:	2386      	movs	r3, #134	; 0x86
    3be2:	463a      	mov	r2, r7
    3be4:	f009 f94f 	bl	ce86 <assert_print>
    3be8:	2186      	movs	r1, #134	; 0x86
    3bea:	4638      	mov	r0, r7
    3bec:	f009 f944 	bl	ce78 <assert_post_action>
	backend->api->process(backend, msg);
    3bf0:	682b      	ldr	r3, [r5, #0]
    3bf2:	4631      	mov	r1, r6
    3bf4:	681b      	ldr	r3, [r3, #0]
    3bf6:	4628      	mov	r0, r5
    3bf8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    3bfa:	3401      	adds	r4, #1
    3bfc:	3510      	adds	r5, #16
    3bfe:	e7e4      	b.n	3bca <msg_process+0x1e>
    3c00:	0000e3f4 	.word	0x0000e3f4
    3c04:	0000e414 	.word	0x0000e414
    3c08:	0000ee8c 	.word	0x0000ee8c
    3c0c:	0000eec4 	.word	0x0000eec4
    3c10:	0000eb06 	.word	0x0000eb06

00003c14 <log_format_func_t_get>:
}
    3c14:	4b01      	ldr	r3, [pc, #4]	; (3c1c <log_format_func_t_get+0x8>)
    3c16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3c1a:	4770      	bx	lr
    3c1c:	0000e5b0 	.word	0x0000e5b0

00003c20 <log_core_init>:
	panic_mode = false;
    3c20:	4a05      	ldr	r2, [pc, #20]	; (3c38 <log_core_init+0x18>)
    3c22:	2300      	movs	r3, #0
    3c24:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    3c26:	4a05      	ldr	r2, [pc, #20]	; (3c3c <log_core_init+0x1c>)
    3c28:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    3c2a:	4b05      	ldr	r3, [pc, #20]	; (3c40 <log_core_init+0x20>)
    3c2c:	4a05      	ldr	r2, [pc, #20]	; (3c44 <log_core_init+0x24>)
    3c2e:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    3c30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3c34:	f000 ba90 	b.w	4158 <log_output_timestamp_freq_set>
    3c38:	2000d2f6 	.word	0x2000d2f6
    3c3c:	200009c8 	.word	0x200009c8
    3c40:	2000009c 	.word	0x2000009c
    3c44:	0000cea9 	.word	0x0000cea9

00003c48 <log_init>:
{
    3c48:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    3c4a:	4b19      	ldr	r3, [pc, #100]	; (3cb0 <log_init+0x68>)
    3c4c:	4c19      	ldr	r4, [pc, #100]	; (3cb4 <log_init+0x6c>)
    3c4e:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    3c50:	2c90      	cmp	r4, #144	; 0x90
    3c52:	d90b      	bls.n	3c6c <log_init+0x24>
    3c54:	4918      	ldr	r1, [pc, #96]	; (3cb8 <log_init+0x70>)
    3c56:	4819      	ldr	r0, [pc, #100]	; (3cbc <log_init+0x74>)
    3c58:	4a19      	ldr	r2, [pc, #100]	; (3cc0 <log_init+0x78>)
    3c5a:	f240 2373 	movw	r3, #627	; 0x273
    3c5e:	f009 f912 	bl	ce86 <assert_print>
    3c62:	4817      	ldr	r0, [pc, #92]	; (3cc0 <log_init+0x78>)
    3c64:	f240 2173 	movw	r1, #627	; 0x273
    3c68:	f009 f906 	bl	ce78 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3c6c:	f3bf 8f5b 	dmb	ish
    3c70:	4b14      	ldr	r3, [pc, #80]	; (3cc4 <log_init+0x7c>)
    3c72:	e853 6f00 	ldrex	r6, [r3]
    3c76:	1c72      	adds	r2, r6, #1
    3c78:	e843 2100 	strex	r1, r2, [r3]
    3c7c:	2900      	cmp	r1, #0
    3c7e:	d1f8      	bne.n	3c72 <log_init+0x2a>
    3c80:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3c84:	b91e      	cbnz	r6, 3c8e <log_init+0x46>
    3c86:	1125      	asrs	r5, r4, #4
    3c88:	4c09      	ldr	r4, [pc, #36]	; (3cb0 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    3c8a:	42ae      	cmp	r6, r5
    3c8c:	db00      	blt.n	3c90 <log_init+0x48>
}
    3c8e:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    3c90:	7b23      	ldrb	r3, [r4, #12]
    3c92:	b153      	cbz	r3, 3caa <log_init+0x62>
			if (backend->api->init != NULL) {
    3c94:	6823      	ldr	r3, [r4, #0]
    3c96:	699b      	ldr	r3, [r3, #24]
    3c98:	b10b      	cbz	r3, 3c9e <log_init+0x56>
				backend->api->init(backend);
    3c9a:	4620      	mov	r0, r4
    3c9c:	4798      	blx	r3
			log_backend_enable(backend,
    3c9e:	6863      	ldr	r3, [r4, #4]
    3ca0:	2204      	movs	r2, #4
    3ca2:	6819      	ldr	r1, [r3, #0]
    3ca4:	4620      	mov	r0, r4
    3ca6:	f000 f86f 	bl	3d88 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3caa:	3601      	adds	r6, #1
    3cac:	3410      	adds	r4, #16
    3cae:	e7ec      	b.n	3c8a <log_init+0x42>
    3cb0:	0000e3f4 	.word	0x0000e3f4
    3cb4:	0000e414 	.word	0x0000e414
    3cb8:	0000ef1c 	.word	0x0000ef1c
    3cbc:	0000eb06 	.word	0x0000eb06
    3cc0:	0000eed7 	.word	0x0000eed7
    3cc4:	200009cc 	.word	0x200009cc

00003cc8 <z_impl_log_panic>:
{
    3cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    3cca:	4f0c      	ldr	r7, [pc, #48]	; (3cfc <z_impl_log_panic+0x34>)
    3ccc:	783d      	ldrb	r5, [r7, #0]
    3cce:	b94d      	cbnz	r5, 3ce4 <z_impl_log_panic+0x1c>
    3cd0:	4c0b      	ldr	r4, [pc, #44]	; (3d00 <z_impl_log_panic+0x38>)
    3cd2:	4e0c      	ldr	r6, [pc, #48]	; (3d04 <z_impl_log_panic+0x3c>)
	log_init();
    3cd4:	f7ff ffb8 	bl	3c48 <log_init>
    3cd8:	1b36      	subs	r6, r6, r4
    3cda:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3cdc:	42b5      	cmp	r5, r6
    3cde:	db02      	blt.n	3ce6 <z_impl_log_panic+0x1e>
	panic_mode = true;
    3ce0:	2301      	movs	r3, #1
    3ce2:	703b      	strb	r3, [r7, #0]
}
    3ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    3ce6:	4620      	mov	r0, r4
    3ce8:	f009 f8db 	bl	cea2 <log_backend_is_active>
    3cec:	b118      	cbz	r0, 3cf6 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
    3cee:	6823      	ldr	r3, [r4, #0]
    3cf0:	4620      	mov	r0, r4
    3cf2:	695b      	ldr	r3, [r3, #20]
    3cf4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3cf6:	3501      	adds	r5, #1
    3cf8:	3410      	adds	r4, #16
    3cfa:	e7ef      	b.n	3cdc <z_impl_log_panic+0x14>
    3cfc:	2000d2f6 	.word	0x2000d2f6
    3d00:	0000e3f4 	.word	0x0000e3f4
    3d04:	0000e414 	.word	0x0000e414

00003d08 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    3d08:	4b01      	ldr	r3, [pc, #4]	; (3d10 <z_log_notify_backend_enabled+0x8>)
    3d0a:	2201      	movs	r2, #1
    3d0c:	701a      	strb	r2, [r3, #0]
}
    3d0e:	4770      	bx	lr
    3d10:	2000d2f5 	.word	0x2000d2f5

00003d14 <z_log_dropped>:
    3d14:	4b0c      	ldr	r3, [pc, #48]	; (3d48 <z_log_dropped+0x34>)
    3d16:	f3bf 8f5b 	dmb	ish
    3d1a:	e853 2f00 	ldrex	r2, [r3]
    3d1e:	3201      	adds	r2, #1
    3d20:	e843 2100 	strex	r1, r2, [r3]
    3d24:	2900      	cmp	r1, #0
    3d26:	d1f8      	bne.n	3d1a <z_log_dropped+0x6>
    3d28:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    3d2c:	b158      	cbz	r0, 3d46 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3d2e:	f3bf 8f5b 	dmb	ish
    3d32:	4b06      	ldr	r3, [pc, #24]	; (3d4c <z_log_dropped+0x38>)
    3d34:	e853 2f00 	ldrex	r2, [r3]
    3d38:	3a01      	subs	r2, #1
    3d3a:	e843 2100 	strex	r1, r2, [r3]
    3d3e:	2900      	cmp	r1, #0
    3d40:	d1f8      	bne.n	3d34 <z_log_dropped+0x20>
    3d42:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    3d46:	4770      	bx	lr
    3d48:	200009c8 	.word	0x200009c8
    3d4c:	200009c4 	.word	0x200009c4

00003d50 <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    3d50:	4b05      	ldr	r3, [pc, #20]	; (3d68 <z_log_msg2_commit+0x18>)
{
    3d52:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    3d54:	681b      	ldr	r3, [r3, #0]
{
    3d56:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3d58:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    3d5a:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    3d5c:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    3d5e:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    3d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    3d64:	f7ff bf22 	b.w	3bac <msg_process>
    3d68:	2000009c 	.word	0x2000009c

00003d6c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3d6c:	4a04      	ldr	r2, [pc, #16]	; (3d80 <log_source_name_get+0x14>)
    3d6e:	4b05      	ldr	r3, [pc, #20]	; (3d84 <log_source_name_get+0x18>)
    3d70:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3d72:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    3d76:	bf34      	ite	cc
    3d78:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3d7c:	2000      	movcs	r0, #0
}
    3d7e:	4770      	bx	lr
    3d80:	0000e3a4 	.word	0x0000e3a4
    3d84:	0000e3f4 	.word	0x0000e3f4

00003d88 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    3d88:	b570      	push	{r4, r5, r6, lr}
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3d8a:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    3d8c:	4c0e      	ldr	r4, [pc, #56]	; (3dc8 <log_backend_enable+0x40>)
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3d8e:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    3d90:	1b04      	subs	r4, r0, r4
    3d92:	1124      	asrs	r4, r4, #4
{
    3d94:	4605      	mov	r5, r0
    3d96:	460e      	mov	r6, r1
	id += backend - log_backend_get(0);
    3d98:	3401      	adds	r4, #1
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3d9a:	b963      	cbnz	r3, 3db6 <log_backend_enable+0x2e>
    3d9c:	490b      	ldr	r1, [pc, #44]	; (3dcc <log_backend_enable+0x44>)
    3d9e:	4a0c      	ldr	r2, [pc, #48]	; (3dd0 <log_backend_enable+0x48>)
    3da0:	480c      	ldr	r0, [pc, #48]	; (3dd4 <log_backend_enable+0x4c>)
    3da2:	23bb      	movs	r3, #187	; 0xbb
    3da4:	f009 f86f 	bl	ce86 <assert_print>
    3da8:	480b      	ldr	r0, [pc, #44]	; (3dd8 <log_backend_enable+0x50>)
    3daa:	f009 f86c 	bl	ce86 <assert_print>
    3dae:	4808      	ldr	r0, [pc, #32]	; (3dd0 <log_backend_enable+0x48>)
    3db0:	21bb      	movs	r1, #187	; 0xbb
    3db2:	f009 f861 	bl	ce78 <assert_post_action>
	backend->cb->id = id;
    3db6:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
    3db8:	2201      	movs	r2, #1
	}

	log_backend_id_set(backend, id);
    3dba:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    3dbc:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    3dbe:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    3dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    3dc4:	f7ff bfa0 	b.w	3d08 <z_log_notify_backend_enabled>
    3dc8:	0000e3f4 	.word	0x0000e3f4
    3dcc:	0000ef9c 	.word	0x0000ef9c
    3dd0:	0000ef44 	.word	0x0000ef44
    3dd4:	0000eb06 	.word	0x0000eb06
    3dd8:	0000efb2 	.word	0x0000efb2

00003ddc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3ddc:	b40e      	push	{r1, r2, r3}
    3dde:	b503      	push	{r0, r1, lr}
    3de0:	ab03      	add	r3, sp, #12
    3de2:	4601      	mov	r1, r0
    3de4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3de8:	4804      	ldr	r0, [pc, #16]	; (3dfc <print_formatted+0x20>)
	va_start(args, fmt);
    3dea:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3dec:	f7ff fb30 	bl	3450 <cbvprintf>
	va_end(args);

	return length;
}
    3df0:	b002      	add	sp, #8
    3df2:	f85d eb04 	ldr.w	lr, [sp], #4
    3df6:	b003      	add	sp, #12
    3df8:	4770      	bx	lr
    3dfa:	bf00      	nop
    3dfc:	0000cedb 	.word	0x0000cedb

00003e00 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    3e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e04:	b087      	sub	sp, #28
    3e06:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3e08:	f001 0301 	and.w	r3, r1, #1
{
    3e0c:	9205      	str	r2, [sp, #20]
    3e0e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    3e12:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3e16:	9304      	str	r3, [sp, #16]
{
    3e18:	4607      	mov	r7, r0
    3e1a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    3e1c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3e20:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    3e24:	f009 f857 	bl	ced6 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    3e28:	4602      	mov	r2, r0
    3e2a:	2800      	cmp	r0, #0
    3e2c:	d044      	beq.n	3eb8 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    3e2e:	493a      	ldr	r1, [pc, #232]	; (3f18 <prefix_print+0x118>)
    3e30:	4638      	mov	r0, r7
    3e32:	f7ff ffd3 	bl	3ddc <print_formatted>
    3e36:	4605      	mov	r5, r0
	}

	if (stamp) {
    3e38:	f1bb 0f00 	cmp.w	fp, #0
    3e3c:	d008      	beq.n	3e50 <prefix_print+0x50>
	if (!format) {
    3e3e:	f018 0f44 	tst.w	r8, #68	; 0x44
    3e42:	d13b      	bne.n	3ebc <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    3e44:	4935      	ldr	r1, [pc, #212]	; (3f1c <prefix_print+0x11c>)
    3e46:	4622      	mov	r2, r4
    3e48:	4638      	mov	r0, r7
    3e4a:	f7ff ffc7 	bl	3ddc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    3e4e:	4405      	add	r5, r0
	if (color) {
    3e50:	9b04      	ldr	r3, [sp, #16]
    3e52:	b153      	cbz	r3, 3e6a <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    3e54:	4b32      	ldr	r3, [pc, #200]	; (3f20 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    3e56:	4933      	ldr	r1, [pc, #204]	; (3f24 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    3e58:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    3e5c:	4b32      	ldr	r3, [pc, #200]	; (3f28 <prefix_print+0x128>)
    3e5e:	4638      	mov	r0, r7
    3e60:	2a00      	cmp	r2, #0
    3e62:	bf08      	it	eq
    3e64:	461a      	moveq	r2, r3
    3e66:	f7ff ffb9 	bl	3ddc <print_formatted>
	if (level_on) {
    3e6a:	b13e      	cbz	r6, 3e7c <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    3e6c:	4b2f      	ldr	r3, [pc, #188]	; (3f2c <prefix_print+0x12c>)
    3e6e:	4930      	ldr	r1, [pc, #192]	; (3f30 <prefix_print+0x130>)
    3e70:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    3e74:	4638      	mov	r0, r7
    3e76:	f7ff ffb1 	bl	3ddc <print_formatted>
    3e7a:	4606      	mov	r6, r0
	if (source_id >= 0) {
    3e7c:	f1ba 0f00 	cmp.w	sl, #0
    3e80:	db16      	blt.n	3eb0 <prefix_print+0xb0>
		total += print_formatted(output,
    3e82:	9b05      	ldr	r3, [sp, #20]
    3e84:	2b00      	cmp	r3, #0
    3e86:	d045      	beq.n	3f14 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    3e88:	2301      	movs	r3, #1
    3e8a:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    3e8e:	4b29      	ldr	r3, [pc, #164]	; (3f34 <prefix_print+0x134>)
    3e90:	4c29      	ldr	r4, [pc, #164]	; (3f38 <prefix_print+0x138>)
    3e92:	f019 0f10 	tst.w	r9, #16
    3e96:	bf18      	it	ne
    3e98:	461c      	movne	r4, r3
    3e9a:	4651      	mov	r1, sl
    3e9c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    3ea0:	f7ff ff64 	bl	3d6c <log_source_name_get>
    3ea4:	4621      	mov	r1, r4
    3ea6:	4602      	mov	r2, r0
    3ea8:	4638      	mov	r0, r7
    3eaa:	f7ff ff97 	bl	3ddc <print_formatted>
    3eae:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    3eb0:	1970      	adds	r0, r6, r5
    3eb2:	b007      	add	sp, #28
    3eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    3eb8:	4605      	mov	r5, r0
    3eba:	e7bd      	b.n	3e38 <prefix_print+0x38>
	} else if (freq != 0U) {
    3ebc:	4b1f      	ldr	r3, [pc, #124]	; (3f3c <prefix_print+0x13c>)
    3ebe:	6818      	ldr	r0, [r3, #0]
    3ec0:	2800      	cmp	r0, #0
    3ec2:	d0c4      	beq.n	3e4e <prefix_print+0x4e>
		timestamp /= timestamp_div;
    3ec4:	4b1e      	ldr	r3, [pc, #120]	; (3f40 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    3ec6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    3eca:	681b      	ldr	r3, [r3, #0]
    3ecc:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    3ed0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    3ed4:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    3ed8:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    3edc:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    3ee0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    3ee4:	fbb3 f2f1 	udiv	r2, r3, r1
    3ee8:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3eec:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    3ef0:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3ef4:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    3ef8:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3efc:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    3f00:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3f02:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    3f06:	490f      	ldr	r1, [pc, #60]	; (3f44 <prefix_print+0x144>)
    3f08:	e9cd e001 	strd	lr, r0, [sp, #4]
    3f0c:	4638      	mov	r0, r7
    3f0e:	f7ff ff65 	bl	3ddc <print_formatted>
    3f12:	e79c      	b.n	3e4e <prefix_print+0x4e>
		total += print_formatted(output,
    3f14:	4c08      	ldr	r4, [pc, #32]	; (3f38 <prefix_print+0x138>)
    3f16:	e7c0      	b.n	3e9a <prefix_print+0x9a>
    3f18:	0000efe2 	.word	0x0000efe2
    3f1c:	0000efe6 	.word	0x0000efe6
    3f20:	0000e5bc 	.word	0x0000e5bc
    3f24:	0000f00b 	.word	0x0000f00b
    3f28:	0000efd4 	.word	0x0000efd4
    3f2c:	0000e5d0 	.word	0x0000e5d0
    3f30:	0000f00e 	.word	0x0000f00e
    3f34:	0000efde 	.word	0x0000efde
    3f38:	0000efd9 	.word	0x0000efd9
    3f3c:	200009d0 	.word	0x200009d0
    3f40:	200009d4 	.word	0x200009d4
    3f44:	0000efef 	.word	0x0000efef

00003f48 <hexdump_line_print>:
{
    3f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f4c:	461d      	mov	r5, r3
    3f4e:	9b08      	ldr	r3, [sp, #32]
    3f50:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3f52:	06da      	lsls	r2, r3, #27
{
    3f54:	4604      	mov	r4, r0
    3f56:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3f58:	d405      	bmi.n	3f66 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3f5a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    3f5c:	bf4c      	ite	mi
    3f5e:	492b      	ldrmi	r1, [pc, #172]	; (400c <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    3f60:	492b      	ldrpl	r1, [pc, #172]	; (4010 <hexdump_line_print+0xc8>)
    3f62:	f7ff ff3b 	bl	3ddc <print_formatted>
		print_formatted(output, " ");
    3f66:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 4014 <hexdump_line_print+0xcc>
{
    3f6a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    3f6e:	45a8      	cmp	r8, r5
    3f70:	db2d      	blt.n	3fce <hexdump_line_print+0x86>
			print_formatted(output, "   ");
    3f72:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 4018 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
    3f76:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401c <hexdump_line_print+0xd4>
			print_formatted(output, " ");
    3f7a:	f8df a098 	ldr.w	sl, [pc, #152]	; 4014 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3f7e:	2500      	movs	r5, #0
		if (i < length) {
    3f80:	42bd      	cmp	r5, r7
    3f82:	d232      	bcs.n	3fea <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    3f84:	5d72      	ldrb	r2, [r6, r5]
    3f86:	4649      	mov	r1, r9
    3f88:	4620      	mov	r0, r4
    3f8a:	f7ff ff27 	bl	3ddc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3f8e:	3501      	adds	r5, #1
    3f90:	2d10      	cmp	r5, #16
    3f92:	d123      	bne.n	3fdc <hexdump_line_print+0x94>
	print_formatted(output, "|");
    3f94:	4922      	ldr	r1, [pc, #136]	; (4020 <hexdump_line_print+0xd8>)
			print_formatted(output, " ");
    3f96:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4014 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
    3f9a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4024 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    3f9e:	f8df a088 	ldr.w	sl, [pc, #136]	; 4028 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    3fa2:	4620      	mov	r0, r4
    3fa4:	f7ff ff1a 	bl	3ddc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3fa8:	2500      	movs	r5, #0
		if (i < length) {
    3faa:	42af      	cmp	r7, r5
    3fac:	d929      	bls.n	4002 <hexdump_line_print+0xba>
			char c = (char)data[i];
    3fae:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    3fb0:	f812 3009 	ldrb.w	r3, [r2, r9]
    3fb4:	f013 0f97 	tst.w	r3, #151	; 0x97
    3fb8:	bf08      	it	eq
    3fba:	222e      	moveq	r2, #46	; 0x2e
    3fbc:	4651      	mov	r1, sl
    3fbe:	4620      	mov	r0, r4
    3fc0:	f7ff ff0c 	bl	3ddc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3fc4:	3501      	adds	r5, #1
    3fc6:	2d10      	cmp	r5, #16
    3fc8:	d114      	bne.n	3ff4 <hexdump_line_print+0xac>
}
    3fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    3fce:	4649      	mov	r1, r9
    3fd0:	4620      	mov	r0, r4
    3fd2:	f7ff ff03 	bl	3ddc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3fd6:	f108 0801 	add.w	r8, r8, #1
    3fda:	e7c8      	b.n	3f6e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    3fdc:	076a      	lsls	r2, r5, #29
    3fde:	d1cf      	bne.n	3f80 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    3fe0:	4651      	mov	r1, sl
    3fe2:	4620      	mov	r0, r4
    3fe4:	f7ff fefa 	bl	3ddc <print_formatted>
    3fe8:	e7ca      	b.n	3f80 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    3fea:	4641      	mov	r1, r8
    3fec:	4620      	mov	r0, r4
    3fee:	f7ff fef5 	bl	3ddc <print_formatted>
    3ff2:	e7cc      	b.n	3f8e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    3ff4:	076b      	lsls	r3, r5, #29
    3ff6:	d1d8      	bne.n	3faa <hexdump_line_print+0x62>
			print_formatted(output, " ");
    3ff8:	4641      	mov	r1, r8
    3ffa:	4620      	mov	r0, r4
    3ffc:	f7ff feee 	bl	3ddc <print_formatted>
    4000:	e7d3      	b.n	3faa <hexdump_line_print+0x62>
			print_formatted(output, " ");
    4002:	4641      	mov	r1, r8
    4004:	4620      	mov	r0, r4
    4006:	f7ff fee9 	bl	3ddc <print_formatted>
    400a:	e7db      	b.n	3fc4 <hexdump_line_print+0x7c>
    400c:	00010364 	.word	0x00010364
    4010:	0000f014 	.word	0x0000f014
    4014:	0000f01f 	.word	0x0000f01f
    4018:	0000f01d 	.word	0x0000f01d
    401c:	0000f017 	.word	0x0000f017
    4020:	0000f021 	.word	0x0000f021
    4024:	000105ca 	.word	0x000105ca
    4028:	0000f023 	.word	0x0000f023

0000402c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    402c:	b538      	push	{r3, r4, r5, lr}
    402e:	460c      	mov	r4, r1
	if (color) {
    4030:	07e1      	lsls	r1, r4, #31
{
    4032:	4605      	mov	r5, r0
	if (color) {
    4034:	d503      	bpl.n	403e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    4036:	4a08      	ldr	r2, [pc, #32]	; (4058 <postfix_print+0x2c>)
    4038:	4908      	ldr	r1, [pc, #32]	; (405c <postfix_print+0x30>)
    403a:	f7ff fecf 	bl	3ddc <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    403e:	06e2      	lsls	r2, r4, #27
    4040:	d408      	bmi.n	4054 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    4042:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    4044:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    4046:	bf4c      	ite	mi
    4048:	4905      	ldrmi	r1, [pc, #20]	; (4060 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    404a:	4906      	ldrpl	r1, [pc, #24]	; (4064 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    404c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    4050:	f7ff bec4 	b.w	3ddc <print_formatted>
}
    4054:	bd38      	pop	{r3, r4, r5, pc}
    4056:	bf00      	nop
    4058:	0000efd4 	.word	0x0000efd4
    405c:	0000f00b 	.word	0x0000f00b
    4060:	00010364 	.word	0x00010364
    4064:	0000f014 	.word	0x0000f014

00004068 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    4068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    406c:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    406e:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    4072:	4606      	mov	r6, r0
    4074:	460c      	mov	r4, r1
    4076:	4690      	mov	r8, r2
    4078:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    407c:	d05b      	beq.n	4136 <log_output_msg2_process+0xce>
	return msg->hdr.desc.domain;
    407e:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    4080:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    4082:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    4086:	2b00      	cmp	r3, #0
    4088:	d052      	beq.n	4130 <log_output_msg2_process+0xc8>
    408a:	492c      	ldr	r1, [pc, #176]	; (413c <log_output_msg2_process+0xd4>)
    408c:	1a5b      	subs	r3, r3, r1
    408e:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    4092:	e9cd 2301 	strd	r2, r3, [sp, #4]
    4096:	f8cd 9000 	str.w	r9, [sp]
    409a:	68a3      	ldr	r3, [r4, #8]
    409c:	2200      	movs	r2, #0
    409e:	4641      	mov	r1, r8
    40a0:	4630      	mov	r0, r6
    40a2:	f7ff fead 	bl	3e00 <prefix_print>
    40a6:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    40a8:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    40aa:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    40ae:	f3c3 2349 	ubfx	r3, r3, #9, #10
    40b2:	b1c3      	cbz	r3, 40e6 <log_output_msg2_process+0x7e>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    40b4:	4f22      	ldr	r7, [pc, #136]	; (4140 <log_output_msg2_process+0xd8>)
    40b6:	4823      	ldr	r0, [pc, #140]	; (4144 <log_output_msg2_process+0xdc>)
    40b8:	4923      	ldr	r1, [pc, #140]	; (4148 <log_output_msg2_process+0xe0>)
    40ba:	f1b9 0f00 	cmp.w	r9, #0
    40be:	bf08      	it	eq
    40c0:	4638      	moveq	r0, r7
    40c2:	462b      	mov	r3, r5
    40c4:	4632      	mov	r2, r6
    40c6:	f008 fde8 	bl	cc9a <cbpprintf_external>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    40ca:	2800      	cmp	r0, #0
    40cc:	da0b      	bge.n	40e6 <log_output_msg2_process+0x7e>
    40ce:	491f      	ldr	r1, [pc, #124]	; (414c <log_output_msg2_process+0xe4>)
    40d0:	481f      	ldr	r0, [pc, #124]	; (4150 <log_output_msg2_process+0xe8>)
    40d2:	4a20      	ldr	r2, [pc, #128]	; (4154 <log_output_msg2_process+0xec>)
    40d4:	f240 23b7 	movw	r3, #695	; 0x2b7
    40d8:	f008 fed5 	bl	ce86 <assert_print>
    40dc:	481d      	ldr	r0, [pc, #116]	; (4154 <log_output_msg2_process+0xec>)
    40de:	f240 21b7 	movw	r1, #695	; 0x2b7
    40e2:	f008 fec9 	bl	ce78 <assert_post_action>
	*len = msg->hdr.desc.data_len;
    40e6:	8867      	ldrh	r7, [r4, #2]
    40e8:	f3c7 07cb 	ubfx	r7, r7, #3, #12
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    40ec:	b197      	cbz	r7, 4114 <log_output_msg2_process+0xac>
	return msg->data + msg->hdr.desc.package_len;
    40ee:	6821      	ldr	r1, [r4, #0]
    40f0:	f3c1 2149 	ubfx	r1, r1, #9, #10
    40f4:	440d      	add	r5, r1
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    40f6:	2f10      	cmp	r7, #16
    40f8:	463c      	mov	r4, r7
    40fa:	bf28      	it	cs
    40fc:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    40fe:	4629      	mov	r1, r5
    4100:	f8cd 8000 	str.w	r8, [sp]
    4104:	4653      	mov	r3, sl
    4106:	4622      	mov	r2, r4
    4108:	4630      	mov	r0, r6
    410a:	f7ff ff1d 	bl	3f48 <hexdump_line_print>
	} while (len);
    410e:	1b3f      	subs	r7, r7, r4
		data += length;
    4110:	4425      	add	r5, r4
	} while (len);
    4112:	d1f0      	bne.n	40f6 <log_output_msg2_process+0x8e>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    4114:	f1b9 0f00 	cmp.w	r9, #0
    4118:	d004      	beq.n	4124 <log_output_msg2_process+0xbc>
		postfix_print(output, flags, level);
    411a:	464a      	mov	r2, r9
    411c:	4641      	mov	r1, r8
    411e:	4630      	mov	r0, r6
    4120:	f7ff ff84 	bl	402c <postfix_print>
	}

	log_output_flush(output);
    4124:	4630      	mov	r0, r6
}
    4126:	b004      	add	sp, #16
    4128:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    412c:	f008 befd 	b.w	cf2a <log_output_flush>
		int16_t source_id = source ?
    4130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4134:	e7ad      	b.n	4092 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    4136:	46ca      	mov	sl, r9
    4138:	e7b6      	b.n	40a8 <log_output_msg2_process+0x40>
    413a:	bf00      	nop
    413c:	0000e3a4 	.word	0x0000e3a4
    4140:	0000cef7 	.word	0x0000cef7
    4144:	0000cedb 	.word	0x0000cedb
    4148:	00003451 	.word	0x00003451
    414c:	0000f062 	.word	0x0000f062
    4150:	0000eb06 	.word	0x0000eb06
    4154:	0000f026 	.word	0x0000f026

00004158 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    4158:	4a08      	ldr	r2, [pc, #32]	; (417c <log_output_timestamp_freq_set+0x24>)
{
    415a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    415c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    415e:	4c08      	ldr	r4, [pc, #32]	; (4180 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    4160:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    4162:	2100      	movs	r1, #0
    4164:	42a0      	cmp	r0, r4
    4166:	d804      	bhi.n	4172 <log_output_timestamp_freq_set+0x1a>
    4168:	b101      	cbz	r1, 416c <log_output_timestamp_freq_set+0x14>
    416a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    416c:	4b05      	ldr	r3, [pc, #20]	; (4184 <log_output_timestamp_freq_set+0x2c>)
    416e:	6018      	str	r0, [r3, #0]
}
    4170:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    4172:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    4174:	005b      	lsls	r3, r3, #1
    4176:	2101      	movs	r1, #1
    4178:	e7f4      	b.n	4164 <log_output_timestamp_freq_set+0xc>
    417a:	bf00      	nop
    417c:	200009d4 	.word	0x200009d4
    4180:	000f4240 	.word	0x000f4240
    4184:	200009d0 	.word	0x200009d0

00004188 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    4188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    418c:	b085      	sub	sp, #20
    418e:	af02      	add	r7, sp, #8
    4190:	e9d7 b80d 	ldrd	fp, r8, [r7, #52]	; 0x34
    4194:	4605      	mov	r5, r0
    4196:	4689      	mov	r9, r1
    4198:	4614      	mov	r4, r2
    419a:	469a      	mov	sl, r3
	int plen;

	if (fmt) {
    419c:	f1b8 0f00 	cmp.w	r8, #0
    41a0:	d04e      	beq.n	4240 <z_impl_z_log_msg2_runtime_vcreate+0xb8>
		va_list ap2;

		va_copy(ap2, ap);
    41a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    41a4:	607b      	str	r3, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    41a6:	9300      	str	r3, [sp, #0]
    41a8:	465a      	mov	r2, fp
    41aa:	4643      	mov	r3, r8
    41ac:	2110      	movs	r1, #16
    41ae:	2000      	movs	r0, #0
    41b0:	f7fe fb00 	bl	27b4 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    41b4:	1e06      	subs	r6, r0, #0
    41b6:	da09      	bge.n	41cc <z_impl_z_log_msg2_runtime_vcreate+0x44>
    41b8:	4922      	ldr	r1, [pc, #136]	; (4244 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    41ba:	4823      	ldr	r0, [pc, #140]	; (4248 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    41bc:	4a23      	ldr	r2, [pc, #140]	; (424c <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    41be:	2367      	movs	r3, #103	; 0x67
    41c0:	f008 fe61 	bl	ce86 <assert_print>
    41c4:	4821      	ldr	r0, [pc, #132]	; (424c <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    41c6:	2167      	movs	r1, #103	; 0x67
    41c8:	f008 fe56 	bl	ce78 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    41cc:	f004 0207 	and.w	r2, r4, #7
    41d0:	f005 0407 	and.w	r4, r5, #7
    41d4:	00e4      	lsls	r4, r4, #3
    41d6:	4d1e      	ldr	r5, [pc, #120]	; (4250 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    41d8:	4b1e      	ldr	r3, [pc, #120]	; (4254 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    41da:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    41de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    41e0:	ea05 2546 	and.w	r5, r5, r6, lsl #9
    41e4:	432c      	orrs	r4, r5
    41e6:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    41ea:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    41ec:	4613      	mov	r3, r2
    41ee:	3317      	adds	r3, #23
    41f0:	4433      	add	r3, r6
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    41f2:	f023 0307 	bic.w	r3, r3, #7
    41f6:	ebad 0d03 	sub.w	sp, sp, r3
    41fa:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    41fc:	f1b8 0f00 	cmp.w	r8, #0
    4200:	d014      	beq.n	422c <z_impl_z_log_msg2_runtime_vcreate+0xa4>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    4202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4204:	9300      	str	r3, [sp, #0]
    4206:	465a      	mov	r2, fp
    4208:	4643      	mov	r3, r8
    420a:	4631      	mov	r1, r6
    420c:	f105 0010 	add.w	r0, r5, #16
    4210:	f7fe fad0 	bl	27b4 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    4214:	2800      	cmp	r0, #0
    4216:	da09      	bge.n	422c <z_impl_z_log_msg2_runtime_vcreate+0xa4>
    4218:	490a      	ldr	r1, [pc, #40]	; (4244 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    421a:	480b      	ldr	r0, [pc, #44]	; (4248 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    421c:	4a0b      	ldr	r2, [pc, #44]	; (424c <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    421e:	2381      	movs	r3, #129	; 0x81
    4220:	f008 fe31 	bl	ce86 <assert_print>
    4224:	4809      	ldr	r0, [pc, #36]	; (424c <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    4226:	2181      	movs	r1, #129	; 0x81
    4228:	f008 fe26 	bl	ce78 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    422c:	4653      	mov	r3, sl
    422e:	4622      	mov	r2, r4
    4230:	4649      	mov	r1, r9
    4232:	4628      	mov	r0, r5
    4234:	f008 fe86 	bl	cf44 <z_log_msg2_finalize>
	}
}
    4238:	370c      	adds	r7, #12
    423a:	46bd      	mov	sp, r7
    423c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    4240:	4646      	mov	r6, r8
    4242:	e7c3      	b.n	41cc <z_impl_z_log_msg2_runtime_vcreate+0x44>
    4244:	0000f0b8 	.word	0x0000f0b8
    4248:	0000eb06 	.word	0x0000eb06
    424c:	0000f08b 	.word	0x0000f08b
    4250:	0007fe00 	.word	0x0007fe00
    4254:	7ff80000 	.word	0x7ff80000

00004258 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    4258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    425a:	4f07      	ldr	r7, [pc, #28]	; (4278 <char_out+0x20>)
{
    425c:	460d      	mov	r5, r1
    425e:	4604      	mov	r4, r0
    4260:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    4262:	42b4      	cmp	r4, r6
    4264:	d101      	bne.n	426a <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    4266:	4628      	mov	r0, r5
    4268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    426a:	6838      	ldr	r0, [r7, #0]
    426c:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    4270:	6883      	ldr	r3, [r0, #8]
    4272:	69db      	ldr	r3, [r3, #28]
    4274:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    4276:	e7f4      	b.n	4262 <char_out+0xa>
    4278:	200009f0 	.word	0x200009f0

0000427c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    427c:	4b01      	ldr	r3, [pc, #4]	; (4284 <format_set+0x8>)
	return 0;
}
    427e:	2000      	movs	r0, #0
	log_format_current = log_type;
    4280:	6019      	str	r1, [r3, #0]
}
    4282:	4770      	bx	lr
    4284:	200009e0 	.word	0x200009e0

00004288 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    4288:	4b02      	ldr	r3, [pc, #8]	; (4294 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    428a:	4803      	ldr	r0, [pc, #12]	; (4298 <panic+0x10>)
    428c:	2201      	movs	r2, #1
    428e:	701a      	strb	r2, [r3, #0]
    4290:	f008 be4b 	b.w	cf2a <log_output_flush>
    4294:	2000d2f7 	.word	0x2000d2f7
    4298:	0000e604 	.word	0x0000e604

0000429c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    429c:	4b06      	ldr	r3, [pc, #24]	; (42b8 <process+0x1c>)
{
    429e:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    42a0:	6818      	ldr	r0, [r3, #0]
{
    42a2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    42a4:	f7ff fcb6 	bl	3c14 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    42a8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    42aa:	4603      	mov	r3, r0
}
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    42b0:	4802      	ldr	r0, [pc, #8]	; (42bc <process+0x20>)
    42b2:	220f      	movs	r2, #15
    42b4:	4718      	bx	r3
    42b6:	bf00      	nop
    42b8:	200009e0 	.word	0x200009e0
    42bc:	0000e604 	.word	0x0000e604

000042c0 <log_backend_uart_init>:
{
    42c0:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    42c2:	4b09      	ldr	r3, [pc, #36]	; (42e8 <log_backend_uart_init+0x28>)
    42c4:	4809      	ldr	r0, [pc, #36]	; (42ec <log_backend_uart_init+0x2c>)
    42c6:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    42c8:	f009 fb24 	bl	d914 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    42cc:	b958      	cbnz	r0, 42e6 <log_backend_uart_init+0x26>
    42ce:	4908      	ldr	r1, [pc, #32]	; (42f0 <log_backend_uart_init+0x30>)
    42d0:	4808      	ldr	r0, [pc, #32]	; (42f4 <log_backend_uart_init+0x34>)
    42d2:	4a09      	ldr	r2, [pc, #36]	; (42f8 <log_backend_uart_init+0x38>)
    42d4:	2379      	movs	r3, #121	; 0x79
    42d6:	f008 fdd6 	bl	ce86 <assert_print>
}
    42da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    42de:	4806      	ldr	r0, [pc, #24]	; (42f8 <log_backend_uart_init+0x38>)
    42e0:	2179      	movs	r1, #121	; 0x79
    42e2:	f008 bdc9 	b.w	ce78 <assert_post_action>
}
    42e6:	bd08      	pop	{r3, pc}
    42e8:	200009f0 	.word	0x200009f0
    42ec:	0000e1f4 	.word	0x0000e1f4
    42f0:	0000f0f7 	.word	0x0000f0f7
    42f4:	0000eb06 	.word	0x0000eb06
    42f8:	0000f0c2 	.word	0x0000f0c2

000042fc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    42fc:	4b01      	ldr	r3, [pc, #4]	; (4304 <log_backend_rtt_init+0x8>)
    42fe:	2201      	movs	r2, #1
    4300:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    4302:	4770      	bx	lr
    4304:	2000d2fa 	.word	0x2000d2fa

00004308 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    4308:	4b01      	ldr	r3, [pc, #4]	; (4310 <format_set+0x8>)
	return 0;
}
    430a:	2000      	movs	r0, #0
	log_format_current = log_type;
    430c:	6019      	str	r1, [r3, #0]
}
    430e:	4770      	bx	lr
    4310:	200009fc 	.word	0x200009fc

00004314 <panic>:
	panic_mode = true;
    4314:	4b02      	ldr	r3, [pc, #8]	; (4320 <panic+0xc>)
    4316:	4803      	ldr	r0, [pc, #12]	; (4324 <panic+0x10>)
    4318:	2201      	movs	r2, #1
    431a:	701a      	strb	r2, [r3, #0]
    431c:	f008 be05 	b.w	cf2a <log_output_flush>
    4320:	2000d2fb 	.word	0x2000d2fb
    4324:	0000e634 	.word	0x0000e634

00004328 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    4328:	4b06      	ldr	r3, [pc, #24]	; (4344 <process+0x1c>)
{
    432a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    432c:	6818      	ldr	r0, [r3, #0]
{
    432e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    4330:	f7ff fc70 	bl	3c14 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    4334:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    4336:	4603      	mov	r3, r0
}
    4338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    433c:	4802      	ldr	r0, [pc, #8]	; (4348 <process+0x20>)
    433e:	220f      	movs	r2, #15
    4340:	4718      	bx	r3
    4342:	bf00      	nop
    4344:	200009fc 	.word	0x200009fc
    4348:	0000e634 	.word	0x0000e634

0000434c <data_out_block_mode>:
{
    434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    434e:	4d19      	ldr	r5, [pc, #100]	; (43b4 <data_out_block_mode+0x68>)
    4350:	4607      	mov	r7, r0
    4352:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    4354:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4356:	4632      	mov	r2, r6
    4358:	4639      	mov	r1, r7
    435a:	2000      	movs	r0, #0
    435c:	f003 ff3e 	bl	81dc <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    4360:	b1c8      	cbz	r0, 4396 <data_out_block_mode+0x4a>
	host_present = true;
    4362:	2301      	movs	r3, #1
    4364:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    4366:	4b14      	ldr	r3, [pc, #80]	; (43b8 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    4368:	781b      	ldrb	r3, [r3, #0]
    436a:	b92b      	cbnz	r3, 4378 <data_out_block_mode+0x2c>
}
    436c:	4630      	mov	r0, r6
    436e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    4370:	b95c      	cbnz	r4, 438a <data_out_block_mode+0x3e>
		host_present = false;
    4372:	702c      	strb	r4, [r5, #0]
    4374:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    4378:	2000      	movs	r0, #0
    437a:	f003 ff7b 	bl	8274 <SEGGER_RTT_HasDataUp>
    437e:	2800      	cmp	r0, #0
    4380:	d0f4      	beq.n	436c <data_out_block_mode+0x20>
    4382:	782b      	ldrb	r3, [r5, #0]
    4384:	2b00      	cmp	r3, #0
    4386:	d1f3      	bne.n	4370 <data_out_block_mode+0x24>
    4388:	e7f0      	b.n	436c <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    438a:	3c01      	subs	r4, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    438c:	f241 3088 	movw	r0, #5000	; 0x1388
    4390:	f009 fb38 	bl	da04 <z_impl_k_busy_wait>
}
    4394:	e7f0      	b.n	4378 <data_out_block_mode+0x2c>
		} else if (host_present) {
    4396:	782b      	ldrb	r3, [r5, #0]
    4398:	b113      	cbz	r3, 43a0 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    439a:	3c01      	subs	r4, #1
    439c:	d104      	bne.n	43a8 <data_out_block_mode+0x5c>
		host_present = false;
    439e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    43a0:	782b      	ldrb	r3, [r5, #0]
    43a2:	2b00      	cmp	r3, #0
    43a4:	d1d7      	bne.n	4356 <data_out_block_mode+0xa>
    43a6:	e7e1      	b.n	436c <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    43a8:	f241 3088 	movw	r0, #5000	; 0x1388
    43ac:	f009 fb2a 	bl	da04 <z_impl_k_busy_wait>
}
    43b0:	e7f6      	b.n	43a0 <data_out_block_mode+0x54>
    43b2:	bf00      	nop
    43b4:	2000d2fa 	.word	0x2000d2fa
    43b8:	2000d2fb 	.word	0x2000d2fb

000043bc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    43bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    43c0:	4605      	mov	r5, r0
    43c2:	f04f 0320 	mov.w	r3, #32
    43c6:	f3ef 8611 	mrs	r6, BASEPRI
    43ca:	f383 8812 	msr	BASEPRI_MAX, r3
    43ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    43d2:	4822      	ldr	r0, [pc, #136]	; (445c <pm_state_notify+0xa0>)
    43d4:	f004 fb2e 	bl	8a34 <z_spin_lock_valid>
    43d8:	b968      	cbnz	r0, 43f6 <pm_state_notify+0x3a>
    43da:	4a21      	ldr	r2, [pc, #132]	; (4460 <pm_state_notify+0xa4>)
    43dc:	4921      	ldr	r1, [pc, #132]	; (4464 <pm_state_notify+0xa8>)
    43de:	4822      	ldr	r0, [pc, #136]	; (4468 <pm_state_notify+0xac>)
    43e0:	238e      	movs	r3, #142	; 0x8e
    43e2:	f008 fd50 	bl	ce86 <assert_print>
    43e6:	491d      	ldr	r1, [pc, #116]	; (445c <pm_state_notify+0xa0>)
    43e8:	4820      	ldr	r0, [pc, #128]	; (446c <pm_state_notify+0xb0>)
    43ea:	f008 fd4c 	bl	ce86 <assert_print>
    43ee:	481c      	ldr	r0, [pc, #112]	; (4460 <pm_state_notify+0xa4>)
    43f0:	218e      	movs	r1, #142	; 0x8e
    43f2:	f008 fd41 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    43f6:	4819      	ldr	r0, [pc, #100]	; (445c <pm_state_notify+0xa0>)
    43f8:	f004 fb3a 	bl	8a70 <z_spin_lock_set_owner>
	return list->head;
    43fc:	4b1c      	ldr	r3, [pc, #112]	; (4470 <pm_state_notify+0xb4>)
    43fe:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4400:	b19c      	cbz	r4, 442a <pm_state_notify+0x6e>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    4402:	4f1c      	ldr	r7, [pc, #112]	; (4474 <pm_state_notify+0xb8>)
    4404:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4478 <pm_state_notify+0xbc>
    4408:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    440c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4410:	2d00      	cmp	r5, #0
    4412:	bf08      	it	eq
    4414:	4613      	moveq	r3, r2
		if (callback) {
    4416:	b12b      	cbz	r3, 4424 <pm_state_notify+0x68>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    4418:	f898 2014 	ldrb.w	r2, [r8, #20]
    441c:	fb09 f202 	mul.w	r2, r9, r2
    4420:	5cb8      	ldrb	r0, [r7, r2]
    4422:	4798      	blx	r3
	return node->next;
    4424:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4426:	2c00      	cmp	r4, #0
    4428:	d1f0      	bne.n	440c <pm_state_notify+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    442a:	480c      	ldr	r0, [pc, #48]	; (445c <pm_state_notify+0xa0>)
    442c:	f004 fb10 	bl	8a50 <z_spin_unlock_valid>
    4430:	b968      	cbnz	r0, 444e <pm_state_notify+0x92>
    4432:	4a0b      	ldr	r2, [pc, #44]	; (4460 <pm_state_notify+0xa4>)
    4434:	4911      	ldr	r1, [pc, #68]	; (447c <pm_state_notify+0xc0>)
    4436:	480c      	ldr	r0, [pc, #48]	; (4468 <pm_state_notify+0xac>)
    4438:	23b9      	movs	r3, #185	; 0xb9
    443a:	f008 fd24 	bl	ce86 <assert_print>
    443e:	4907      	ldr	r1, [pc, #28]	; (445c <pm_state_notify+0xa0>)
    4440:	480f      	ldr	r0, [pc, #60]	; (4480 <pm_state_notify+0xc4>)
    4442:	f008 fd20 	bl	ce86 <assert_print>
    4446:	4806      	ldr	r0, [pc, #24]	; (4460 <pm_state_notify+0xa4>)
    4448:	21b9      	movs	r1, #185	; 0xb9
    444a:	f008 fd15 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    444e:	f386 8811 	msr	BASEPRI, r6
    4452:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    4456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    445a:	bf00      	nop
    445c:	20000a0c 	.word	0x20000a0c
    4460:	0000ec50 	.word	0x0000ec50
    4464:	0000eca9 	.word	0x0000eca9
    4468:	0000eb06 	.word	0x0000eb06
    446c:	0000ecbe 	.word	0x0000ecbe
    4470:	20000a10 	.word	0x20000a10
    4474:	20000a18 	.word	0x20000a18
    4478:	200010c4 	.word	0x200010c4
    447c:	0000ec7d 	.word	0x0000ec7d
    4480:	0000ec94 	.word	0x0000ec94

00004484 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4484:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    4486:	2301      	movs	r3, #1
    4488:	f000 001f 	and.w	r0, r0, #31
    448c:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4490:	4b07      	ldr	r3, [pc, #28]	; (44b0 <atomic_clear_bit.constprop.0+0x2c>)
    4492:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4496:	43c0      	mvns	r0, r0
    4498:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    449c:	e853 2f00 	ldrex	r2, [r3]
    44a0:	4002      	ands	r2, r0
    44a2:	e843 2100 	strex	r1, r2, [r3]
    44a6:	2900      	cmp	r1, #0
    44a8:	d1f8      	bne.n	449c <atomic_clear_bit.constprop.0+0x18>
    44aa:	f3bf 8f5b 	dmb	ish
}
    44ae:	4770      	bx	lr
    44b0:	20000a24 	.word	0x20000a24

000044b4 <pm_system_resume>:

void pm_system_resume(void)
{
    44b4:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    44b6:	4b1a      	ldr	r3, [pc, #104]	; (4520 <pm_system_resume+0x6c>)
    44b8:	7d1c      	ldrb	r4, [r3, #20]
    44ba:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    44be:	f004 031f 	and.w	r3, r4, #31
    44c2:	2201      	movs	r2, #1
    44c4:	409a      	lsls	r2, r3
    44c6:	4b17      	ldr	r3, [pc, #92]	; (4524 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    44c8:	0961      	lsrs	r1, r4, #5
    44ca:	43d0      	mvns	r0, r2
    44cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    44d0:	e853 1f00 	ldrex	r1, [r3]
    44d4:	ea01 0500 	and.w	r5, r1, r0
    44d8:	e843 5c00 	strex	ip, r5, [r3]
    44dc:	f1bc 0f00 	cmp.w	ip, #0
    44e0:	d1f6      	bne.n	44d0 <pm_system_resume+0x1c>
    44e2:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    44e6:	4211      	tst	r1, r2
    44e8:	d013      	beq.n	4512 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    44ea:	4b0f      	ldr	r3, [pc, #60]	; (4528 <pm_system_resume+0x74>)
    44ec:	4d0f      	ldr	r5, [pc, #60]	; (452c <pm_system_resume+0x78>)
    44ee:	b18b      	cbz	r3, 4514 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    44f0:	230c      	movs	r3, #12
    44f2:	4363      	muls	r3, r4
    44f4:	18ea      	adds	r2, r5, r3
    44f6:	5ce8      	ldrb	r0, [r5, r3]
    44f8:	7851      	ldrb	r1, [r2, #1]
    44fa:	f008 fdc6 	bl	d08a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    44fe:	2000      	movs	r0, #0
    4500:	f7ff ff5c 	bl	43bc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    4504:	230c      	movs	r3, #12
    4506:	435c      	muls	r4, r3
    4508:	192a      	adds	r2, r5, r4
    450a:	2300      	movs	r3, #0
    450c:	512b      	str	r3, [r5, r4]
    450e:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    4512:	bd38      	pop	{r3, r4, r5, pc}
    4514:	f383 8811 	msr	BASEPRI, r3
    4518:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    451c:	e7ef      	b.n	44fe <pm_system_resume+0x4a>
    451e:	bf00      	nop
    4520:	200010c4 	.word	0x200010c4
    4524:	20000a28 	.word	0x20000a28
    4528:	0000d08b 	.word	0x0000d08b
    452c:	20000a18 	.word	0x20000a18

00004530 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    4530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    4534:	4b32      	ldr	r3, [pc, #200]	; (4600 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4536:	4a33      	ldr	r2, [pc, #204]	; (4604 <pm_system_suspend+0xd4>)
    4538:	7d1c      	ldrb	r4, [r3, #20]
    453a:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    453e:	0963      	lsrs	r3, r4, #5
    4540:	ea4f 0983 	mov.w	r9, r3, lsl #2
    4544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4548:	4e2f      	ldr	r6, [pc, #188]	; (4608 <pm_system_suspend+0xd8>)
    454a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    454e:	f004 081f 	and.w	r8, r4, #31
    4552:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    4556:	f013 0f01 	tst.w	r3, #1
{
    455a:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    455c:	d10a      	bne.n	4574 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    455e:	4601      	mov	r1, r0
    4560:	4620      	mov	r0, r4
    4562:	f000 f869 	bl	4638 <pm_policy_next_state>
		if (info != NULL) {
    4566:	b128      	cbz	r0, 4574 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    4568:	c807      	ldmia	r0, {r0, r1, r2}
    456a:	230c      	movs	r3, #12
    456c:	fb03 6304 	mla	r3, r3, r4, r6
    4570:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    4574:	230c      	movs	r3, #12
    4576:	4363      	muls	r3, r4
    4578:	18f2      	adds	r2, r6, r3
    457a:	5cf5      	ldrb	r5, [r6, r3]
    457c:	b92d      	cbnz	r5, 458a <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    457e:	4620      	mov	r0, r4
    4580:	f7ff ff80 	bl	4484 <atomic_clear_bit.constprop.0>
		ret = false;
    4584:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    4586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    458a:	1c7b      	adds	r3, r7, #1
    458c:	d00f      	beq.n	45ae <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    458e:	f8d2 c008 	ldr.w	ip, [r2, #8]
    4592:	481e      	ldr	r0, [pc, #120]	; (460c <pm_system_suspend+0xdc>)
    4594:	4a1e      	ldr	r2, [pc, #120]	; (4610 <pm_system_suspend+0xe0>)
    4596:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    459a:	2100      	movs	r1, #0
    459c:	2300      	movs	r3, #0
    459e:	fbec 0105 	umlal	r0, r1, ip, r5
    45a2:	f7fc fa91 	bl	ac8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    45a6:	2101      	movs	r1, #1
    45a8:	1a38      	subs	r0, r7, r0
    45aa:	f006 f833 	bl	a614 <z_set_timeout_expiry>
	k_sched_lock();
    45ae:	f004 fe25 	bl	91fc <k_sched_lock>
	pm_state_notify(true);
    45b2:	2001      	movs	r0, #1
    45b4:	f7ff ff02 	bl	43bc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    45b8:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    45bc:	2301      	movs	r3, #1
    45be:	fa03 f808 	lsl.w	r8, r3, r8
    45c2:	4b14      	ldr	r3, [pc, #80]	; (4614 <pm_system_suspend+0xe4>)
    45c4:	4499      	add	r9, r3
    45c6:	e859 3f00 	ldrex	r3, [r9]
    45ca:	ea43 0308 	orr.w	r3, r3, r8
    45ce:	e849 3200 	strex	r2, r3, [r9]
    45d2:	2a00      	cmp	r2, #0
    45d4:	d1f7      	bne.n	45c6 <pm_system_suspend+0x96>
    45d6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    45da:	4b0f      	ldr	r3, [pc, #60]	; (4618 <pm_system_suspend+0xe8>)
    45dc:	b133      	cbz	r3, 45ec <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    45de:	230c      	movs	r3, #12
    45e0:	4363      	muls	r3, r4
    45e2:	18f2      	adds	r2, r6, r3
    45e4:	5cf0      	ldrb	r0, [r6, r3]
    45e6:	7851      	ldrb	r1, [r2, #1]
    45e8:	f008 fd43 	bl	d072 <pm_state_set>
	pm_system_resume();
    45ec:	f7ff ff62 	bl	44b4 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    45f0:	4620      	mov	r0, r4
    45f2:	f7ff ff47 	bl	4484 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    45f6:	f005 faeb 	bl	9bd0 <k_sched_unlock>
	bool ret = true;
    45fa:	2001      	movs	r0, #1
    45fc:	e7c3      	b.n	4586 <pm_system_suspend+0x56>
    45fe:	bf00      	nop
    4600:	200010c4 	.word	0x200010c4
    4604:	20000a24 	.word	0x20000a24
    4608:	20000a18 	.word	0x20000a18
    460c:	000f423f 	.word	0x000f423f
    4610:	000f4240 	.word	0x000f4240
    4614:	20000a28 	.word	0x20000a28
    4618:	0000d073 	.word	0x0000d073

0000461c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    461c:	4b05      	ldr	r3, [pc, #20]	; (4634 <pm_policy_state_lock_is_active+0x18>)
    461e:	f3bf 8f5b 	dmb	ish
    4622:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4626:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    462a:	3800      	subs	r0, #0
    462c:	bf18      	it	ne
    462e:	2001      	movne	r0, #1
    4630:	4770      	bx	lr
    4632:	bf00      	nop
    4634:	20000a2c 	.word	0x20000a2c

00004638 <pm_policy_next_state>:
{
    4638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    463c:	b085      	sub	sp, #20
    463e:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    4640:	a903      	add	r1, sp, #12
    4642:	f000 f847 	bl	46d4 <pm_state_cpu_get_all>
    4646:	f8df 8080 	ldr.w	r8, [pc, #128]	; 46c8 <pm_policy_next_state+0x90>
    464a:	f8df a080 	ldr.w	sl, [pc, #128]	; 46cc <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    464e:	1e44      	subs	r4, r0, #1
    4650:	b224      	sxth	r4, r4
    4652:	f04f 0b00 	mov.w	fp, #0
    4656:	1c63      	adds	r3, r4, #1
    4658:	d104      	bne.n	4664 <pm_policy_next_state+0x2c>
	return NULL;
    465a:	2600      	movs	r6, #0
}
    465c:	4630      	mov	r0, r6
    465e:	b005      	add	sp, #20
    4660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    4664:	9a03      	ldr	r2, [sp, #12]
    4666:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    466a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    466e:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    4672:	f7ff ffd3 	bl	461c <pm_policy_state_lock_is_active>
    4676:	4605      	mov	r5, r0
    4678:	bb10      	cbnz	r0, 46c0 <pm_policy_next_state+0x88>
    467a:	6870      	ldr	r0, [r6, #4]
    467c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    4680:	46c4      	mov	ip, r8
    4682:	4629      	mov	r1, r5
    4684:	fbe0 c109 	umlal	ip, r1, r0, r9
    4688:	4652      	mov	r2, sl
    468a:	465b      	mov	r3, fp
    468c:	4660      	mov	r0, ip
    468e:	f7fc fa1b 	bl	ac8 <__aeabi_uldivmod>
    4692:	9001      	str	r0, [sp, #4]
    4694:	68b0      	ldr	r0, [r6, #8]
    4696:	46c4      	mov	ip, r8
    4698:	4629      	mov	r1, r5
    469a:	fbe0 c109 	umlal	ip, r1, r0, r9
    469e:	465b      	mov	r3, fp
    46a0:	4652      	mov	r2, sl
    46a2:	4660      	mov	r0, ip
    46a4:	f7fc fa10 	bl	ac8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    46a8:	4b09      	ldr	r3, [pc, #36]	; (46d0 <pm_policy_next_state+0x98>)
    46aa:	681b      	ldr	r3, [r3, #0]
    46ac:	1c59      	adds	r1, r3, #1
    46ae:	d001      	beq.n	46b4 <pm_policy_next_state+0x7c>
    46b0:	4283      	cmp	r3, r0
    46b2:	d905      	bls.n	46c0 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    46b4:	1c7a      	adds	r2, r7, #1
    46b6:	d0d1      	beq.n	465c <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    46b8:	9b01      	ldr	r3, [sp, #4]
    46ba:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    46bc:	42b8      	cmp	r0, r7
    46be:	d9cd      	bls.n	465c <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    46c0:	3c01      	subs	r4, #1
    46c2:	b224      	sxth	r4, r4
    46c4:	e7c7      	b.n	4656 <pm_policy_next_state+0x1e>
    46c6:	bf00      	nop
    46c8:	000f423f 	.word	0x000f423f
    46cc:	000f4240 	.word	0x000f4240
    46d0:	200000a0 	.word	0x200000a0

000046d4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    46d4:	b908      	cbnz	r0, 46da <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    46d6:	4b02      	ldr	r3, [pc, #8]	; (46e0 <pm_state_cpu_get_all+0xc>)
    46d8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    46da:	2000      	movs	r0, #0
    46dc:	4770      	bx	lr
    46de:	bf00      	nop
    46e0:	0000e644 	.word	0x0000e644

000046e4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    46e4:	4801      	ldr	r0, [pc, #4]	; (46ec <nrf_cc3xx_platform_abort_init+0x8>)
    46e6:	f008 b905 	b.w	c8f4 <nrf_cc3xx_platform_set_abort>
    46ea:	bf00      	nop
    46ec:	0000e644 	.word	0x0000e644

000046f0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    46f0:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    46f2:	4604      	mov	r4, r0
    46f4:	b918      	cbnz	r0, 46fe <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    46f6:	4b0d      	ldr	r3, [pc, #52]	; (472c <mutex_free_platform+0x3c>)
    46f8:	480d      	ldr	r0, [pc, #52]	; (4730 <mutex_free_platform+0x40>)
    46fa:	685b      	ldr	r3, [r3, #4]
    46fc:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    46fe:	6861      	ldr	r1, [r4, #4]
    4700:	2908      	cmp	r1, #8
    4702:	d00d      	beq.n	4720 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4704:	f031 0304 	bics.w	r3, r1, #4
    4708:	d00a      	beq.n	4720 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    470a:	f011 0102 	ands.w	r1, r1, #2
    470e:	d008      	beq.n	4722 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    4710:	4808      	ldr	r0, [pc, #32]	; (4734 <mutex_free_platform+0x44>)
    4712:	4621      	mov	r1, r4
    4714:	f003 ffee 	bl	86f4 <k_mem_slab_free>
        mutex->mutex = NULL;
    4718:	2300      	movs	r3, #0
    471a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    471c:	2300      	movs	r3, #0
    471e:	6063      	str	r3, [r4, #4]
}
    4720:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
    4722:	6820      	ldr	r0, [r4, #0]
    4724:	2214      	movs	r2, #20
    4726:	f009 f9b5 	bl	da94 <memset>
    472a:	e7f7      	b.n	471c <mutex_free_platform+0x2c>
    472c:	20000358 	.word	0x20000358
    4730:	0000f13e 	.word	0x0000f13e
    4734:	20000a48 	.word	0x20000a48

00004738 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4738:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    473a:	b308      	cbz	r0, 4780 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    473c:	6843      	ldr	r3, [r0, #4]
    473e:	2b04      	cmp	r3, #4
    4740:	d110      	bne.n	4764 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4742:	2201      	movs	r2, #1
    4744:	6803      	ldr	r3, [r0, #0]
    4746:	f3bf 8f5b 	dmb	ish
    474a:	e853 1f00 	ldrex	r1, [r3]
    474e:	2900      	cmp	r1, #0
    4750:	d103      	bne.n	475a <mutex_lock_platform+0x22>
    4752:	e843 2000 	strex	r0, r2, [r3]
    4756:	2800      	cmp	r0, #0
    4758:	d1f7      	bne.n	474a <mutex_lock_platform+0x12>
    475a:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    475e:	d10b      	bne.n	4778 <mutex_lock_platform+0x40>
    4760:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    4762:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4764:	b153      	cbz	r3, 477c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    4766:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    4768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    476c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4770:	f004 f9b8 	bl	8ae4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4774:	2800      	cmp	r0, #0
    4776:	d0f3      	beq.n	4760 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4778:	4803      	ldr	r0, [pc, #12]	; (4788 <mutex_lock_platform+0x50>)
    477a:	e7f2      	b.n	4762 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    477c:	4803      	ldr	r0, [pc, #12]	; (478c <mutex_lock_platform+0x54>)
    477e:	e7f0      	b.n	4762 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4780:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4784:	e7ed      	b.n	4762 <mutex_lock_platform+0x2a>
    4786:	bf00      	nop
    4788:	ffff8fe9 	.word	0xffff8fe9
    478c:	ffff8fea 	.word	0xffff8fea

00004790 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4790:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    4792:	b1d0      	cbz	r0, 47ca <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    4794:	6843      	ldr	r3, [r0, #4]
    4796:	2b04      	cmp	r3, #4
    4798:	d111      	bne.n	47be <mutex_unlock_platform+0x2e>
    479a:	2200      	movs	r2, #0
    479c:	6803      	ldr	r3, [r0, #0]
    479e:	f3bf 8f5b 	dmb	ish
    47a2:	e853 1f00 	ldrex	r1, [r3]
    47a6:	2901      	cmp	r1, #1
    47a8:	d103      	bne.n	47b2 <mutex_unlock_platform+0x22>
    47aa:	e843 2000 	strex	r0, r2, [r3]
    47ae:	2800      	cmp	r0, #0
    47b0:	d1f7      	bne.n	47a2 <mutex_unlock_platform+0x12>
    47b2:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    47b6:	4807      	ldr	r0, [pc, #28]	; (47d4 <mutex_unlock_platform+0x44>)
    47b8:	bf08      	it	eq
    47ba:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    47bc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    47be:	b13b      	cbz	r3, 47d0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    47c0:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    47c2:	f004 fa89 	bl	8cd8 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    47c6:	2000      	movs	r0, #0
    47c8:	e7f8      	b.n	47bc <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    47ca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    47ce:	e7f5      	b.n	47bc <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    47d0:	4801      	ldr	r0, [pc, #4]	; (47d8 <mutex_unlock_platform+0x48>)
    47d2:	e7f3      	b.n	47bc <mutex_unlock_platform+0x2c>
    47d4:	ffff8fe9 	.word	0xffff8fe9
    47d8:	ffff8fea 	.word	0xffff8fea

000047dc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    47dc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    47de:	4604      	mov	r4, r0
    47e0:	b918      	cbnz	r0, 47ea <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    47e2:	4b16      	ldr	r3, [pc, #88]	; (483c <mutex_init_platform+0x60>)
    47e4:	4816      	ldr	r0, [pc, #88]	; (4840 <mutex_init_platform+0x64>)
    47e6:	685b      	ldr	r3, [r3, #4]
    47e8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    47ea:	6863      	ldr	r3, [r4, #4]
    47ec:	2b04      	cmp	r3, #4
    47ee:	d023      	beq.n	4838 <mutex_init_platform+0x5c>
    47f0:	2b08      	cmp	r3, #8
    47f2:	d021      	beq.n	4838 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    47f4:	b9cb      	cbnz	r3, 482a <mutex_init_platform+0x4e>
    47f6:	6823      	ldr	r3, [r4, #0]
    47f8:	b9bb      	cbnz	r3, 482a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    47fa:	4812      	ldr	r0, [pc, #72]	; (4844 <mutex_init_platform+0x68>)
    47fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4804:	4621      	mov	r1, r4
    4806:	f003 ff09 	bl	861c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    480a:	b908      	cbnz	r0, 4810 <mutex_init_platform+0x34>
    480c:	6823      	ldr	r3, [r4, #0]
    480e:	b91b      	cbnz	r3, 4818 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    4810:	4b0a      	ldr	r3, [pc, #40]	; (483c <mutex_init_platform+0x60>)
    4812:	480d      	ldr	r0, [pc, #52]	; (4848 <mutex_init_platform+0x6c>)
    4814:	685b      	ldr	r3, [r3, #4]
    4816:	4798      	blx	r3
    4818:	6820      	ldr	r0, [r4, #0]
    481a:	2214      	movs	r2, #20
    481c:	2100      	movs	r1, #0
    481e:	f009 f939 	bl	da94 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4822:	6863      	ldr	r3, [r4, #4]
    4824:	f043 0302 	orr.w	r3, r3, #2
    4828:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    482a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    482c:	f009 f8c3 	bl	d9b6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    4830:	6863      	ldr	r3, [r4, #4]
    4832:	f043 0301 	orr.w	r3, r3, #1
    4836:	6063      	str	r3, [r4, #4]
}
    4838:	bd10      	pop	{r4, pc}
    483a:	bf00      	nop
    483c:	20000358 	.word	0x20000358
    4840:	0000f13e 	.word	0x0000f13e
    4844:	20000a48 	.word	0x20000a48
    4848:	0000f164 	.word	0x0000f164

0000484c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    484c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    484e:	4906      	ldr	r1, [pc, #24]	; (4868 <nrf_cc3xx_platform_mutex_init+0x1c>)
    4850:	4806      	ldr	r0, [pc, #24]	; (486c <nrf_cc3xx_platform_mutex_init+0x20>)
    4852:	2340      	movs	r3, #64	; 0x40
    4854:	2214      	movs	r2, #20
    4856:	f009 f87b 	bl	d950 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    485a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    485e:	4904      	ldr	r1, [pc, #16]	; (4870 <nrf_cc3xx_platform_mutex_init+0x24>)
    4860:	4804      	ldr	r0, [pc, #16]	; (4874 <nrf_cc3xx_platform_mutex_init+0x28>)
    4862:	f008 b8a7 	b.w	c9b4 <nrf_cc3xx_platform_set_mutexes>
    4866:	bf00      	nop
    4868:	20000a68 	.word	0x20000a68
    486c:	20000a48 	.word	0x20000a48
    4870:	0000e65c 	.word	0x0000e65c
    4874:	0000e64c 	.word	0x0000e64c

00004878 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4878:	4901      	ldr	r1, [pc, #4]	; (4880 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    487a:	2210      	movs	r2, #16
	str	r2, [r1]
    487c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    487e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4880:	e000ed10 	.word	0xe000ed10

00004884 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4884:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4886:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4888:	f380 8811 	msr	BASEPRI, r0
	isb
    488c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4890:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4894:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4896:	b662      	cpsie	i
	isb
    4898:	f3bf 8f6f 	isb	sy

	bx	lr
    489c:	4770      	bx	lr
    489e:	bf00      	nop

000048a0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    48a0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    48a2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    48a4:	f381 8811 	msr	BASEPRI, r1

	wfe
    48a8:	bf20      	wfe

	msr	BASEPRI, r0
    48aa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    48ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    48b0:	4770      	bx	lr
    48b2:	bf00      	nop

000048b4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    48b4:	b570      	push	{r4, r5, r6, lr}
    48b6:	4606      	mov	r6, r0
    48b8:	b086      	sub	sp, #24

	if (esf != NULL) {
    48ba:	460d      	mov	r5, r1
    48bc:	2900      	cmp	r1, #0
    48be:	d038      	beq.n	4932 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    48c0:	688b      	ldr	r3, [r1, #8]
    48c2:	9305      	str	r3, [sp, #20]
    48c4:	684b      	ldr	r3, [r1, #4]
    48c6:	9304      	str	r3, [sp, #16]
    48c8:	680b      	ldr	r3, [r1, #0]
    48ca:	9303      	str	r3, [sp, #12]
    48cc:	2400      	movs	r4, #0
    48ce:	4b1c      	ldr	r3, [pc, #112]	; (4940 <z_arm_fatal_error+0x8c>)
    48d0:	491c      	ldr	r1, [pc, #112]	; (4944 <z_arm_fatal_error+0x90>)
    48d2:	9302      	str	r3, [sp, #8]
    48d4:	2201      	movs	r2, #1
    48d6:	4623      	mov	r3, r4
    48d8:	4620      	mov	r0, r4
    48da:	e9cd 4400 	strd	r4, r4, [sp]
    48de:	f008 fb50 	bl	cf82 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    48e2:	696b      	ldr	r3, [r5, #20]
    48e4:	9305      	str	r3, [sp, #20]
    48e6:	692b      	ldr	r3, [r5, #16]
    48e8:	9304      	str	r3, [sp, #16]
    48ea:	68eb      	ldr	r3, [r5, #12]
    48ec:	9303      	str	r3, [sp, #12]
    48ee:	4b16      	ldr	r3, [pc, #88]	; (4948 <z_arm_fatal_error+0x94>)
    48f0:	4914      	ldr	r1, [pc, #80]	; (4944 <z_arm_fatal_error+0x90>)
    48f2:	9400      	str	r4, [sp, #0]
    48f4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    48f8:	2201      	movs	r2, #1
    48fa:	4623      	mov	r3, r4
    48fc:	4620      	mov	r0, r4
    48fe:	f008 fb40 	bl	cf82 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4902:	69eb      	ldr	r3, [r5, #28]
    4904:	9303      	str	r3, [sp, #12]
    4906:	4b11      	ldr	r3, [pc, #68]	; (494c <z_arm_fatal_error+0x98>)
    4908:	490e      	ldr	r1, [pc, #56]	; (4944 <z_arm_fatal_error+0x90>)
    490a:	9400      	str	r4, [sp, #0]
    490c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4910:	2201      	movs	r2, #1
    4912:	4623      	mov	r3, r4
    4914:	4620      	mov	r0, r4
    4916:	f008 fb34 	bl	cf82 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    491a:	69ab      	ldr	r3, [r5, #24]
    491c:	9303      	str	r3, [sp, #12]
    491e:	4b0c      	ldr	r3, [pc, #48]	; (4950 <z_arm_fatal_error+0x9c>)
    4920:	4908      	ldr	r1, [pc, #32]	; (4944 <z_arm_fatal_error+0x90>)
    4922:	9400      	str	r4, [sp, #0]
    4924:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4928:	2201      	movs	r2, #1
    492a:	4623      	mov	r3, r4
    492c:	4620      	mov	r0, r4
    492e:	f008 fb28 	bl	cf82 <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4932:	4629      	mov	r1, r5
    4934:	4630      	mov	r0, r6
}
    4936:	b006      	add	sp, #24
    4938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    493c:	f003 bcee 	b.w	831c <z_fatal_error>
    4940:	0000f191 	.word	0x0000f191
    4944:	0000e3d4 	.word	0x0000e3d4
    4948:	0000f1c0 	.word	0x0000f1c0
    494c:	0000f1ef 	.word	0x0000f1ef
    4950:	0000f1fe 	.word	0x0000f1fe

00004954 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4954:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4956:	2b00      	cmp	r3, #0
    4958:	db08      	blt.n	496c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    495a:	2201      	movs	r2, #1
    495c:	f000 001f 	and.w	r0, r0, #31
    4960:	fa02 f000 	lsl.w	r0, r2, r0
    4964:	095b      	lsrs	r3, r3, #5
    4966:	4a02      	ldr	r2, [pc, #8]	; (4970 <arch_irq_enable+0x1c>)
    4968:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    496c:	4770      	bx	lr
    496e:	bf00      	nop
    4970:	e000e100 	.word	0xe000e100

00004974 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4974:	4b05      	ldr	r3, [pc, #20]	; (498c <arch_irq_is_enabled+0x18>)
    4976:	0942      	lsrs	r2, r0, #5
    4978:	f000 001f 	and.w	r0, r0, #31
    497c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4980:	2301      	movs	r3, #1
    4982:	fa03 f000 	lsl.w	r0, r3, r0
}
    4986:	4010      	ands	r0, r2
    4988:	4770      	bx	lr
    498a:	bf00      	nop
    498c:	e000e100 	.word	0xe000e100

00004990 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    4990:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    4992:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    4994:	2c07      	cmp	r4, #7
{
    4996:	4605      	mov	r5, r0
    4998:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    499a:	d90f      	bls.n	49bc <z_arm_irq_priority_set+0x2c>
    499c:	4a11      	ldr	r2, [pc, #68]	; (49e4 <z_arm_irq_priority_set+0x54>)
    499e:	4912      	ldr	r1, [pc, #72]	; (49e8 <z_arm_irq_priority_set+0x58>)
    49a0:	4812      	ldr	r0, [pc, #72]	; (49ec <z_arm_irq_priority_set+0x5c>)
    49a2:	2357      	movs	r3, #87	; 0x57
    49a4:	f008 fa6f 	bl	ce86 <assert_print>
    49a8:	4811      	ldr	r0, [pc, #68]	; (49f0 <z_arm_irq_priority_set+0x60>)
    49aa:	4631      	mov	r1, r6
    49ac:	2307      	movs	r3, #7
    49ae:	462a      	mov	r2, r5
    49b0:	f008 fa69 	bl	ce86 <assert_print>
    49b4:	480b      	ldr	r0, [pc, #44]	; (49e4 <z_arm_irq_priority_set+0x54>)
    49b6:	2157      	movs	r1, #87	; 0x57
    49b8:	f008 fa5e 	bl	ce78 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    49bc:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    49be:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49c0:	bfac      	ite	ge
    49c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49c6:	4b0b      	ldrlt	r3, [pc, #44]	; (49f4 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49c8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49cc:	bfb8      	it	lt
    49ce:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49d2:	b2e4      	uxtb	r4, r4
    49d4:	bfaa      	itet	ge
    49d6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49da:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49dc:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    49e0:	bd70      	pop	{r4, r5, r6, pc}
    49e2:	bf00      	nop
    49e4:	0000f22c 	.word	0x0000f22c
    49e8:	0000f262 	.word	0x0000f262
    49ec:	0000eb06 	.word	0x0000eb06
    49f0:	0000f27d 	.word	0x0000f27d
    49f4:	e000ed14 	.word	0xe000ed14

000049f8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    49f8:	bf30      	wfi
    b z_SysNmiOnReset
    49fa:	f7ff bffd 	b.w	49f8 <z_SysNmiOnReset>
    49fe:	bf00      	nop

00004a00 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4a00:	4a0b      	ldr	r2, [pc, #44]	; (4a30 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4a02:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4a04:	4b0b      	ldr	r3, [pc, #44]	; (4a34 <z_arm_prep_c+0x34>)
    4a06:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4a0a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4a0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a10:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4a14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4a18:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4a20:	f003 fd10 	bl	8444 <z_bss_zero>
	z_data_copy();
    4a24:	f005 fc34 	bl	a290 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4a28:	f000 fbee 	bl	5208 <z_arm_interrupt_init>
	z_cstart();
    4a2c:	f003 fd4e 	bl	84cc <z_cstart>
    4a30:	00000000 	.word	0x00000000
    4a34:	e000ed00 	.word	0xe000ed00

00004a38 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4a38:	4a09      	ldr	r2, [pc, #36]	; (4a60 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    4a3a:	490a      	ldr	r1, [pc, #40]	; (4a64 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    4a3c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4a3e:	6809      	ldr	r1, [r1, #0]
    4a40:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4a42:	4909      	ldr	r1, [pc, #36]	; (4a68 <arch_swap+0x30>)
	_current->arch.basepri = key;
    4a44:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4a46:	684b      	ldr	r3, [r1, #4]
    4a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4a4c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    4a4e:	2300      	movs	r3, #0
    4a50:	f383 8811 	msr	BASEPRI, r3
    4a54:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4a58:	6893      	ldr	r3, [r2, #8]
}
    4a5a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    4a5c:	4770      	bx	lr
    4a5e:	bf00      	nop
    4a60:	200010c4 	.word	0x200010c4
    4a64:	0000e7d8 	.word	0x0000e7d8
    4a68:	e000ed00 	.word	0xe000ed00

00004a6c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4a6c:	4912      	ldr	r1, [pc, #72]	; (4ab8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4a6e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4a70:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4a74:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4a76:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4a7a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4a7e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4a80:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4a84:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4a88:	4f0c      	ldr	r7, [pc, #48]	; (4abc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4a8a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4a8e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4a90:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4a92:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4a94:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    4a96:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4a98:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4a9a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4a9e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4aa0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4aa2:	f000 fc9b 	bl	53dc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4aa6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4aaa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4aae:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4ab2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4ab6:	4770      	bx	lr
    ldr r1, =_kernel
    4ab8:	200010c4 	.word	0x200010c4
    ldr v4, =_SCS_ICSR
    4abc:	e000ed04 	.word	0xe000ed04

00004ac0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4ac0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4ac4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4ac6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4aca:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4ace:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4ad0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4ad4:	2902      	cmp	r1, #2
    beq _oops
    4ad6:	d0ff      	beq.n	4ad8 <_oops>

00004ad8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4ad8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    4ada:	f008 fa62 	bl	cfa2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4ade:	bd01      	pop	{r0, pc}

00004ae0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4ae0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4ae4:	9b00      	ldr	r3, [sp, #0]
    4ae6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    4aea:	490a      	ldr	r1, [pc, #40]	; (4b14 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4aec:	9b01      	ldr	r3, [sp, #4]
    4aee:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4af2:	9b02      	ldr	r3, [sp, #8]
    4af4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4af8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4b00:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4b04:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4b08:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4b0a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4b0c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4b0e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4b10:	4770      	bx	lr
    4b12:	bf00      	nop
    4b14:	0000cde1 	.word	0x0000cde1

00004b18 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4b18:	4a09      	ldr	r2, [pc, #36]	; (4b40 <z_check_thread_stack_fail+0x28>)
{
    4b1a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    4b1c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    4b1e:	b170      	cbz	r0, 4b3e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4b20:	f113 0f16 	cmn.w	r3, #22
    4b24:	6e40      	ldr	r0, [r0, #100]	; 0x64
    4b26:	d005      	beq.n	4b34 <z_check_thread_stack_fail+0x1c>
    4b28:	f1a0 0220 	sub.w	r2, r0, #32
    4b2c:	429a      	cmp	r2, r3
    4b2e:	d805      	bhi.n	4b3c <z_check_thread_stack_fail+0x24>
    4b30:	4283      	cmp	r3, r0
    4b32:	d203      	bcs.n	4b3c <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    4b34:	4281      	cmp	r1, r0
    4b36:	bf28      	it	cs
    4b38:	2000      	movcs	r0, #0
    4b3a:	4770      	bx	lr
    4b3c:	2000      	movs	r0, #0
}
    4b3e:	4770      	bx	lr
    4b40:	200010c4 	.word	0x200010c4

00004b44 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4b44:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4b46:	4b09      	ldr	r3, [pc, #36]	; (4b6c <arch_switch_to_main_thread+0x28>)
    4b48:	6098      	str	r0, [r3, #8]
{
    4b4a:	460d      	mov	r5, r1
    4b4c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4b4e:	f000 fc45 	bl	53dc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4b52:	4620      	mov	r0, r4
    4b54:	f385 8809 	msr	PSP, r5
    4b58:	2100      	movs	r1, #0
    4b5a:	b663      	cpsie	if
    4b5c:	f381 8811 	msr	BASEPRI, r1
    4b60:	f3bf 8f6f 	isb	sy
    4b64:	2200      	movs	r2, #0
    4b66:	2300      	movs	r3, #0
    4b68:	f008 f93a 	bl	cde0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4b6c:	200010c4 	.word	0x200010c4

00004b70 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4b70:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4b72:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4b74:	4a0b      	ldr	r2, [pc, #44]	; (4ba4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4b76:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    4b78:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4b7a:	bf1e      	ittt	ne
	movne	r1, #0
    4b7c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4b7e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    4b80:	f008 ff0a 	blne	d998 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4b84:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4b86:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4b8a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4b8e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4b92:	4905      	ldr	r1, [pc, #20]	; (4ba8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4b94:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4b96:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4b98:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4b9a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4b9e:	4903      	ldr	r1, [pc, #12]	; (4bac <_isr_wrapper+0x3c>)
	bx r1
    4ba0:	4708      	bx	r1
    4ba2:	0000      	.short	0x0000
	ldr r2, =_kernel
    4ba4:	200010c4 	.word	0x200010c4
	ldr r1, =_sw_isr_table
    4ba8:	0000e224 	.word	0x0000e224
	ldr r1, =z_arm_int_exit
    4bac:	00004bb1 	.word	0x00004bb1

00004bb0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4bb0:	4b04      	ldr	r3, [pc, #16]	; (4bc4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4bb2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4bb4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4bb6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4bb8:	d003      	beq.n	4bc2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4bba:	4903      	ldr	r1, [pc, #12]	; (4bc8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4bc0:	600a      	str	r2, [r1, #0]

00004bc2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4bc2:	4770      	bx	lr
	ldr r3, =_kernel
    4bc4:	200010c4 	.word	0x200010c4
	ldr r1, =_SCS_ICSR
    4bc8:	e000ed04 	.word	0xe000ed04

00004bcc <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bce:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    4bd0:	2400      	movs	r4, #0
    4bd2:	4b3b      	ldr	r3, [pc, #236]	; (4cc0 <bus_fault.constprop.0+0xf4>)
    4bd4:	9302      	str	r3, [sp, #8]
    4bd6:	e9cd 4400 	strd	r4, r4, [sp]
    4bda:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4bdc:	4607      	mov	r7, r0
    4bde:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    4be0:	2201      	movs	r2, #1
    4be2:	4938      	ldr	r1, [pc, #224]	; (4cc4 <bus_fault.constprop.0+0xf8>)
    4be4:	4620      	mov	r0, r4
    4be6:	f008 f9eb 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4bea:	4b37      	ldr	r3, [pc, #220]	; (4cc8 <bus_fault.constprop.0+0xfc>)
    4bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bee:	04db      	lsls	r3, r3, #19
    4bf0:	d509      	bpl.n	4c06 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    4bf2:	4b36      	ldr	r3, [pc, #216]	; (4ccc <bus_fault.constprop.0+0x100>)
    4bf4:	4933      	ldr	r1, [pc, #204]	; (4cc4 <bus_fault.constprop.0+0xf8>)
    4bf6:	9400      	str	r4, [sp, #0]
    4bf8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4bfc:	2201      	movs	r2, #1
    4bfe:	4623      	mov	r3, r4
    4c00:	4620      	mov	r0, r4
    4c02:	f008 f9dd 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4c06:	4b30      	ldr	r3, [pc, #192]	; (4cc8 <bus_fault.constprop.0+0xfc>)
    4c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c0a:	051d      	lsls	r5, r3, #20
    4c0c:	d509      	bpl.n	4c22 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    4c0e:	4b30      	ldr	r3, [pc, #192]	; (4cd0 <bus_fault.constprop.0+0x104>)
    4c10:	9302      	str	r3, [sp, #8]
    4c12:	2300      	movs	r3, #0
    4c14:	e9cd 3300 	strd	r3, r3, [sp]
    4c18:	492a      	ldr	r1, [pc, #168]	; (4cc4 <bus_fault.constprop.0+0xf8>)
    4c1a:	2201      	movs	r2, #1
    4c1c:	4618      	mov	r0, r3
    4c1e:	f008 f9cf 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4c22:	4d29      	ldr	r5, [pc, #164]	; (4cc8 <bus_fault.constprop.0+0xfc>)
    4c24:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4c26:	059c      	lsls	r4, r3, #22
    4c28:	d51e      	bpl.n	4c68 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    4c2a:	2400      	movs	r4, #0
    4c2c:	4b29      	ldr	r3, [pc, #164]	; (4cd4 <bus_fault.constprop.0+0x108>)
    4c2e:	9302      	str	r3, [sp, #8]
    4c30:	2201      	movs	r2, #1
    4c32:	4623      	mov	r3, r4
    4c34:	4620      	mov	r0, r4
    4c36:	e9cd 4400 	strd	r4, r4, [sp]
    4c3a:	4922      	ldr	r1, [pc, #136]	; (4cc4 <bus_fault.constprop.0+0xf8>)
    4c3c:	f008 f9c0 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4c40:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4c42:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4c44:	0410      	lsls	r0, r2, #16
    4c46:	d50f      	bpl.n	4c68 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4c48:	9303      	str	r3, [sp, #12]
    4c4a:	4b23      	ldr	r3, [pc, #140]	; (4cd8 <bus_fault.constprop.0+0x10c>)
    4c4c:	491d      	ldr	r1, [pc, #116]	; (4cc4 <bus_fault.constprop.0+0xf8>)
    4c4e:	9400      	str	r4, [sp, #0]
    4c50:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4c54:	2201      	movs	r2, #1
    4c56:	4623      	mov	r3, r4
    4c58:	4620      	mov	r0, r4
    4c5a:	f008 f9b1 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    4c5e:	b11f      	cbz	r7, 4c68 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4c60:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4c62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4c66:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4c68:	4b17      	ldr	r3, [pc, #92]	; (4cc8 <bus_fault.constprop.0+0xfc>)
    4c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c6c:	0559      	lsls	r1, r3, #21
    4c6e:	d509      	bpl.n	4c84 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    4c70:	4b1a      	ldr	r3, [pc, #104]	; (4cdc <bus_fault.constprop.0+0x110>)
    4c72:	9302      	str	r3, [sp, #8]
    4c74:	2300      	movs	r3, #0
    4c76:	e9cd 3300 	strd	r3, r3, [sp]
    4c7a:	4912      	ldr	r1, [pc, #72]	; (4cc4 <bus_fault.constprop.0+0xf8>)
    4c7c:	2201      	movs	r2, #1
    4c7e:	4618      	mov	r0, r3
    4c80:	f008 f99e 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4c84:	4a10      	ldr	r2, [pc, #64]	; (4cc8 <bus_fault.constprop.0+0xfc>)
    4c86:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4c88:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    4c8c:	d012      	beq.n	4cb4 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    4c8e:	4b14      	ldr	r3, [pc, #80]	; (4ce0 <bus_fault.constprop.0+0x114>)
    4c90:	9302      	str	r3, [sp, #8]
    4c92:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4c94:	e9cd 3300 	strd	r3, r3, [sp]
    4c98:	490a      	ldr	r1, [pc, #40]	; (4cc4 <bus_fault.constprop.0+0xf8>)
    4c9a:	2201      	movs	r2, #1
    4c9c:	4618      	mov	r0, r3
    4c9e:	f008 f98f 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4ca2:	4a09      	ldr	r2, [pc, #36]	; (4cc8 <bus_fault.constprop.0+0xfc>)
    4ca4:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    4ca6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4ca8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4cac:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4cae:	7030      	strb	r0, [r6, #0]

	return reason;
}
    4cb0:	b005      	add	sp, #20
    4cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4cb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4cb6:	0492      	lsls	r2, r2, #18
    4cb8:	d5f3      	bpl.n	4ca2 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4cba:	4a0a      	ldr	r2, [pc, #40]	; (4ce4 <bus_fault.constprop.0+0x118>)
    4cbc:	9202      	str	r2, [sp, #8]
    4cbe:	e7e9      	b.n	4c94 <bus_fault.constprop.0+0xc8>
    4cc0:	0000f2bd 	.word	0x0000f2bd
    4cc4:	0000e3d4 	.word	0x0000e3d4
    4cc8:	e000ed00 	.word	0xe000ed00
    4ccc:	0000f2d3 	.word	0x0000f2d3
    4cd0:	0000f2e4 	.word	0x0000f2e4
    4cd4:	0000f2f7 	.word	0x0000f2f7
    4cd8:	0000f310 	.word	0x0000f310
    4cdc:	0000f325 	.word	0x0000f325
    4ce0:	0000f340 	.word	0x0000f340
    4ce4:	0000f358 	.word	0x0000f358

00004ce8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    4cea:	2400      	movs	r4, #0
    4cec:	4b33      	ldr	r3, [pc, #204]	; (4dbc <usage_fault.constprop.0+0xd4>)
    4cee:	9302      	str	r3, [sp, #8]
    4cf0:	e9cd 4400 	strd	r4, r4, [sp]
    4cf4:	4623      	mov	r3, r4
    4cf6:	4932      	ldr	r1, [pc, #200]	; (4dc0 <usage_fault.constprop.0+0xd8>)
    4cf8:	2201      	movs	r2, #1
    4cfa:	4620      	mov	r0, r4
    4cfc:	f008 f960 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4d00:	4b30      	ldr	r3, [pc, #192]	; (4dc4 <usage_fault.constprop.0+0xdc>)
    4d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d04:	019b      	lsls	r3, r3, #6
    4d06:	d509      	bpl.n	4d1c <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    4d08:	4b2f      	ldr	r3, [pc, #188]	; (4dc8 <usage_fault.constprop.0+0xe0>)
    4d0a:	492d      	ldr	r1, [pc, #180]	; (4dc0 <usage_fault.constprop.0+0xd8>)
    4d0c:	9400      	str	r4, [sp, #0]
    4d0e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4d12:	2201      	movs	r2, #1
    4d14:	4623      	mov	r3, r4
    4d16:	4620      	mov	r0, r4
    4d18:	f008 f952 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4d1c:	4b29      	ldr	r3, [pc, #164]	; (4dc4 <usage_fault.constprop.0+0xdc>)
    4d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d20:	01dc      	lsls	r4, r3, #7
    4d22:	d509      	bpl.n	4d38 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    4d24:	4b29      	ldr	r3, [pc, #164]	; (4dcc <usage_fault.constprop.0+0xe4>)
    4d26:	9302      	str	r3, [sp, #8]
    4d28:	2300      	movs	r3, #0
    4d2a:	e9cd 3300 	strd	r3, r3, [sp]
    4d2e:	4924      	ldr	r1, [pc, #144]	; (4dc0 <usage_fault.constprop.0+0xd8>)
    4d30:	2201      	movs	r2, #1
    4d32:	4618      	mov	r0, r3
    4d34:	f008 f944 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4d38:	4b22      	ldr	r3, [pc, #136]	; (4dc4 <usage_fault.constprop.0+0xdc>)
    4d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d3c:	0318      	lsls	r0, r3, #12
    4d3e:	d509      	bpl.n	4d54 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    4d40:	4b23      	ldr	r3, [pc, #140]	; (4dd0 <usage_fault.constprop.0+0xe8>)
    4d42:	9302      	str	r3, [sp, #8]
    4d44:	2300      	movs	r3, #0
    4d46:	e9cd 3300 	strd	r3, r3, [sp]
    4d4a:	491d      	ldr	r1, [pc, #116]	; (4dc0 <usage_fault.constprop.0+0xd8>)
    4d4c:	2201      	movs	r2, #1
    4d4e:	4618      	mov	r0, r3
    4d50:	f008 f936 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4d54:	4b1b      	ldr	r3, [pc, #108]	; (4dc4 <usage_fault.constprop.0+0xdc>)
    4d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d58:	0359      	lsls	r1, r3, #13
    4d5a:	d509      	bpl.n	4d70 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4d5c:	4b1d      	ldr	r3, [pc, #116]	; (4dd4 <usage_fault.constprop.0+0xec>)
    4d5e:	9302      	str	r3, [sp, #8]
    4d60:	2300      	movs	r3, #0
    4d62:	e9cd 3300 	strd	r3, r3, [sp]
    4d66:	4916      	ldr	r1, [pc, #88]	; (4dc0 <usage_fault.constprop.0+0xd8>)
    4d68:	2201      	movs	r2, #1
    4d6a:	4618      	mov	r0, r3
    4d6c:	f008 f928 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4d70:	4b14      	ldr	r3, [pc, #80]	; (4dc4 <usage_fault.constprop.0+0xdc>)
    4d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d74:	039a      	lsls	r2, r3, #14
    4d76:	d509      	bpl.n	4d8c <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4d78:	4b17      	ldr	r3, [pc, #92]	; (4dd8 <usage_fault.constprop.0+0xf0>)
    4d7a:	9302      	str	r3, [sp, #8]
    4d7c:	2300      	movs	r3, #0
    4d7e:	e9cd 3300 	strd	r3, r3, [sp]
    4d82:	490f      	ldr	r1, [pc, #60]	; (4dc0 <usage_fault.constprop.0+0xd8>)
    4d84:	2201      	movs	r2, #1
    4d86:	4618      	mov	r0, r3
    4d88:	f008 f91a 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4d8c:	4b0d      	ldr	r3, [pc, #52]	; (4dc4 <usage_fault.constprop.0+0xdc>)
    4d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d90:	03db      	lsls	r3, r3, #15
    4d92:	d509      	bpl.n	4da8 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4d94:	4b11      	ldr	r3, [pc, #68]	; (4ddc <usage_fault.constprop.0+0xf4>)
    4d96:	9302      	str	r3, [sp, #8]
    4d98:	2300      	movs	r3, #0
    4d9a:	e9cd 3300 	strd	r3, r3, [sp]
    4d9e:	4908      	ldr	r1, [pc, #32]	; (4dc0 <usage_fault.constprop.0+0xd8>)
    4da0:	2201      	movs	r2, #1
    4da2:	4618      	mov	r0, r3
    4da4:	f008 f90c 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4da8:	4a06      	ldr	r2, [pc, #24]	; (4dc4 <usage_fault.constprop.0+0xdc>)
    4daa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4dac:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4db0:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    4db4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4db6:	6293      	str	r3, [r2, #40]	; 0x28
}
    4db8:	b004      	add	sp, #16
    4dba:	bd10      	pop	{r4, pc}
    4dbc:	0000f387 	.word	0x0000f387
    4dc0:	0000e3d4 	.word	0x0000e3d4
    4dc4:	e000ed00 	.word	0xe000ed00
    4dc8:	0000f39f 	.word	0x0000f39f
    4dcc:	0000f3b2 	.word	0x0000f3b2
    4dd0:	0000f3cc 	.word	0x0000f3cc
    4dd4:	0000f3ea 	.word	0x0000f3ea
    4dd8:	0000f40f 	.word	0x0000f40f
    4ddc:	0000f429 	.word	0x0000f429

00004de0 <mem_manage_fault>:
{
    4de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4de4:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    4de6:	2400      	movs	r4, #0
    4de8:	4b53      	ldr	r3, [pc, #332]	; (4f38 <mem_manage_fault+0x158>)
    4dea:	9302      	str	r3, [sp, #8]
    4dec:	e9cd 4400 	strd	r4, r4, [sp]
    4df0:	4623      	mov	r3, r4
{
    4df2:	4680      	mov	r8, r0
    4df4:	4689      	mov	r9, r1
    4df6:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4df8:	4950      	ldr	r1, [pc, #320]	; (4f3c <mem_manage_fault+0x15c>)
    4dfa:	2201      	movs	r2, #1
    4dfc:	4620      	mov	r0, r4
    4dfe:	f008 f8df 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4e02:	4b4f      	ldr	r3, [pc, #316]	; (4f40 <mem_manage_fault+0x160>)
    4e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e06:	06df      	lsls	r7, r3, #27
    4e08:	d509      	bpl.n	4e1e <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4e0a:	4b4e      	ldr	r3, [pc, #312]	; (4f44 <mem_manage_fault+0x164>)
    4e0c:	494b      	ldr	r1, [pc, #300]	; (4f3c <mem_manage_fault+0x15c>)
    4e0e:	9400      	str	r4, [sp, #0]
    4e10:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4e14:	2201      	movs	r2, #1
    4e16:	4623      	mov	r3, r4
    4e18:	4620      	mov	r0, r4
    4e1a:	f008 f8d1 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4e1e:	4b48      	ldr	r3, [pc, #288]	; (4f40 <mem_manage_fault+0x160>)
    4e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e22:	071d      	lsls	r5, r3, #28
    4e24:	d509      	bpl.n	4e3a <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    4e26:	4b48      	ldr	r3, [pc, #288]	; (4f48 <mem_manage_fault+0x168>)
    4e28:	9302      	str	r3, [sp, #8]
    4e2a:	2300      	movs	r3, #0
    4e2c:	e9cd 3300 	strd	r3, r3, [sp]
    4e30:	4942      	ldr	r1, [pc, #264]	; (4f3c <mem_manage_fault+0x15c>)
    4e32:	2201      	movs	r2, #1
    4e34:	4618      	mov	r0, r3
    4e36:	f008 f8c3 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4e3a:	4d41      	ldr	r5, [pc, #260]	; (4f40 <mem_manage_fault+0x160>)
    4e3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4e3e:	079c      	lsls	r4, r3, #30
    4e40:	d437      	bmi.n	4eb2 <mem_manage_fault+0xd2>
	uint32_t mmfar = -EINVAL;
    4e42:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4e46:	4b3e      	ldr	r3, [pc, #248]	; (4f40 <mem_manage_fault+0x160>)
    4e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e4a:	07d9      	lsls	r1, r3, #31
    4e4c:	d509      	bpl.n	4e62 <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    4e4e:	4b3f      	ldr	r3, [pc, #252]	; (4f4c <mem_manage_fault+0x16c>)
    4e50:	9302      	str	r3, [sp, #8]
    4e52:	2300      	movs	r3, #0
    4e54:	e9cd 3300 	strd	r3, r3, [sp]
    4e58:	4938      	ldr	r1, [pc, #224]	; (4f3c <mem_manage_fault+0x15c>)
    4e5a:	2201      	movs	r2, #1
    4e5c:	4618      	mov	r0, r3
    4e5e:	f008 f8af 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4e62:	4b37      	ldr	r3, [pc, #220]	; (4f40 <mem_manage_fault+0x160>)
    4e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e66:	069a      	lsls	r2, r3, #26
    4e68:	d509      	bpl.n	4e7e <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    4e6a:	4b39      	ldr	r3, [pc, #228]	; (4f50 <mem_manage_fault+0x170>)
    4e6c:	9302      	str	r3, [sp, #8]
    4e6e:	2300      	movs	r3, #0
    4e70:	e9cd 3300 	strd	r3, r3, [sp]
    4e74:	4931      	ldr	r1, [pc, #196]	; (4f3c <mem_manage_fault+0x15c>)
    4e76:	2201      	movs	r2, #1
    4e78:	4618      	mov	r0, r3
    4e7a:	f008 f8a1 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4e7e:	4d30      	ldr	r5, [pc, #192]	; (4f40 <mem_manage_fault+0x160>)
    4e80:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4e82:	06db      	lsls	r3, r3, #27
    4e84:	d437      	bmi.n	4ef6 <mem_manage_fault+0x116>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4e86:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4e88:	079c      	lsls	r4, r3, #30
    4e8a:	d434      	bmi.n	4ef6 <mem_manage_fault+0x116>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4e8c:	2400      	movs	r4, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4e8e:	4b2c      	ldr	r3, [pc, #176]	; (4f40 <mem_manage_fault+0x160>)
    4e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e92:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    4e94:	bf42      	ittt	mi
    4e96:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    4e98:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    4e9c:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ea0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4ea4:	629a      	str	r2, [r3, #40]	; 0x28
}
    4ea6:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    4ea8:	2300      	movs	r3, #0
    4eaa:	7033      	strb	r3, [r6, #0]
}
    4eac:	b005      	add	sp, #20
    4eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    4eb2:	2400      	movs	r4, #0
    4eb4:	4b27      	ldr	r3, [pc, #156]	; (4f54 <mem_manage_fault+0x174>)
    4eb6:	9302      	str	r3, [sp, #8]
    4eb8:	4620      	mov	r0, r4
    4eba:	4623      	mov	r3, r4
    4ebc:	e9cd 4400 	strd	r4, r4, [sp]
    4ec0:	491e      	ldr	r1, [pc, #120]	; (4f3c <mem_manage_fault+0x15c>)
    4ec2:	2201      	movs	r2, #1
    4ec4:	f008 f87c 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    4ec8:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4eca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4ecc:	0618      	lsls	r0, r3, #24
    4ece:	d5b8      	bpl.n	4e42 <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4ed0:	4b21      	ldr	r3, [pc, #132]	; (4f58 <mem_manage_fault+0x178>)
    4ed2:	491a      	ldr	r1, [pc, #104]	; (4f3c <mem_manage_fault+0x15c>)
    4ed4:	9703      	str	r7, [sp, #12]
    4ed6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4eda:	9400      	str	r4, [sp, #0]
    4edc:	4623      	mov	r3, r4
    4ede:	2201      	movs	r2, #1
    4ee0:	4620      	mov	r0, r4
    4ee2:	f008 f86d 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    4ee6:	f1b9 0f00 	cmp.w	r9, #0
    4eea:	d0ac      	beq.n	4e46 <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4eec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4ef2:	62ab      	str	r3, [r5, #40]	; 0x28
    4ef4:	e7a7      	b.n	4e46 <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4ef6:	686b      	ldr	r3, [r5, #4]
    4ef8:	0518      	lsls	r0, r3, #20
    4efa:	d5c7      	bpl.n	4e8c <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4efc:	4641      	mov	r1, r8
    4efe:	4638      	mov	r0, r7
    4f00:	f7ff fe0a 	bl	4b18 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4f04:	4604      	mov	r4, r0
    4f06:	b118      	cbz	r0, 4f10 <mem_manage_fault+0x130>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4f08:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4f0c:	2402      	movs	r4, #2
    4f0e:	e7be      	b.n	4e8e <mem_manage_fault+0xae>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    4f10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4f12:	06d9      	lsls	r1, r3, #27
    4f14:	d5ba      	bpl.n	4e8c <mem_manage_fault+0xac>
    4f16:	4a11      	ldr	r2, [pc, #68]	; (4f5c <mem_manage_fault+0x17c>)
    4f18:	4911      	ldr	r1, [pc, #68]	; (4f60 <mem_manage_fault+0x180>)
    4f1a:	4812      	ldr	r0, [pc, #72]	; (4f64 <mem_manage_fault+0x184>)
    4f1c:	f240 1349 	movw	r3, #329	; 0x149
    4f20:	f007 ffb1 	bl	ce86 <assert_print>
    4f24:	4810      	ldr	r0, [pc, #64]	; (4f68 <mem_manage_fault+0x188>)
    4f26:	f007 ffae 	bl	ce86 <assert_print>
    4f2a:	480c      	ldr	r0, [pc, #48]	; (4f5c <mem_manage_fault+0x17c>)
    4f2c:	f240 1149 	movw	r1, #329	; 0x149
    4f30:	f007 ffa2 	bl	ce78 <assert_post_action>
    4f34:	e7ab      	b.n	4e8e <mem_manage_fault+0xae>
    4f36:	bf00      	nop
    4f38:	0000f454 	.word	0x0000f454
    4f3c:	0000e3d4 	.word	0x0000e3d4
    4f40:	e000ed00 	.word	0xe000ed00
    4f44:	0000f46a 	.word	0x0000f46a
    4f48:	0000f2e4 	.word	0x0000f2e4
    4f4c:	0000f4cb 	.word	0x0000f4cb
    4f50:	0000f358 	.word	0x0000f358
    4f54:	0000f49d 	.word	0x0000f49d
    4f58:	0000f4b5 	.word	0x0000f4b5
    4f5c:	0000f4ea 	.word	0x0000f4ea
    4f60:	0000f524 	.word	0x0000f524
    4f64:	0000eb06 	.word	0x0000eb06
    4f68:	0000f56e 	.word	0x0000f56e

00004f6c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4f70:	4b89      	ldr	r3, [pc, #548]	; (5198 <z_arm_fault+0x22c>)
    4f72:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    4f76:	b091      	sub	sp, #68	; 0x44
    4f78:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4f7a:	f3c9 0808 	ubfx	r8, r9, #0, #9
    4f7e:	2700      	movs	r7, #0
    4f80:	f387 8811 	msr	BASEPRI, r7
    4f84:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4f88:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4f8c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4f90:	d10d      	bne.n	4fae <z_arm_fault+0x42>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4f92:	f002 030c 	and.w	r3, r2, #12
    4f96:	2b08      	cmp	r3, #8
    4f98:	d11a      	bne.n	4fd0 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4f9a:	4b80      	ldr	r3, [pc, #512]	; (519c <z_arm_fault+0x230>)
    4f9c:	4980      	ldr	r1, [pc, #512]	; (51a0 <z_arm_fault+0x234>)
    4f9e:	9700      	str	r7, [sp, #0]
    4fa0:	e9cd 7301 	strd	r7, r3, [sp, #4]
    4fa4:	2201      	movs	r2, #1
    4fa6:	463b      	mov	r3, r7
    4fa8:	4638      	mov	r0, r7
    4faa:	f008 f809 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    4fae:	4a7d      	ldr	r2, [pc, #500]	; (51a4 <z_arm_fault+0x238>)
    4fb0:	497d      	ldr	r1, [pc, #500]	; (51a8 <z_arm_fault+0x23c>)
    4fb2:	487e      	ldr	r0, [pc, #504]	; (51ac <z_arm_fault+0x240>)
    4fb4:	f240 33fb 	movw	r3, #1019	; 0x3fb
    4fb8:	f007 ff65 	bl	ce86 <assert_print>
    4fbc:	487c      	ldr	r0, [pc, #496]	; (51b0 <z_arm_fault+0x244>)
    4fbe:	f007 ff62 	bl	ce86 <assert_print>
    4fc2:	4878      	ldr	r0, [pc, #480]	; (51a4 <z_arm_fault+0x238>)
    4fc4:	f240 31fb 	movw	r1, #1019	; 0x3fb
    4fc8:	f007 ff56 	bl	ce78 <assert_post_action>
    4fcc:	2500      	movs	r5, #0
    4fce:	e005      	b.n	4fdc <z_arm_fault+0x70>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4fd0:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    4fd2:	bf5c      	itt	pl
    4fd4:	4605      	movpl	r5, r0
			*nested_exc = true;
    4fd6:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
    4fd8:	2d00      	cmp	r5, #0
    4fda:	d0e8      	beq.n	4fae <z_arm_fault+0x42>
	*recoverable = false;
    4fdc:	2600      	movs	r6, #0
	switch (fault) {
    4fde:	f1a8 0303 	sub.w	r3, r8, #3
	*recoverable = false;
    4fe2:	f88d 601f 	strb.w	r6, [sp, #31]
	switch (fault) {
    4fe6:	2b09      	cmp	r3, #9
    4fe8:	f200 80ba 	bhi.w	5160 <z_arm_fault+0x1f4>
    4fec:	e8df f003 	tbb	[pc, r3]
    4ff0:	8eb2ae05 	.word	0x8eb2ae05
    4ff4:	b8b8b8b8 	.word	0xb8b8b8b8
    4ff8:	b6b8      	.short	0xb6b8
	PR_FAULT_INFO("***** HARD FAULT *****");
    4ffa:	4b6e      	ldr	r3, [pc, #440]	; (51b4 <z_arm_fault+0x248>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4ffc:	f8df 8198 	ldr.w	r8, [pc, #408]	; 5198 <z_arm_fault+0x22c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    5000:	4967      	ldr	r1, [pc, #412]	; (51a0 <z_arm_fault+0x234>)
    5002:	9600      	str	r6, [sp, #0]
    5004:	e9cd 6301 	strd	r6, r3, [sp, #4]
    5008:	2300      	movs	r3, #0
    500a:	2201      	movs	r2, #1
    500c:	4618      	mov	r0, r3
    500e:	f007 ffd7 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5012:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    5016:	f88d 601f 	strb.w	r6, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    501a:	f014 0402 	ands.w	r4, r4, #2
    501e:	d00b      	beq.n	5038 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
    5020:	4b65      	ldr	r3, [pc, #404]	; (51b8 <z_arm_fault+0x24c>)
	PR_FAULT_INFO(
    5022:	495f      	ldr	r1, [pc, #380]	; (51a0 <z_arm_fault+0x234>)
    5024:	9600      	str	r6, [sp, #0]
    5026:	e9cd 6301 	strd	r6, r3, [sp, #4]
    502a:	2300      	movs	r3, #0
    502c:	2201      	movs	r2, #1
    502e:	4618      	mov	r0, r3
    5030:	f007 ffc6 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5034:	2400      	movs	r4, #0
}
    5036:	e00d      	b.n	5054 <z_arm_fault+0xe8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    5038:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    503c:	2b00      	cmp	r3, #0
    503e:	da2a      	bge.n	5096 <z_arm_fault+0x12a>
		PR_EXC("  Debug event");
    5040:	4b5e      	ldr	r3, [pc, #376]	; (51bc <z_arm_fault+0x250>)
    5042:	4957      	ldr	r1, [pc, #348]	; (51a0 <z_arm_fault+0x234>)
    5044:	9400      	str	r4, [sp, #0]
    5046:	e9cd 4301 	strd	r4, r3, [sp, #4]
    504a:	2201      	movs	r2, #1
    504c:	4623      	mov	r3, r4
    504e:	4620      	mov	r0, r4
    5050:	f007 ffb6 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    5054:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5058:	b9d3      	cbnz	r3, 5090 <z_arm_fault+0x124>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    505a:	aa08      	add	r2, sp, #32
    505c:	f105 0620 	add.w	r6, r5, #32
    5060:	6828      	ldr	r0, [r5, #0]
    5062:	6869      	ldr	r1, [r5, #4]
    5064:	4613      	mov	r3, r2
    5066:	c303      	stmia	r3!, {r0, r1}
    5068:	3508      	adds	r5, #8
    506a:	42b5      	cmp	r5, r6
    506c:	461a      	mov	r2, r3
    506e:	d1f7      	bne.n	5060 <z_arm_fault+0xf4>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    5070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5072:	2f00      	cmp	r7, #0
    5074:	f000 808a 	beq.w	518c <z_arm_fault+0x220>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5078:	f3c3 0208 	ubfx	r2, r3, #0, #9
    507c:	b922      	cbnz	r2, 5088 <z_arm_fault+0x11c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    507e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5082:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5086:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    5088:	a908      	add	r1, sp, #32
    508a:	4620      	mov	r0, r4
    508c:	f7ff fc12 	bl	48b4 <z_arm_fatal_error>
}
    5090:	b011      	add	sp, #68	; 0x44
    5092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5096:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    509a:	005b      	lsls	r3, r3, #1
    509c:	d549      	bpl.n	5132 <z_arm_fault+0x1c6>
		PR_EXC("  Fault escalation (see below)");
    509e:	4b48      	ldr	r3, [pc, #288]	; (51c0 <z_arm_fault+0x254>)
    50a0:	493f      	ldr	r1, [pc, #252]	; (51a0 <z_arm_fault+0x234>)
    50a2:	9400      	str	r4, [sp, #0]
    50a4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    50a8:	2201      	movs	r2, #1
    50aa:	4623      	mov	r3, r4
    50ac:	4620      	mov	r0, r4
    50ae:	f007 ff87 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    50b2:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    50b4:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    50b8:	f64d 7302 	movw	r3, #57090	; 0xdf02
    50bc:	429a      	cmp	r2, r3
    50be:	d10d      	bne.n	50dc <z_arm_fault+0x170>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    50c0:	682b      	ldr	r3, [r5, #0]
    50c2:	9303      	str	r3, [sp, #12]
    50c4:	4b3f      	ldr	r3, [pc, #252]	; (51c4 <z_arm_fault+0x258>)
    50c6:	9400      	str	r4, [sp, #0]
    50c8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    50cc:	4620      	mov	r0, r4
    50ce:	4623      	mov	r3, r4
    50d0:	4933      	ldr	r1, [pc, #204]	; (51a0 <z_arm_fault+0x234>)
    50d2:	2201      	movs	r2, #1
    50d4:	f007 ff74 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    50d8:	682c      	ldr	r4, [r5, #0]
    50da:	e7bb      	b.n	5054 <z_arm_fault+0xe8>
		} else if (SCB_MMFSR != 0) {
    50dc:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    50e0:	b13b      	cbz	r3, 50f2 <z_arm_fault+0x186>
			reason = mem_manage_fault(esf, 1, recoverable);
    50e2:	f10d 021f 	add.w	r2, sp, #31
    50e6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    50e8:	4628      	mov	r0, r5
    50ea:	f7ff fe79 	bl	4de0 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    50ee:	4604      	mov	r4, r0
		break;
    50f0:	e7b0      	b.n	5054 <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
    50f2:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    50f6:	b12b      	cbz	r3, 5104 <z_arm_fault+0x198>
			reason = bus_fault(esf, 1, recoverable);
    50f8:	f10d 011f 	add.w	r1, sp, #31
    50fc:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    50fe:	f7ff fd65 	bl	4bcc <bus_fault.constprop.0>
    5102:	e7f4      	b.n	50ee <z_arm_fault+0x182>
		} else if (SCB_UFSR != 0) {
    5104:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    5108:	b29b      	uxth	r3, r3
    510a:	b113      	cbz	r3, 5112 <z_arm_fault+0x1a6>
		reason = usage_fault(esf);
    510c:	f7ff fdec 	bl	4ce8 <usage_fault.constprop.0>
    5110:	e7ed      	b.n	50ee <z_arm_fault+0x182>
			__ASSERT(0,
    5112:	492d      	ldr	r1, [pc, #180]	; (51c8 <z_arm_fault+0x25c>)
    5114:	4a23      	ldr	r2, [pc, #140]	; (51a4 <z_arm_fault+0x238>)
    5116:	4825      	ldr	r0, [pc, #148]	; (51ac <z_arm_fault+0x240>)
    5118:	f240 23cd 	movw	r3, #717	; 0x2cd
    511c:	f007 feb3 	bl	ce86 <assert_print>
    5120:	482a      	ldr	r0, [pc, #168]	; (51cc <z_arm_fault+0x260>)
    5122:	f007 feb0 	bl	ce86 <assert_print>
    5126:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    512a:	481e      	ldr	r0, [pc, #120]	; (51a4 <z_arm_fault+0x238>)
    512c:	f007 fea4 	bl	ce78 <assert_post_action>
    5130:	e790      	b.n	5054 <z_arm_fault+0xe8>
    5132:	4925      	ldr	r1, [pc, #148]	; (51c8 <z_arm_fault+0x25c>)
    5134:	4a1b      	ldr	r2, [pc, #108]	; (51a4 <z_arm_fault+0x238>)
    5136:	481d      	ldr	r0, [pc, #116]	; (51ac <z_arm_fault+0x240>)
    5138:	f240 23d1 	movw	r3, #721	; 0x2d1
    513c:	f007 fea3 	bl	ce86 <assert_print>
    5140:	4823      	ldr	r0, [pc, #140]	; (51d0 <z_arm_fault+0x264>)
    5142:	f007 fea0 	bl	ce86 <assert_print>
    5146:	f240 21d1 	movw	r1, #721	; 0x2d1
    514a:	e7ee      	b.n	512a <z_arm_fault+0x1be>
		reason = mem_manage_fault(esf, 0, recoverable);
    514c:	f10d 021f 	add.w	r2, sp, #31
    5150:	2100      	movs	r1, #0
    5152:	e7c9      	b.n	50e8 <z_arm_fault+0x17c>
		reason = bus_fault(esf, 0, recoverable);
    5154:	f10d 011f 	add.w	r1, sp, #31
    5158:	2000      	movs	r0, #0
    515a:	e7d0      	b.n	50fe <z_arm_fault+0x192>
	PR_FAULT_INFO(
    515c:	4b1d      	ldr	r3, [pc, #116]	; (51d4 <z_arm_fault+0x268>)
    515e:	e760      	b.n	5022 <z_arm_fault+0xb6>
	PR_FAULT_INFO("***** %s %d) *****",
    5160:	4b1d      	ldr	r3, [pc, #116]	; (51d8 <z_arm_fault+0x26c>)
    5162:	4a1e      	ldr	r2, [pc, #120]	; (51dc <z_arm_fault+0x270>)
    5164:	490e      	ldr	r1, [pc, #56]	; (51a0 <z_arm_fault+0x234>)
    5166:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    516a:	bf18      	it	ne
    516c:	461a      	movne	r2, r3
    516e:	f1a8 0310 	sub.w	r3, r8, #16
    5172:	2400      	movs	r4, #0
    5174:	e9cd 2303 	strd	r2, r3, [sp, #12]
    5178:	4b19      	ldr	r3, [pc, #100]	; (51e0 <z_arm_fault+0x274>)
    517a:	9302      	str	r3, [sp, #8]
    517c:	e9cd 4400 	strd	r4, r4, [sp]
    5180:	4623      	mov	r3, r4
    5182:	2201      	movs	r2, #1
    5184:	4620      	mov	r0, r4
    5186:	f007 ff1b 	bl	cfc0 <z_log_msg2_runtime_create.constprop.0>
}
    518a:	e763      	b.n	5054 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    518c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    5190:	f023 0301 	bic.w	r3, r3, #1
    5194:	e777      	b.n	5086 <z_arm_fault+0x11a>
    5196:	bf00      	nop
    5198:	e000ed00 	.word	0xe000ed00
    519c:	0000f5bf 	.word	0x0000f5bf
    51a0:	0000e3d4 	.word	0x0000e3d4
    51a4:	0000f4ea 	.word	0x0000f4ea
    51a8:	0000f5ea 	.word	0x0000f5ea
    51ac:	0000eb06 	.word	0x0000eb06
    51b0:	0000f5fd 	.word	0x0000f5fd
    51b4:	0000f63b 	.word	0x0000f63b
    51b8:	0000f652 	.word	0x0000f652
    51bc:	0000f673 	.word	0x0000f673
    51c0:	0000f681 	.word	0x0000f681
    51c4:	0000f6a0 	.word	0x0000f6a0
    51c8:	0000f7bd 	.word	0x0000f7bd
    51cc:	0000f6bc 	.word	0x0000f6bc
    51d0:	0000f6e0 	.word	0x0000f6e0
    51d4:	0000f710 	.word	0x0000f710
    51d8:	0000f5a6 	.word	0x0000f5a6
    51dc:	0000f591 	.word	0x0000f591
    51e0:	0000f734 	.word	0x0000f734

000051e4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    51e4:	4a02      	ldr	r2, [pc, #8]	; (51f0 <z_arm_fault_init+0xc>)
    51e6:	6953      	ldr	r3, [r2, #20]
    51e8:	f043 0310 	orr.w	r3, r3, #16
    51ec:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    51ee:	4770      	bx	lr
    51f0:	e000ed00 	.word	0xe000ed00

000051f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    51f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    51f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    51fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    51fe:	4672      	mov	r2, lr
	bl z_arm_fault
    5200:	f7ff feb4 	bl	4f6c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    5204:	bd01      	pop	{r0, pc}
    5206:	bf00      	nop

00005208 <z_arm_interrupt_init>:
    5208:	4804      	ldr	r0, [pc, #16]	; (521c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    520a:	2300      	movs	r3, #0
    520c:	2120      	movs	r1, #32
    520e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5210:	3301      	adds	r3, #1
    5212:	2b30      	cmp	r3, #48	; 0x30
    5214:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    5218:	d1f9      	bne.n	520e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    521a:	4770      	bx	lr
    521c:	e000e100 	.word	0xe000e100

00005220 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    5220:	2000      	movs	r0, #0
    msr CONTROL, r0
    5222:	f380 8814 	msr	CONTROL, r0
    isb
    5226:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    522a:	f008 ff6d 	bl	e108 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    522e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    5230:	490d      	ldr	r1, [pc, #52]	; (5268 <__start+0x48>)
    str r0, [r1]
    5232:	6008      	str	r0, [r1, #0]
    dsb
    5234:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5238:	480c      	ldr	r0, [pc, #48]	; (526c <__start+0x4c>)
    msr msp, r0
    523a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    523e:	f000 f82b 	bl	5298 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5242:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5244:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5248:	4809      	ldr	r0, [pc, #36]	; (5270 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    524a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    524e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5250:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5254:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5258:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    525a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    525c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5260:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5264:	f7ff fbcc 	bl	4a00 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    5268:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    526c:	2000eba0 	.word	0x2000eba0
    ldr r0, =z_interrupt_stacks
    5270:	2000ed20 	.word	0x2000ed20

00005274 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    5274:	4907      	ldr	r1, [pc, #28]	; (5294 <z_arm_clear_arm_mpu_config+0x20>)
    5276:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    527a:	2300      	movs	r3, #0
	int num_regions =
    527c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    5280:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    5282:	4293      	cmp	r3, r2
    5284:	d100      	bne.n	5288 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    5286:	4770      	bx	lr
  MPU->RNR = rnr;
    5288:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    528c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    5290:	3301      	adds	r3, #1
    5292:	e7f6      	b.n	5282 <z_arm_clear_arm_mpu_config+0xe>
    5294:	e000ed00 	.word	0xe000ed00

00005298 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    5298:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    529a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    529c:	2300      	movs	r3, #0
    529e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    52a2:	f7ff ffe7 	bl	5274 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    52a6:	4b14      	ldr	r3, [pc, #80]	; (52f8 <z_arm_init_arch_hw_at_boot+0x60>)
    52a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    52ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    52b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    52b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    52b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    52bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    52c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    52c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    52c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    52cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    52d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    52d4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    52d8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    52dc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    52e0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    52e4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    52e8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    52ec:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    52ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    52f2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    52f6:	bd08      	pop	{r3, pc}
    52f8:	e000e100 	.word	0xe000e100

000052fc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    52fc:	4b08      	ldr	r3, [pc, #32]	; (5320 <z_impl_k_thread_abort+0x24>)
    52fe:	689b      	ldr	r3, [r3, #8]
    5300:	4283      	cmp	r3, r0
    5302:	d10b      	bne.n	531c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5304:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5308:	b143      	cbz	r3, 531c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    530a:	4b06      	ldr	r3, [pc, #24]	; (5324 <z_impl_k_thread_abort+0x28>)
    530c:	685a      	ldr	r2, [r3, #4]
    530e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    5312:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    5314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    531a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    531c:	f004 bf04 	b.w	a128 <z_thread_abort>
    5320:	200010c4 	.word	0x200010c4
    5324:	e000ed00 	.word	0xe000ed00

00005328 <arch_timing_init>:
 * @return 0
 */
static inline int z_arm_dwt_init(void)
{
	/* Enable tracing */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    5328:	4a10      	ldr	r2, [pc, #64]	; (536c <arch_timing_init+0x44>)
	return dwt_frequency;
#endif /* CONFIG_SOC_FAMILY_NRF */
}

void arch_timing_init(void)
{
    532a:	b508      	push	{r3, lr}
    532c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    5330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    5334:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 * @return 0
 */
static inline int z_arm_dwt_init_cycle_counter(void)
{
	/* Clear and enable the cycle counter */
	DWT->CYCCNT = 0;
    5338:	4b0d      	ldr	r3, [pc, #52]	; (5370 <arch_timing_init+0x48>)
    533a:	2200      	movs	r2, #0
    533c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    533e:	681a      	ldr	r2, [r3, #0]
    5340:	f042 0201 	orr.w	r2, r2, #1
    5344:	601a      	str	r2, [r3, #0]

	/* Assert that the cycle counter is indeed implemented.
	 * The field is called NOCYCCNT. So 1 means there is no cycle counter.
	 */
	__ASSERT((DWT->CTRL & DWT_CTRL_NOCYCCNT_Msk) == 0,
    5346:	681b      	ldr	r3, [r3, #0]
    5348:	019b      	lsls	r3, r3, #6
    534a:	d50e      	bpl.n	536a <arch_timing_init+0x42>
    534c:	4909      	ldr	r1, [pc, #36]	; (5374 <arch_timing_init+0x4c>)
    534e:	4a0a      	ldr	r2, [pc, #40]	; (5378 <arch_timing_init+0x50>)
    5350:	480a      	ldr	r0, [pc, #40]	; (537c <arch_timing_init+0x54>)
    5352:	2369      	movs	r3, #105	; 0x69
    5354:	f007 fd97 	bl	ce86 <assert_print>
    5358:	4809      	ldr	r0, [pc, #36]	; (5380 <arch_timing_init+0x58>)
    535a:	f007 fd94 	bl	ce86 <assert_print>
	z_arm_dwt_init();
	z_arm_dwt_init_cycle_counter();
}
    535e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5362:	4805      	ldr	r0, [pc, #20]	; (5378 <arch_timing_init+0x50>)
    5364:	2169      	movs	r1, #105	; 0x69
    5366:	f007 bd87 	b.w	ce78 <assert_post_action>
    536a:	bd08      	pop	{r3, pc}
    536c:	e000ed00 	.word	0xe000ed00
    5370:	e0001000 	.word	0xe0001000
    5374:	0000f782 	.word	0x0000f782
    5378:	0000f747 	.word	0x0000f747
    537c:	0000eb06 	.word	0x0000eb06
    5380:	0000f7bf 	.word	0x0000f7bf

00005384 <arch_timing_start>:
 *
 * This routine starts the cycle counter and resets its value to zero.
 */
static inline void z_arm_dwt_cycle_count_start(void)
{
	DWT->CYCCNT = 0;
    5384:	4b03      	ldr	r3, [pc, #12]	; (5394 <arch_timing_start+0x10>)
    5386:	2200      	movs	r2, #0
    5388:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    538a:	681a      	ldr	r2, [r3, #0]
    538c:	f042 0201 	orr.w	r2, r2, #1
    5390:	601a      	str	r2, [r3, #0]

void arch_timing_start(void)
{
	z_arm_dwt_cycle_count_start();
}
    5392:	4770      	bx	lr
    5394:	e0001000 	.word	0xe0001000

00005398 <arch_timing_counter_get>:
	return DWT->CYCCNT;
    5398:	4b01      	ldr	r3, [pc, #4]	; (53a0 <arch_timing_counter_get+0x8>)
}

timing_t arch_timing_counter_get(void)
{
	return (timing_t)z_arm_dwt_get_cycles();
}
    539a:	2100      	movs	r1, #0
    539c:	6858      	ldr	r0, [r3, #4]
    539e:	4770      	bx	lr
    53a0:	e0001000 	.word	0xe0001000

000053a4 <arch_timing_freq_get_mhz>:
{
	return arch_timing_cycles_to_ns(cycles) / count;
}

uint32_t arch_timing_freq_get_mhz(void)
{
    53a4:	b508      	push	{r3, lr}
	SystemCoreClockUpdate();
    53a6:	f002 f83d 	bl	7424 <SystemCoreClockUpdate>
	return (uint32_t)(arch_timing_freq_get() / 1000000U);
    53aa:	4904      	ldr	r1, [pc, #16]	; (53bc <arch_timing_freq_get_mhz+0x18>)
    53ac:	4a04      	ldr	r2, [pc, #16]	; (53c0 <arch_timing_freq_get_mhz+0x1c>)
    53ae:	6808      	ldr	r0, [r1, #0]
    53b0:	2300      	movs	r3, #0
    53b2:	2100      	movs	r1, #0
    53b4:	f7fb fb88 	bl	ac8 <__aeabi_uldivmod>
}
    53b8:	bd08      	pop	{r3, pc}
    53ba:	bf00      	nop
    53bc:	200000fc 	.word	0x200000fc
    53c0:	000f4240 	.word	0x000f4240

000053c4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    53c4:	4b02      	ldr	r3, [pc, #8]	; (53d0 <z_arm_configure_static_mpu_regions+0xc>)
    53c6:	4a03      	ldr	r2, [pc, #12]	; (53d4 <z_arm_configure_static_mpu_regions+0x10>)
    53c8:	4803      	ldr	r0, [pc, #12]	; (53d8 <z_arm_configure_static_mpu_regions+0x14>)
    53ca:	2101      	movs	r1, #1
    53cc:	f000 b884 	b.w	54d8 <arm_core_mpu_configure_static_mpu_regions>
    53d0:	20040000 	.word	0x20040000
    53d4:	20000000 	.word	0x20000000
    53d8:	0000e670 	.word	0x0000e670

000053dc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    53dc:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    53de:	4b05      	ldr	r3, [pc, #20]	; (53f4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    53e0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    53e2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    53e4:	4a04      	ldr	r2, [pc, #16]	; (53f8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    53e6:	2120      	movs	r1, #32
    53e8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    53ec:	4618      	mov	r0, r3
    53ee:	2101      	movs	r1, #1
    53f0:	f000 b89a 	b.w	5528 <arm_core_mpu_configure_dynamic_mpu_regions>
    53f4:	20000f68 	.word	0x20000f68
    53f8:	150b0000 	.word	0x150b0000

000053fc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    53fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    53fe:	4f27      	ldr	r7, [pc, #156]	; (549c <mpu_configure_regions+0xa0>)
    5400:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    5402:	2600      	movs	r6, #0
    5404:	428e      	cmp	r6, r1
    5406:	da15      	bge.n	5434 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    5408:	6844      	ldr	r4, [r0, #4]
    540a:	2c00      	cmp	r4, #0
    540c:	d043      	beq.n	5496 <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    540e:	b1d3      	cbz	r3, 5446 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    5410:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    5414:	ea14 0f0c 	tst.w	r4, ip
    5418:	d00f      	beq.n	543a <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    541a:	4b21      	ldr	r3, [pc, #132]	; (54a0 <mpu_configure_regions+0xa4>)
    541c:	9603      	str	r6, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    541e:	9302      	str	r3, [sp, #8]
    5420:	2300      	movs	r3, #0
    5422:	2201      	movs	r2, #1
    5424:	e9cd 3300 	strd	r3, r3, [sp]
    5428:	491e      	ldr	r1, [pc, #120]	; (54a4 <mpu_configure_regions+0xa8>)
    542a:	4618      	mov	r0, r3
    542c:	f007 fdf1 	bl	d012 <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5430:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    5434:	4610      	mov	r0, r2
    5436:	b005      	add	sp, #20
    5438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    543a:	2c1f      	cmp	r4, #31
    543c:	d9ed      	bls.n	541a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    543e:	6805      	ldr	r5, [r0, #0]
		&&
    5440:	ea1c 0f05 	tst.w	ip, r5
    5444:	d1e9      	bne.n	541a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    5446:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    5448:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    544a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    544e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    5450:	d90f      	bls.n	5472 <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
    5452:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5456:	d80e      	bhi.n	5476 <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    5458:	3c01      	subs	r4, #1
    545a:	fab4 f484 	clz	r4, r4
    545e:	f1c4 041f 	rsb	r4, r4, #31
    5462:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    5464:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5466:	ea4c 0404 	orr.w	r4, ip, r4
    546a:	d906      	bls.n	547a <mpu_configure_regions+0x7e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    546c:	4b0e      	ldr	r3, [pc, #56]	; (54a8 <mpu_configure_regions+0xac>)
    546e:	9203      	str	r2, [sp, #12]
    5470:	e7d5      	b.n	541e <mpu_configure_regions+0x22>
		return REGION_32B;
    5472:	2408      	movs	r4, #8
    5474:	e7f6      	b.n	5464 <mpu_configure_regions+0x68>
		return REGION_4G;
    5476:	243e      	movs	r4, #62	; 0x3e
    5478:	e7f4      	b.n	5464 <mpu_configure_regions+0x68>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    547a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    547e:	4315      	orrs	r5, r2
    5480:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5484:	f044 0401 	orr.w	r4, r4, #1
    5488:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    548c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    5490:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5492:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    5496:	3601      	adds	r6, #1
    5498:	300c      	adds	r0, #12
    549a:	e7b3      	b.n	5404 <mpu_configure_regions+0x8>
    549c:	e000ed00 	.word	0xe000ed00
    54a0:	0000f809 	.word	0x0000f809
    54a4:	0000e3cc 	.word	0x0000e3cc
    54a8:	0000f82c 	.word	0x0000f82c

000054ac <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    54ac:	4b04      	ldr	r3, [pc, #16]	; (54c0 <arm_core_mpu_enable+0x14>)
    54ae:	2205      	movs	r2, #5
    54b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    54b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    54b8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    54bc:	4770      	bx	lr
    54be:	bf00      	nop
    54c0:	e000ed00 	.word	0xe000ed00

000054c4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    54c4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    54c8:	4b02      	ldr	r3, [pc, #8]	; (54d4 <arm_core_mpu_disable+0x10>)
    54ca:	2200      	movs	r2, #0
    54cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    54d0:	4770      	bx	lr
    54d2:	bf00      	nop
    54d4:	e000ed00 	.word	0xe000ed00

000054d8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    54d8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    54da:	4d0e      	ldr	r5, [pc, #56]	; (5514 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    54dc:	2301      	movs	r3, #1
    54de:	782a      	ldrb	r2, [r5, #0]
    54e0:	460c      	mov	r4, r1
    54e2:	f7ff ff8b 	bl	53fc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    54e6:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    54e8:	3016      	adds	r0, #22
    54ea:	d111      	bne.n	5510 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    54ec:	f240 1311 	movw	r3, #273	; 0x111
    54f0:	4a09      	ldr	r2, [pc, #36]	; (5518 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    54f2:	490a      	ldr	r1, [pc, #40]	; (551c <arm_core_mpu_configure_static_mpu_regions+0x44>)
    54f4:	480a      	ldr	r0, [pc, #40]	; (5520 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    54f6:	f007 fcc6 	bl	ce86 <assert_print>
    54fa:	4621      	mov	r1, r4
    54fc:	4809      	ldr	r0, [pc, #36]	; (5524 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    54fe:	f007 fcc2 	bl	ce86 <assert_print>
			regions_num);
	}
}
    5502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    5506:	4804      	ldr	r0, [pc, #16]	; (5518 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    5508:	f240 1111 	movw	r1, #273	; 0x111
    550c:	f007 bcb4 	b.w	ce78 <assert_post_action>
}
    5510:	bd38      	pop	{r3, r4, r5, pc}
    5512:	bf00      	nop
    5514:	2000d2fc 	.word	0x2000d2fc
    5518:	0000f852 	.word	0x0000f852
    551c:	0000f7bd 	.word	0x0000f7bd
    5520:	0000eb06 	.word	0x0000eb06
    5524:	0000f889 	.word	0x0000f889

00005528 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    5528:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    552a:	4a13      	ldr	r2, [pc, #76]	; (5578 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    552c:	2300      	movs	r3, #0
    552e:	7812      	ldrb	r2, [r2, #0]
    5530:	460c      	mov	r4, r1
    5532:	f7ff ff63 	bl	53fc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5536:	f110 0f16 	cmn.w	r0, #22
    553a:	d00a      	beq.n	5552 <arm_core_mpu_configure_dynamic_mpu_regions+0x2a>
  MPU->RNR = rnr;
    553c:	4b0f      	ldr	r3, [pc, #60]	; (557c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    553e:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5540:	2807      	cmp	r0, #7
    5542:	dd00      	ble.n	5546 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    5544:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    5546:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    554a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    554e:	3001      	adds	r0, #1
    5550:	e7f6      	b.n	5540 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    5552:	4a0b      	ldr	r2, [pc, #44]	; (5580 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    5554:	490b      	ldr	r1, [pc, #44]	; (5584 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    5556:	480c      	ldr	r0, [pc, #48]	; (5588 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    5558:	f44f 7398 	mov.w	r3, #304	; 0x130
    555c:	f007 fc93 	bl	ce86 <assert_print>
    5560:	4621      	mov	r1, r4
    5562:	480a      	ldr	r0, [pc, #40]	; (558c <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    5564:	f007 fc8f 	bl	ce86 <assert_print>
}
    5568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    556c:	4804      	ldr	r0, [pc, #16]	; (5580 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    556e:	f44f 7198 	mov.w	r1, #304	; 0x130
    5572:	f007 bc81 	b.w	ce78 <assert_post_action>
    5576:	bf00      	nop
    5578:	2000d2fc 	.word	0x2000d2fc
    557c:	e000ed00 	.word	0xe000ed00
    5580:	0000f852 	.word	0x0000f852
    5584:	0000f7bd 	.word	0x0000f7bd
    5588:	0000eb06 	.word	0x0000eb06
    558c:	0000f8b5 	.word	0x0000f8b5

00005590 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5590:	4927      	ldr	r1, [pc, #156]	; (5630 <z_arm_mpu_init+0xa0>)
{
    5592:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    5594:	680c      	ldr	r4, [r1, #0]
    5596:	2c08      	cmp	r4, #8
    5598:	d913      	bls.n	55c2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    559a:	f44f 73a4 	mov.w	r3, #328	; 0x148
    559e:	4a25      	ldr	r2, [pc, #148]	; (5634 <z_arm_mpu_init+0xa4>)
    55a0:	4925      	ldr	r1, [pc, #148]	; (5638 <z_arm_mpu_init+0xa8>)
    55a2:	4826      	ldr	r0, [pc, #152]	; (563c <z_arm_mpu_init+0xac>)
    55a4:	f007 fc6f 	bl	ce86 <assert_print>
    55a8:	4825      	ldr	r0, [pc, #148]	; (5640 <z_arm_mpu_init+0xb0>)
    55aa:	2208      	movs	r2, #8
    55ac:	4621      	mov	r1, r4
    55ae:	f007 fc6a 	bl	ce86 <assert_print>
    55b2:	4820      	ldr	r0, [pc, #128]	; (5634 <z_arm_mpu_init+0xa4>)
    55b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    55b8:	f007 fc5e 	bl	ce78 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    55bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    55c0:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    55c2:	f7ff ff7f 	bl	54c4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    55c6:	6848      	ldr	r0, [r1, #4]
    55c8:	491e      	ldr	r1, [pc, #120]	; (5644 <z_arm_mpu_init+0xb4>)
    55ca:	2200      	movs	r2, #0
    55cc:	4294      	cmp	r4, r2
    55ce:	f100 000c 	add.w	r0, r0, #12
    55d2:	d11a      	bne.n	560a <z_arm_mpu_init+0x7a>
	static_regions_num = mpu_config.num_regions;
    55d4:	4b1c      	ldr	r3, [pc, #112]	; (5648 <z_arm_mpu_init+0xb8>)
    55d6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    55d8:	f7ff ff68 	bl	54ac <arm_core_mpu_enable>
	__ASSERT(
    55dc:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    55e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    55e4:	2b08      	cmp	r3, #8
    55e6:	d00e      	beq.n	5606 <z_arm_mpu_init+0x76>
    55e8:	4918      	ldr	r1, [pc, #96]	; (564c <z_arm_mpu_init+0xbc>)
    55ea:	4a12      	ldr	r2, [pc, #72]	; (5634 <z_arm_mpu_init+0xa4>)
    55ec:	4813      	ldr	r0, [pc, #76]	; (563c <z_arm_mpu_init+0xac>)
    55ee:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    55f2:	f007 fc48 	bl	ce86 <assert_print>
    55f6:	4816      	ldr	r0, [pc, #88]	; (5650 <z_arm_mpu_init+0xc0>)
    55f8:	f007 fc45 	bl	ce86 <assert_print>
    55fc:	480d      	ldr	r0, [pc, #52]	; (5634 <z_arm_mpu_init+0xa4>)
    55fe:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    5602:	f007 fc39 	bl	ce78 <assert_post_action>
	return 0;
    5606:	2000      	movs	r0, #0
    5608:	e7da      	b.n	55c0 <z_arm_mpu_init+0x30>
    560a:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    560e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    5612:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5616:	4313      	orrs	r3, r2
    5618:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    561c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5620:	f850 3c04 	ldr.w	r3, [r0, #-4]
    5624:	f043 0301 	orr.w	r3, r3, #1
    5628:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    562c:	3201      	adds	r2, #1
    562e:	e7cd      	b.n	55cc <z_arm_mpu_init+0x3c>
    5630:	0000e67c 	.word	0x0000e67c
    5634:	0000f852 	.word	0x0000f852
    5638:	0000f7bd 	.word	0x0000f7bd
    563c:	0000eb06 	.word	0x0000eb06
    5640:	0000f8e2 	.word	0x0000f8e2
    5644:	e000ed00 	.word	0xe000ed00
    5648:	2000d2fc 	.word	0x2000d2fc
    564c:	0000f916 	.word	0x0000f916
    5650:	0000f966 	.word	0x0000f966

00005654 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    5654:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    5656:	4b0b      	ldr	r3, [pc, #44]	; (5684 <malloc_prepare+0x30>)
    5658:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    565c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    5660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    5664:	d20c      	bcs.n	5680 <malloc_prepare+0x2c>
    5666:	4908      	ldr	r1, [pc, #32]	; (5688 <malloc_prepare+0x34>)
    5668:	4a08      	ldr	r2, [pc, #32]	; (568c <malloc_prepare+0x38>)
    566a:	4809      	ldr	r0, [pc, #36]	; (5690 <malloc_prepare+0x3c>)
    566c:	2381      	movs	r3, #129	; 0x81
    566e:	f007 fc0a 	bl	ce86 <assert_print>
    5672:	4808      	ldr	r0, [pc, #32]	; (5694 <malloc_prepare+0x40>)
    5674:	f007 fc07 	bl	ce86 <assert_print>
    5678:	4804      	ldr	r0, [pc, #16]	; (568c <malloc_prepare+0x38>)
    567a:	2181      	movs	r1, #129	; 0x81
    567c:	f007 fbfc 	bl	ce78 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    5680:	2000      	movs	r0, #0
    5682:	bd08      	pop	{r3, pc}
    5684:	2000f640 	.word	0x2000f640
    5688:	0000f9b7 	.word	0x0000f9b7
    568c:	0000f987 	.word	0x0000f987
    5690:	0000eb06 	.word	0x0000eb06
    5694:	0000f9fe 	.word	0x0000f9fe

00005698 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5698:	4b01      	ldr	r3, [pc, #4]	; (56a0 <__stdout_hook_install+0x8>)
    569a:	6018      	str	r0, [r3, #0]
}
    569c:	4770      	bx	lr
    569e:	bf00      	nop
    56a0:	200000c8 	.word	0x200000c8

000056a4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    56a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    56a6:	4f08      	ldr	r7, [pc, #32]	; (56c8 <z_impl_zephyr_read_stdin+0x24>)
{
    56a8:	4606      	mov	r6, r0
    56aa:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    56ac:	2400      	movs	r4, #0
    56ae:	42ac      	cmp	r4, r5
    56b0:	da08      	bge.n	56c4 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    56b2:	683b      	ldr	r3, [r7, #0]
    56b4:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    56b6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    56b8:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    56ba:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    56be:	d001      	beq.n	56c4 <z_impl_zephyr_read_stdin+0x20>
    56c0:	280d      	cmp	r0, #13
    56c2:	d1f4      	bne.n	56ae <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    56c4:	4620      	mov	r0, r4
    56c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56c8:	200000c4 	.word	0x200000c4

000056cc <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    56cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56ce:	4f0a      	ldr	r7, [pc, #40]	; (56f8 <z_impl_zephyr_write_stdout+0x2c>)
    56d0:	460d      	mov	r5, r1
    56d2:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    56d4:	f1c0 0401 	rsb	r4, r0, #1
    56d8:	19a3      	adds	r3, r4, r6
    56da:	429d      	cmp	r5, r3
    56dc:	dc01      	bgt.n	56e2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    56de:	4628      	mov	r0, r5
    56e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    56e2:	7873      	ldrb	r3, [r6, #1]
    56e4:	2b0a      	cmp	r3, #10
    56e6:	d102      	bne.n	56ee <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    56e8:	683b      	ldr	r3, [r7, #0]
    56ea:	200d      	movs	r0, #13
    56ec:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    56ee:	683b      	ldr	r3, [r7, #0]
    56f0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    56f4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    56f6:	e7ef      	b.n	56d8 <z_impl_zephyr_write_stdout+0xc>
    56f8:	200000c8 	.word	0x200000c8

000056fc <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    56fc:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    56fe:	4802      	ldr	r0, [pc, #8]	; (5708 <_exit+0xc>)
    5700:	2105      	movs	r1, #5
    5702:	f7ff ffe3 	bl	56cc <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    5706:	e7fe      	b.n	5706 <_exit+0xa>
    5708:	0000fa85 	.word	0x0000fa85

0000570c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    570c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    570e:	4c07      	ldr	r4, [pc, #28]	; (572c <_sbrk+0x20>)
    5710:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    5712:	18c2      	adds	r2, r0, r3
    5714:	4806      	ldr	r0, [pc, #24]	; (5730 <_sbrk+0x24>)
    5716:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    571a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    571e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    5720:	bf3a      	itte	cc
    5722:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    5724:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    5726:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    572a:	bd10      	pop	{r4, pc}
    572c:	20000f74 	.word	0x20000f74
    5730:	2000f640 	.word	0x2000f640

00005734 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    5734:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    5736:	4604      	mov	r4, r0
    5738:	b958      	cbnz	r0, 5752 <__retarget_lock_init_recursive+0x1e>
    573a:	4912      	ldr	r1, [pc, #72]	; (5784 <__retarget_lock_init_recursive+0x50>)
    573c:	4812      	ldr	r0, [pc, #72]	; (5788 <__retarget_lock_init_recursive+0x54>)
    573e:	4a13      	ldr	r2, [pc, #76]	; (578c <__retarget_lock_init_recursive+0x58>)
    5740:	f240 1377 	movw	r3, #375	; 0x177
    5744:	f007 fb9f 	bl	ce86 <assert_print>
    5748:	4810      	ldr	r0, [pc, #64]	; (578c <__retarget_lock_init_recursive+0x58>)
    574a:	f240 1177 	movw	r1, #375	; 0x177
    574e:	f007 fb93 	bl	ce78 <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    5752:	2014      	movs	r0, #20
    5754:	f005 fa10 	bl	ab78 <malloc>
    5758:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    575a:	b970      	cbnz	r0, 577a <__retarget_lock_init_recursive+0x46>
    575c:	490c      	ldr	r1, [pc, #48]	; (5790 <__retarget_lock_init_recursive+0x5c>)
    575e:	4a0b      	ldr	r2, [pc, #44]	; (578c <__retarget_lock_init_recursive+0x58>)
    5760:	4809      	ldr	r0, [pc, #36]	; (5788 <__retarget_lock_init_recursive+0x54>)
    5762:	f240 137f 	movw	r3, #383	; 0x17f
    5766:	f007 fb8e 	bl	ce86 <assert_print>
    576a:	480a      	ldr	r0, [pc, #40]	; (5794 <__retarget_lock_init_recursive+0x60>)
    576c:	f007 fb8b 	bl	ce86 <assert_print>
    5770:	4806      	ldr	r0, [pc, #24]	; (578c <__retarget_lock_init_recursive+0x58>)
    5772:	f240 117f 	movw	r1, #383	; 0x17f
    5776:	f007 fb7f 	bl	ce78 <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
    577a:	6820      	ldr	r0, [r4, #0]
}
    577c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5780:	f008 b919 	b.w	d9b6 <z_impl_k_mutex_init>
    5784:	0000fa8c 	.word	0x0000fa8c
    5788:	0000eb06 	.word	0x0000eb06
    578c:	0000f987 	.word	0x0000f987
    5790:	0000fa8b 	.word	0x0000fa8b
    5794:	0000fac7 	.word	0x0000fac7

00005798 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    5798:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    579a:	4604      	mov	r4, r0
    579c:	b958      	cbnz	r0, 57b6 <__retarget_lock_acquire_recursive+0x1e>
    579e:	490a      	ldr	r1, [pc, #40]	; (57c8 <__retarget_lock_acquire_recursive+0x30>)
    57a0:	480a      	ldr	r0, [pc, #40]	; (57cc <__retarget_lock_acquire_recursive+0x34>)
    57a2:	4a0b      	ldr	r2, [pc, #44]	; (57d0 <__retarget_lock_acquire_recursive+0x38>)
    57a4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    57a8:	f007 fb6d 	bl	ce86 <assert_print>
    57ac:	4808      	ldr	r0, [pc, #32]	; (57d0 <__retarget_lock_acquire_recursive+0x38>)
    57ae:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    57b2:	f007 fb61 	bl	ce78 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
    57b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    57ba:	4620      	mov	r0, r4
    57bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    57c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    57c4:	f003 b98e 	b.w	8ae4 <z_impl_k_mutex_lock>
    57c8:	0000fa8c 	.word	0x0000fa8c
    57cc:	0000eb06 	.word	0x0000eb06
    57d0:	0000f987 	.word	0x0000f987

000057d4 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    57d4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    57d6:	4604      	mov	r4, r0
    57d8:	b958      	cbnz	r0, 57f2 <__retarget_lock_release_recursive+0x1e>
    57da:	4908      	ldr	r1, [pc, #32]	; (57fc <__retarget_lock_release_recursive+0x28>)
    57dc:	4808      	ldr	r0, [pc, #32]	; (5800 <__retarget_lock_release_recursive+0x2c>)
    57de:	4a09      	ldr	r2, [pc, #36]	; (5804 <__retarget_lock_release_recursive+0x30>)
    57e0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    57e4:	f007 fb4f 	bl	ce86 <assert_print>
    57e8:	4806      	ldr	r0, [pc, #24]	; (5804 <__retarget_lock_release_recursive+0x30>)
    57ea:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    57ee:	f007 fb43 	bl	ce78 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
    57f2:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
    57f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    57f8:	f003 ba6e 	b.w	8cd8 <z_impl_k_mutex_unlock>
    57fc:	0000fa8c 	.word	0x0000fa8c
    5800:	0000eb06 	.word	0x0000eb06
    5804:	0000f987 	.word	0x0000f987

00005808 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    5808:	b510      	push	{r4, lr}
	__asm__ volatile(
    580a:	f04f 0320 	mov.w	r3, #32
    580e:	f3ef 8011 	mrs	r0, BASEPRI
    5812:	f383 8812 	msr	BASEPRI_MAX, r3
    5816:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    581a:	4a11      	ldr	r2, [pc, #68]	; (5860 <nordicsemi_nrf52_init+0x58>)
    581c:	2301      	movs	r3, #1
    581e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5826:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    582a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    582e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    5832:	2c08      	cmp	r4, #8
    5834:	d108      	bne.n	5848 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5836:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    583a:	2905      	cmp	r1, #5
    583c:	d804      	bhi.n	5848 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    583e:	4c09      	ldr	r4, [pc, #36]	; (5864 <nordicsemi_nrf52_init+0x5c>)
    5840:	5c61      	ldrb	r1, [r4, r1]
    5842:	b109      	cbz	r1, 5848 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    5844:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    5848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    584c:	2201      	movs	r2, #1
    584e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    5852:	f380 8811 	msr	BASEPRI, r0
    5856:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    585a:	2000      	movs	r0, #0
    585c:	bd10      	pop	{r4, pc}
    585e:	bf00      	nop
    5860:	4001e000 	.word	0x4001e000
    5864:	0000fafd 	.word	0x0000fafd

00005868 <sys_arch_reboot>:
    *p_gpregret = val;
    5868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    586c:	b2c0      	uxtb	r0, r0
    586e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    5872:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5876:	4905      	ldr	r1, [pc, #20]	; (588c <sys_arch_reboot+0x24>)
    5878:	4b05      	ldr	r3, [pc, #20]	; (5890 <sys_arch_reboot+0x28>)
    587a:	68ca      	ldr	r2, [r1, #12]
    587c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5880:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5882:	60cb      	str	r3, [r1, #12]
    5884:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5888:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    588a:	e7fd      	b.n	5888 <sys_arch_reboot+0x20>
    588c:	e000ed00 	.word	0xe000ed00
    5890:	05fa0004 	.word	0x05fa0004

00005894 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5894:	b120      	cbz	r0, 58a0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    5896:	4b03      	ldr	r3, [pc, #12]	; (58a4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5898:	0180      	lsls	r0, r0, #6
    589a:	f043 0301 	orr.w	r3, r3, #1
    589e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    58a0:	4770      	bx	lr
    58a2:	bf00      	nop
    58a4:	0000e440 	.word	0x0000e440

000058a8 <timing_init>:

static bool has_inited;
static atomic_val_t started_ref;

void timing_init(void)
{
    58a8:	b510      	push	{r4, lr}
	if (has_inited) {
    58aa:	4c04      	ldr	r4, [pc, #16]	; (58bc <timing_init+0x14>)
    58ac:	7823      	ldrb	r3, [r4, #0]
    58ae:	b91b      	cbnz	r3, 58b8 <timing_init+0x10>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_init();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_init();
#else
	arch_timing_init();
    58b0:	f7ff fd3a 	bl	5328 <arch_timing_init>
#endif

	has_inited = true;
    58b4:	2301      	movs	r3, #1
    58b6:	7023      	strb	r3, [r4, #0]
}
    58b8:	bd10      	pop	{r4, pc}
    58ba:	bf00      	nop
    58bc:	2000d2fd 	.word	0x2000d2fd

000058c0 <timing_start>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    58c0:	4b07      	ldr	r3, [pc, #28]	; (58e0 <timing_start+0x20>)
    58c2:	f3bf 8f5b 	dmb	ish
    58c6:	e853 2f00 	ldrex	r2, [r3]
    58ca:	1c51      	adds	r1, r2, #1
    58cc:	e843 1000 	strex	r0, r1, [r3]
    58d0:	2800      	cmp	r0, #0
    58d2:	d1f8      	bne.n	58c6 <timing_start+0x6>
    58d4:	f3bf 8f5b 	dmb	ish

void timing_start(void)
{
	if (atomic_inc(&started_ref) != 0) {
    58d8:	b90a      	cbnz	r2, 58de <timing_start+0x1e>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_start();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_start();
#else
	arch_timing_start();
    58da:	f7ff bd53 	b.w	5384 <arch_timing_start>
#endif
}
    58de:	4770      	bx	lr
    58e0:	20000f78 	.word	0x20000f78

000058e4 <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    58e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    58e6:	790d      	ldrb	r5, [r1, #4]
    58e8:	f005 041f 	and.w	r4, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    58ec:	2c07      	cmp	r4, #7
    58ee:	d81a      	bhi.n	5926 <adc_nrfx_channel_setup+0x42>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    58f0:	780a      	ldrb	r2, [r1, #0]
    58f2:	2a09      	cmp	r2, #9
    58f4:	d81e      	bhi.n	5934 <adc_nrfx_channel_setup+0x50>
    58f6:	e8df f002 	tbb	[pc, r2]
    58fa:	0606      	.short	0x0606
    58fc:	1d060606 	.word	0x1d060606
    5900:	1b1d1905 	.word	0x1b1d1905
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
    5904:	2205      	movs	r2, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    5906:	784b      	ldrb	r3, [r1, #1]
    5908:	2b03      	cmp	r3, #3
    590a:	d017      	beq.n	593c <adc_nrfx_channel_setup+0x58>
    590c:	2b04      	cmp	r3, #4
    590e:	f04f 0300 	mov.w	r3, #0
    5912:	d025      	beq.n	5960 <adc_nrfx_channel_setup+0x7c>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
    5914:	4a30      	ldr	r2, [pc, #192]	; (59d8 <adc_nrfx_channel_setup+0xf4>)
    5916:	9202      	str	r2, [sp, #8]
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
    5918:	e9cd 3300 	strd	r3, r3, [sp]
    591c:	492f      	ldr	r1, [pc, #188]	; (59dc <adc_nrfx_channel_setup+0xf8>)
    591e:	2201      	movs	r2, #1
    5920:	4618      	mov	r0, r3
    5922:	f007 fbb8 	bl	d096 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    5926:	f06f 0015 	mvn.w	r0, #21
    592a:	e04a      	b.n	59c2 <adc_nrfx_channel_setup+0xde>
		config.gain = NRF_SAADC_GAIN2;
    592c:	2206      	movs	r2, #6
		break;
    592e:	e7ea      	b.n	5906 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    5930:	2207      	movs	r2, #7
		break;
    5932:	e7e8      	b.n	5906 <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
    5934:	4b2a      	ldr	r3, [pc, #168]	; (59e0 <adc_nrfx_channel_setup+0xfc>)
		LOG_ERR("Selected ADC acquisition time is not valid");
    5936:	9302      	str	r3, [sp, #8]
    5938:	2300      	movs	r3, #0
    593a:	e7ed      	b.n	5918 <adc_nrfx_channel_setup+0x34>
	switch (channel_cfg->reference) {
    593c:	2601      	movs	r6, #1
	switch (channel_cfg->acquisition_time) {
    593e:	8848      	ldrh	r0, [r1, #2]
    5940:	f244 030a 	movw	r3, #16394	; 0x400a
    5944:	4298      	cmp	r0, r3
    5946:	d040      	beq.n	59ca <adc_nrfx_channel_setup+0xe6>
    5948:	d80c      	bhi.n	5964 <adc_nrfx_channel_setup+0x80>
    594a:	f244 0303 	movw	r3, #16387	; 0x4003
    594e:	4298      	cmp	r0, r3
    5950:	d016      	beq.n	5980 <adc_nrfx_channel_setup+0x9c>
    5952:	f244 0305 	movw	r3, #16389	; 0x4005
    5956:	4298      	cmp	r0, r3
    5958:	d035      	beq.n	59c6 <adc_nrfx_channel_setup+0xe2>
    595a:	b3b0      	cbz	r0, 59ca <adc_nrfx_channel_setup+0xe6>
		LOG_ERR("Selected ADC acquisition time is not valid");
    595c:	4b21      	ldr	r3, [pc, #132]	; (59e4 <adc_nrfx_channel_setup+0x100>)
    595e:	e7ea      	b.n	5936 <adc_nrfx_channel_setup+0x52>
	nrf_saadc_channel_config_t config = {
    5960:	461e      	mov	r6, r3
    5962:	e7ec      	b.n	593e <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->acquisition_time) {
    5964:	f244 0314 	movw	r3, #16404	; 0x4014
    5968:	4298      	cmp	r0, r3
    596a:	d030      	beq.n	59ce <adc_nrfx_channel_setup+0xea>
    596c:	f244 0328 	movw	r3, #16424	; 0x4028
    5970:	4298      	cmp	r0, r3
    5972:	d02e      	beq.n	59d2 <adc_nrfx_channel_setup+0xee>
    5974:	f244 030f 	movw	r3, #16399	; 0x400f
    5978:	4298      	cmp	r0, r3
    597a:	d1ef      	bne.n	595c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    597c:	2003      	movs	r0, #3
    597e:	e000      	b.n	5982 <adc_nrfx_channel_setup+0x9e>
	nrf_saadc_channel_config_t config = {
    5980:	2000      	movs	r0, #0
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    5982:	0212      	lsls	r2, r2, #8
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    5984:	f3c5 1340 	ubfx	r3, r5, #5, #1
    5988:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
    p_reg->CH[channel].CONFIG =
    598c:	0122      	lsls	r2, r4, #4
    598e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5992:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    5996:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
    599a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    p_reg->CH[channel].CONFIG =
    599e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    59a2:	0123      	lsls	r3, r4, #4
    59a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    59a8:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    59ac:	798a      	ldrb	r2, [r1, #6]
    59ae:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    59b2:	2000      	movs	r0, #0
    59b4:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    59b8:	4b0b      	ldr	r3, [pc, #44]	; (59e8 <adc_nrfx_channel_setup+0x104>)
    59ba:	441c      	add	r4, r3
    59bc:	794b      	ldrb	r3, [r1, #5]
    59be:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90

	return 0;
}
    59c2:	b004      	add	sp, #16
    59c4:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    59c6:	2001      	movs	r0, #1
    59c8:	e7db      	b.n	5982 <adc_nrfx_channel_setup+0x9e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    59ca:	2002      	movs	r0, #2
    59cc:	e7d9      	b.n	5982 <adc_nrfx_channel_setup+0x9e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    59ce:	2004      	movs	r0, #4
    59d0:	e7d7      	b.n	5982 <adc_nrfx_channel_setup+0x9e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    59d2:	2005      	movs	r0, #5
    59d4:	e7d5      	b.n	5982 <adc_nrfx_channel_setup+0x9e>
    59d6:	bf00      	nop
    59d8:	0000fb22 	.word	0x0000fb22
    59dc:	0000e3a4 	.word	0x0000e3a4
    59e0:	0000fb03 	.word	0x0000fb03
    59e4:	0000fb46 	.word	0x0000fb46
    59e8:	20000000 	.word	0x20000000

000059ec <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    59ec:	4b04      	ldr	r3, [pc, #16]	; (5a00 <adc_context_start_sampling.isra.0+0x14>)
    59ee:	2201      	movs	r2, #1
    59f0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    59f4:	b108      	cbz	r0, 59fa <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    59f6:	60da      	str	r2, [r3, #12]
}
    59f8:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    59fa:	601a      	str	r2, [r3, #0]
    59fc:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    59fe:	4770      	bx	lr
    5a00:	40007000 	.word	0x40007000

00005a04 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    5a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a06:	460d      	mov	r5, r1
    5a08:	b087      	sub	sp, #28
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    5a0a:	4870      	ldr	r0, [pc, #448]	; (5bcc <adc_nrfx_read+0x1c8>)
    5a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a14:	f003 fa62 	bl	8edc <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    5a18:	686c      	ldr	r4, [r5, #4]
	if (!selected_channels ||
    5a1a:	b114      	cbz	r4, 5a22 <adc_nrfx_read+0x1e>
    5a1c:	f034 02ff 	bics.w	r2, r4, #255	; 0xff
    5a20:	d00a      	beq.n	5a38 <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
    5a22:	4b6b      	ldr	r3, [pc, #428]	; (5bd0 <adc_nrfx_read+0x1cc>)
		LOG_ERR(
    5a24:	9302      	str	r3, [sp, #8]
    5a26:	2300      	movs	r3, #0
    5a28:	e9cd 3300 	strd	r3, r3, [sp]
    5a2c:	4969      	ldr	r1, [pc, #420]	; (5bd4 <adc_nrfx_read+0x1d0>)
    5a2e:	2201      	movs	r2, #1
    5a30:	4618      	mov	r0, r3
    5a32:	f007 fb30 	bl	d096 <z_log_msg2_runtime_create.constprop.0>
	if (error) {
    5a36:	e053      	b.n	5ae0 <adc_nrfx_read+0xdc>
    p_reg->CH[channel].PSELP = pselp;
    5a38:	4e67      	ldr	r6, [pc, #412]	; (5bd8 <adc_nrfx_read+0x1d4>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    5a3a:	4f68      	ldr	r7, [pc, #416]	; (5bdc <adc_nrfx_read+0x1d8>)
	active_channels = 0U;
    5a3c:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    5a3e:	fa24 f302 	lsr.w	r3, r4, r2
    5a42:	f013 0301 	ands.w	r3, r3, #1
    5a46:	d02f      	beq.n	5aa8 <adc_nrfx_read+0xa4>
			if (m_data.positive_inputs[channel_id] == 0U) {
    5a48:	18bb      	adds	r3, r7, r2
    5a4a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    5a4e:	b92b      	cbnz	r3, 5a5c <adc_nrfx_read+0x58>
				LOG_ERR("Channel %u not configured",
    5a50:	9203      	str	r2, [sp, #12]
    5a52:	4a63      	ldr	r2, [pc, #396]	; (5be0 <adc_nrfx_read+0x1dc>)
    5a54:	9202      	str	r2, [sp, #8]
		LOG_ERR("Oversampling value %d is not valid",
    5a56:	e9cd 3300 	strd	r3, r3, [sp]
    5a5a:	e03c      	b.n	5ad6 <adc_nrfx_read+0xd2>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    5a5c:	eb06 1e02 	add.w	lr, r6, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    5a60:	f895 c011 	ldrb.w	ip, [r5, #17]
    5a64:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    5a68:	f1bc 0c00 	subs.w	ip, ip, #0
    5a6c:	bf18      	it	ne
    5a6e:	f04f 0c01 	movne.w	ip, #1
    5a72:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    5a76:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
    5a7a:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    5a7e:	f102 0051 	add.w	r0, r2, #81	; 0x51
    5a82:	0100      	lsls	r0, r0, #4
			++active_channels;
    5a84:	3101      	adds	r1, #1
    5a86:	5033      	str	r3, [r6, r0]
    5a88:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    5a8a:	3201      	adds	r2, #1
    5a8c:	2a08      	cmp	r2, #8
    5a8e:	d1d6      	bne.n	5a3e <adc_nrfx_read+0x3a>
	error = set_resolution(sequence);
    5a90:	7c2a      	ldrb	r2, [r5, #16]
	switch (sequence->resolution) {
    5a92:	f1a2 0008 	sub.w	r0, r2, #8
    5a96:	2300      	movs	r3, #0
    5a98:	2806      	cmp	r0, #6
    5a9a:	d816      	bhi.n	5aca <adc_nrfx_read+0xc6>
    5a9c:	e8df f000 	tbb	[pc, r0]
    5aa0:	15091528 	.word	0x15091528
    5aa4:	152a      	.short	0x152a
    5aa6:	13          	.byte	0x13
    5aa7:	00          	.byte	0x00
    5aa8:	f102 0051 	add.w	r0, r2, #81	; 0x51
    5aac:	0100      	lsls	r0, r0, #4
    5aae:	5033      	str	r3, [r6, r0]
}
    5ab0:	e7eb      	b.n	5a8a <adc_nrfx_read+0x86>
    5ab2:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
    5ab4:	4a48      	ldr	r2, [pc, #288]	; (5bd8 <adc_nrfx_read+0x1d4>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    5ab6:	2901      	cmp	r1, #1
    5ab8:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    5abc:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    5abe:	d91b      	bls.n	5af8 <adc_nrfx_read+0xf4>
    5ac0:	b1e3      	cbz	r3, 5afc <adc_nrfx_read+0xf8>
		LOG_ERR(
    5ac2:	4b48      	ldr	r3, [pc, #288]	; (5be4 <adc_nrfx_read+0x1e0>)
    5ac4:	e7ae      	b.n	5a24 <adc_nrfx_read+0x20>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    5ac6:	2303      	movs	r3, #3
		break;
    5ac8:	e7f4      	b.n	5ab4 <adc_nrfx_read+0xb0>
	switch (sequence->resolution) {
    5aca:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
    5acc:	4a46      	ldr	r2, [pc, #280]	; (5be8 <adc_nrfx_read+0x1e4>)
    5ace:	9300      	str	r3, [sp, #0]
    5ad0:	e9cd 3201 	strd	r3, r2, [sp, #4]
    5ad4:	2300      	movs	r3, #0
    5ad6:	493f      	ldr	r1, [pc, #252]	; (5bd4 <adc_nrfx_read+0x1d0>)
    5ad8:	2201      	movs	r2, #1
    5ada:	4618      	mov	r0, r3
    5adc:	f007 fadb 	bl	d096 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    5ae0:	f06f 0415 	mvn.w	r4, #21
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5ae4:	4839      	ldr	r0, [pc, #228]	; (5bcc <adc_nrfx_read+0x1c8>)
    5ae6:	f003 f9bb 	bl	8e60 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
    5aea:	4620      	mov	r0, r4
    5aec:	b007      	add	sp, #28
    5aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    5af0:	2300      	movs	r3, #0
    5af2:	e7df      	b.n	5ab4 <adc_nrfx_read+0xb0>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    5af4:	2302      	movs	r3, #2
    5af6:	e7dd      	b.n	5ab4 <adc_nrfx_read+0xb0>
	switch (sequence->oversampling) {
    5af8:	2b08      	cmp	r3, #8
    5afa:	d816      	bhi.n	5b2a <adc_nrfx_read+0x126>
    p_reg->OVERSAMPLE = oversample;
    5afc:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
    5b00:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    5b02:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    5b04:	b9b2      	cbnz	r2, 5b34 <adc_nrfx_read+0x130>
	if (sequence->buffer_size < needed_buffer_size) {
    5b06:	68ea      	ldr	r2, [r5, #12]
    5b08:	429a      	cmp	r2, r3
    5b0a:	d217      	bcs.n	5b3c <adc_nrfx_read+0x138>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    5b0c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    5b10:	4b36      	ldr	r3, [pc, #216]	; (5bec <adc_nrfx_read+0x1e8>)
    5b12:	9302      	str	r3, [sp, #8]
    5b14:	2300      	movs	r3, #0
    5b16:	e9cd 3300 	strd	r3, r3, [sp]
    5b1a:	492e      	ldr	r1, [pc, #184]	; (5bd4 <adc_nrfx_read+0x1d0>)
    5b1c:	2201      	movs	r2, #1
    5b1e:	4618      	mov	r0, r3
    5b20:	f007 fab9 	bl	d096 <z_log_msg2_runtime_create.constprop.0>
		return -ENOMEM;
    5b24:	f06f 040b 	mvn.w	r4, #11
    5b28:	e7dc      	b.n	5ae4 <adc_nrfx_read+0xe0>
	switch (sequence->oversampling) {
    5b2a:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
    5b2c:	4b30      	ldr	r3, [pc, #192]	; (5bf0 <adc_nrfx_read+0x1ec>)
    5b2e:	9302      	str	r3, [sp, #8]
    5b30:	2300      	movs	r3, #0
    5b32:	e790      	b.n	5a56 <adc_nrfx_read+0x52>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    5b34:	8992      	ldrh	r2, [r2, #12]
    5b36:	fb02 3303 	mla	r3, r2, r3, r3
    5b3a:	e7e4      	b.n	5b06 <adc_nrfx_read+0x102>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    5b3c:	4b26      	ldr	r3, [pc, #152]	; (5bd8 <adc_nrfx_read+0x1d4>)
    5b3e:	68aa      	ldr	r2, [r5, #8]
    5b40:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    5b44:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    5b46:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    5b4a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5b4c:	4c23      	ldr	r4, [pc, #140]	; (5bdc <adc_nrfx_read+0x1d8>)
    5b4e:	f104 0664 	add.w	r6, r4, #100	; 0x64
    5b52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5b54:	683b      	ldr	r3, [r7, #0]
    5b56:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    5b58:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    5b5a:	2600      	movs	r6, #0
    5b5c:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    5b5e:	4627      	mov	r7, r4
    5b60:	b373      	cbz	r3, 5bc0 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
    5b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5b64:	f104 0578 	add.w	r5, r4, #120	; 0x78
    5b68:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    5b6c:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    5b6e:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    5b72:	b328      	cbz	r0, 5bc0 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5b74:	f3bf 8f5b 	dmb	ish
    5b78:	e857 3f00 	ldrex	r3, [r7]
    5b7c:	e847 6200 	strex	r2, r6, [r7]
    5b80:	2a00      	cmp	r2, #0
    5b82:	d1f9      	bne.n	5b78 <adc_nrfx_read+0x174>
    5b84:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5b88:	481a      	ldr	r0, [pc, #104]	; (5bf4 <adc_nrfx_read+0x1f0>)
    5b8a:	6fa7      	ldr	r7, [r4, #120]	; 0x78
    5b8c:	4a1a      	ldr	r2, [pc, #104]	; (5bf8 <adc_nrfx_read+0x1f4>)
    5b8e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    5b92:	4631      	mov	r1, r6
    5b94:	2300      	movs	r3, #0
    5b96:	fbe7 0105 	umlal	r0, r1, r7, r5
    5b9a:	f7fa ff95 	bl	ac8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    5b9e:	2200      	movs	r2, #0
    5ba0:	e9cd 0100 	strd	r0, r1, [sp]
    5ba4:	2300      	movs	r3, #0
    5ba6:	f104 0008 	add.w	r0, r4, #8
    5baa:	f004 ff43 	bl	aa34 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    5bae:	4813      	ldr	r0, [pc, #76]	; (5bfc <adc_nrfx_read+0x1f8>)
    5bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5bb8:	f003 f990 	bl	8edc <z_impl_k_sem_take>
	return ctx->status;
    5bbc:	6e24      	ldr	r4, [r4, #96]	; 0x60
	return error;
    5bbe:	e791      	b.n	5ae4 <adc_nrfx_read+0xe0>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    5bc0:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    5bc4:	f7ff ff12 	bl	59ec <adc_context_start_sampling.isra.0>
    5bc8:	e7f1      	b.n	5bae <adc_nrfx_read+0x1aa>
    5bca:	bf00      	nop
    5bcc:	20000040 	.word	0x20000040
    5bd0:	0000fb71 	.word	0x0000fb71
    5bd4:	0000e3a4 	.word	0x0000e3a4
    5bd8:	40007000 	.word	0x40007000
    5bdc:	20000000 	.word	0x20000000
    5be0:	0000fb8f 	.word	0x0000fb8f
    5be4:	0000fbce 	.word	0x0000fbce
    5be8:	0000fba9 	.word	0x0000fba9
    5bec:	0000fc23 	.word	0x0000fc23
    5bf0:	0000fc00 	.word	0x0000fc00
    5bf4:	000f423f 	.word	0x000f423f
    5bf8:	000f4240 	.word	0x000f4240
    5bfc:	20000050 	.word	0x20000050

00005c00 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c00:	4b0e      	ldr	r3, [pc, #56]	; (5c3c <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    5c02:	b510      	push	{r4, lr}
    5c04:	2400      	movs	r4, #0
    5c06:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5c0a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    5c0e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    5c12:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    5c16:	2212      	movs	r2, #18
    5c18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    5c1c:	2007      	movs	r0, #7
    5c1e:	f7fe fe99 	bl	4954 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5c22:	4622      	mov	r2, r4
    5c24:	2101      	movs	r1, #1
    5c26:	2007      	movs	r0, #7
    5c28:	f7fe feb2 	bl	4990 <z_arm_irq_priority_set>
	return sem->count;
    5c2c:	4804      	ldr	r0, [pc, #16]	; (5c40 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    5c2e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    5c30:	b913      	cbnz	r3, 5c38 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
    5c32:	3040      	adds	r0, #64	; 0x40
    5c34:	f003 f914 	bl	8e60 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    5c38:	2000      	movs	r0, #0
    5c3a:	bd10      	pop	{r4, pc}
    5c3c:	40007000 	.word	0x40007000
    5c40:	20000000 	.word	0x20000000

00005c44 <saadc_irq_handler>:
{
    5c44:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c46:	4b2e      	ldr	r3, [pc, #184]	; (5d00 <saadc_irq_handler+0xbc>)
    5c48:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    5c4c:	2a00      	cmp	r2, #0
    5c4e:	d04a      	beq.n	5ce6 <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c50:	2200      	movs	r2, #0
    5c52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    5c56:	4c2b      	ldr	r4, [pc, #172]	; (5d04 <saadc_irq_handler+0xc0>)
    5c58:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c5c:	2101      	movs	r1, #1
    5c5e:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    5c60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    5c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5c66:	4625      	mov	r5, r4
    5c68:	b3c3      	cbz	r3, 5cdc <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    5c6a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    5c6c:	b143      	cbz	r3, 5c80 <saadc_irq_handler+0x3c>
			action = callback(dev,
    5c6e:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    5c72:	f104 0164 	add.w	r1, r4, #100	; 0x64
    5c76:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    5c78:	2801      	cmp	r0, #1
    5c7a:	d014      	beq.n	5ca6 <saadc_irq_handler+0x62>
    5c7c:	2802      	cmp	r0, #2
    5c7e:	d028      	beq.n	5cd2 <saadc_irq_handler+0x8e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    5c80:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    5c84:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    5c88:	429a      	cmp	r2, r3
    5c8a:	d922      	bls.n	5cd2 <saadc_irq_handler+0x8e>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    5c8c:	3301      	adds	r3, #1
    5c8e:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    5c92:	4b1b      	ldr	r3, [pc, #108]	; (5d00 <saadc_irq_handler+0xbc>)
    5c94:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    5c98:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    5c9c:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    5c9e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    5ca2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    5ca6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    5ca8:	b92b      	cbnz	r3, 5cb6 <saadc_irq_handler+0x72>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    5caa:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
}
    5cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5cb2:	f7ff be9b 	b.w	59ec <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5cb6:	f3bf 8f5b 	dmb	ish
    5cba:	e855 3f00 	ldrex	r3, [r5]
    5cbe:	1e5a      	subs	r2, r3, #1
    5cc0:	e845 2100 	strex	r1, r2, [r5]
    5cc4:	2900      	cmp	r1, #0
    5cc6:	d1f8      	bne.n	5cba <saadc_irq_handler+0x76>
    5cc8:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    5ccc:	2b01      	cmp	r3, #1
    5cce:	dcec      	bgt.n	5caa <saadc_irq_handler+0x66>
    5cd0:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    5cd2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    5cd4:	b113      	cbz	r3, 5cdc <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    5cd6:	480c      	ldr	r0, [pc, #48]	; (5d08 <saadc_irq_handler+0xc4>)
    5cd8:	f007 fea4 	bl	da24 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    5cdc:	480b      	ldr	r0, [pc, #44]	; (5d0c <saadc_irq_handler+0xc8>)
    5cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5ce2:	f003 b8bd 	b.w	8e60 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ce6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    5cea:	2900      	cmp	r1, #0
    5cec:	d0f0      	beq.n	5cd0 <saadc_irq_handler+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5cee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    5cf2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cf6:	2201      	movs	r2, #1
    5cf8:	609a      	str	r2, [r3, #8]
    5cfa:	601a      	str	r2, [r3, #0]
    5cfc:	605a      	str	r2, [r3, #4]
}
    5cfe:	e7e7      	b.n	5cd0 <saadc_irq_handler+0x8c>
    5d00:	40007000 	.word	0x40007000
    5d04:	20000000 	.word	0x20000000
    5d08:	20000008 	.word	0x20000008
    5d0c:	20000050 	.word	0x20000050

00005d10 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5d12:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    5d14:	490a      	ldr	r1, [pc, #40]	; (5d40 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5d16:	4a0b      	ldr	r2, [pc, #44]	; (5d44 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    5d18:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5d1a:	2340      	movs	r3, #64	; 0x40
    5d1c:	9300      	str	r3, [sp, #0]
    5d1e:	1149      	asrs	r1, r1, #5
{
    5d20:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5d22:	4623      	mov	r3, r4
    5d24:	4808      	ldr	r0, [pc, #32]	; (5d48 <onoff_start+0x38>)
    5d26:	f007 f9f0 	bl	d10a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5d2a:	1e01      	subs	r1, r0, #0
    5d2c:	da05      	bge.n	5d3a <onoff_start+0x2a>
		notify(mgr, err);
    5d2e:	4628      	mov	r0, r5
    5d30:	4623      	mov	r3, r4
	}
}
    5d32:	b003      	add	sp, #12
    5d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    5d38:	4718      	bx	r3
}
    5d3a:	b003      	add	sp, #12
    5d3c:	bd30      	pop	{r4, r5, pc}
    5d3e:	bf00      	nop
    5d40:	20000f8c 	.word	0x20000f8c
    5d44:	0000d179 	.word	0x0000d179
    5d48:	0000e194 	.word	0x0000e194

00005d4c <get_status>:
{
    5d4c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5d4e:	b2cc      	uxtb	r4, r1
    5d50:	2c01      	cmp	r4, #1
{
    5d52:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5d54:	d909      	bls.n	5d6a <get_status+0x1e>
    5d56:	4909      	ldr	r1, [pc, #36]	; (5d7c <get_status+0x30>)
    5d58:	4809      	ldr	r0, [pc, #36]	; (5d80 <get_status+0x34>)
    5d5a:	4a0a      	ldr	r2, [pc, #40]	; (5d84 <get_status+0x38>)
    5d5c:	2379      	movs	r3, #121	; 0x79
    5d5e:	f007 f892 	bl	ce86 <assert_print>
    5d62:	4808      	ldr	r0, [pc, #32]	; (5d84 <get_status+0x38>)
    5d64:	2179      	movs	r1, #121	; 0x79
    5d66:	f007 f887 	bl	ce78 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5d6a:	6929      	ldr	r1, [r5, #16]
    5d6c:	230c      	movs	r3, #12
    5d6e:	fb04 1403 	mla	r4, r4, r3, r1
    5d72:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    5d74:	f000 0007 	and.w	r0, r0, #7
    5d78:	bd38      	pop	{r3, r4, r5, pc}
    5d7a:	bf00      	nop
    5d7c:	0000fc9a 	.word	0x0000fc9a
    5d80:	0000eb06 	.word	0x0000eb06
    5d84:	0000fc5d 	.word	0x0000fc5d

00005d88 <stop>:
{
    5d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d8a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5d8c:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    5d8e:	6906      	ldr	r6, [r0, #16]
{
    5d90:	4605      	mov	r5, r0
    5d92:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5d94:	d90b      	bls.n	5dae <stop+0x26>
    5d96:	4919      	ldr	r1, [pc, #100]	; (5dfc <stop+0x74>)
    5d98:	4819      	ldr	r0, [pc, #100]	; (5e00 <stop+0x78>)
    5d9a:	4a1a      	ldr	r2, [pc, #104]	; (5e04 <stop+0x7c>)
    5d9c:	f240 134d 	movw	r3, #333	; 0x14d
    5da0:	f007 f871 	bl	ce86 <assert_print>
    5da4:	4817      	ldr	r0, [pc, #92]	; (5e04 <stop+0x7c>)
    5da6:	f240 114d 	movw	r1, #333	; 0x14d
    5daa:	f007 f865 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    5dae:	f04f 0320 	mov.w	r3, #32
    5db2:	f3ef 8111 	mrs	r1, BASEPRI
    5db6:	f383 8812 	msr	BASEPRI_MAX, r3
    5dba:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5dbe:	220c      	movs	r2, #12
    5dc0:	fb02 6304 	mla	r3, r2, r4, r6
    5dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5dc6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5dca:	d001      	beq.n	5dd0 <stop+0x48>
    5dcc:	429f      	cmp	r7, r3
    5dce:	d111      	bne.n	5df4 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5dd0:	fb02 6604 	mla	r6, r2, r4, r6
    5dd4:	2301      	movs	r3, #1
    5dd6:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
    5dd8:	2000      	movs	r0, #0
	__asm__ volatile(
    5dda:	f381 8811 	msr	BASEPRI, r1
    5dde:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    5de2:	b930      	cbnz	r0, 5df2 <stop+0x6a>
	get_sub_config(dev, type)->stop();
    5de4:	6869      	ldr	r1, [r5, #4]
    5de6:	230c      	movs	r3, #12
    5de8:	fb03 1404 	mla	r4, r3, r4, r1
    5dec:	6863      	ldr	r3, [r4, #4]
    5dee:	4798      	blx	r3
	return 0;
    5df0:	2000      	movs	r0, #0
}
    5df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    5df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5df8:	e7ef      	b.n	5dda <stop+0x52>
    5dfa:	bf00      	nop
    5dfc:	0000fc9a 	.word	0x0000fc9a
    5e00:	0000eb06 	.word	0x0000eb06
    5e04:	0000fc5d 	.word	0x0000fc5d

00005e08 <onoff_stop>:
{
    5e08:	b570      	push	{r4, r5, r6, lr}
    5e0a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    5e0c:	4906      	ldr	r1, [pc, #24]	; (5e28 <onoff_stop+0x20>)
    5e0e:	1a41      	subs	r1, r0, r1
{
    5e10:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5e12:	1149      	asrs	r1, r1, #5
    5e14:	4805      	ldr	r0, [pc, #20]	; (5e2c <onoff_stop+0x24>)
    5e16:	2240      	movs	r2, #64	; 0x40
    5e18:	f7ff ffb6 	bl	5d88 <stop>
	notify(mgr, res);
    5e1c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5e1e:	4601      	mov	r1, r0
	notify(mgr, res);
    5e20:	4620      	mov	r0, r4
}
    5e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5e26:	4718      	bx	r3
    5e28:	20000f8c 	.word	0x20000f8c
    5e2c:	0000e194 	.word	0x0000e194

00005e30 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5e30:	2200      	movs	r2, #0
{
    5e32:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5e34:	2101      	movs	r1, #1
{
    5e36:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5e38:	4610      	mov	r0, r2
    5e3a:	f7fe fda9 	bl	4990 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5e3e:	480f      	ldr	r0, [pc, #60]	; (5e7c <clk_init+0x4c>)
    5e40:	f001 fc9c 	bl	777c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5e44:	4b0e      	ldr	r3, [pc, #56]	; (5e80 <clk_init+0x50>)
    5e46:	4298      	cmp	r0, r3
    5e48:	d115      	bne.n	5e76 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5e4a:	f001 fcbd 	bl	77c8 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    5e4e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5e50:	490c      	ldr	r1, [pc, #48]	; (5e84 <clk_init+0x54>)
    5e52:	4630      	mov	r0, r6
    5e54:	f006 ffb1 	bl	cdba <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5e58:	2800      	cmp	r0, #0
    5e5a:	db0b      	blt.n	5e74 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    5e5c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5e5e:	4909      	ldr	r1, [pc, #36]	; (5e84 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5e60:	2501      	movs	r5, #1
    5e62:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5e64:	f104 0020 	add.w	r0, r4, #32
    5e68:	f006 ffa7 	bl	cdba <onoff_manager_init>
		if (err < 0) {
    5e6c:	2800      	cmp	r0, #0
    5e6e:	db01      	blt.n	5e74 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5e70:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    5e72:	2000      	movs	r0, #0
}
    5e74:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5e76:	f06f 0004 	mvn.w	r0, #4
    5e7a:	e7fb      	b.n	5e74 <clk_init+0x44>
    5e7c:	00005ebd 	.word	0x00005ebd
    5e80:	0bad0000 	.word	0x0bad0000
    5e84:	0000e6d8 	.word	0x0000e6d8

00005e88 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    5e88:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5e8a:	230c      	movs	r3, #12
    5e8c:	4809      	ldr	r0, [pc, #36]	; (5eb4 <clkstarted_handle.constprop.0+0x2c>)
    5e8e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    5e90:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    5e92:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5e94:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    5e98:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    5e9a:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    5e9c:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    5e9e:	4418      	add	r0, r3
    5ea0:	f007 f920 	bl	d0e4 <set_on_state>
	if (callback) {
    5ea4:	b12d      	cbz	r5, 5eb2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5ea6:	4632      	mov	r2, r6
    5ea8:	462b      	mov	r3, r5
    5eaa:	4803      	ldr	r0, [pc, #12]	; (5eb8 <clkstarted_handle.constprop.0+0x30>)
}
    5eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5eb0:	4718      	bx	r3
}
    5eb2:	bd70      	pop	{r4, r5, r6, pc}
    5eb4:	20000f8c 	.word	0x20000f8c
    5eb8:	0000e194 	.word	0x0000e194

00005ebc <clock_event_handler>:
	switch (event) {
    5ebc:	2801      	cmp	r0, #1
{
    5ebe:	b508      	push	{r3, lr}
	switch (event) {
    5ec0:	d006      	beq.n	5ed0 <clock_event_handler+0x14>
    5ec2:	2803      	cmp	r0, #3
    5ec4:	d008      	beq.n	5ed8 <clock_event_handler+0x1c>
    5ec6:	b9a8      	cbnz	r0, 5ef4 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5ec8:	4b10      	ldr	r3, [pc, #64]	; (5f0c <clock_event_handler+0x50>)
    5eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5ecc:	075b      	lsls	r3, r3, #29
    5ece:	d11b      	bne.n	5f08 <clock_event_handler+0x4c>
}
    5ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5ed4:	f7ff bfd8 	b.w	5e88 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    5ed8:	490d      	ldr	r1, [pc, #52]	; (5f10 <clock_event_handler+0x54>)
    5eda:	4a0e      	ldr	r2, [pc, #56]	; (5f14 <clock_event_handler+0x58>)
    5edc:	480e      	ldr	r0, [pc, #56]	; (5f18 <clock_event_handler+0x5c>)
    5ede:	f240 235e 	movw	r3, #606	; 0x25e
    5ee2:	f006 ffd0 	bl	ce86 <assert_print>
    5ee6:	f240 215e 	movw	r1, #606	; 0x25e
}
    5eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    5eee:	4809      	ldr	r0, [pc, #36]	; (5f14 <clock_event_handler+0x58>)
    5ef0:	f006 bfc2 	b.w	ce78 <assert_post_action>
    5ef4:	4906      	ldr	r1, [pc, #24]	; (5f10 <clock_event_handler+0x54>)
    5ef6:	4a07      	ldr	r2, [pc, #28]	; (5f14 <clock_event_handler+0x58>)
    5ef8:	4807      	ldr	r0, [pc, #28]	; (5f18 <clock_event_handler+0x5c>)
    5efa:	f240 2362 	movw	r3, #610	; 0x262
    5efe:	f006 ffc2 	bl	ce86 <assert_print>
    5f02:	f240 2162 	movw	r1, #610	; 0x262
    5f06:	e7f0      	b.n	5eea <clock_event_handler+0x2e>
}
    5f08:	bd08      	pop	{r3, pc}
    5f0a:	bf00      	nop
    5f0c:	20000f8c 	.word	0x20000f8c
    5f10:	0000f7bd 	.word	0x0000f7bd
    5f14:	0000fc5d 	.word	0x0000fc5d
    5f18:	0000eb06 	.word	0x0000eb06

00005f1c <generic_hfclk_start>:
{
    5f1c:	b508      	push	{r3, lr}
	__asm__ volatile(
    5f1e:	f04f 0320 	mov.w	r3, #32
    5f22:	f3ef 8111 	mrs	r1, BASEPRI
    5f26:	f383 8812 	msr	BASEPRI_MAX, r3
    5f2a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5f2e:	4a12      	ldr	r2, [pc, #72]	; (5f78 <generic_hfclk_start+0x5c>)
    5f30:	6813      	ldr	r3, [r2, #0]
    5f32:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    5f36:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    5f3a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5f3c:	d00c      	beq.n	5f58 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5f3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5f42:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5f46:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5f4a:	f013 0301 	ands.w	r3, r3, #1
    5f4e:	d003      	beq.n	5f58 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    5f50:	480a      	ldr	r0, [pc, #40]	; (5f7c <generic_hfclk_start+0x60>)
    5f52:	f007 f8c7 	bl	d0e4 <set_on_state>
			already_started = true;
    5f56:	2301      	movs	r3, #1
	__asm__ volatile(
    5f58:	f381 8811 	msr	BASEPRI, r1
    5f5c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5f60:	b123      	cbz	r3, 5f6c <generic_hfclk_start+0x50>
}
    5f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    5f66:	2000      	movs	r0, #0
    5f68:	f7ff bf8e 	b.w	5e88 <clkstarted_handle.constprop.0>
}
    5f6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5f70:	2001      	movs	r0, #1
    5f72:	f001 bc4d 	b.w	7810 <nrfx_clock_start>
    5f76:	bf00      	nop
    5f78:	20000fe4 	.word	0x20000fe4
    5f7c:	20000fd4 	.word	0x20000fd4

00005f80 <api_blocking_start>:
{
    5f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5f82:	2200      	movs	r2, #0
    5f84:	2301      	movs	r3, #1
    5f86:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5f8a:	4a09      	ldr	r2, [pc, #36]	; (5fb0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5f8c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5f90:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5f92:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5f96:	f007 f8e8 	bl	d16a <api_start>
	if (err < 0) {
    5f9a:	2800      	cmp	r0, #0
    5f9c:	db05      	blt.n	5faa <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    5f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5fa2:	2300      	movs	r3, #0
    5fa4:	4668      	mov	r0, sp
    5fa6:	f002 ff99 	bl	8edc <z_impl_k_sem_take>
}
    5faa:	b005      	add	sp, #20
    5fac:	f85d fb04 	ldr.w	pc, [sp], #4
    5fb0:	0000d197 	.word	0x0000d197

00005fb4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5fb4:	4b09      	ldr	r3, [pc, #36]	; (5fdc <generic_hfclk_stop+0x28>)
    5fb6:	f3bf 8f5b 	dmb	ish
    5fba:	e853 2f00 	ldrex	r2, [r3]
    5fbe:	f022 0102 	bic.w	r1, r2, #2
    5fc2:	e843 1000 	strex	r0, r1, [r3]
    5fc6:	2800      	cmp	r0, #0
    5fc8:	d1f7      	bne.n	5fba <generic_hfclk_stop+0x6>
    5fca:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    5fce:	07d3      	lsls	r3, r2, #31
    5fd0:	d402      	bmi.n	5fd8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5fd2:	2001      	movs	r0, #1
    5fd4:	f001 bc80 	b.w	78d8 <nrfx_clock_stop>
}
    5fd8:	4770      	bx	lr
    5fda:	bf00      	nop
    5fdc:	20000fe4 	.word	0x20000fe4

00005fe0 <z_nrf_clock_control_lf_on>:
{
    5fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5fe4:	4947      	ldr	r1, [pc, #284]	; (6104 <z_nrf_clock_control_lf_on+0x124>)
    5fe6:	f3bf 8f5b 	dmb	ish
    5fea:	4606      	mov	r6, r0
    5fec:	2201      	movs	r2, #1
    5fee:	e851 3f00 	ldrex	r3, [r1]
    5ff2:	e841 2000 	strex	r0, r2, [r1]
    5ff6:	2800      	cmp	r0, #0
    5ff8:	d1f9      	bne.n	5fee <z_nrf_clock_control_lf_on+0xe>
    5ffa:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5ffe:	b9a3      	cbnz	r3, 602a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6000:	4941      	ldr	r1, [pc, #260]	; (6108 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    6002:	4842      	ldr	r0, [pc, #264]	; (610c <z_nrf_clock_control_lf_on+0x12c>)
    6004:	604b      	str	r3, [r1, #4]
    6006:	60cb      	str	r3, [r1, #12]
    6008:	608a      	str	r2, [r1, #8]
    600a:	f7fd f893 	bl	3134 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    600e:	2800      	cmp	r0, #0
    6010:	da0b      	bge.n	602a <z_nrf_clock_control_lf_on+0x4a>
    6012:	493f      	ldr	r1, [pc, #252]	; (6110 <z_nrf_clock_control_lf_on+0x130>)
    6014:	483f      	ldr	r0, [pc, #252]	; (6114 <z_nrf_clock_control_lf_on+0x134>)
    6016:	4a40      	ldr	r2, [pc, #256]	; (6118 <z_nrf_clock_control_lf_on+0x138>)
    6018:	f44f 7308 	mov.w	r3, #544	; 0x220
    601c:	f006 ff33 	bl	ce86 <assert_print>
    6020:	483d      	ldr	r0, [pc, #244]	; (6118 <z_nrf_clock_control_lf_on+0x138>)
    6022:	f44f 7108 	mov.w	r1, #544	; 0x220
    6026:	f006 ff27 	bl	ce78 <assert_post_action>
	switch (start_mode) {
    602a:	b396      	cbz	r6, 6092 <z_nrf_clock_control_lf_on+0xb2>
    602c:	1e73      	subs	r3, r6, #1
    602e:	2b01      	cmp	r3, #1
    6030:	d853      	bhi.n	60da <z_nrf_clock_control_lf_on+0xfa>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6032:	2e01      	cmp	r6, #1
    6034:	d107      	bne.n	6046 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6036:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    603a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    603e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6042:	2b01      	cmp	r3, #1
    6044:	d025      	beq.n	6092 <z_nrf_clock_control_lf_on+0xb2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6046:	f007 fc9f 	bl	d988 <k_is_in_isr>
    604a:	4604      	mov	r4, r0
    604c:	b918      	cbnz	r0, 6056 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    604e:	4b33      	ldr	r3, [pc, #204]	; (611c <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    6050:	781b      	ldrb	r3, [r3, #0]
    6052:	2b00      	cmp	r3, #0
    6054:	d14f      	bne.n	60f6 <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    6056:	f04f 0320 	mov.w	r3, #32
    605a:	f3ef 8711 	mrs	r7, BASEPRI
    605e:	f383 8812 	msr	BASEPRI_MAX, r3
    6062:	f3bf 8f6f 	isb	sy
    6066:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6068:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6120 <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    606c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    6070:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6074:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    6078:	03d2      	lsls	r2, r2, #15
    607a:	d50c      	bpl.n	6096 <z_nrf_clock_control_lf_on+0xb6>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    607c:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6080:	2b01      	cmp	r3, #1
    6082:	d001      	beq.n	6088 <z_nrf_clock_control_lf_on+0xa8>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6084:	2e01      	cmp	r6, #1
    6086:	d106      	bne.n	6096 <z_nrf_clock_control_lf_on+0xb6>
	if (isr_mode) {
    6088:	b30c      	cbz	r4, 60ce <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
    608a:	f387 8811 	msr	BASEPRI, r7
    608e:	f3bf 8f6f 	isb	sy
}
    6092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    6096:	b1ac      	cbz	r4, 60c4 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    6098:	4638      	mov	r0, r7
    609a:	f7fe fc01 	bl	48a0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    609e:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    60a2:	2b00      	cmp	r3, #0
    60a4:	d1e4      	bne.n	6070 <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    60a6:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    60aa:	2a00      	cmp	r2, #0
    60ac:	d0e0      	beq.n	6070 <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60ae:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    60b2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    60b6:	2301      	movs	r3, #1
    60b8:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    60bc:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60c0:	60ab      	str	r3, [r5, #8]
}
    60c2:	e7d5      	b.n	6070 <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    60c4:	2100      	movs	r1, #0
    60c6:	2021      	movs	r0, #33	; 0x21
    60c8:	f003 fff0 	bl	a0ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    60cc:	e7e7      	b.n	609e <z_nrf_clock_control_lf_on+0xbe>
    p_reg->INTENSET = mask;
    60ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60d2:	2202      	movs	r2, #2
    60d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    60d8:	e7db      	b.n	6092 <z_nrf_clock_control_lf_on+0xb2>
		__ASSERT_NO_MSG(false);
    60da:	4912      	ldr	r1, [pc, #72]	; (6124 <z_nrf_clock_control_lf_on+0x144>)
    60dc:	480d      	ldr	r0, [pc, #52]	; (6114 <z_nrf_clock_control_lf_on+0x134>)
    60de:	4a0e      	ldr	r2, [pc, #56]	; (6118 <z_nrf_clock_control_lf_on+0x138>)
    60e0:	f240 2332 	movw	r3, #562	; 0x232
    60e4:	f006 fecf 	bl	ce86 <assert_print>
}
    60e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    60ec:	480a      	ldr	r0, [pc, #40]	; (6118 <z_nrf_clock_control_lf_on+0x138>)
    60ee:	f240 2132 	movw	r1, #562	; 0x232
    60f2:	f006 bec1 	b.w	ce78 <assert_post_action>
    p_reg->INTENCLR = mask;
    60f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60fa:	2202      	movs	r2, #2
    60fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    6100:	4607      	mov	r7, r0
}
    6102:	e7b1      	b.n	6068 <z_nrf_clock_control_lf_on+0x88>
    6104:	20000fe8 	.word	0x20000fe8
    6108:	20000f7c 	.word	0x20000f7c
    610c:	20000fac 	.word	0x20000fac
    6110:	0000f062 	.word	0x0000f062
    6114:	0000eb06 	.word	0x0000eb06
    6118:	0000fc5d 	.word	0x0000fc5d
    611c:	2000d70e 	.word	0x2000d70e
    6120:	e000e100 	.word	0xe000e100
    6124:	0000f7bd 	.word	0x0000f7bd

00006128 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    6128:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    612a:	4b08      	ldr	r3, [pc, #32]	; (614c <uart_console_init+0x24>)
    612c:	4808      	ldr	r0, [pc, #32]	; (6150 <uart_console_init+0x28>)
    612e:	6018      	str	r0, [r3, #0]
    6130:	f007 fbf0 	bl	d914 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    6134:	b138      	cbz	r0, 6146 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    6136:	4807      	ldr	r0, [pc, #28]	; (6154 <uart_console_init+0x2c>)
    6138:	f7ff faae 	bl	5698 <__stdout_hook_install>
	__printk_hook_install(console_out);
    613c:	4805      	ldr	r0, [pc, #20]	; (6154 <uart_console_init+0x2c>)
    613e:	f7fc fdd3 	bl	2ce8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    6142:	2000      	movs	r0, #0
}
    6144:	bd08      	pop	{r3, pc}
		return -ENODEV;
    6146:	f06f 0012 	mvn.w	r0, #18
    614a:	e7fb      	b.n	6144 <uart_console_init+0x1c>
    614c:	20000fec 	.word	0x20000fec
    6150:	0000e1f4 	.word	0x0000e1f4
    6154:	00006159 	.word	0x00006159

00006158 <console_out>:
	if ('\n' == c) {
    6158:	280a      	cmp	r0, #10
{
    615a:	b538      	push	{r3, r4, r5, lr}
    615c:	4d07      	ldr	r5, [pc, #28]	; (617c <console_out+0x24>)
    615e:	4604      	mov	r4, r0
	if ('\n' == c) {
    6160:	d104      	bne.n	616c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    6162:	6828      	ldr	r0, [r5, #0]
    6164:	6883      	ldr	r3, [r0, #8]
    6166:	210d      	movs	r1, #13
    6168:	69db      	ldr	r3, [r3, #28]
    616a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    616c:	6828      	ldr	r0, [r5, #0]
    616e:	6883      	ldr	r3, [r0, #8]
    6170:	b2e1      	uxtb	r1, r4
    6172:	69db      	ldr	r3, [r3, #28]
    6174:	4798      	blx	r3
}
    6176:	4620      	mov	r0, r4
    6178:	bd38      	pop	{r3, r4, r5, pc}
    617a:	bf00      	nop
    617c:	20000fec 	.word	0x20000fec

00006180 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    6180:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    6182:	6905      	ldr	r5, [r0, #16]
{
    6184:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    6186:	460c      	mov	r4, r1
    6188:	b961      	cbnz	r1, 61a4 <gpio_nrfx_manage_callback+0x24>
    618a:	4922      	ldr	r1, [pc, #136]	; (6214 <gpio_nrfx_manage_callback+0x94>)
    618c:	4a22      	ldr	r2, [pc, #136]	; (6218 <gpio_nrfx_manage_callback+0x98>)
    618e:	4823      	ldr	r0, [pc, #140]	; (621c <gpio_nrfx_manage_callback+0x9c>)
    6190:	2324      	movs	r3, #36	; 0x24
    6192:	f006 fe78 	bl	ce86 <assert_print>
    6196:	4822      	ldr	r0, [pc, #136]	; (6220 <gpio_nrfx_manage_callback+0xa0>)
    6198:	f006 fe75 	bl	ce86 <assert_print>
    619c:	481e      	ldr	r0, [pc, #120]	; (6218 <gpio_nrfx_manage_callback+0x98>)
    619e:	2124      	movs	r1, #36	; 0x24
    61a0:	f006 fe6a 	bl	ce78 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    61a4:	6863      	ldr	r3, [r4, #4]
    61a6:	b963      	cbnz	r3, 61c2 <gpio_nrfx_manage_callback+0x42>
    61a8:	491e      	ldr	r1, [pc, #120]	; (6224 <gpio_nrfx_manage_callback+0xa4>)
    61aa:	4a1b      	ldr	r2, [pc, #108]	; (6218 <gpio_nrfx_manage_callback+0x98>)
    61ac:	481b      	ldr	r0, [pc, #108]	; (621c <gpio_nrfx_manage_callback+0x9c>)
    61ae:	2325      	movs	r3, #37	; 0x25
    61b0:	f006 fe69 	bl	ce86 <assert_print>
    61b4:	481c      	ldr	r0, [pc, #112]	; (6228 <gpio_nrfx_manage_callback+0xa8>)
    61b6:	f006 fe66 	bl	ce86 <assert_print>
    61ba:	4817      	ldr	r0, [pc, #92]	; (6218 <gpio_nrfx_manage_callback+0x98>)
    61bc:	2125      	movs	r1, #37	; 0x25
    61be:	f006 fe5b 	bl	ce78 <assert_post_action>
	return list->head;
    61c2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    61c4:	b15b      	cbz	r3, 61de <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    61c6:	2200      	movs	r2, #0
    61c8:	429c      	cmp	r4, r3
    61ca:	d112      	bne.n	61f2 <gpio_nrfx_manage_callback+0x72>
	return node->next;
    61cc:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    61ce:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    61d0:	b952      	cbnz	r2, 61e8 <gpio_nrfx_manage_callback+0x68>
    61d2:	42a1      	cmp	r1, r4
	list->head = node;
    61d4:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    61d6:	d100      	bne.n	61da <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    61d8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    61da:	2300      	movs	r3, #0
    61dc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    61de:	b96e      	cbnz	r6, 61fc <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    61e0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    61e2:	bd70      	pop	{r4, r5, r6, pc}
    61e4:	460b      	mov	r3, r1
    61e6:	e7ef      	b.n	61c8 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_REMOVE(slist, snode)
    61e8:	42a1      	cmp	r1, r4
	parent->next = child;
    61ea:	6013      	str	r3, [r2, #0]
	list->tail = node;
    61ec:	bf08      	it	eq
    61ee:	60aa      	streq	r2, [r5, #8]
}
    61f0:	e7f3      	b.n	61da <gpio_nrfx_manage_callback+0x5a>
	return node->next;
    61f2:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    61f4:	461a      	mov	r2, r3
    61f6:	2900      	cmp	r1, #0
    61f8:	d1f4      	bne.n	61e4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    61fa:	b13e      	cbz	r6, 620c <gpio_nrfx_manage_callback+0x8c>
Z_GENLIST_PREPEND(slist, snode)
    61fc:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    61fe:	686b      	ldr	r3, [r5, #4]
    6200:	6023      	str	r3, [r4, #0]
	list->head = node;
    6202:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    6204:	2800      	cmp	r0, #0
    6206:	d1eb      	bne.n	61e0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    6208:	60ac      	str	r4, [r5, #8]
}
    620a:	e7ea      	b.n	61e2 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    620c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6210:	e7e7      	b.n	61e2 <gpio_nrfx_manage_callback+0x62>
    6212:	bf00      	nop
    6214:	0000fd0b 	.word	0x0000fd0b
    6218:	0000fcde 	.word	0x0000fcde
    621c:	0000eb06 	.word	0x0000eb06
    6220:	0000fd14 	.word	0x0000fd14
    6224:	0000fd23 	.word	0x0000fd23
    6228:	0000fd35 	.word	0x0000fd35

0000622c <gpio_nrfx_pin_interrupt_configure>:
{
    622c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    622e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6230:	7b05      	ldrb	r5, [r0, #12]
    6232:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    6236:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    623a:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    623e:	f04f 0500 	mov.w	r5, #0
    6242:	d104      	bne.n	624e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    6244:	4620      	mov	r0, r4
    6246:	f001 fe6d 	bl	7f24 <nrfx_gpiote_trigger_disable>
	return 0;
    624a:	2000      	movs	r0, #0
    624c:	e054      	b.n	62f8 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    624e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    6252:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    6256:	d151      	bne.n	62fc <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    6258:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    625c:	bf0c      	ite	eq
    625e:	2304      	moveq	r3, #4
    6260:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    6262:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    6266:	6883      	ldr	r3, [r0, #8]
    6268:	fa23 f101 	lsr.w	r1, r3, r1
    626c:	f011 0101 	ands.w	r1, r1, #1
    6270:	d155      	bne.n	631e <gpio_nrfx_pin_interrupt_configure+0xf2>
    6272:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    6276:	d152      	bne.n	631e <gpio_nrfx_pin_interrupt_configure+0xf2>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    6278:	0966      	lsrs	r6, r4, #5
    627a:	d04a      	beq.n	6312 <gpio_nrfx_pin_interrupt_configure+0xe6>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
    627c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6280:	2e01      	cmp	r6, #1
    6282:	bf08      	it	eq
    6284:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
    6286:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    628a:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    628c:	07ca      	lsls	r2, r1, #31
    628e:	d40b      	bmi.n	62a8 <gpio_nrfx_pin_interrupt_configure+0x7c>
    6290:	492b      	ldr	r1, [pc, #172]	; (6340 <gpio_nrfx_pin_interrupt_configure+0x114>)
    6292:	482c      	ldr	r0, [pc, #176]	; (6344 <gpio_nrfx_pin_interrupt_configure+0x118>)
    6294:	4a2c      	ldr	r2, [pc, #176]	; (6348 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    6296:	f240 2329 	movw	r3, #553	; 0x229
    629a:	f006 fdf4 	bl	ce86 <assert_print>
    629e:	482a      	ldr	r0, [pc, #168]	; (6348 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    62a0:	f240 2129 	movw	r1, #553	; 0x229
    62a4:	f006 fde8 	bl	ce78 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    62a8:	b16e      	cbz	r6, 62c6 <gpio_nrfx_pin_interrupt_configure+0x9a>
    62aa:	2e01      	cmp	r6, #1
    62ac:	d034      	beq.n	6318 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    62ae:	4927      	ldr	r1, [pc, #156]	; (634c <gpio_nrfx_pin_interrupt_configure+0x120>)
    62b0:	4824      	ldr	r0, [pc, #144]	; (6344 <gpio_nrfx_pin_interrupt_configure+0x118>)
    62b2:	4a25      	ldr	r2, [pc, #148]	; (6348 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    62b4:	f240 232e 	movw	r3, #558	; 0x22e
    62b8:	f006 fde5 	bl	ce86 <assert_print>
    62bc:	4822      	ldr	r0, [pc, #136]	; (6348 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    62be:	f240 212e 	movw	r1, #558	; 0x22e
    62c2:	f006 fdd9 	bl	ce78 <assert_post_action>
        case 0: return NRF_P0;
    62c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    62ca:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    62ce:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    62d2:	07db      	lsls	r3, r3, #31
    62d4:	d423      	bmi.n	631e <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    62d6:	f10d 0507 	add.w	r5, sp, #7
    62da:	4629      	mov	r1, r5
    62dc:	4620      	mov	r0, r4
    62de:	f001 fd45 	bl	7d6c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    62e2:	4b1b      	ldr	r3, [pc, #108]	; (6350 <gpio_nrfx_pin_interrupt_configure+0x124>)
    62e4:	4298      	cmp	r0, r3
    62e6:	d119      	bne.n	631c <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    62e8:	4628      	mov	r0, r5
    62ea:	f001 fda1 	bl	7e30 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    62ee:	4b19      	ldr	r3, [pc, #100]	; (6354 <gpio_nrfx_pin_interrupt_configure+0x128>)
    62f0:	4298      	cmp	r0, r3
    62f2:	d013      	beq.n	631c <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    62f4:	f06f 000b 	mvn.w	r0, #11
}
    62f8:	b004      	add	sp, #16
    62fa:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    62fc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    6300:	d005      	beq.n	630e <gpio_nrfx_pin_interrupt_configure+0xe2>
    6302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    6306:	bf0c      	ite	eq
    6308:	2302      	moveq	r3, #2
    630a:	2301      	movne	r3, #1
    630c:	e7a9      	b.n	6262 <gpio_nrfx_pin_interrupt_configure+0x36>
    630e:	2303      	movs	r3, #3
    6310:	e7a7      	b.n	6262 <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    6312:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6316:	e7b6      	b.n	6286 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6318:	4b0f      	ldr	r3, [pc, #60]	; (6358 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    631a:	e7d6      	b.n	62ca <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    631c:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    631e:	2300      	movs	r3, #0
    6320:	4619      	mov	r1, r3
    6322:	aa02      	add	r2, sp, #8
    6324:	4620      	mov	r0, r4
    6326:	f001 fbf9 	bl	7b1c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    632a:	4b0a      	ldr	r3, [pc, #40]	; (6354 <gpio_nrfx_pin_interrupt_configure+0x128>)
    632c:	4298      	cmp	r0, r3
    632e:	d104      	bne.n	633a <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    6330:	2101      	movs	r1, #1
    6332:	4620      	mov	r0, r4
    6334:	f001 fd82 	bl	7e3c <nrfx_gpiote_trigger_enable>
    6338:	e787      	b.n	624a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    633a:	f06f 0004 	mvn.w	r0, #4
    633e:	e7db      	b.n	62f8 <gpio_nrfx_pin_interrupt_configure+0xcc>
    6340:	0000fd7f 	.word	0x0000fd7f
    6344:	0000eb06 	.word	0x0000eb06
    6348:	0000fd4c 	.word	0x0000fd4c
    634c:	0000f7bd 	.word	0x0000f7bd
    6350:	0bad0004 	.word	0x0bad0004
    6354:	0bad0000 	.word	0x0bad0000
    6358:	50000300 	.word	0x50000300

0000635c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    635c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    635e:	f001 fd57 	bl	7e10 <nrfx_gpiote_is_init>
    6362:	4604      	mov	r4, r0
    6364:	b968      	cbnz	r0, 6382 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    6366:	f001 fd2b 	bl	7dc0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    636a:	4b08      	ldr	r3, [pc, #32]	; (638c <gpio_nrfx_init+0x30>)
    636c:	4298      	cmp	r0, r3
    636e:	d10a      	bne.n	6386 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    6370:	4807      	ldr	r0, [pc, #28]	; (6390 <gpio_nrfx_init+0x34>)
    6372:	4621      	mov	r1, r4
    6374:	f001 fcf4 	bl	7d60 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    6378:	4622      	mov	r2, r4
    637a:	2105      	movs	r1, #5
    637c:	2006      	movs	r0, #6
    637e:	f7fe fb07 	bl	4990 <z_arm_irq_priority_set>
		return 0;
    6382:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    6384:	bd10      	pop	{r4, pc}
		return -EIO;
    6386:	f06f 0004 	mvn.w	r0, #4
    638a:	e7fb      	b.n	6384 <gpio_nrfx_init+0x28>
    638c:	0bad0000 	.word	0x0bad0000
    6390:	00006395 	.word	0x00006395

00006394 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6394:	0943      	lsrs	r3, r0, #5
{
    6396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    639a:	d003      	beq.n	63a4 <nrfx_gpio_handler+0x10>
    639c:	2b01      	cmp	r3, #1
    639e:	d02e      	beq.n	63fe <nrfx_gpio_handler+0x6a>
}
    63a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    63a4:	4f17      	ldr	r7, [pc, #92]	; (6404 <nrfx_gpio_handler+0x70>)
	gpio_fire_callbacks(list, port, BIT(pin));
    63a6:	693b      	ldr	r3, [r7, #16]
    63a8:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    63aa:	2c00      	cmp	r4, #0
    63ac:	d0f8      	beq.n	63a0 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    63ae:	f000 001f 	and.w	r0, r0, #31
    63b2:	2601      	movs	r6, #1
	return node->next;
    63b4:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    63b6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 6408 <nrfx_gpio_handler+0x74>
    63ba:	f8df 9050 	ldr.w	r9, [pc, #80]	; 640c <nrfx_gpio_handler+0x78>
    63be:	f8df a050 	ldr.w	sl, [pc, #80]	; 6410 <nrfx_gpio_handler+0x7c>
    63c2:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    63c4:	68a3      	ldr	r3, [r4, #8]
    63c6:	421e      	tst	r6, r3
    63c8:	d014      	beq.n	63f4 <nrfx_gpio_handler+0x60>
			__ASSERT(cb->handler, "No callback handler!");
    63ca:	6863      	ldr	r3, [r4, #4]
    63cc:	b963      	cbnz	r3, 63e8 <nrfx_gpio_handler+0x54>
    63ce:	4649      	mov	r1, r9
    63d0:	2345      	movs	r3, #69	; 0x45
    63d2:	4642      	mov	r2, r8
    63d4:	4650      	mov	r0, sl
    63d6:	f006 fd56 	bl	ce86 <assert_print>
    63da:	480e      	ldr	r0, [pc, #56]	; (6414 <nrfx_gpio_handler+0x80>)
    63dc:	f006 fd53 	bl	ce86 <assert_print>
    63e0:	2145      	movs	r1, #69	; 0x45
    63e2:	4640      	mov	r0, r8
    63e4:	f006 fd48 	bl	ce78 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    63e8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    63ec:	4621      	mov	r1, r4
    63ee:	4032      	ands	r2, r6
    63f0:	4638      	mov	r0, r7
    63f2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    63f4:	2d00      	cmp	r5, #0
    63f6:	d0d3      	beq.n	63a0 <nrfx_gpio_handler+0xc>
    63f8:	462c      	mov	r4, r5
    63fa:	682d      	ldr	r5, [r5, #0]
    63fc:	e7e2      	b.n	63c4 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    63fe:	4f06      	ldr	r7, [pc, #24]	; (6418 <nrfx_gpio_handler+0x84>)
    6400:	e7d1      	b.n	63a6 <nrfx_gpio_handler+0x12>
    6402:	bf00      	nop
    6404:	0000e1ac 	.word	0x0000e1ac
    6408:	0000fcde 	.word	0x0000fcde
    640c:	0000fda2 	.word	0x0000fda2
    6410:	0000eb06 	.word	0x0000eb06
    6414:	0000fd35 	.word	0x0000fd35
    6418:	0000e1c4 	.word	0x0000e1c4

0000641c <gpio_nrfx_pin_configure>:
{
    641c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    6420:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6422:	7b3b      	ldrb	r3, [r7, #12]
    6424:	f001 051f 	and.w	r5, r1, #31
{
    6428:	b085      	sub	sp, #20
    642a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    642c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    6430:	4614      	mov	r4, r2
    6432:	b9ca      	cbnz	r2, 6468 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    6434:	a902      	add	r1, sp, #8
    6436:	4628      	mov	r0, r5
    6438:	f001 fc98 	bl	7d6c <nrfx_gpiote_channel_get>
    643c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    643e:	4628      	mov	r0, r5
    6440:	f001 fd9a 	bl	7f78 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    6444:	4b4a      	ldr	r3, [pc, #296]	; (6570 <gpio_nrfx_pin_configure+0x154>)
    6446:	4298      	cmp	r0, r3
    6448:	d004      	beq.n	6454 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    644a:	f06f 0004 	mvn.w	r0, #4
}
    644e:	b005      	add	sp, #20
    6450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    6454:	4284      	cmp	r4, r0
    6456:	d105      	bne.n	6464 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    6458:	f89d 0008 	ldrb.w	r0, [sp, #8]
    645c:	f001 fce2 	bl	7e24 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    6460:	42a0      	cmp	r0, r4
    6462:	d1f2      	bne.n	644a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6464:	2000      	movs	r0, #0
    6466:	e7f2      	b.n	644e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    6468:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    646c:	f10d 0103 	add.w	r1, sp, #3
    6470:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    6472:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    6476:	f001 fc79 	bl	7d6c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    647a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    647c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    647e:	aa02      	add	r2, sp, #8
    6480:	4649      	mov	r1, r9
    6482:	4628      	mov	r0, r5
    6484:	f001 fb4a 	bl	7b1c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6488:	4b39      	ldr	r3, [pc, #228]	; (6570 <gpio_nrfx_pin_configure+0x154>)
    648a:	4298      	cmp	r0, r3
    648c:	d002      	beq.n	6494 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    648e:	f06f 0015 	mvn.w	r0, #21
    6492:	e7dc      	b.n	644e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    6494:	4580      	cmp	r8, r0
    6496:	d103      	bne.n	64a0 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    6498:	f89d 0003 	ldrb.w	r0, [sp, #3]
    649c:	f001 fcc2 	bl	7e24 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    64a0:	03a3      	lsls	r3, r4, #14
    64a2:	d551      	bpl.n	6548 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    64a4:	f240 6306 	movw	r3, #1542	; 0x606
    64a8:	4023      	ands	r3, r4
    64aa:	f240 2206 	movw	r2, #518	; 0x206
    64ae:	4293      	cmp	r3, r2
    64b0:	d03b      	beq.n	652a <gpio_nrfx_pin_configure+0x10e>
    64b2:	d80c      	bhi.n	64ce <gpio_nrfx_pin_configure+0xb2>
    64b4:	2b06      	cmp	r3, #6
    64b6:	d015      	beq.n	64e4 <gpio_nrfx_pin_configure+0xc8>
    64b8:	d804      	bhi.n	64c4 <gpio_nrfx_pin_configure+0xa8>
    64ba:	b19b      	cbz	r3, 64e4 <gpio_nrfx_pin_configure+0xc8>
    64bc:	2b02      	cmp	r3, #2
    64be:	d1e6      	bne.n	648e <gpio_nrfx_pin_configure+0x72>
    64c0:	2304      	movs	r3, #4
    64c2:	e00f      	b.n	64e4 <gpio_nrfx_pin_configure+0xc8>
    64c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    64c8:	d1e1      	bne.n	648e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    64ca:	2301      	movs	r3, #1
    64cc:	e00a      	b.n	64e4 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    64ce:	f240 4202 	movw	r2, #1026	; 0x402
    64d2:	4293      	cmp	r3, r2
    64d4:	d02b      	beq.n	652e <gpio_nrfx_pin_configure+0x112>
    64d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    64da:	d02a      	beq.n	6532 <gpio_nrfx_pin_configure+0x116>
    64dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    64e0:	d1d5      	bne.n	648e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    64e2:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    64e4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    64e8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    64ec:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    64f0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    64f2:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    64f6:	bf54      	ite	pl
    64f8:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    64fc:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    64fe:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    6500:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    6504:	d517      	bpl.n	6536 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	2101      	movs	r1, #1
    650a:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    650e:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    6512:	2200      	movs	r2, #0
    6514:	a901      	add	r1, sp, #4
    6516:	4628      	mov	r0, r5
    6518:	f001 fbae 	bl	7c78 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    651c:	4b14      	ldr	r3, [pc, #80]	; (6570 <gpio_nrfx_pin_configure+0x154>)
    651e:	4298      	cmp	r0, r3
    6520:	bf14      	ite	ne
    6522:	f06f 0015 	mvnne.w	r0, #21
    6526:	2000      	moveq	r0, #0
    6528:	e791      	b.n	644e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    652a:	2307      	movs	r3, #7
    652c:	e7da      	b.n	64e4 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    652e:	2305      	movs	r3, #5
    6530:	e7d8      	b.n	64e4 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    6532:	2303      	movs	r3, #3
    6534:	e7d6      	b.n	64e4 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    6536:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    6538:	bf41      	itttt	mi
    653a:	687b      	ldrmi	r3, [r7, #4]
    653c:	2101      	movmi	r1, #1
    653e:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    6542:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    6546:	e7e4      	b.n	6512 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    6548:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    654a:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    654e:	bf54      	ite	pl
    6550:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    6554:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6556:	461a      	mov	r2, r3
    6558:	a901      	add	r1, sp, #4
    655a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    655c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6560:	f001 fadc 	bl	7b1c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6564:	4b02      	ldr	r3, [pc, #8]	; (6570 <gpio_nrfx_pin_configure+0x154>)
    6566:	4298      	cmp	r0, r3
    6568:	f43f af7c 	beq.w	6464 <gpio_nrfx_pin_configure+0x48>
    656c:	e78f      	b.n	648e <gpio_nrfx_pin_configure+0x72>
    656e:	bf00      	nop
    6570:	0bad0000 	.word	0x0bad0000

00006574 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    6574:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6576:	ab0b      	add	r3, sp, #44	; 0x2c
    6578:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    657a:	9303      	str	r3, [sp, #12]
    657c:	4b05      	ldr	r3, [pc, #20]	; (6594 <z_log_msg2_runtime_create.constprop.0+0x20>)
    657e:	9302      	str	r3, [sp, #8]
    6580:	2300      	movs	r3, #0
    6582:	e9cd 3300 	strd	r3, r3, [sp]
    6586:	2201      	movs	r2, #1
    6588:	4618      	mov	r0, r3
    658a:	f7fd fdfd 	bl	4188 <z_impl_z_log_msg2_runtime_vcreate>
}
    658e:	b007      	add	sp, #28
    6590:	f85d fb04 	ldr.w	pc, [sp], #4
    6594:	0000fdbc 	.word	0x0000fdbc

00006598 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    6598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    659c:	461c      	mov	r4, r3
	return config->uarte_regs;
    659e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    65a0:	6907      	ldr	r7, [r0, #16]
{
    65a2:	460e      	mov	r6, r1
    65a4:	4605      	mov	r5, r0
	return config->uarte_regs;
    65a6:	6819      	ldr	r1, [r3, #0]
	__asm__ volatile(
    65a8:	f04f 0320 	mov.w	r3, #32
    65ac:	f3ef 8811 	mrs	r8, BASEPRI
    65b0:	f383 8812 	msr	BASEPRI_MAX, r3
    65b4:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	int key = irq_lock();

	if (data->async->tx_size) {
    65b8:	68f8      	ldr	r0, [r7, #12]
    65ba:	68c3      	ldr	r3, [r0, #12]
    65bc:	b143      	cbz	r3, 65d0 <uarte_nrfx_tx+0x38>
	__asm__ volatile(
    65be:	f388 8811 	msr	BASEPRI, r8
    65c2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    65c6:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    65ca:	b002      	add	sp, #8
    65cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    65d0:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
	data->async->tx_size = len;
    65d4:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    65d6:	6086      	str	r6, [r0, #8]
    65d8:	f8c1 c304 	str.w	ip, [r1, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    65dc:	f006 4160 	and.w	r1, r6, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    65e0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    65e4:	d128      	bne.n	6638 <uarte_nrfx_tx+0xa0>
		data->async->xfer_len = len;
    65e6:	e9c0 6204 	strd	r6, r2, [r0, #16]
	start_tx_locked(dev, data);
    65ea:	4639      	mov	r1, r7
    65ec:	4628      	mov	r0, r5
    65ee:	f006 ff65 	bl	d4bc <start_tx_locked>
    65f2:	f388 8811 	msr	BASEPRI, r8
    65f6:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    65fa:	7afb      	ldrb	r3, [r7, #11]
    65fc:	2b01      	cmp	r3, #1
    65fe:	d119      	bne.n	6634 <uarte_nrfx_tx+0x9c>
	    && timeout != SYS_FOREVER_US) {
    6600:	1c63      	adds	r3, r4, #1
    6602:	d017      	beq.n	6634 <uarte_nrfx_tx+0x9c>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    6604:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
    6608:	480d      	ldr	r0, [pc, #52]	; (6640 <uarte_nrfx_tx+0xa8>)
    660a:	68fe      	ldr	r6, [r7, #12]
    660c:	4a0d      	ldr	r2, [pc, #52]	; (6644 <uarte_nrfx_tx+0xac>)
    660e:	2400      	movs	r4, #0
    6610:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    6614:	4621      	mov	r1, r4
    6616:	2300      	movs	r3, #0
    6618:	fbc5 0107 	smlal	r0, r1, r5, r7
    661c:	f7fa fa54 	bl	ac8 <__aeabi_uldivmod>
    6620:	3628      	adds	r6, #40	; 0x28
    6622:	4602      	mov	r2, r0
    6624:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    6626:	2000      	movs	r0, #0
    6628:	2100      	movs	r1, #0
    662a:	e9cd 0100 	strd	r0, r1, [sp]
    662e:	4630      	mov	r0, r6
    6630:	f004 fa00 	bl	aa34 <z_impl_k_timer_start>
	return 0;
    6634:	2000      	movs	r0, #0
    6636:	e7c8      	b.n	65ca <uarte_nrfx_tx+0x32>
		data->async->tx_cache_offset = 0;
    6638:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    663a:	f006 fef4 	bl	d426 <setup_tx_cache.isra.0>
    663e:	e7d4      	b.n	65ea <uarte_nrfx_tx+0x52>
    6640:	000f423f 	.word	0x000f423f
    6644:	000f4240 	.word	0x000f4240

00006648 <uarte_nrfx_configure>:
{
    6648:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    664a:	794b      	ldrb	r3, [r1, #5]
    664c:	2b01      	cmp	r3, #1
    664e:	d026      	beq.n	669e <uarte_nrfx_configure+0x56>
    6650:	2b03      	cmp	r3, #3
    6652:	d121      	bne.n	6698 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    6654:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    6656:	798b      	ldrb	r3, [r1, #6]
    6658:	2b03      	cmp	r3, #3
    665a:	d11d      	bne.n	6698 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    665c:	79cc      	ldrb	r4, [r1, #7]
    665e:	b10c      	cbz	r4, 6664 <uarte_nrfx_configure+0x1c>
    6660:	2c01      	cmp	r4, #1
    6662:	d119      	bne.n	6698 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    6664:	790a      	ldrb	r2, [r1, #4]
    6666:	b112      	cbz	r2, 666e <uarte_nrfx_configure+0x26>
    6668:	2a02      	cmp	r2, #2
    666a:	d115      	bne.n	6698 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    666c:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    666e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    6670:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    6672:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    6676:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    6678:	d065      	beq.n	6746 <uarte_nrfx_configure+0xfe>
    667a:	d82d      	bhi.n	66d8 <uarte_nrfx_configure+0x90>
    667c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    6680:	d064      	beq.n	674c <uarte_nrfx_configure+0x104>
    6682:	d816      	bhi.n	66b2 <uarte_nrfx_configure+0x6a>
    6684:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    6688:	d062      	beq.n	6750 <uarte_nrfx_configure+0x108>
    668a:	d80a      	bhi.n	66a2 <uarte_nrfx_configure+0x5a>
    668c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    6690:	d061      	beq.n	6756 <uarte_nrfx_configure+0x10e>
    6692:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    6696:	d061      	beq.n	675c <uarte_nrfx_configure+0x114>
    6698:	f06f 0085 	mvn.w	r0, #133	; 0x85
    669c:	e052      	b.n	6744 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    669e:	2600      	movs	r6, #0
    66a0:	e7d9      	b.n	6656 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    66a2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    66a6:	d05c      	beq.n	6762 <uarte_nrfx_configure+0x11a>
    66a8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    66ac:	d1f4      	bne.n	6698 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    66ae:	4b37      	ldr	r3, [pc, #220]	; (678c <uarte_nrfx_configure+0x144>)
    66b0:	e03c      	b.n	672c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    66b2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    66b6:	d057      	beq.n	6768 <uarte_nrfx_configure+0x120>
    66b8:	d807      	bhi.n	66ca <uarte_nrfx_configure+0x82>
    66ba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    66be:	d055      	beq.n	676c <uarte_nrfx_configure+0x124>
    66c0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    66c4:	d1e8      	bne.n	6698 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    66c6:	4b32      	ldr	r3, [pc, #200]	; (6790 <uarte_nrfx_configure+0x148>)
    66c8:	e030      	b.n	672c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    66ca:	f647 2712 	movw	r7, #31250	; 0x7a12
    66ce:	42bb      	cmp	r3, r7
    66d0:	d1e2      	bne.n	6698 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    66d2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    66d6:	e029      	b.n	672c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    66d8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    66dc:	d048      	beq.n	6770 <uarte_nrfx_configure+0x128>
    66de:	d813      	bhi.n	6708 <uarte_nrfx_configure+0xc0>
    66e0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    66e4:	d047      	beq.n	6776 <uarte_nrfx_configure+0x12e>
    66e6:	d809      	bhi.n	66fc <uarte_nrfx_configure+0xb4>
    66e8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    66ec:	42bb      	cmp	r3, r7
    66ee:	d044      	beq.n	677a <uarte_nrfx_configure+0x132>
    66f0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    66f4:	d1d0      	bne.n	6698 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    66f6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    66fa:	e017      	b.n	672c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    66fc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    6700:	d1ca      	bne.n	6698 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    6702:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    6706:	e011      	b.n	672c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    6708:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    670c:	d038      	beq.n	6780 <uarte_nrfx_configure+0x138>
    670e:	d808      	bhi.n	6722 <uarte_nrfx_configure+0xda>
    6710:	4f20      	ldr	r7, [pc, #128]	; (6794 <uarte_nrfx_configure+0x14c>)
    6712:	42bb      	cmp	r3, r7
    6714:	d037      	beq.n	6786 <uarte_nrfx_configure+0x13e>
    6716:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    671a:	d1bd      	bne.n	6698 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    671c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    6720:	e004      	b.n	672c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    6722:	4f1d      	ldr	r7, [pc, #116]	; (6798 <uarte_nrfx_configure+0x150>)
    6724:	42bb      	cmp	r3, r7
    6726:	d1b7      	bne.n	6698 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    6728:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    672c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    672e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	data->uart_config = *cfg;
    6732:	1d03      	adds	r3, r0, #4
    6734:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    6736:	4334      	orrs	r4, r6
    6738:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    673a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    673e:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    6742:	2000      	movs	r0, #0
}
    6744:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    6746:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    674a:	e7ef      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    674c:	4b13      	ldr	r3, [pc, #76]	; (679c <uarte_nrfx_configure+0x154>)
    674e:	e7ed      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    6750:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    6754:	e7ea      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    6756:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    675a:	e7e7      	b.n	672c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    675c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    6760:	e7e4      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    6762:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    6766:	e7e1      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    6768:	4b0d      	ldr	r3, [pc, #52]	; (67a0 <uarte_nrfx_configure+0x158>)
    676a:	e7df      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    676c:	4b0d      	ldr	r3, [pc, #52]	; (67a4 <uarte_nrfx_configure+0x15c>)
    676e:	e7dd      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    6770:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    6774:	e7da      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    6776:	4b0c      	ldr	r3, [pc, #48]	; (67a8 <uarte_nrfx_configure+0x160>)
    6778:	e7d8      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    677a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    677e:	e7d5      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    6780:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    6784:	e7d2      	b.n	672c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    6786:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    678a:	e7cf      	b.n	672c <uarte_nrfx_configure+0xe4>
    678c:	0013b000 	.word	0x0013b000
    6790:	004ea000 	.word	0x004ea000
    6794:	0003d090 	.word	0x0003d090
    6798:	000f4240 	.word	0x000f4240
    679c:	00275000 	.word	0x00275000
    67a0:	0075c000 	.word	0x0075c000
    67a4:	003af000 	.word	0x003af000
    67a8:	013a9000 	.word	0x013a9000

000067ac <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    67ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    67b0:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    67b4:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    67b6:	f8d9 5000 	ldr.w	r5, [r9]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    67ba:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
    67be:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    67c0:	2100      	movs	r1, #0
    67c2:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    67c6:	4607      	mov	r7, r0
	data->dev = dev;
    67c8:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    67ca:	aa05      	add	r2, sp, #20
    67cc:	4640      	mov	r0, r8
    67ce:	f006 ff12 	bl	d5f6 <pinctrl_lookup_state>
	if (ret < 0) {
    67d2:	1e04      	subs	r4, r0, #0
    67d4:	db25      	blt.n	6822 <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    67d6:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    67d8:	f8d8 2000 	ldr.w	r2, [r8]
    67dc:	7919      	ldrb	r1, [r3, #4]
    67de:	6818      	ldr	r0, [r3, #0]
    67e0:	f006 ff60 	bl	d6a4 <pinctrl_configure_pins>
	if (err < 0) {
    67e4:	1e04      	subs	r4, r0, #0
    67e6:	db1c      	blt.n	6822 <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    67e8:	1d31      	adds	r1, r6, #4
    67ea:	4638      	mov	r0, r7
    67ec:	f7ff ff2c 	bl	6648 <uarte_nrfx_configure>
	if (err) {
    67f0:	4604      	mov	r4, r0
    67f2:	b9b0      	cbnz	r0, 6822 <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    67f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    67f8:	0799      	lsls	r1, r3, #30
    67fa:	d529      	bpl.n	6850 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    67fc:	f106 0016 	add.w	r0, r6, #22
    6800:	f001 fcb6 	bl	8170 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6804:	4b49      	ldr	r3, [pc, #292]	; (692c <uarte_instance_init.constprop.0+0x180>)
    6806:	4298      	cmp	r0, r3
    6808:	d00f      	beq.n	682a <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    680a:	4b49      	ldr	r3, [pc, #292]	; (6930 <uarte_instance_init.constprop.0+0x184>)
    680c:	9400      	str	r4, [sp, #0]
    680e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    6812:	4620      	mov	r0, r4
    6814:	4623      	mov	r3, r4
    6816:	4947      	ldr	r1, [pc, #284]	; (6934 <uarte_instance_init.constprop.0+0x188>)
    6818:	2201      	movs	r2, #1
    681a:	f7ff feab 	bl	6574 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    681e:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    6822:	4620      	mov	r0, r4
    6824:	b007      	add	sp, #28
    6826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    682a:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    682c:	00c3      	lsls	r3, r0, #3
    682e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6832:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    6836:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    683a:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    683e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6842:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    6846:	4a3c      	ldr	r2, [pc, #240]	; (6938 <uarte_instance_init.constprop.0+0x18c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    6848:	2301      	movs	r3, #1
    684a:	4083      	lsls	r3, r0
    684c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
    6850:	68f3      	ldr	r3, [r6, #12]
    6852:	2b00      	cmp	r3, #0
    6854:	d055      	beq.n	6902 <uarte_instance_init.constprop.0+0x156>
	return config->uarte_regs;
    6856:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    6858:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    685c:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    685e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    p_reg->INTENSET = mask;
    6862:	4936      	ldr	r1, [pc, #216]	; (693c <uarte_instance_init.constprop.0+0x190>)
    6864:	2204      	movs	r2, #4
    6866:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    686a:	2201      	movs	r2, #1
    686c:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    6870:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6874:	2108      	movs	r1, #8
    6876:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    687a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    687e:	b1a1      	cbz	r1, 68aa <uarte_instance_init.constprop.0+0xfe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6880:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6882:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    6886:	b91a      	cbnz	r2, 6890 <uarte_instance_init.constprop.0+0xe4>
    6888:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    688c:	2a00      	cmp	r2, #0
    688e:	d0f8      	beq.n	6882 <uarte_instance_init.constprop.0+0xd6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6890:	2200      	movs	r2, #0
    6892:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    6896:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    689a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    689e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    68a2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    68a6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    68aa:	4925      	ldr	r1, [pc, #148]	; (6940 <uarte_instance_init.constprop.0+0x194>)
    68ac:	2200      	movs	r2, #0
    68ae:	3088      	adds	r0, #136	; 0x88
    68b0:	f007 f8ac 	bl	da0c <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    68b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    68b8:	f8d8 000c 	ldr.w	r0, [r8, #12]
	timer->user_data = user_data;
    68bc:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
    68c0:	4920      	ldr	r1, [pc, #128]	; (6944 <uarte_instance_init.constprop.0+0x198>)
    68c2:	2200      	movs	r2, #0
    68c4:	3028      	adds	r0, #40	; 0x28
    68c6:	f007 f8a1 	bl	da0c <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    68ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
    68ce:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    68d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
    68d6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    68d8:	bf5c      	itt	pl
    68da:	f44f 7280 	movpl.w	r2, #256	; 0x100
    68de:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    68e2:	06db      	lsls	r3, r3, #27
    68e4:	bf44      	itt	mi
    68e6:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    68ea:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    68ee:	3614      	adds	r6, #20
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    68f0:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    68f2:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    68f6:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68fa:	2301      	movs	r3, #1
    68fc:	60ab      	str	r3, [r5, #8]
    68fe:	60eb      	str	r3, [r5, #12]
	return 0;
    6900:	e78f      	b.n	6822 <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6902:	2308      	movs	r3, #8
    6904:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    6908:	f899 3008 	ldrb.w	r3, [r9, #8]
    690c:	2b00      	cmp	r3, #0
    690e:	d1e0      	bne.n	68d2 <uarte_instance_init.constprop.0+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6910:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    6914:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    6918:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    691c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6920:	2301      	movs	r3, #1
    6922:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6926:	602b      	str	r3, [r5, #0]
}
    6928:	e7d3      	b.n	68d2 <uarte_instance_init.constprop.0+0x126>
    692a:	bf00      	nop
    692c:	0bad0000 	.word	0x0bad0000
    6930:	0000fdbc 	.word	0x0000fdbc
    6934:	0000e3ec 	.word	0x0000e3ec
    6938:	4001f000 	.word	0x4001f000
    693c:	000a0210 	.word	0x000a0210
    6940:	0000d52b 	.word	0x0000d52b
    6944:	0000d5e5 	.word	0x0000d5e5

00006948 <uarte_nrfx_poll_out>:
{
    6948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    694a:	6906      	ldr	r6, [r0, #16]
{
    694c:	4604      	mov	r4, r0
    694e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6950:	f007 f81a 	bl	d988 <k_is_in_isr>
    6954:	b910      	cbnz	r0, 695c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    6956:	4b28      	ldr	r3, [pc, #160]	; (69f8 <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
    6958:	781b      	ldrb	r3, [r3, #0]
    695a:	bb5b      	cbnz	r3, 69b4 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    695c:	f04f 0320 	mov.w	r3, #32
    6960:	f3ef 8111 	mrs	r1, BASEPRI
    6964:	f383 8812 	msr	BASEPRI_MAX, r3
    6968:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    696c:	6860      	ldr	r0, [r4, #4]
			key = irq_lock();
    696e:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
    6970:	f006 fd94 	bl	d49c <is_tx_ready.isra.0>
    6974:	b1c8      	cbz	r0, 69aa <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
    6976:	68f3      	ldr	r3, [r6, #12]
    6978:	b15b      	cbz	r3, 6992 <uarte_nrfx_poll_out+0x4a>
    697a:	68da      	ldr	r2, [r3, #12]
    697c:	b14a      	cbz	r2, 6992 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
    697e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    6982:	2a00      	cmp	r2, #0
    6984:	da05      	bge.n	6992 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
    6986:	6862      	ldr	r2, [r4, #4]
    6988:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
    698a:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    698e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    6992:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    6994:	2201      	movs	r2, #1
	data->char_out = c;
    6996:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    699a:	4620      	mov	r0, r4
    699c:	f006 fc34 	bl	d208 <tx_start>
	__asm__ volatile(
    69a0:	f385 8811 	msr	BASEPRI, r5
    69a4:	f3bf 8f6f 	isb	sy
}
    69a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69aa:	f381 8811 	msr	BASEPRI, r1
    69ae:	f3bf 8f6f 	isb	sy
}
    69b2:	e7d3      	b.n	695c <uarte_nrfx_poll_out+0x14>
{
    69b4:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    69b6:	6860      	ldr	r0, [r4, #4]
    69b8:	f006 fd70 	bl	d49c <is_tx_ready.isra.0>
    69bc:	b948      	cbnz	r0, 69d2 <uarte_nrfx_poll_out+0x8a>
    69be:	2001      	movs	r0, #1
    69c0:	f006 ff24 	bl	d80c <nrfx_busy_wait>
    69c4:	3d01      	subs	r5, #1
    69c6:	d1f6      	bne.n	69b6 <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
    69c8:	2100      	movs	r1, #0
    69ca:	2021      	movs	r0, #33	; 0x21
    69cc:	f003 fb6e 	bl	a0ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    69d0:	e7f0      	b.n	69b4 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    69d2:	f04f 0320 	mov.w	r3, #32
    69d6:	f3ef 8511 	mrs	r5, BASEPRI
    69da:	f383 8812 	msr	BASEPRI_MAX, r3
    69de:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    69e2:	6860      	ldr	r0, [r4, #4]
    69e4:	f006 fd5a 	bl	d49c <is_tx_ready.isra.0>
    69e8:	2800      	cmp	r0, #0
    69ea:	d1d2      	bne.n	6992 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    69ec:	f385 8811 	msr	BASEPRI, r5
    69f0:	f3bf 8f6f 	isb	sy
}
    69f4:	e7e8      	b.n	69c8 <uarte_nrfx_poll_out+0x80>
    69f6:	bf00      	nop
    69f8:	2000d70e 	.word	0x2000d70e

000069fc <uarte_nrfx_rx_enable>:
{
    69fc:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
    6a00:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    6a04:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return config->uarte_regs;
    6a08:	f8da 8000 	ldr.w	r8, [sl]
{
    6a0c:	4614      	mov	r4, r2
	if (cfg->disable_rx) {
    6a0e:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
    6a12:	4606      	mov	r6, r0
    6a14:	4689      	mov	r9, r1
	if (cfg->disable_rx) {
    6a16:	b192      	cbz	r2, 6a3e <uarte_nrfx_rx_enable+0x42>
		__ASSERT(false, "TX only UARTE instance");
    6a18:	4a43      	ldr	r2, [pc, #268]	; (6b28 <uarte_nrfx_rx_enable+0x12c>)
    6a1a:	4944      	ldr	r1, [pc, #272]	; (6b2c <uarte_nrfx_rx_enable+0x130>)
    6a1c:	4844      	ldr	r0, [pc, #272]	; (6b30 <uarte_nrfx_rx_enable+0x134>)
    6a1e:	f240 337f 	movw	r3, #895	; 0x37f
    6a22:	f006 fa30 	bl	ce86 <assert_print>
    6a26:	4843      	ldr	r0, [pc, #268]	; (6b34 <uarte_nrfx_rx_enable+0x138>)
    6a28:	f006 fa2d 	bl	ce86 <assert_print>
    6a2c:	483e      	ldr	r0, [pc, #248]	; (6b28 <uarte_nrfx_rx_enable+0x12c>)
    6a2e:	f240 317f 	movw	r1, #895	; 0x37f
    6a32:	f006 fa21 	bl	ce78 <assert_post_action>
		return -ENOTSUP;
    6a36:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6a3a:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
	if (data->async->rx_enabled) {
    6a3e:	f8db 100c 	ldr.w	r1, [fp, #12]
    6a42:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    6a46:	2a00      	cmp	r2, #0
    6a48:	d16b      	bne.n	6b22 <uarte_nrfx_rx_enable+0x126>
		MAX(timeout / RX_TIMEOUT_DIV,
    6a4a:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    6a4e:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    6a50:	bfd2      	itee	le
    6a52:	235c      	movle	r3, #92	; 0x5c
    6a54:	2205      	movgt	r2, #5
    6a56:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    6a5a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    6a5e:	2300      	movs	r3, #0
	data->async->rx_next_buf = NULL;
    6a60:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    6a64:	670b      	str	r3, [r1, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6a66:	f8da 3004 	ldr.w	r3, [sl, #4]
    6a6a:	06da      	lsls	r2, r3, #27
	data->async->rx_buf_len = len;
    6a6c:	e9c1 9418 	strd	r9, r4, [r1, #96]	; 0x60
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6a70:	d523      	bpl.n	6aba <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
    6a72:	f891 70d1 	ldrb.w	r7, [r1, #209]	; 0xd1
    6a76:	b307      	cbz	r7, 6aba <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    6a78:	42a7      	cmp	r7, r4
    6a7a:	bf28      	it	cs
    6a7c:	4627      	movcs	r7, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    6a7e:	4648      	mov	r0, r9
    6a80:	463a      	mov	r2, r7
    6a82:	31cc      	adds	r1, #204	; 0xcc
    6a84:	f006 fff8 	bl	da78 <memcpy>
			if (!len) {
    6a88:	1be4      	subs	r4, r4, r7
			buf += cpy_len;
    6a8a:	44b9      	add	r9, r7
			if (!len) {
    6a8c:	d115      	bne.n	6aba <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
    6a8e:	f8db 200c 	ldr.w	r2, [fp, #12]
    6a92:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    6a96:	1bdb      	subs	r3, r3, r7
    6a98:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    6a9c:	4639      	mov	r1, r7
    6a9e:	4630      	mov	r0, r6
    6aa0:	f006 fbdf 	bl	d262 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    6aa4:	f8db 100c 	ldr.w	r1, [fp, #12]
    6aa8:	4630      	mov	r0, r6
    6aaa:	3160      	adds	r1, #96	; 0x60
    6aac:	f006 fbf2 	bl	d294 <rx_buf_release>
				notify_rx_disable(dev);
    6ab0:	4630      	mov	r0, r6
    6ab2:	f006 fc07 	bl	d2c4 <notify_rx_disable>
	return 0;
    6ab6:	2000      	movs	r0, #0
    6ab8:	e7bf      	b.n	6a3a <uarte_nrfx_rx_enable+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6aba:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6abc:	f8c8 9534 	str.w	r9, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6ac0:	f8c8 4538 	str.w	r4, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ac4:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    6ac8:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
    6acc:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
    6ad0:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
    6ad4:	f8db 300c 	ldr.w	r3, [fp, #12]
    6ad8:	2201      	movs	r2, #1
    6ada:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6ade:	f8da 3004 	ldr.w	r3, [sl, #4]
    6ae2:	06db      	lsls	r3, r3, #27
    6ae4:	d519      	bpl.n	6b1a <uarte_nrfx_rx_enable+0x11e>
	__asm__ volatile(
    6ae6:	f04f 0320 	mov.w	r3, #32
    6aea:	f3ef 8111 	mrs	r1, BASEPRI
    6aee:	f383 8812 	msr	BASEPRI_MAX, r3
    6af2:	f3bf 8f6f 	isb	sy
	if (data->async) {
    6af6:	6933      	ldr	r3, [r6, #16]
	const struct uarte_nrfx_config *config = dev->config;
    6af8:	6870      	ldr	r0, [r6, #4]
	if (data->async) {
    6afa:	68db      	ldr	r3, [r3, #12]
    6afc:	b12b      	cbz	r3, 6b0a <uarte_nrfx_rx_enable+0x10e>
		data->async->low_power_mask |= mask;
    6afe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    6b02:	f042 0202 	orr.w	r2, r2, #2
    6b06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    6b0a:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6b0c:	2208      	movs	r2, #8
    6b0e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    6b12:	f381 8811 	msr	BASEPRI, r1
    6b16:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b1a:	2301      	movs	r3, #1
    6b1c:	f8c8 3000 	str.w	r3, [r8]
    6b20:	e7c9      	b.n	6ab6 <uarte_nrfx_rx_enable+0xba>
		return -EBUSY;
    6b22:	f06f 000f 	mvn.w	r0, #15
    6b26:	e788      	b.n	6a3a <uarte_nrfx_rx_enable+0x3e>
    6b28:	0000fddb 	.word	0x0000fddb
    6b2c:	0000f7bd 	.word	0x0000f7bd
    6b30:	0000eb06 	.word	0x0000eb06
    6b34:	0000fe0f 	.word	0x0000fe0f

00006b38 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    6b38:	6843      	ldr	r3, [r0, #4]
{
    6b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    6b3e:	681d      	ldr	r5, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b40:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    6b44:	b088      	sub	sp, #32
    6b46:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
    6b48:	b171      	cbz	r1, 6b68 <uarte_nrfx_isr_async+0x30>
	struct uarte_nrfx_data *data = dev->data;
    6b4a:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b4c:	2200      	movs	r2, #0
    6b4e:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    6b52:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    6b56:	68da      	ldr	r2, [r3, #12]
    6b58:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    6b5c:	3301      	adds	r3, #1
    6b5e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    6b62:	b008      	add	sp, #32
    6b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b68:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    6b6c:	b313      	cbz	r3, 6bb4 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b6e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    6b72:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6b76:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6b7a:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    6b7e:	2214      	movs	r2, #20
    6b80:	a803      	add	r0, sp, #12
    6b82:	f006 ff87 	bl	da94 <memset>
    6b86:	2306      	movs	r3, #6
    6b88:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    6b8c:	07f3      	lsls	r3, r6, #31
    6b8e:	f100 8100 	bmi.w	6d92 <uarte_nrfx_isr_async+0x25a>
    6b92:	07b7      	lsls	r7, r6, #30
    6b94:	f100 80ff 	bmi.w	6d96 <uarte_nrfx_isr_async+0x25e>
    6b98:	0770      	lsls	r0, r6, #29
    6b9a:	f100 80fe 	bmi.w	6d9a <uarte_nrfx_isr_async+0x262>
    6b9e:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    6ba2:	4620      	mov	r0, r4
    6ba4:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    6ba6:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    6baa:	f006 fb53 	bl	d254 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    6bae:	4620      	mov	r0, r4
    6bb0:	f006 fbe3 	bl	d37a <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6bb4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    6bb8:	b37b      	cbz	r3, 6c1a <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    6bba:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    6bbe:	06d9      	lsls	r1, r3, #27
    6bc0:	d52b      	bpl.n	6c1a <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6bc2:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = dev->data;
    6bc6:	6927      	ldr	r7, [r4, #16]
    6bc8:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    6bcc:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    6bd0:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    6bd2:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    6bd4:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    6bd6:	2301      	movs	r3, #1
    6bd8:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    6bdc:	3088      	adds	r0, #136	; 0x88
    6bde:	f006 ff21 	bl	da24 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    6be2:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    6be4:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    6be8:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    6bec:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    6bee:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    6bf2:	1a1b      	subs	r3, r3, r0
    6bf4:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    6bf6:	6f90      	ldr	r0, [r2, #120]	; 0x78
    6bf8:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    6bfc:	4408      	add	r0, r1
	if (rx_len > 0) {
    6bfe:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    6c00:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    6c02:	dd02      	ble.n	6c0a <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    6c04:	4620      	mov	r0, r4
    6c06:	f006 fb2c 	bl	d262 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    6c0a:	68f9      	ldr	r1, [r7, #12]
    6c0c:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    6c10:	2b00      	cmp	r3, #0
    6c12:	f040 80c4 	bne.w	6d9e <uarte_nrfx_isr_async+0x266>
		data->async->is_in_irq = false;
    6c16:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c1a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    6c1e:	b37b      	cbz	r3, 6c80 <uarte_nrfx_isr_async+0x148>
    6c20:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    6c24:	bb66      	cbnz	r6, 6c80 <uarte_nrfx_isr_async+0x148>
	struct uart_event evt = {
    6c26:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
    6c28:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c2a:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
    6c2e:	4631      	mov	r1, r6
    6c30:	a803      	add	r0, sp, #12
    6c32:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    6c36:	f006 ff2d 	bl	da94 <memset>
    6c3a:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    6c3c:	a903      	add	r1, sp, #12
    6c3e:	4620      	mov	r0, r4
	struct uart_event evt = {
    6c40:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    6c44:	f006 fb06 	bl	d254 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    6c48:	68ff      	ldr	r7, [r7, #12]
    6c4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6c4c:	1c5a      	adds	r2, r3, #1
    6c4e:	d017      	beq.n	6c80 <uarte_nrfx_isr_async+0x148>
		data->async->rx_timeout_left = data->async->rx_timeout;
    6c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    6c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6c58:	4889      	ldr	r0, [pc, #548]	; (6e80 <uarte_nrfx_isr_async+0x348>)
    6c5a:	4a8a      	ldr	r2, [pc, #552]	; (6e84 <uarte_nrfx_isr_async+0x34c>)
    6c5c:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    6c60:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    6c64:	4631      	mov	r1, r6
    6c66:	2300      	movs	r3, #0
    6c68:	fbcc 010e 	smlal	r0, r1, ip, lr
    6c6c:	f7f9 ff2c 	bl	ac8 <__aeabi_uldivmod>
    6c70:	4602      	mov	r2, r0
    6c72:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    6c74:	e9cd 0100 	strd	r0, r1, [sp]
    6c78:	f107 0088 	add.w	r0, r7, #136	; 0x88
    6c7c:	f003 feda 	bl	aa34 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c80:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    6c84:	b333      	cbz	r3, 6cd4 <uarte_nrfx_isr_async+0x19c>
    6c86:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    6c8a:	bb1e      	cbnz	r6, 6cd4 <uarte_nrfx_isr_async+0x19c>
	struct uarte_nrfx_data *data = dev->data;
    6c8c:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c8e:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
    6c92:	68f9      	ldr	r1, [r7, #12]
    6c94:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	const struct uarte_nrfx_config *config = dev->config;
    6c98:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    6c9c:	3160      	adds	r1, #96	; 0x60
    6c9e:	4620      	mov	r0, r4
    6ca0:	f006 faf8 	bl	d294 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    6ca4:	68f9      	ldr	r1, [r7, #12]
    6ca6:	4620      	mov	r0, r4
    6ca8:	316c      	adds	r1, #108	; 0x6c
    6caa:	f006 faf3 	bl	d294 <rx_buf_release>
	if (data->async->rx_enabled) {
    6cae:	68fb      	ldr	r3, [r7, #12]
    6cb0:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    6cb4:	2a00      	cmp	r2, #0
    6cb6:	f000 809f 	beq.w	6df8 <uarte_nrfx_isr_async+0x2c0>
		data->async->rx_enabled = false;
    6cba:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6cbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6cc2:	06d8      	lsls	r0, r3, #27
    6cc4:	d503      	bpl.n	6cce <uarte_nrfx_isr_async+0x196>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    6cc6:	2102      	movs	r1, #2
    6cc8:	4620      	mov	r0, r4
    6cca:	f006 fbc0 	bl	d44e <async_uart_release>
	notify_rx_disable(dev);
    6cce:	4620      	mov	r0, r4
    6cd0:	f006 faf8 	bl	d2c4 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6cd4:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    6cd8:	b1db      	cbz	r3, 6d12 <uarte_nrfx_isr_async+0x1da>
    return p_reg->INTENSET & mask;
    6cda:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    6cde:	05d9      	lsls	r1, r3, #23
    6ce0:	d517      	bpl.n	6d12 <uarte_nrfx_isr_async+0x1da>
	return config->uarte_regs;
    6ce2:	6863      	ldr	r3, [r4, #4]
    6ce4:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    6ce6:	f04f 0120 	mov.w	r1, #32
    6cea:	f3ef 8211 	mrs	r2, BASEPRI
    6cee:	f381 8812 	msr	BASEPRI_MAX, r1
    6cf2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6cf6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6cfa:	b131      	cbz	r1, 6d0a <uarte_nrfx_isr_async+0x1d2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6cfc:	2100      	movs	r1, #0
    6cfe:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6d02:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d06:	2101      	movs	r1, #1
    6d08:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6d0a:	f382 8811 	msr	BASEPRI, r2
    6d0e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6d12:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    6d16:	2b00      	cmp	r3, #0
    6d18:	f43f af23 	beq.w	6b62 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    6d1c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    6d20:	025a      	lsls	r2, r3, #9
    6d22:	f57f af1e 	bpl.w	6b62 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
    6d26:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
    6d28:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6d2a:	e9d3 7300 	ldrd	r7, r3, [r3]
    6d2e:	06db      	lsls	r3, r3, #27
    6d30:	d467      	bmi.n	6e02 <uarte_nrfx_isr_async+0x2ca>
	if (!data->async->tx_buf) {
    6d32:	68eb      	ldr	r3, [r5, #12]
    6d34:	689b      	ldr	r3, [r3, #8]
    6d36:	2b00      	cmp	r3, #0
    6d38:	f43f af13 	beq.w	6b62 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    6d3c:	f04f 0320 	mov.w	r3, #32
    6d40:	f3ef 8211 	mrs	r2, BASEPRI
    6d44:	f383 8812 	msr	BASEPRI_MAX, r3
    6d48:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    6d4c:	68eb      	ldr	r3, [r5, #12]
    6d4e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    6d52:	2900      	cmp	r1, #0
    6d54:	bfac      	ite	ge
    6d56:	f8d3 60c4 	ldrge.w	r6, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    6d5a:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
    6d5e:	f382 8811 	msr	BASEPRI, r2
    6d62:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    6d66:	68e8      	ldr	r0, [r5, #12]
    6d68:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    6d6c:	2b00      	cmp	r3, #0
    6d6e:	d055      	beq.n	6e1c <uarte_nrfx_isr_async+0x2e4>
	__asm__ volatile(
    6d70:	f04f 0320 	mov.w	r3, #32
    6d74:	f3ef 8611 	mrs	r6, BASEPRI
    6d78:	f383 8812 	msr	BASEPRI_MAX, r3
    6d7c:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    6d80:	4629      	mov	r1, r5
    6d82:	4620      	mov	r0, r4
    6d84:	f006 fb9a 	bl	d4bc <start_tx_locked>
	__asm__ volatile(
    6d88:	f386 8811 	msr	BASEPRI, r6
    6d8c:	f3bf 8f6f 	isb	sy
				return;
    6d90:	e6e7      	b.n	6b62 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    6d92:	2601      	movs	r6, #1
    6d94:	e705      	b.n	6ba2 <uarte_nrfx_isr_async+0x6a>
    6d96:	2602      	movs	r6, #2
    6d98:	e703      	b.n	6ba2 <uarte_nrfx_isr_async+0x6a>
    6d9a:	2604      	movs	r6, #4
    6d9c:	e701      	b.n	6ba2 <uarte_nrfx_isr_async+0x6a>
	rx_buf_release(dev, &data->async->rx_buf);
    6d9e:	3160      	adds	r1, #96	; 0x60
    6da0:	4620      	mov	r0, r4
    6da2:	f006 fa77 	bl	d294 <rx_buf_release>
	__asm__ volatile(
    6da6:	f04f 0320 	mov.w	r3, #32
    6daa:	f3ef 8111 	mrs	r1, BASEPRI
    6dae:	f383 8812 	msr	BASEPRI_MAX, r3
    6db2:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    6db6:	68fb      	ldr	r3, [r7, #12]
    6db8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    6dba:	b1d2      	cbz	r2, 6df2 <uarte_nrfx_isr_async+0x2ba>
		data->async->rx_buf = data->async->rx_next_buf;
    6dbc:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    6dbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    6dc0:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    6dc2:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    6dc4:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    6dc8:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6dca:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    6dce:	b90b      	cbnz	r3, 6dd4 <uarte_nrfx_isr_async+0x29c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6dd0:	2301      	movs	r3, #1
    6dd2:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    6dd4:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    6dd8:	f023 0320 	bic.w	r3, r3, #32
    6ddc:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    6de0:	f381 8811 	msr	BASEPRI, r1
    6de4:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    6de8:	68fb      	ldr	r3, [r7, #12]
    6dea:	2200      	movs	r2, #0
    6dec:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    6df0:	e713      	b.n	6c1a <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6df2:	2301      	movs	r3, #1
    6df4:	6073      	str	r3, [r6, #4]
}
    6df6:	e7f3      	b.n	6de0 <uarte_nrfx_isr_async+0x2a8>
		(void)rx_flush(dev, NULL, 0);
    6df8:	6860      	ldr	r0, [r4, #4]
    6dfa:	4611      	mov	r1, r2
    6dfc:	f006 fade 	bl	d3bc <rx_flush.isra.0>
    6e00:	e75d      	b.n	6cbe <uarte_nrfx_isr_async+0x186>
    p_reg->INTENCLR = mask;
    6e02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    6e06:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    6e0a:	2101      	movs	r1, #1
    6e0c:	4620      	mov	r0, r4
    6e0e:	f006 fb1e 	bl	d44e <async_uart_release>
		if (!data->async->tx_size) {
    6e12:	68eb      	ldr	r3, [r5, #12]
    6e14:	68db      	ldr	r3, [r3, #12]
    6e16:	2b00      	cmp	r3, #0
    6e18:	d18b      	bne.n	6d32 <uarte_nrfx_isr_async+0x1fa>
    6e1a:	e6a2      	b.n	6b62 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    6e1c:	6882      	ldr	r2, [r0, #8]
    6e1e:	6903      	ldr	r3, [r0, #16]
    6e20:	429a      	cmp	r2, r3
    6e22:	d00b      	beq.n	6e3c <uarte_nrfx_isr_async+0x304>
		if (amount == data->async->xfer_len) {
    6e24:	6942      	ldr	r2, [r0, #20]
			data->async->tx_cache_offset += amount;
    6e26:	6a03      	ldr	r3, [r0, #32]
		if (amount == data->async->xfer_len) {
    6e28:	42b2      	cmp	r2, r6
			data->async->tx_cache_offset += amount;
    6e2a:	4433      	add	r3, r6
		if (amount == data->async->xfer_len) {
    6e2c:	d125      	bne.n	6e7a <uarte_nrfx_isr_async+0x342>
			data->async->tx_cache_offset += amount;
    6e2e:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    6e30:	f006 faf9 	bl	d426 <setup_tx_cache.isra.0>
    6e34:	2800      	cmp	r0, #0
    6e36:	d19b      	bne.n	6d70 <uarte_nrfx_isr_async+0x238>
			amount = data->async->tx_cache_offset;
    6e38:	68eb      	ldr	r3, [r5, #12]
    6e3a:	6a1e      	ldr	r6, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    6e3c:	68e8      	ldr	r0, [r5, #12]
    6e3e:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    6e40:	f006 fdf0 	bl	da24 <z_impl_k_timer_stop>
	struct uart_event evt = {
    6e44:	2214      	movs	r2, #20
    6e46:	2100      	movs	r1, #0
    6e48:	a803      	add	r0, sp, #12
    6e4a:	f006 fe23 	bl	da94 <memset>
		.data.tx.buf = data->async->tx_buf,
    6e4e:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
    6e50:	689a      	ldr	r2, [r3, #8]
    6e52:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
    6e56:	68da      	ldr	r2, [r3, #12]
    6e58:	4296      	cmp	r6, r2
		evt.type = UART_TX_ABORTED;
    6e5a:	bf1c      	itt	ne
    6e5c:	2201      	movne	r2, #1
    6e5e:	f88d 200c 	strbne.w	r2, [sp, #12]
    6e62:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6e66:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    6e6a:	2200      	movs	r2, #0
    6e6c:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    6e6e:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    6e70:	a903      	add	r1, sp, #12
    6e72:	4620      	mov	r0, r4
    6e74:	f006 f9ee 	bl	d254 <user_callback>
    6e78:	e673      	b.n	6b62 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    6e7a:	461e      	mov	r6, r3
    6e7c:	e7de      	b.n	6e3c <uarte_nrfx_isr_async+0x304>
    6e7e:	bf00      	nop
    6e80:	000f423f 	.word	0x000f423f
    6e84:	000f4240 	.word	0x000f4240

00006e88 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6e88:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6e8a:	2301      	movs	r3, #1
    6e8c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6e8e:	4a11      	ldr	r2, [pc, #68]	; (6ed4 <compare_int_lock+0x4c>)
    6e90:	f3bf 8f5b 	dmb	ish
    6e94:	43dc      	mvns	r4, r3
    6e96:	e852 1f00 	ldrex	r1, [r2]
    6e9a:	ea01 0c04 	and.w	ip, r1, r4
    6e9e:	e842 ce00 	strex	lr, ip, [r2]
    6ea2:	f1be 0f00 	cmp.w	lr, #0
    6ea6:	d1f6      	bne.n	6e96 <compare_int_lock+0xe>
    6ea8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6eac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6eb0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    6eb4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6eb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6ebc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    6ec0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6ec4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6ec8:	420b      	tst	r3, r1
}
    6eca:	bf14      	ite	ne
    6ecc:	2001      	movne	r0, #1
    6ece:	2000      	moveq	r0, #0
    6ed0:	bd10      	pop	{r4, pc}
    6ed2:	bf00      	nop
    6ed4:	2000100c 	.word	0x2000100c

00006ed8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6ed8:	4919      	ldr	r1, [pc, #100]	; (6f40 <sys_clock_timeout_handler+0x68>)
{
    6eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6edc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    6ede:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6ee2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    6ee4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6ee8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6eec:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    6eee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6ef2:	d222      	bcs.n	6f3a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6ef4:	4b13      	ldr	r3, [pc, #76]	; (6f44 <sys_clock_timeout_handler+0x6c>)
    6ef6:	681b      	ldr	r3, [r3, #0]
    6ef8:	0a1a      	lsrs	r2, r3, #8
    6efa:	061b      	lsls	r3, r3, #24
    6efc:	195e      	adds	r6, r3, r5
    6efe:	4b12      	ldr	r3, [pc, #72]	; (6f48 <sys_clock_timeout_handler+0x70>)
    6f00:	f142 0700 	adc.w	r7, r2, #0
    6f04:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    6f08:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6f0a:	f003 fbd3 	bl	a6b4 <sys_clock_announce>
    return p_reg->CC[ch];
    6f0e:	00a3      	lsls	r3, r4, #2
    6f10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6f14:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    6f18:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    6f1c:	42aa      	cmp	r2, r5
    6f1e:	d10b      	bne.n	6f38 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    6f20:	b91e      	cbnz	r6, 6f2a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    6f22:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    6f26:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6f2a:	4b08      	ldr	r3, [pc, #32]	; (6f4c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6f2c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    6f30:	fa00 f404 	lsl.w	r4, r0, r4
    6f34:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    6f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    6f3a:	2600      	movs	r6, #0
    6f3c:	e7e5      	b.n	6f0a <sys_clock_timeout_handler+0x32>
    6f3e:	bf00      	nop
    6f40:	20000860 	.word	0x20000860
    6f44:	20001010 	.word	0x20001010
    6f48:	20000848 	.word	0x20000848
    6f4c:	40011000 	.word	0x40011000

00006f50 <compare_int_unlock>:
	if (key) {
    6f50:	b319      	cbz	r1, 6f9a <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6f52:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    6f56:	2301      	movs	r3, #1
    6f58:	4a10      	ldr	r2, [pc, #64]	; (6f9c <compare_int_unlock+0x4c>)
    6f5a:	4083      	lsls	r3, r0
    6f5c:	e852 1f00 	ldrex	r1, [r2]
    6f60:	4319      	orrs	r1, r3
    6f62:	e842 1c00 	strex	ip, r1, [r2]
    6f66:	f1bc 0f00 	cmp.w	ip, #0
    6f6a:	d1f7      	bne.n	6f5c <compare_int_unlock+0xc>
    6f6c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    6f70:	4a0b      	ldr	r2, [pc, #44]	; (6fa0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6f76:	4083      	lsls	r3, r0
    6f78:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6f7c:	4b09      	ldr	r3, [pc, #36]	; (6fa4 <compare_int_unlock+0x54>)
    6f7e:	f3bf 8f5b 	dmb	ish
    6f82:	681b      	ldr	r3, [r3, #0]
    6f84:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6f88:	fa23 f000 	lsr.w	r0, r3, r0
    6f8c:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f8e:	bf42      	ittt	mi
    6f90:	4b05      	ldrmi	r3, [pc, #20]	; (6fa8 <compare_int_unlock+0x58>)
    6f92:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    6f96:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    6f9a:	4770      	bx	lr
    6f9c:	2000100c 	.word	0x2000100c
    6fa0:	40011000 	.word	0x40011000
    6fa4:	20001008 	.word	0x20001008
    6fa8:	e000e100 	.word	0xe000e100

00006fac <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6fac:	4b0d      	ldr	r3, [pc, #52]	; (6fe4 <z_nrf_rtc_timer_read+0x38>)
    6fae:	6818      	ldr	r0, [r3, #0]
    6fb0:	0a01      	lsrs	r1, r0, #8
    6fb2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    6fb4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    6fb8:	4b0b      	ldr	r3, [pc, #44]	; (6fe8 <z_nrf_rtc_timer_read+0x3c>)
    6fba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    6fbe:	1818      	adds	r0, r3, r0
    6fc0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    6fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6fc8:	d20a      	bcs.n	6fe0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    6fca:	4b08      	ldr	r3, [pc, #32]	; (6fec <z_nrf_rtc_timer_read+0x40>)
    6fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    6fd0:	4290      	cmp	r0, r2
    6fd2:	eb71 0303 	sbcs.w	r3, r1, r3
    6fd6:	d203      	bcs.n	6fe0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    6fd8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6fdc:	f141 0100 	adc.w	r1, r1, #0
}
    6fe0:	4770      	bx	lr
    6fe2:	bf00      	nop
    6fe4:	20001010 	.word	0x20001010
    6fe8:	40011000 	.word	0x40011000
    6fec:	20000848 	.word	0x20000848

00006ff0 <compare_set>:
{
    6ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ff4:	b085      	sub	sp, #20
    6ff6:	4616      	mov	r6, r2
    6ff8:	4698      	mov	r8, r3
    6ffa:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    6ffc:	f7ff ff44 	bl	6e88 <compare_int_lock>
    7000:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    7002:	f7ff ffd3 	bl	6fac <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    7006:	42b0      	cmp	r0, r6
    7008:	eb71 0308 	sbcs.w	r3, r1, r8
    700c:	d278      	bcs.n	7100 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    700e:	4b46      	ldr	r3, [pc, #280]	; (7128 <compare_set+0x138>)
    7010:	1a30      	subs	r0, r6, r0
    7012:	eb68 0101 	sbc.w	r1, r8, r1
    7016:	4298      	cmp	r0, r3
    7018:	f171 0300 	sbcs.w	r3, r1, #0
    701c:	f080 8081 	bcs.w	7122 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    7020:	4b42      	ldr	r3, [pc, #264]	; (712c <compare_set+0x13c>)
    7022:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    7026:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    702a:	45d8      	cmp	r8, fp
    702c:	bf08      	it	eq
    702e:	4556      	cmpeq	r6, sl
    7030:	d051      	beq.n	70d6 <compare_set+0xe6>
    7032:	ea4f 0985 	mov.w	r9, r5, lsl #2
    7036:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    703a:	f105 0750 	add.w	r7, r5, #80	; 0x50
    703e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    7042:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7044:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    7048:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    704c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    704e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    7052:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7056:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    7058:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    705c:	4b34      	ldr	r3, [pc, #208]	; (7130 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    705e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    7062:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    7064:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    7068:	1a40      	subs	r0, r0, r1
    706a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    706e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    7072:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    7074:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    7078:	d107      	bne.n	708a <compare_set+0x9a>
    707a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    707e:	2013      	movs	r0, #19
    7080:	f006 fcc0 	bl	da04 <z_impl_k_busy_wait>
    7084:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    7088:	4b29      	ldr	r3, [pc, #164]	; (7130 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    708a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    708e:	eba4 000c 	sub.w	r0, r4, ip
    7092:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    7096:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    709a:	bf88      	it	hi
    709c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    709e:	2000      	movs	r0, #0
    70a0:	6038      	str	r0, [r7, #0]
    70a2:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    70a4:	9801      	ldr	r0, [sp, #4]
    70a6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    70aa:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    70ae:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    70b2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    70b6:	4281      	cmp	r1, r0
    70b8:	d006      	beq.n	70c8 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    70ba:	1a20      	subs	r0, r4, r0
    70bc:	3802      	subs	r0, #2
    70be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    70c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    70c6:	d819      	bhi.n	70fc <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    70c8:	1aa4      	subs	r4, r4, r2
    70ca:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    70ce:	eb14 0a06 	adds.w	sl, r4, r6
    70d2:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    70d6:	4915      	ldr	r1, [pc, #84]	; (712c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    70d8:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    70da:	012b      	lsls	r3, r5, #4
    70dc:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    70e0:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    70e4:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    70e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    70e8:	6053      	str	r3, [r2, #4]
	return ret;
    70ea:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    70ec:	4628      	mov	r0, r5
    70ee:	9900      	ldr	r1, [sp, #0]
    70f0:	f7ff ff2e 	bl	6f50 <compare_int_unlock>
}
    70f4:	4620      	mov	r0, r4
    70f6:	b005      	add	sp, #20
    70f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70fc:	4620      	mov	r0, r4
    70fe:	e7b1      	b.n	7064 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    7100:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7102:	4a0c      	ldr	r2, [pc, #48]	; (7134 <compare_set+0x144>)
    7104:	f3bf 8f5b 	dmb	ish
    7108:	40ab      	lsls	r3, r5
    710a:	e852 1f00 	ldrex	r1, [r2]
    710e:	4319      	orrs	r1, r3
    7110:	e842 1000 	strex	r0, r1, [r2]
    7114:	2800      	cmp	r0, #0
    7116:	d1f8      	bne.n	710a <compare_set+0x11a>
    7118:	f3bf 8f5b 	dmb	ish
    711c:	46b2      	mov	sl, r6
    711e:	46c3      	mov	fp, r8
    7120:	e7d9      	b.n	70d6 <compare_set+0xe6>
			return -EINVAL;
    7122:	f06f 0415 	mvn.w	r4, #21
    7126:	e7e1      	b.n	70ec <compare_set+0xfc>
    7128:	01000001 	.word	0x01000001
    712c:	20000850 	.word	0x20000850
    7130:	40011000 	.word	0x40011000
    7134:	20001008 	.word	0x20001008

00007138 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    7138:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    713a:	4b19      	ldr	r3, [pc, #100]	; (71a0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    713c:	4d19      	ldr	r5, [pc, #100]	; (71a4 <sys_clock_driver_init+0x6c>)
    713e:	2400      	movs	r4, #0
    7140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7148:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    714c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    7150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7154:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7158:	4b13      	ldr	r3, [pc, #76]	; (71a8 <sys_clock_driver_init+0x70>)
    715a:	2602      	movs	r6, #2
    715c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    7160:	2101      	movs	r1, #1
    7162:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    7166:	2011      	movs	r0, #17
    7168:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    716c:	4622      	mov	r2, r4
    716e:	f7fd fc0f 	bl	4990 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    7172:	2011      	movs	r0, #17
    7174:	f7fd fbee 	bl	4954 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    7178:	4a0c      	ldr	r2, [pc, #48]	; (71ac <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    717a:	2301      	movs	r3, #1
    717c:	60ab      	str	r3, [r5, #8]
    717e:	602b      	str	r3, [r5, #0]
    7180:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    7182:	4b0b      	ldr	r3, [pc, #44]	; (71b0 <sys_clock_driver_init+0x78>)
    7184:	4a0b      	ldr	r2, [pc, #44]	; (71b4 <sys_clock_driver_init+0x7c>)
    7186:	9300      	str	r3, [sp, #0]
    7188:	9401      	str	r4, [sp, #4]
    718a:	2300      	movs	r3, #0
    718c:	4620      	mov	r0, r4
    718e:	f7ff ff2f 	bl	6ff0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    7192:	4630      	mov	r0, r6
    7194:	f7fe ff24 	bl	5fe0 <z_nrf_clock_control_lf_on>

	return 0;
}
    7198:	4620      	mov	r0, r4
    719a:	b002      	add	sp, #8
    719c:	bd70      	pop	{r4, r5, r6, pc}
    719e:	bf00      	nop
    71a0:	20000850 	.word	0x20000850
    71a4:	40011000 	.word	0x40011000
    71a8:	e000e100 	.word	0xe000e100
    71ac:	2000100c 	.word	0x2000100c
    71b0:	00006ed9 	.word	0x00006ed9
    71b4:	007fffff 	.word	0x007fffff

000071b8 <rtc_nrf_isr>:
{
    71b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    71bc:	4c35      	ldr	r4, [pc, #212]	; (7294 <rtc_nrf_isr+0xdc>)
    71be:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    71c2:	079a      	lsls	r2, r3, #30
    71c4:	d50b      	bpl.n	71de <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    71c6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    71ca:	b143      	cbz	r3, 71de <rtc_nrf_isr+0x26>
		overflow_cnt++;
    71cc:	4a32      	ldr	r2, [pc, #200]	; (7298 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    71ce:	2300      	movs	r3, #0
    71d0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    71d4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    71d8:	6813      	ldr	r3, [r2, #0]
    71da:	3301      	adds	r3, #1
    71dc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    71de:	f04f 0320 	mov.w	r3, #32
    71e2:	f3ef 8211 	mrs	r2, BASEPRI
    71e6:	f383 8812 	msr	BASEPRI_MAX, r3
    71ea:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    71ee:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    71f2:	03db      	lsls	r3, r3, #15
    71f4:	d512      	bpl.n	721c <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    71f6:	f3bf 8f5b 	dmb	ish
    71fa:	4b28      	ldr	r3, [pc, #160]	; (729c <rtc_nrf_isr+0xe4>)
    71fc:	e853 1f00 	ldrex	r1, [r3]
    7200:	f021 0001 	bic.w	r0, r1, #1
    7204:	e843 0600 	strex	r6, r0, [r3]
    7208:	2e00      	cmp	r6, #0
    720a:	d1f7      	bne.n	71fc <rtc_nrf_isr+0x44>
    720c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    7210:	2900      	cmp	r1, #0
    7212:	d136      	bne.n	7282 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7214:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    7218:	2b00      	cmp	r3, #0
    721a:	d132      	bne.n	7282 <rtc_nrf_isr+0xca>
{
    721c:	2300      	movs	r3, #0
	__asm__ volatile(
    721e:	f382 8811 	msr	BASEPRI, r2
    7222:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    7226:	b34b      	cbz	r3, 727c <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    7228:	f7ff fec0 	bl	6fac <z_nrf_rtc_timer_read>
	__asm__ volatile(
    722c:	f04f 0320 	mov.w	r3, #32
    7230:	f3ef 8c11 	mrs	ip, BASEPRI
    7234:	f383 8812 	msr	BASEPRI_MAX, r3
    7238:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    723c:	4b18      	ldr	r3, [pc, #96]	; (72a0 <rtc_nrf_isr+0xe8>)
    723e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    7242:	42b0      	cmp	r0, r6
    7244:	eb71 0207 	sbcs.w	r2, r1, r7
    7248:	f04f 0200 	mov.w	r2, #0
    724c:	d320      	bcc.n	7290 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    724e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    7252:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    7256:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    725a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    725e:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    7260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7264:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    7268:	f38c 8811 	msr	BASEPRI, ip
    726c:	f3bf 8f6f 	isb	sy
		if (handler) {
    7270:	b121      	cbz	r1, 727c <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    7272:	9500      	str	r5, [sp, #0]
    7274:	4632      	mov	r2, r6
    7276:	463b      	mov	r3, r7
    7278:	2000      	movs	r0, #0
    727a:	4788      	blx	r1
}
    727c:	b003      	add	sp, #12
    727e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7282:	2300      	movs	r3, #0
    7284:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    7288:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    728c:	2301      	movs	r3, #1
}
    728e:	e7c6      	b.n	721e <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    7290:	4611      	mov	r1, r2
    7292:	e7e9      	b.n	7268 <rtc_nrf_isr+0xb0>
    7294:	40011000 	.word	0x40011000
    7298:	20001010 	.word	0x20001010
    729c:	20001008 	.word	0x20001008
    72a0:	20000850 	.word	0x20000850

000072a4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    72a4:	1c43      	adds	r3, r0, #1
{
    72a6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    72a8:	d021      	beq.n	72ee <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    72aa:	2801      	cmp	r0, #1
    72ac:	dd21      	ble.n	72f2 <sys_clock_set_timeout+0x4e>
    72ae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    72b2:	da20      	bge.n	72f6 <sys_clock_set_timeout+0x52>
    72b4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    72b6:	f7ff fe79 	bl	6fac <z_nrf_rtc_timer_read>
    72ba:	4b10      	ldr	r3, [pc, #64]	; (72fc <sys_clock_set_timeout+0x58>)
    72bc:	e9d3 1300 	ldrd	r1, r3, [r3]
    72c0:	1a40      	subs	r0, r0, r1
		ticks = 0;
    72c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    72c6:	bf28      	it	cs
    72c8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    72ca:	3001      	adds	r0, #1
    72cc:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    72ce:	480c      	ldr	r0, [pc, #48]	; (7300 <sys_clock_set_timeout+0x5c>)
    72d0:	4282      	cmp	r2, r0
    72d2:	bf28      	it	cs
    72d4:	4602      	movcs	r2, r0
    72d6:	1852      	adds	r2, r2, r1
    72d8:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    72dc:	4909      	ldr	r1, [pc, #36]	; (7304 <sys_clock_set_timeout+0x60>)
    72de:	9001      	str	r0, [sp, #4]
    72e0:	9100      	str	r1, [sp, #0]
    72e2:	f143 0300 	adc.w	r3, r3, #0
    72e6:	f7ff fe83 	bl	6ff0 <compare_set>
}
    72ea:	b002      	add	sp, #8
    72ec:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    72ee:	4804      	ldr	r0, [pc, #16]	; (7300 <sys_clock_set_timeout+0x5c>)
    72f0:	e7e0      	b.n	72b4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    72f2:	2400      	movs	r4, #0
    72f4:	e7df      	b.n	72b6 <sys_clock_set_timeout+0x12>
    72f6:	4c02      	ldr	r4, [pc, #8]	; (7300 <sys_clock_set_timeout+0x5c>)
    72f8:	e7dd      	b.n	72b6 <sys_clock_set_timeout+0x12>
    72fa:	bf00      	nop
    72fc:	20000860 	.word	0x20000860
    7300:	007fffff 	.word	0x007fffff
    7304:	00006ed9 	.word	0x00006ed9

00007308 <sys_clock_elapsed>:
{
    7308:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    730a:	f7ff fe4f 	bl	6fac <z_nrf_rtc_timer_read>
    730e:	4b02      	ldr	r3, [pc, #8]	; (7318 <sys_clock_elapsed+0x10>)
    7310:	681b      	ldr	r3, [r3, #0]
}
    7312:	1ac0      	subs	r0, r0, r3
    7314:	bd08      	pop	{r3, pc}
    7316:	bf00      	nop
    7318:	20000860 	.word	0x20000860

0000731c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    731c:	6802      	ldr	r2, [r0, #0]
    switch (port)
    731e:	0953      	lsrs	r3, r2, #5
{
    7320:	b510      	push	{r4, lr}
    7322:	4604      	mov	r4, r0
    switch (port)
    7324:	d02c      	beq.n	7380 <nrf_gpio_pin_port_decode+0x64>
    uint32_t mask = 0;
    7326:	2b01      	cmp	r3, #1
    7328:	f64f 73ff 	movw	r3, #65535	; 0xffff
    732c:	bf18      	it	ne
    732e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    7330:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7334:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7336:	07db      	lsls	r3, r3, #31
    7338:	d40b      	bmi.n	7352 <nrf_gpio_pin_port_decode+0x36>
    733a:	4914      	ldr	r1, [pc, #80]	; (738c <nrf_gpio_pin_port_decode+0x70>)
    733c:	4814      	ldr	r0, [pc, #80]	; (7390 <nrf_gpio_pin_port_decode+0x74>)
    733e:	4a15      	ldr	r2, [pc, #84]	; (7394 <nrf_gpio_pin_port_decode+0x78>)
    7340:	f240 2329 	movw	r3, #553	; 0x229
    7344:	f005 fd9f 	bl	ce86 <assert_print>
    7348:	4812      	ldr	r0, [pc, #72]	; (7394 <nrf_gpio_pin_port_decode+0x78>)
    734a:	f240 2129 	movw	r1, #553	; 0x229
    734e:	f005 fd93 	bl	ce78 <assert_post_action>
    uint32_t pin_number = *p_pin;
    7352:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    7354:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7358:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    735a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    735c:	d00d      	beq.n	737a <nrf_gpio_pin_port_decode+0x5e>
    735e:	2b01      	cmp	r3, #1
    7360:	d011      	beq.n	7386 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    7362:	490d      	ldr	r1, [pc, #52]	; (7398 <nrf_gpio_pin_port_decode+0x7c>)
    7364:	480a      	ldr	r0, [pc, #40]	; (7390 <nrf_gpio_pin_port_decode+0x74>)
    7366:	4a0b      	ldr	r2, [pc, #44]	; (7394 <nrf_gpio_pin_port_decode+0x78>)
    7368:	f240 232e 	movw	r3, #558	; 0x22e
    736c:	f005 fd8b 	bl	ce86 <assert_print>
    7370:	4808      	ldr	r0, [pc, #32]	; (7394 <nrf_gpio_pin_port_decode+0x78>)
    7372:	f240 212e 	movw	r1, #558	; 0x22e
    7376:	f005 fd7f 	bl	ce78 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    737a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    737e:	bd10      	pop	{r4, pc}
    switch (port)
    7380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7384:	e7d4      	b.n	7330 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    7386:	4805      	ldr	r0, [pc, #20]	; (739c <nrf_gpio_pin_port_decode+0x80>)
    7388:	e7f9      	b.n	737e <nrf_gpio_pin_port_decode+0x62>
    738a:	bf00      	nop
    738c:	0000fd7f 	.word	0x0000fd7f
    7390:	0000eb06 	.word	0x0000eb06
    7394:	0000fd4c 	.word	0x0000fd4c
    7398:	0000f7bd 	.word	0x0000f7bd
    739c:	50000300 	.word	0x50000300

000073a0 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    73a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    73a2:	ab0b      	add	r3, sp, #44	; 0x2c
    73a4:	9305      	str	r3, [sp, #20]
    73a6:	9303      	str	r3, [sp, #12]
    73a8:	4b05      	ldr	r3, [pc, #20]	; (73c0 <z_log_msg2_runtime_create.constprop.0+0x20>)
    73aa:	9302      	str	r3, [sp, #8]
    73ac:	2300      	movs	r3, #0
    73ae:	e9cd 3300 	strd	r3, r3, [sp]
    73b2:	2201      	movs	r2, #1
    73b4:	4618      	mov	r0, r3
    73b6:	f7fc fee7 	bl	4188 <z_impl_z_log_msg2_runtime_vcreate>
}
    73ba:	b007      	add	sp, #28
    73bc:	f85d fb04 	ldr.w	pc, [sp], #4
    73c0:	0000fe3f 	.word	0x0000fe3f

000073c4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    73c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    73c6:	f7fc fc7f 	bl	3cc8 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    73ca:	2400      	movs	r4, #0
    73cc:	4b06      	ldr	r3, [pc, #24]	; (73e8 <k_sys_fatal_error_handler+0x24>)
    73ce:	9302      	str	r3, [sp, #8]
    73d0:	4620      	mov	r0, r4
    73d2:	e9cd 4400 	strd	r4, r4, [sp]
    73d6:	4905      	ldr	r1, [pc, #20]	; (73ec <k_sys_fatal_error_handler+0x28>)
    73d8:	4623      	mov	r3, r4
    73da:	2201      	movs	r2, #1
    73dc:	f7ff ffe0 	bl	73a0 <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    73e0:	4620      	mov	r0, r4
    73e2:	f7fe fa41 	bl	5868 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    73e6:	bf00      	nop
    73e8:	0000fe3f 	.word	0x0000fe3f
    73ec:	0000e3b4 	.word	0x0000e3b4

000073f0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    73f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    73f4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    73f8:	2a08      	cmp	r2, #8
    73fa:	d106      	bne.n	740a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    73fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    7400:	2b05      	cmp	r3, #5
    7402:	d802      	bhi.n	740a <nrf52_errata_103+0x1a>
    7404:	4a02      	ldr	r2, [pc, #8]	; (7410 <nrf52_errata_103+0x20>)
    7406:	5cd0      	ldrb	r0, [r2, r3]
    7408:	4770      	bx	lr
        return false;
    740a:	2000      	movs	r0, #0
}
    740c:	4770      	bx	lr
    740e:	bf00      	nop
    7410:	0000fe62 	.word	0x0000fe62

00007414 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7414:	4a02      	ldr	r2, [pc, #8]	; (7420 <nvmc_wait+0xc>)
    7416:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    741a:	2b00      	cmp	r3, #0
    741c:	d0fb      	beq.n	7416 <nvmc_wait+0x2>
}
    741e:	4770      	bx	lr
    7420:	4001e000 	.word	0x4001e000

00007424 <SystemCoreClockUpdate>:
    nvmc_wait();
}

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    7424:	4b01      	ldr	r3, [pc, #4]	; (742c <SystemCoreClockUpdate+0x8>)
    7426:	4a02      	ldr	r2, [pc, #8]	; (7430 <SystemCoreClockUpdate+0xc>)
    7428:	601a      	str	r2, [r3, #0]
}
    742a:	4770      	bx	lr
    742c:	200000fc 	.word	0x200000fc
    7430:	03d09000 	.word	0x03d09000

00007434 <SystemInit>:

void SystemInit(void)
{
    7434:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    7436:	f006 f9df 	bl	d7f8 <nrf52_errata_136>
    743a:	b140      	cbz	r0, 744e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    743c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7440:	2200      	movs	r2, #0
    7442:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    7446:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    744a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    744e:	f006 f9d3 	bl	d7f8 <nrf52_errata_136>
    7452:	2800      	cmp	r0, #0
    7454:	d046      	beq.n	74e4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    7456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    745a:	4b60      	ldr	r3, [pc, #384]	; (75dc <SystemInit+0x1a8>)
    745c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    7460:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    7464:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    7468:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    746c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    7470:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    7474:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    7478:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    747c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    7480:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    7484:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    7488:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    748c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    7490:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    7494:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    7498:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    749c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    74a0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    74a4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    74a8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    74ac:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    74b0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    74b4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    74b8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    74bc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    74c0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    74c4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    74c8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    74cc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    74d0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    74d4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    74d8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    74dc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    74e0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    74e4:	f7ff ff84 	bl	73f0 <nrf52_errata_103>
    74e8:	b118      	cbz	r0, 74f2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    74ea:	4b3d      	ldr	r3, [pc, #244]	; (75e0 <SystemInit+0x1ac>)
    74ec:	4a3d      	ldr	r2, [pc, #244]	; (75e4 <SystemInit+0x1b0>)
    74ee:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    74f2:	f7ff ff7d 	bl	73f0 <nrf52_errata_103>
    74f6:	b118      	cbz	r0, 7500 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    74f8:	4b3b      	ldr	r3, [pc, #236]	; (75e8 <SystemInit+0x1b4>)
    74fa:	22fb      	movs	r2, #251	; 0xfb
    74fc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    7500:	f7ff ff76 	bl	73f0 <nrf52_errata_103>
    7504:	b170      	cbz	r0, 7524 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    7506:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    750a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    750e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    7512:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    7516:	f022 020f 	bic.w	r2, r2, #15
    751a:	f003 030f 	and.w	r3, r3, #15
    751e:	4313      	orrs	r3, r2
    7520:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    7524:	f7ff ff64 	bl	73f0 <nrf52_errata_103>
    7528:	b120      	cbz	r0, 7534 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    752a:	4b30      	ldr	r3, [pc, #192]	; (75ec <SystemInit+0x1b8>)
    752c:	f44f 7200 	mov.w	r2, #512	; 0x200
    7530:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    7534:	f006 f960 	bl	d7f8 <nrf52_errata_136>
    7538:	b148      	cbz	r0, 754e <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    753a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    753e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7542:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    7544:	bf44      	itt	mi
    7546:	f06f 0201 	mvnmi.w	r2, #1
    754a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    754e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7552:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    7556:	2a08      	cmp	r2, #8
    7558:	d10e      	bne.n	7578 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    755a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    755e:	2b05      	cmp	r3, #5
    7560:	d802      	bhi.n	7568 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    7562:	4a23      	ldr	r2, [pc, #140]	; (75f0 <SystemInit+0x1bc>)
    7564:	5cd3      	ldrb	r3, [r2, r3]
    7566:	b13b      	cbz	r3, 7578 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    7568:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    756c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    7570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7574:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7578:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    757c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    7580:	2a00      	cmp	r2, #0
    7582:	db03      	blt.n	758c <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    7584:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7588:	2b00      	cmp	r3, #0
    758a:	da22      	bge.n	75d2 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    758c:	4919      	ldr	r1, [pc, #100]	; (75f4 <SystemInit+0x1c0>)
    758e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7590:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7594:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7598:	2412      	movs	r4, #18
    nvmc_wait();
    759a:	f7ff ff3b 	bl	7414 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    759e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    75a2:	f7ff ff37 	bl	7414 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    75a6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    75aa:	f7ff ff33 	bl	7414 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    75ae:	2300      	movs	r3, #0
    75b0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    75b4:	f7ff ff2e 	bl	7414 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    75b8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    75bc:	490e      	ldr	r1, [pc, #56]	; (75f8 <SystemInit+0x1c4>)
    75be:	4b0f      	ldr	r3, [pc, #60]	; (75fc <SystemInit+0x1c8>)
    75c0:	68ca      	ldr	r2, [r1, #12]
    75c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    75c6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    75c8:	60cb      	str	r3, [r1, #12]
    75ca:	f3bf 8f4f 	dsb	sy
    __NOP();
    75ce:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    75d0:	e7fd      	b.n	75ce <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    75d2:	4b0b      	ldr	r3, [pc, #44]	; (7600 <SystemInit+0x1cc>)
    75d4:	4a0b      	ldr	r2, [pc, #44]	; (7604 <SystemInit+0x1d0>)
    75d6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    75d8:	bd10      	pop	{r4, pc}
    75da:	bf00      	nop
    75dc:	4000c000 	.word	0x4000c000
    75e0:	40005000 	.word	0x40005000
    75e4:	00038148 	.word	0x00038148
    75e8:	4000f000 	.word	0x4000f000
    75ec:	40029000 	.word	0x40029000
    75f0:	0000fe5c 	.word	0x0000fe5c
    75f4:	4001e000 	.word	0x4001e000
    75f8:	e000ed00 	.word	0xe000ed00
    75fc:	05fa0004 	.word	0x05fa0004
    7600:	200000fc 	.word	0x200000fc
    7604:	03d09000 	.word	0x03d09000

00007608 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    7608:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    760a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    760c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    760e:	fab2 f382 	clz	r3, r2
    7612:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    7616:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    7618:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    761a:	d014      	beq.n	7646 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    761c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    7620:	fa05 f303 	lsl.w	r3, r5, r3
    7624:	ea22 0303 	bic.w	r3, r2, r3
    7628:	e850 6f00 	ldrex	r6, [r0]
    762c:	4296      	cmp	r6, r2
    762e:	d104      	bne.n	763a <nrfx_flag32_alloc+0x32>
    7630:	e840 3c00 	strex	ip, r3, [r0]
    7634:	f1bc 0f00 	cmp.w	ip, #0
    7638:	d1f6      	bne.n	7628 <nrfx_flag32_alloc+0x20>
    763a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    763e:	d1e5      	bne.n	760c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    7640:	4802      	ldr	r0, [pc, #8]	; (764c <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    7642:	700c      	strb	r4, [r1, #0]
}
    7644:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    7646:	4802      	ldr	r0, [pc, #8]	; (7650 <nrfx_flag32_alloc+0x48>)
    7648:	e7fc      	b.n	7644 <nrfx_flag32_alloc+0x3c>
    764a:	bf00      	nop
    764c:	0bad0000 	.word	0x0bad0000
    7650:	0bad0002 	.word	0x0bad0002

00007654 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    7654:	6803      	ldr	r3, [r0, #0]
    7656:	40cb      	lsrs	r3, r1
    7658:	07db      	lsls	r3, r3, #31
{
    765a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    765c:	d415      	bmi.n	768a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    765e:	2301      	movs	r3, #1
    7660:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    7664:	6803      	ldr	r3, [r0, #0]
    7666:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    766a:	ea41 0203 	orr.w	r2, r1, r3
    766e:	e850 4f00 	ldrex	r4, [r0]
    7672:	429c      	cmp	r4, r3
    7674:	d104      	bne.n	7680 <nrfx_flag32_free+0x2c>
    7676:	e840 2c00 	strex	ip, r2, [r0]
    767a:	f1bc 0f00 	cmp.w	ip, #0
    767e:	d1f6      	bne.n	766e <nrfx_flag32_free+0x1a>
    7680:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    7684:	d1ee      	bne.n	7664 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    7686:	4802      	ldr	r0, [pc, #8]	; (7690 <nrfx_flag32_free+0x3c>)
}
    7688:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    768a:	4802      	ldr	r0, [pc, #8]	; (7694 <nrfx_flag32_free+0x40>)
    768c:	e7fc      	b.n	7688 <nrfx_flag32_free+0x34>
    768e:	bf00      	nop
    7690:	0bad0000 	.word	0x0bad0000
    7694:	0bad0004 	.word	0x0bad0004

00007698 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    7698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    769a:	4604      	mov	r4, r0
    769c:	b170      	cbz	r0, 76bc <clock_stop+0x24>
    769e:	2801      	cmp	r0, #1
    76a0:	d031      	beq.n	7706 <clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    76a2:	4931      	ldr	r1, [pc, #196]	; (7768 <clock_stop+0xd0>)
    76a4:	4831      	ldr	r0, [pc, #196]	; (776c <clock_stop+0xd4>)
    76a6:	4a32      	ldr	r2, [pc, #200]	; (7770 <clock_stop+0xd8>)
    76a8:	23d8      	movs	r3, #216	; 0xd8
    76aa:	f005 fbec 	bl	ce86 <assert_print>
    76ae:	4830      	ldr	r0, [pc, #192]	; (7770 <clock_stop+0xd8>)
    76b0:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    76b2:	b003      	add	sp, #12
    76b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    76b8:	f005 bbde 	b.w	ce78 <assert_post_action>
    p_reg->INTENCLR = mask;
    76bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76c0:	2202      	movs	r2, #2
    76c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76c6:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    76ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76ce:	2201      	movs	r2, #1
    76d0:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    76d2:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    76d4:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    76d6:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    76da:	bf14      	ite	ne
    76dc:	2500      	movne	r5, #0
    76de:	f10d 0507 	addeq.w	r5, sp, #7
    76e2:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    76e6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    76ea:	b1bc      	cbz	r4, 771c <clock_stop+0x84>
    76ec:	2c01      	cmp	r4, #1
    76ee:	d02c      	beq.n	774a <clock_stop+0xb2>
            NRFX_ASSERT(0);
    76f0:	491d      	ldr	r1, [pc, #116]	; (7768 <clock_stop+0xd0>)
    76f2:	481e      	ldr	r0, [pc, #120]	; (776c <clock_stop+0xd4>)
    76f4:	4a1f      	ldr	r2, [pc, #124]	; (7774 <clock_stop+0xdc>)
    76f6:	f44f 734f 	mov.w	r3, #828	; 0x33c
    76fa:	f005 fbc4 	bl	ce86 <assert_print>
    76fe:	481d      	ldr	r0, [pc, #116]	; (7774 <clock_stop+0xdc>)
    7700:	f44f 714f 	mov.w	r1, #828	; 0x33c
    7704:	e7d5      	b.n	76b2 <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    7706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    770a:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    770c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7710:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7714:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7718:	6058      	str	r0, [r3, #4]
}
    771a:	e7da      	b.n	76d2 <clock_stop+0x3a>
            if (p_clk_src != NULL)
    771c:	b125      	cbz	r5, 7728 <clock_stop+0x90>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    771e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7722:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7726:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7728:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    772c:	03da      	lsls	r2, r3, #15
    772e:	d519      	bpl.n	7764 <clock_stop+0xcc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    7730:	b11d      	cbz	r5, 773a <clock_stop+0xa2>
    7732:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7736:	2b01      	cmp	r3, #1
    7738:	d104      	bne.n	7744 <clock_stop+0xac>
    773a:	2001      	movs	r0, #1
    773c:	f006 f866 	bl	d80c <nrfx_busy_wait>
    7740:	3f01      	subs	r7, #1
    7742:	d1d2      	bne.n	76ea <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    7744:	2c01      	cmp	r4, #1
    7746:	d00a      	beq.n	775e <clock_stop+0xc6>
    7748:	e00c      	b.n	7764 <clock_stop+0xcc>
            if (p_clk_src != NULL)
    774a:	b125      	cbz	r5, 7756 <clock_stop+0xbe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    774c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7750:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    7754:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7756:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    775a:	03db      	lsls	r3, r3, #15
    775c:	d4e8      	bmi.n	7730 <clock_stop+0x98>
            m_clock_cb.hfclk_started = false;
    775e:	4b06      	ldr	r3, [pc, #24]	; (7778 <clock_stop+0xe0>)
    7760:	2200      	movs	r2, #0
    7762:	715a      	strb	r2, [r3, #5]
}
    7764:	b003      	add	sp, #12
    7766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7768:	0000f7bd 	.word	0x0000f7bd
    776c:	0000eb06 	.word	0x0000eb06
    7770:	0000fe68 	.word	0x0000fe68
    7774:	0000fea5 	.word	0x0000fea5
    7778:	20001014 	.word	0x20001014

0000777c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    777c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    777e:	4604      	mov	r4, r0
    7780:	b958      	cbnz	r0, 779a <nrfx_clock_init+0x1e>
    7782:	490b      	ldr	r1, [pc, #44]	; (77b0 <nrfx_clock_init+0x34>)
    7784:	480b      	ldr	r0, [pc, #44]	; (77b4 <nrfx_clock_init+0x38>)
    7786:	4a0c      	ldr	r2, [pc, #48]	; (77b8 <nrfx_clock_init+0x3c>)
    7788:	f240 1315 	movw	r3, #277	; 0x115
    778c:	f005 fb7b 	bl	ce86 <assert_print>
    7790:	4809      	ldr	r0, [pc, #36]	; (77b8 <nrfx_clock_init+0x3c>)
    7792:	f240 1115 	movw	r1, #277	; 0x115
    7796:	f005 fb6f 	bl	ce78 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    779a:	4b08      	ldr	r3, [pc, #32]	; (77bc <nrfx_clock_init+0x40>)
    779c:	791a      	ldrb	r2, [r3, #4]
    779e:	b922      	cbnz	r2, 77aa <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    77a0:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    77a2:	4807      	ldr	r0, [pc, #28]	; (77c0 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    77a4:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    77a6:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    77a8:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    77aa:	4806      	ldr	r0, [pc, #24]	; (77c4 <nrfx_clock_init+0x48>)
    return err_code;
    77ac:	e7fc      	b.n	77a8 <nrfx_clock_init+0x2c>
    77ae:	bf00      	nop
    77b0:	0000fed9 	.word	0x0000fed9
    77b4:	0000eb06 	.word	0x0000eb06
    77b8:	0000fe68 	.word	0x0000fe68
    77bc:	20001014 	.word	0x20001014
    77c0:	0bad0000 	.word	0x0bad0000
    77c4:	0bad000c 	.word	0x0bad000c

000077c8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    77c8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    77ca:	4b0d      	ldr	r3, [pc, #52]	; (7800 <nrfx_clock_enable+0x38>)
    77cc:	791b      	ldrb	r3, [r3, #4]
    77ce:	b95b      	cbnz	r3, 77e8 <nrfx_clock_enable+0x20>
    77d0:	490c      	ldr	r1, [pc, #48]	; (7804 <nrfx_clock_enable+0x3c>)
    77d2:	480d      	ldr	r0, [pc, #52]	; (7808 <nrfx_clock_enable+0x40>)
    77d4:	4a0d      	ldr	r2, [pc, #52]	; (780c <nrfx_clock_enable+0x44>)
    77d6:	f44f 7397 	mov.w	r3, #302	; 0x12e
    77da:	f005 fb54 	bl	ce86 <assert_print>
    77de:	480b      	ldr	r0, [pc, #44]	; (780c <nrfx_clock_enable+0x44>)
    77e0:	f44f 7197 	mov.w	r1, #302	; 0x12e
    77e4:	f005 fb48 	bl	ce78 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    77e8:	2000      	movs	r0, #0
    77ea:	f7fd f8c3 	bl	4974 <arch_irq_is_enabled>
    77ee:	b908      	cbnz	r0, 77f4 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    77f0:	f7fd f8b0 	bl	4954 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    77f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    77f8:	2200      	movs	r2, #0
    77fa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    77fe:	bd08      	pop	{r3, pc}
    7800:	20001014 	.word	0x20001014
    7804:	0000fee7 	.word	0x0000fee7
    7808:	0000eb06 	.word	0x0000eb06
    780c:	0000fe68 	.word	0x0000fe68

00007810 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7810:	4b2c      	ldr	r3, [pc, #176]	; (78c4 <nrfx_clock_start+0xb4>)
    7812:	791b      	ldrb	r3, [r3, #4]
{
    7814:	b510      	push	{r4, lr}
    7816:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7818:	b95b      	cbnz	r3, 7832 <nrfx_clock_start+0x22>
    781a:	492b      	ldr	r1, [pc, #172]	; (78c8 <nrfx_clock_start+0xb8>)
    781c:	482b      	ldr	r0, [pc, #172]	; (78cc <nrfx_clock_start+0xbc>)
    781e:	4a2c      	ldr	r2, [pc, #176]	; (78d0 <nrfx_clock_start+0xc0>)
    7820:	f44f 73b4 	mov.w	r3, #360	; 0x168
    7824:	f005 fb2f 	bl	ce86 <assert_print>
    7828:	4829      	ldr	r0, [pc, #164]	; (78d0 <nrfx_clock_start+0xc0>)
    782a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    782e:	f005 fb23 	bl	ce78 <assert_post_action>
    switch (domain)
    7832:	b17c      	cbz	r4, 7854 <nrfx_clock_start+0x44>
    7834:	2c01      	cmp	r4, #1
    7836:	d03a      	beq.n	78ae <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    7838:	4926      	ldr	r1, [pc, #152]	; (78d4 <nrfx_clock_start+0xc4>)
    783a:	4824      	ldr	r0, [pc, #144]	; (78cc <nrfx_clock_start+0xbc>)
    783c:	4a24      	ldr	r2, [pc, #144]	; (78d0 <nrfx_clock_start+0xc0>)
    783e:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    7842:	f005 fb20 	bl	ce86 <assert_print>
            break;
    }
}
    7846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    784a:	4821      	ldr	r0, [pc, #132]	; (78d0 <nrfx_clock_start+0xc0>)
    784c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    7850:	f005 bb12 	b.w	ce78 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7858:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    785c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    7860:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    7864:	d10b      	bne.n	787e <nrfx_clock_start+0x6e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    7866:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    786a:	07c9      	lsls	r1, r1, #31
    786c:	d510      	bpl.n	7890 <nrfx_clock_start+0x80>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    786e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    7872:	079b      	lsls	r3, r3, #30
    7874:	d408      	bmi.n	7888 <nrfx_clock_start+0x78>
    p_reg->INTENSET = mask;
    7876:	2302      	movs	r3, #2
    7878:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    787c:	e016      	b.n	78ac <nrfx_clock_start+0x9c>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    787e:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    7882:	2b01      	cmp	r3, #1
    7884:	d004      	beq.n	7890 <nrfx_clock_start+0x80>
    if (!is_correct_clk)
    7886:	b11b      	cbz	r3, 7890 <nrfx_clock_start+0x80>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7888:	2000      	movs	r0, #0
    788a:	f7ff ff05 	bl	7698 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    788e:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    7890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7894:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7898:	2300      	movs	r3, #0
    789a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    789e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    78a2:	2302      	movs	r3, #2
    78a4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    78a8:	2301      	movs	r3, #1
    78aa:	6093      	str	r3, [r2, #8]
}
    78ac:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    78b2:	2200      	movs	r2, #0
    78b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    78b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    78bc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    78c0:	601c      	str	r4, [r3, #0]
}
    78c2:	e7f3      	b.n	78ac <nrfx_clock_start+0x9c>
    78c4:	20001014 	.word	0x20001014
    78c8:	0000fee7 	.word	0x0000fee7
    78cc:	0000eb06 	.word	0x0000eb06
    78d0:	0000fe68 	.word	0x0000fe68
    78d4:	0000f7bd 	.word	0x0000f7bd

000078d8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    78d8:	4b0a      	ldr	r3, [pc, #40]	; (7904 <nrfx_clock_stop+0x2c>)
    78da:	791b      	ldrb	r3, [r3, #4]
{
    78dc:	b510      	push	{r4, lr}
    78de:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    78e0:	b95b      	cbnz	r3, 78fa <nrfx_clock_stop+0x22>
    78e2:	4909      	ldr	r1, [pc, #36]	; (7908 <nrfx_clock_stop+0x30>)
    78e4:	4809      	ldr	r0, [pc, #36]	; (790c <nrfx_clock_stop+0x34>)
    78e6:	4a0a      	ldr	r2, [pc, #40]	; (7910 <nrfx_clock_stop+0x38>)
    78e8:	f240 13ad 	movw	r3, #429	; 0x1ad
    78ec:	f005 facb 	bl	ce86 <assert_print>
    78f0:	4807      	ldr	r0, [pc, #28]	; (7910 <nrfx_clock_stop+0x38>)
    78f2:	f240 11ad 	movw	r1, #429	; 0x1ad
    78f6:	f005 fabf 	bl	ce78 <assert_post_action>
    clock_stop(domain);
    78fa:	4620      	mov	r0, r4
}
    78fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    7900:	f7ff beca 	b.w	7698 <clock_stop>
    7904:	20001014 	.word	0x20001014
    7908:	0000fee7 	.word	0x0000fee7
    790c:	0000eb06 	.word	0x0000eb06
    7910:	0000fe68 	.word	0x0000fe68

00007914 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    7918:	b510      	push	{r4, lr}
    791a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    791e:	b16a      	cbz	r2, 793c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7920:	2200      	movs	r2, #0
    7922:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7926:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    792a:	2201      	movs	r2, #1
    792c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    7930:	4b11      	ldr	r3, [pc, #68]	; (7978 <nrfx_power_clock_irq_handler+0x64>)
    7932:	7958      	ldrb	r0, [r3, #5]
    7934:	b910      	cbnz	r0, 793c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    7936:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    7938:	681b      	ldr	r3, [r3, #0]
    793a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    793c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7940:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    7944:	b172      	cbz	r2, 7964 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7946:	2200      	movs	r2, #0
    7948:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    794c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7950:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7954:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    7958:	0792      	lsls	r2, r2, #30
    795a:	d104      	bne.n	7966 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    795c:	2201      	movs	r2, #1
    795e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7962:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    7964:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    7966:	2202      	movs	r2, #2
    7968:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    796c:	4b02      	ldr	r3, [pc, #8]	; (7978 <nrfx_power_clock_irq_handler+0x64>)
}
    796e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    7972:	681b      	ldr	r3, [r3, #0]
    7974:	2001      	movs	r0, #1
    7976:	4718      	bx	r3
    7978:	20001014 	.word	0x20001014

0000797c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    797c:	4b03      	ldr	r3, [pc, #12]	; (798c <pin_in_use_by_te+0x10>)
    797e:	3008      	adds	r0, #8
    7980:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7984:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7988:	4770      	bx	lr
    798a:	bf00      	nop
    798c:	20000100 	.word	0x20000100

00007990 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    7990:	4b04      	ldr	r3, [pc, #16]	; (79a4 <pin_has_trigger+0x14>)
    7992:	3008      	adds	r0, #8
    7994:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7998:	f010 001c 	ands.w	r0, r0, #28
    799c:	bf18      	it	ne
    799e:	2001      	movne	r0, #1
    79a0:	4770      	bx	lr
    79a2:	bf00      	nop
    79a4:	20000100 	.word	0x20000100

000079a8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    79a8:	4b03      	ldr	r3, [pc, #12]	; (79b8 <pin_is_output+0x10>)
    79aa:	3008      	adds	r0, #8
    79ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    79b0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    79b4:	4770      	bx	lr
    79b6:	bf00      	nop
    79b8:	20000100 	.word	0x20000100

000079bc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    79bc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    79be:	f100 0308 	add.w	r3, r0, #8
    79c2:	4c0c      	ldr	r4, [pc, #48]	; (79f4 <call_handler+0x38>)
    79c4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    79c8:	05da      	lsls	r2, r3, #23
{
    79ca:	4605      	mov	r5, r0
    79cc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    79ce:	d507      	bpl.n	79e0 <call_handler+0x24>
    79d0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    79d4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    79d8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    79dc:	6852      	ldr	r2, [r2, #4]
    79de:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    79e0:	68a3      	ldr	r3, [r4, #8]
    79e2:	b12b      	cbz	r3, 79f0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    79e4:	68e2      	ldr	r2, [r4, #12]
    79e6:	4631      	mov	r1, r6
    79e8:	4628      	mov	r0, r5
    }
}
    79ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    79ee:	4718      	bx	r3
}
    79f0:	bd70      	pop	{r4, r5, r6, pc}
    79f2:	bf00      	nop
    79f4:	20000100 	.word	0x20000100

000079f8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    79f8:	4a19      	ldr	r2, [pc, #100]	; (7a60 <release_handler+0x68>)
    79fa:	3008      	adds	r0, #8
{
    79fc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    79fe:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    7a02:	05d9      	lsls	r1, r3, #23
    7a04:	d51d      	bpl.n	7a42 <release_handler+0x4a>
    7a06:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    7a0a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7a0e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7a12:	f102 0410 	add.w	r4, r2, #16
    7a16:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7a18:	f834 3b02 	ldrh.w	r3, [r4], #2
    7a1c:	f413 7f80 	tst.w	r3, #256	; 0x100
    7a20:	d003      	beq.n	7a2a <release_handler+0x32>
    7a22:	f3c3 2343 	ubfx	r3, r3, #9, #4
    7a26:	4299      	cmp	r1, r3
    7a28:	d00b      	beq.n	7a42 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7a2a:	3001      	adds	r0, #1
    7a2c:	2830      	cmp	r0, #48	; 0x30
    7a2e:	d1f3      	bne.n	7a18 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    7a30:	2300      	movs	r3, #0
    7a32:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    7a36:	480b      	ldr	r0, [pc, #44]	; (7a64 <release_handler+0x6c>)
    7a38:	f7ff fe0c 	bl	7654 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    7a3c:	4b0a      	ldr	r3, [pc, #40]	; (7a68 <release_handler+0x70>)
    7a3e:	4298      	cmp	r0, r3
    7a40:	d100      	bne.n	7a44 <release_handler+0x4c>
}
    7a42:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    7a44:	4909      	ldr	r1, [pc, #36]	; (7a6c <release_handler+0x74>)
    7a46:	480a      	ldr	r0, [pc, #40]	; (7a70 <release_handler+0x78>)
    7a48:	4a0a      	ldr	r2, [pc, #40]	; (7a74 <release_handler+0x7c>)
    7a4a:	f44f 7399 	mov.w	r3, #306	; 0x132
    7a4e:	f005 fa1a 	bl	ce86 <assert_print>
}
    7a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    7a56:	4807      	ldr	r0, [pc, #28]	; (7a74 <release_handler+0x7c>)
    7a58:	f44f 7199 	mov.w	r1, #306	; 0x132
    7a5c:	f005 ba0c 	b.w	ce78 <assert_post_action>
    7a60:	20000100 	.word	0x20000100
    7a64:	20000174 	.word	0x20000174
    7a68:	0bad0000 	.word	0x0bad0000
    7a6c:	0000ff69 	.word	0x0000ff69
    7a70:	0000eb06 	.word	0x0000eb06
    7a74:	0000ff05 	.word	0x0000ff05

00007a78 <pin_handler_trigger_uninit>:
{
    7a78:	b538      	push	{r3, r4, r5, lr}
    7a7a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    7a7c:	f7ff ff7e 	bl	797c <pin_in_use_by_te>
    7a80:	4c09      	ldr	r4, [pc, #36]	; (7aa8 <pin_handler_trigger_uninit+0x30>)
    7a82:	f102 0508 	add.w	r5, r2, #8
    7a86:	b140      	cbz	r0, 7a9a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7a88:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    7a8c:	4907      	ldr	r1, [pc, #28]	; (7aac <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    7a8e:	0b5b      	lsrs	r3, r3, #13
    7a90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    7a94:	2000      	movs	r0, #0
    7a96:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    7a9a:	4610      	mov	r0, r2
    7a9c:	f7ff ffac 	bl	79f8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7aa0:	2300      	movs	r3, #0
    7aa2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    7aa6:	bd38      	pop	{r3, r4, r5, pc}
    7aa8:	20000100 	.word	0x20000100
    7aac:	40006000 	.word	0x40006000

00007ab0 <nrf_gpio_pin_port_decode>:
{
    7ab0:	b510      	push	{r4, lr}
    7ab2:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7ab4:	6800      	ldr	r0, [r0, #0]
    7ab6:	f005 feab 	bl	d810 <nrf_gpio_pin_present_check>
    7aba:	b958      	cbnz	r0, 7ad4 <nrf_gpio_pin_port_decode+0x24>
    7abc:	4912      	ldr	r1, [pc, #72]	; (7b08 <nrf_gpio_pin_port_decode+0x58>)
    7abe:	4813      	ldr	r0, [pc, #76]	; (7b0c <nrf_gpio_pin_port_decode+0x5c>)
    7ac0:	4a13      	ldr	r2, [pc, #76]	; (7b10 <nrf_gpio_pin_port_decode+0x60>)
    7ac2:	f240 2329 	movw	r3, #553	; 0x229
    7ac6:	f005 f9de 	bl	ce86 <assert_print>
    7aca:	4811      	ldr	r0, [pc, #68]	; (7b10 <nrf_gpio_pin_port_decode+0x60>)
    7acc:	f240 2129 	movw	r1, #553	; 0x229
    7ad0:	f005 f9d2 	bl	ce78 <assert_post_action>
    uint32_t pin_number = *p_pin;
    7ad4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    7ad6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ada:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    7adc:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ade:	d00d      	beq.n	7afc <nrf_gpio_pin_port_decode+0x4c>
    7ae0:	2b01      	cmp	r3, #1
    7ae2:	d00e      	beq.n	7b02 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    7ae4:	490b      	ldr	r1, [pc, #44]	; (7b14 <nrf_gpio_pin_port_decode+0x64>)
    7ae6:	4809      	ldr	r0, [pc, #36]	; (7b0c <nrf_gpio_pin_port_decode+0x5c>)
    7ae8:	4a09      	ldr	r2, [pc, #36]	; (7b10 <nrf_gpio_pin_port_decode+0x60>)
    7aea:	f240 232e 	movw	r3, #558	; 0x22e
    7aee:	f005 f9ca 	bl	ce86 <assert_print>
    7af2:	4807      	ldr	r0, [pc, #28]	; (7b10 <nrf_gpio_pin_port_decode+0x60>)
    7af4:	f240 212e 	movw	r1, #558	; 0x22e
    7af8:	f005 f9be 	bl	ce78 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7afc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    7b00:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    7b02:	4805      	ldr	r0, [pc, #20]	; (7b18 <nrf_gpio_pin_port_decode+0x68>)
    7b04:	e7fc      	b.n	7b00 <nrf_gpio_pin_port_decode+0x50>
    7b06:	bf00      	nop
    7b08:	0000fd7f 	.word	0x0000fd7f
    7b0c:	0000eb06 	.word	0x0000eb06
    7b10:	0000fd4c 	.word	0x0000fd4c
    7b14:	0000f7bd 	.word	0x0000f7bd
    7b18:	50000300 	.word	0x50000300

00007b1c <nrfx_gpiote_input_configure>:
{
    7b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b1e:	4604      	mov	r4, r0
    7b20:	b085      	sub	sp, #20
    7b22:	4617      	mov	r7, r2
    7b24:	461d      	mov	r5, r3
    if (p_input_config)
    7b26:	b1f1      	cbz	r1, 7b66 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    7b28:	f005 fe83 	bl	d832 <pin_is_task_output>
    7b2c:	b110      	cbz	r0, 7b34 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    7b2e:	484d      	ldr	r0, [pc, #308]	; (7c64 <nrfx_gpiote_input_configure+0x148>)
}
    7b30:	b005      	add	sp, #20
    7b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    7b34:	460b      	mov	r3, r1
    7b36:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    7b3a:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    7b3e:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    7b42:	f10d 020f 	add.w	r2, sp, #15
    7b46:	f10d 010e 	add.w	r1, sp, #14
    7b4a:	4620      	mov	r0, r4
    7b4c:	f005 fe80 	bl	d850 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7b50:	4a45      	ldr	r2, [pc, #276]	; (7c68 <nrfx_gpiote_input_configure+0x14c>)
    7b52:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    7b56:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7b5a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7b5e:	f043 0301 	orr.w	r3, r3, #1
    7b62:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    7b66:	b197      	cbz	r7, 7b8e <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
    7b68:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    7b6a:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7b6c:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    7b6e:	f7ff ff1b 	bl	79a8 <pin_is_output>
    7b72:	b180      	cbz	r0, 7b96 <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
    7b74:	2a00      	cmp	r2, #0
    7b76:	d1da      	bne.n	7b2e <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    7b78:	4a3b      	ldr	r2, [pc, #236]	; (7c68 <nrfx_gpiote_input_configure+0x14c>)
    7b7a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    7b7e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7b82:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    7b86:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    7b8a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    7b8e:	2d00      	cmp	r5, #0
    7b90:	d13d      	bne.n	7c0e <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
    7b92:	4836      	ldr	r0, [pc, #216]	; (7c6c <nrfx_gpiote_input_configure+0x150>)
    7b94:	e7cc      	b.n	7b30 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    7b96:	4f34      	ldr	r7, [pc, #208]	; (7c68 <nrfx_gpiote_input_configure+0x14c>)
    7b98:	f104 0c08 	add.w	ip, r4, #8
    7b9c:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    7ba0:	f021 0120 	bic.w	r1, r1, #32
    7ba4:	04c9      	lsls	r1, r1, #19
    7ba6:	0cc9      	lsrs	r1, r1, #19
    7ba8:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    7bac:	2a00      	cmp	r2, #0
    7bae:	d0e3      	beq.n	7b78 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
    7bb0:	2e03      	cmp	r6, #3
    7bb2:	d8bc      	bhi.n	7b2e <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    7bb4:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    7bb6:	b92e      	cbnz	r6, 7bc4 <nrfx_gpiote_input_configure+0xa8>
    7bb8:	4a2d      	ldr	r2, [pc, #180]	; (7c70 <nrfx_gpiote_input_configure+0x154>)
    7bba:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    7bbe:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    7bc2:	e7d9      	b.n	7b78 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7bc4:	009a      	lsls	r2, r3, #2
    7bc6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7bca:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7bce:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    7bd2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7bd6:	f020 0003 	bic.w	r0, r0, #3
    7bda:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7bde:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7be2:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    7be6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    7bea:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7bee:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    7bf2:	0220      	lsls	r0, r4, #8
    7bf4:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    7bf8:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    7bfc:	ea40 000e 	orr.w	r0, r0, lr
    7c00:	f041 0120 	orr.w	r1, r1, #32
    7c04:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    7c08:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    7c0c:	e7b4      	b.n	7b78 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    7c0e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    7c12:	4620      	mov	r0, r4
    7c14:	f7ff fef0 	bl	79f8 <release_handler>
    if (!handler)
    7c18:	2e00      	cmp	r6, #0
    7c1a:	d0ba      	beq.n	7b92 <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7c1c:	4d12      	ldr	r5, [pc, #72]	; (7c68 <nrfx_gpiote_input_configure+0x14c>)
    7c1e:	682b      	ldr	r3, [r5, #0]
    7c20:	429e      	cmp	r6, r3
    7c22:	d104      	bne.n	7c2e <nrfx_gpiote_input_configure+0x112>
    7c24:	686b      	ldr	r3, [r5, #4]
    7c26:	429f      	cmp	r7, r3
    7c28:	d101      	bne.n	7c2e <nrfx_gpiote_input_configure+0x112>
    7c2a:	2200      	movs	r2, #0
    7c2c:	e00a      	b.n	7c44 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    7c2e:	4811      	ldr	r0, [pc, #68]	; (7c74 <nrfx_gpiote_input_configure+0x158>)
    7c30:	f10d 010f 	add.w	r1, sp, #15
    7c34:	f7ff fce8 	bl	7608 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    7c38:	4b0c      	ldr	r3, [pc, #48]	; (7c6c <nrfx_gpiote_input_configure+0x150>)
    7c3a:	4298      	cmp	r0, r3
    7c3c:	f47f af78 	bne.w	7b30 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    7c40:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    7c44:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    7c48:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7c4c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    7c4e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7c50:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7c54:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    7c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7c5c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    7c60:	e797      	b.n	7b92 <nrfx_gpiote_input_configure+0x76>
    7c62:	bf00      	nop
    7c64:	0bad0004 	.word	0x0bad0004
    7c68:	20000100 	.word	0x20000100
    7c6c:	0bad0000 	.word	0x0bad0000
    7c70:	40006000 	.word	0x40006000
    7c74:	20000174 	.word	0x20000174

00007c78 <nrfx_gpiote_output_configure>:
{
    7c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c7a:	4604      	mov	r4, r0
    7c7c:	b085      	sub	sp, #20
    7c7e:	4615      	mov	r5, r2
    if (p_config)
    7c80:	b321      	cbz	r1, 7ccc <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    7c82:	f7ff fe91 	bl	79a8 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    7c86:	b920      	cbnz	r0, 7c92 <nrfx_gpiote_output_configure+0x1a>
    7c88:	4620      	mov	r0, r4
    7c8a:	f7ff fe77 	bl	797c <pin_in_use_by_te>
    7c8e:	2800      	cmp	r0, #0
    7c90:	d15e      	bne.n	7d50 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7c92:	4620      	mov	r0, r4
    7c94:	f7ff fe7c 	bl	7990 <pin_has_trigger>
    7c98:	b110      	cbz	r0, 7ca0 <nrfx_gpiote_output_configure+0x28>
    7c9a:	784b      	ldrb	r3, [r1, #1]
    7c9c:	2b01      	cmp	r3, #1
    7c9e:	d057      	beq.n	7d50 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    7ca0:	2301      	movs	r3, #1
    7ca2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    7ca6:	2300      	movs	r3, #0
    7ca8:	e9cd 1300 	strd	r1, r3, [sp]
    7cac:	1c4a      	adds	r2, r1, #1
    7cae:	1c8b      	adds	r3, r1, #2
    7cb0:	4620      	mov	r0, r4
    7cb2:	f10d 010f 	add.w	r1, sp, #15
    7cb6:	f005 fdcb 	bl	d850 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    7cba:	4a26      	ldr	r2, [pc, #152]	; (7d54 <nrfx_gpiote_output_configure+0xdc>)
    7cbc:	f104 0108 	add.w	r1, r4, #8
    7cc0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7cc4:	f043 0303 	orr.w	r3, r3, #3
    7cc8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    7ccc:	b915      	cbnz	r5, 7cd4 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    7cce:	4822      	ldr	r0, [pc, #136]	; (7d58 <nrfx_gpiote_output_configure+0xe0>)
}
    7cd0:	b005      	add	sp, #20
    7cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    7cd4:	4620      	mov	r0, r4
    7cd6:	f7ff fe67 	bl	79a8 <pin_is_output>
        if (pin_is_input(pin))
    7cda:	b3c8      	cbz	r0, 7d50 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    7cdc:	4e1d      	ldr	r6, [pc, #116]	; (7d54 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    7cde:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    7ce2:	f104 0708 	add.w	r7, r4, #8
    7ce6:	4661      	mov	r1, ip
    7ce8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    7cec:	0089      	lsls	r1, r1, #2
    7cee:	f020 0020 	bic.w	r0, r0, #32
    7cf2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    7cf6:	04c0      	lsls	r0, r0, #19
    7cf8:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    7cfc:	0cc0      	lsrs	r0, r0, #19
    7cfe:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    7d02:	2300      	movs	r3, #0
    7d04:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    7d08:	786a      	ldrb	r2, [r5, #1]
    7d0a:	2a00      	cmp	r2, #0
    7d0c:	d0df      	beq.n	7cce <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7d0e:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    7d12:	78ad      	ldrb	r5, [r5, #2]
    7d14:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    7d18:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7d1c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7d20:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    7d24:	0223      	lsls	r3, r4, #8
    7d26:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7d2a:	0412      	lsls	r2, r2, #16
    7d2c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7d30:	ea43 030e 	orr.w	r3, r3, lr
    7d34:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7d36:	052a      	lsls	r2, r5, #20
    7d38:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7d3c:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7d40:	4313      	orrs	r3, r2
    7d42:	f040 0020 	orr.w	r0, r0, #32
    7d46:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7d4a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    7d4e:	e7be      	b.n	7cce <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
    7d50:	4802      	ldr	r0, [pc, #8]	; (7d5c <nrfx_gpiote_output_configure+0xe4>)
    7d52:	e7bd      	b.n	7cd0 <nrfx_gpiote_output_configure+0x58>
    7d54:	20000100 	.word	0x20000100
    7d58:	0bad0000 	.word	0x0bad0000
    7d5c:	0bad0004 	.word	0x0bad0004

00007d60 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    7d60:	4b01      	ldr	r3, [pc, #4]	; (7d68 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    7d62:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    7d66:	4770      	bx	lr
    7d68:	20000100 	.word	0x20000100

00007d6c <nrfx_gpiote_channel_get>:
{
    7d6c:	b538      	push	{r3, r4, r5, lr}
    7d6e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    7d70:	460d      	mov	r5, r1
    7d72:	b959      	cbnz	r1, 7d8c <nrfx_gpiote_channel_get+0x20>
    7d74:	490c      	ldr	r1, [pc, #48]	; (7da8 <nrfx_gpiote_channel_get+0x3c>)
    7d76:	480d      	ldr	r0, [pc, #52]	; (7dac <nrfx_gpiote_channel_get+0x40>)
    7d78:	4a0d      	ldr	r2, [pc, #52]	; (7db0 <nrfx_gpiote_channel_get+0x44>)
    7d7a:	f240 2335 	movw	r3, #565	; 0x235
    7d7e:	f005 f882 	bl	ce86 <assert_print>
    7d82:	480b      	ldr	r0, [pc, #44]	; (7db0 <nrfx_gpiote_channel_get+0x44>)
    7d84:	f240 2135 	movw	r1, #565	; 0x235
    7d88:	f005 f876 	bl	ce78 <assert_post_action>
    if (pin_in_use_by_te(pin))
    7d8c:	4620      	mov	r0, r4
    7d8e:	f7ff fdf5 	bl	797c <pin_in_use_by_te>
    7d92:	b138      	cbz	r0, 7da4 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7d94:	4b07      	ldr	r3, [pc, #28]	; (7db4 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    7d96:	4808      	ldr	r0, [pc, #32]	; (7db8 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7d98:	3408      	adds	r4, #8
    7d9a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7d9e:	0b5b      	lsrs	r3, r3, #13
    7da0:	702b      	strb	r3, [r5, #0]
}
    7da2:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7da4:	4805      	ldr	r0, [pc, #20]	; (7dbc <nrfx_gpiote_channel_get+0x50>)
    7da6:	e7fc      	b.n	7da2 <nrfx_gpiote_channel_get+0x36>
    7da8:	0000ff7d 	.word	0x0000ff7d
    7dac:	0000eb06 	.word	0x0000eb06
    7db0:	0000ff05 	.word	0x0000ff05
    7db4:	20000100 	.word	0x20000100
    7db8:	0bad0000 	.word	0x0bad0000
    7dbc:	0bad0004 	.word	0x0bad0004

00007dc0 <nrfx_gpiote_init>:
{
    7dc0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    7dc2:	4c0f      	ldr	r4, [pc, #60]	; (7e00 <nrfx_gpiote_init+0x40>)
    7dc4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    7dc8:	b9bd      	cbnz	r5, 7dfa <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    7dca:	2260      	movs	r2, #96	; 0x60
    7dcc:	4629      	mov	r1, r5
    7dce:	f104 0010 	add.w	r0, r4, #16
    7dd2:	f005 fe5f 	bl	da94 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    7dd6:	2006      	movs	r0, #6
    7dd8:	f7fc fdbc 	bl	4954 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7ddc:	4b09      	ldr	r3, [pc, #36]	; (7e04 <nrfx_gpiote_init+0x44>)
    return err_code;
    7dde:	480a      	ldr	r0, [pc, #40]	; (7e08 <nrfx_gpiote_init+0x48>)
    7de0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    7de4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    7de8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7dec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    7df0:	2301      	movs	r3, #1
    7df2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    7df6:	6763      	str	r3, [r4, #116]	; 0x74
}
    7df8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    7dfa:	4804      	ldr	r0, [pc, #16]	; (7e0c <nrfx_gpiote_init+0x4c>)
    7dfc:	e7fc      	b.n	7df8 <nrfx_gpiote_init+0x38>
    7dfe:	bf00      	nop
    7e00:	20000100 	.word	0x20000100
    7e04:	40006000 	.word	0x40006000
    7e08:	0bad0000 	.word	0x0bad0000
    7e0c:	0bad0005 	.word	0x0bad0005

00007e10 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    7e10:	4b03      	ldr	r3, [pc, #12]	; (7e20 <nrfx_gpiote_is_init+0x10>)
    7e12:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    7e16:	3800      	subs	r0, #0
    7e18:	bf18      	it	ne
    7e1a:	2001      	movne	r0, #1
    7e1c:	4770      	bx	lr
    7e1e:	bf00      	nop
    7e20:	20000100 	.word	0x20000100

00007e24 <nrfx_gpiote_channel_free>:
{
    7e24:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    7e26:	4801      	ldr	r0, [pc, #4]	; (7e2c <nrfx_gpiote_channel_free+0x8>)
    7e28:	f7ff bc14 	b.w	7654 <nrfx_flag32_free>
    7e2c:	20000170 	.word	0x20000170

00007e30 <nrfx_gpiote_channel_alloc>:
{
    7e30:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7e32:	4801      	ldr	r0, [pc, #4]	; (7e38 <nrfx_gpiote_channel_alloc+0x8>)
    7e34:	f7ff bbe8 	b.w	7608 <nrfx_flag32_alloc>
    7e38:	20000170 	.word	0x20000170

00007e3c <nrfx_gpiote_trigger_enable>:
{
    7e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e3e:	4604      	mov	r4, r0
    7e40:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    7e42:	f7ff fda5 	bl	7990 <pin_has_trigger>
    7e46:	b958      	cbnz	r0, 7e60 <nrfx_gpiote_trigger_enable+0x24>
    7e48:	4930      	ldr	r1, [pc, #192]	; (7f0c <nrfx_gpiote_trigger_enable+0xd0>)
    7e4a:	4831      	ldr	r0, [pc, #196]	; (7f10 <nrfx_gpiote_trigger_enable+0xd4>)
    7e4c:	4a31      	ldr	r2, [pc, #196]	; (7f14 <nrfx_gpiote_trigger_enable+0xd8>)
    7e4e:	f240 33df 	movw	r3, #991	; 0x3df
    7e52:	f005 f818 	bl	ce86 <assert_print>
    7e56:	482f      	ldr	r0, [pc, #188]	; (7f14 <nrfx_gpiote_trigger_enable+0xd8>)
    7e58:	f240 31df 	movw	r1, #991	; 0x3df
    7e5c:	f005 f80c 	bl	ce78 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7e60:	4620      	mov	r0, r4
    7e62:	f7ff fd8b 	bl	797c <pin_in_use_by_te>
    7e66:	4e2c      	ldr	r6, [pc, #176]	; (7f18 <nrfx_gpiote_trigger_enable+0xdc>)
    7e68:	f104 0708 	add.w	r7, r4, #8
    7e6c:	b318      	cbz	r0, 7eb6 <nrfx_gpiote_trigger_enable+0x7a>
    return !pin_is_output(pin);
    7e6e:	4620      	mov	r0, r4
    7e70:	f7ff fd9a 	bl	79a8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7e74:	4602      	mov	r2, r0
    7e76:	b9f0      	cbnz	r0, 7eb6 <nrfx_gpiote_trigger_enable+0x7a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7e78:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    7e7c:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    7e7e:	4608      	mov	r0, r1
    7e80:	f005 fce2 	bl	d848 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    7e84:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    7e88:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7e8c:	601a      	str	r2, [r3, #0]
    7e8e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7e90:	008b      	lsls	r3, r1, #2
    7e92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7e96:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7e9a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    7e9e:	f042 0201 	orr.w	r2, r2, #1
    7ea2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    7ea6:	b125      	cbz	r5, 7eb2 <nrfx_gpiote_trigger_enable+0x76>
    p_reg->INTENSET = mask;
    7ea8:	4a1c      	ldr	r2, [pc, #112]	; (7f1c <nrfx_gpiote_trigger_enable+0xe0>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7eaa:	2301      	movs	r3, #1
    7eac:	408b      	lsls	r3, r1
    7eae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    7eb2:	b003      	add	sp, #12
    7eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    7eb6:	b95d      	cbnz	r5, 7ed0 <nrfx_gpiote_trigger_enable+0x94>
    7eb8:	4919      	ldr	r1, [pc, #100]	; (7f20 <nrfx_gpiote_trigger_enable+0xe4>)
    7eba:	4815      	ldr	r0, [pc, #84]	; (7f10 <nrfx_gpiote_trigger_enable+0xd4>)
    7ebc:	4a15      	ldr	r2, [pc, #84]	; (7f14 <nrfx_gpiote_trigger_enable+0xd8>)
    7ebe:	f240 33ee 	movw	r3, #1006	; 0x3ee
    7ec2:	f004 ffe0 	bl	ce86 <assert_print>
    7ec6:	4813      	ldr	r0, [pc, #76]	; (7f14 <nrfx_gpiote_trigger_enable+0xd8>)
    7ec8:	f240 31ee 	movw	r1, #1006	; 0x3ee
    7ecc:	f004 ffd4 	bl	ce78 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7ed0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    7ed4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    7ed8:	2b04      	cmp	r3, #4
    7eda:	d012      	beq.n	7f02 <nrfx_gpiote_trigger_enable+0xc6>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7edc:	2b05      	cmp	r3, #5
    7ede:	d012      	beq.n	7f06 <nrfx_gpiote_trigger_enable+0xca>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7ee0:	a801      	add	r0, sp, #4
    7ee2:	9401      	str	r4, [sp, #4]
    7ee4:	f7ff fde4 	bl	7ab0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7ee8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    7eea:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7eee:	40d9      	lsrs	r1, r3
    7ef0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7ef4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7ef6:	4620      	mov	r0, r4
}
    7ef8:	b003      	add	sp, #12
    7efa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7efe:	f005 bcf2 	b.w	d8e6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7f02:	2103      	movs	r1, #3
    7f04:	e7f7      	b.n	7ef6 <nrfx_gpiote_trigger_enable+0xba>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7f06:	2102      	movs	r1, #2
    7f08:	e7f5      	b.n	7ef6 <nrfx_gpiote_trigger_enable+0xba>
    7f0a:	bf00      	nop
    7f0c:	0000ff87 	.word	0x0000ff87
    7f10:	0000eb06 	.word	0x0000eb06
    7f14:	0000ff05 	.word	0x0000ff05
    7f18:	20000100 	.word	0x20000100
    7f1c:	40006000 	.word	0x40006000
    7f20:	0000ff9c 	.word	0x0000ff9c

00007f24 <nrfx_gpiote_trigger_disable>:
{
    7f24:	b508      	push	{r3, lr}
    7f26:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7f28:	f7ff fd28 	bl	797c <pin_in_use_by_te>
    7f2c:	b1c8      	cbz	r0, 7f62 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    7f2e:	4610      	mov	r0, r2
    7f30:	f7ff fd3a 	bl	79a8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7f34:	b9a8      	cbnz	r0, 7f62 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7f36:	3208      	adds	r2, #8
    7f38:	4b0d      	ldr	r3, [pc, #52]	; (7f70 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    7f3a:	490e      	ldr	r1, [pc, #56]	; (7f74 <nrfx_gpiote_trigger_disable+0x50>)
    7f3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7f40:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7f42:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7f44:	409a      	lsls	r2, r3
    7f46:	009b      	lsls	r3, r3, #2
    7f48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7f4c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7f50:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7f54:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    7f58:	f022 0203 	bic.w	r2, r2, #3
    7f5c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    7f60:	bd08      	pop	{r3, pc}
    7f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7f66:	2100      	movs	r1, #0
    7f68:	4610      	mov	r0, r2
    7f6a:	f005 bcbc 	b.w	d8e6 <nrf_gpio_cfg_sense_set>
    7f6e:	bf00      	nop
    7f70:	20000100 	.word	0x20000100
    7f74:	40006000 	.word	0x40006000

00007f78 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7f78:	4b0e      	ldr	r3, [pc, #56]	; (7fb4 <nrfx_gpiote_pin_uninit+0x3c>)
    7f7a:	f100 0208 	add.w	r2, r0, #8
{
    7f7e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7f80:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    7f84:	07db      	lsls	r3, r3, #31
{
    7f86:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    7f88:	d511      	bpl.n	7fae <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    7f8a:	f7ff ffcb 	bl	7f24 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    7f8e:	4620      	mov	r0, r4
    7f90:	f7ff fd72 	bl	7a78 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7f94:	a801      	add	r0, sp, #4
    7f96:	9401      	str	r4, [sp, #4]
    7f98:	f7ff fd8a 	bl	7ab0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7f9c:	9b01      	ldr	r3, [sp, #4]
    7f9e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7fa2:	2202      	movs	r2, #2
    7fa4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    7fa8:	4803      	ldr	r0, [pc, #12]	; (7fb8 <nrfx_gpiote_pin_uninit+0x40>)
}
    7faa:	b002      	add	sp, #8
    7fac:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7fae:	4803      	ldr	r0, [pc, #12]	; (7fbc <nrfx_gpiote_pin_uninit+0x44>)
    7fb0:	e7fb      	b.n	7faa <nrfx_gpiote_pin_uninit+0x32>
    7fb2:	bf00      	nop
    7fb4:	20000100 	.word	0x20000100
    7fb8:	0bad0000 	.word	0x0bad0000
    7fbc:	0bad0004 	.word	0x0bad0004

00007fc0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    7fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fc4:	4b65      	ldr	r3, [pc, #404]	; (815c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>)
    return p_reg->INTENSET & mask;
    7fc6:	4866      	ldr	r0, [pc, #408]	; (8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7fc8:	4966      	ldr	r1, [pc, #408]	; (8164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>)
    uint32_t status = 0;
    7fca:	2600      	movs	r6, #0
{
    7fcc:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7fce:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7fd0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fd2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7fd4:	b135      	cbz	r5, 7fe4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    7fd6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    7fda:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7fdc:	bf1e      	ittt	ne
    7fde:	601c      	strne	r4, [r3, #0]
    7fe0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    7fe2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7fe4:	3304      	adds	r3, #4
    7fe6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    7fe8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7fec:	d1f1      	bne.n	7fd2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fee:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    7ff2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    7ff6:	2b00      	cmp	r3, #0
    7ff8:	f000 8093 	beq.w	8122 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    7ffc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8000:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    8004:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    8006:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    800a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    800e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    8010:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    8014:	2700      	movs	r7, #0
            while (latch[i])
    8016:	f10d 0910 	add.w	r9, sp, #16
    801a:	017b      	lsls	r3, r7, #5
    801c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    801e:	f04f 0a01 	mov.w	sl, #1
    8022:	e04b      	b.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
                pin += 32 * i;
    8024:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8026:	4a50      	ldr	r2, [pc, #320]	; (8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>)
                uint32_t pin = NRF_CTZ(latch[i]);
    8028:	fa94 f4a4 	rbit	r4, r4
    802c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    8030:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8032:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    8036:	08e0      	lsrs	r0, r4, #3
    8038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    803c:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    803e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    8042:	fa0a fc02 	lsl.w	ip, sl, r2
    8046:	f819 2000 	ldrb.w	r2, [r9, r0]
    804a:	ea22 020c 	bic.w	r2, r2, ip
    804e:	0899      	lsrs	r1, r3, #2
    8050:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8054:	a803      	add	r0, sp, #12
    8056:	f3c3 0582 	ubfx	r5, r3, #2, #3
    805a:	9101      	str	r1, [sp, #4]
    805c:	f7ff fd28 	bl	7ab0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8060:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    8062:	9901      	ldr	r1, [sp, #4]
    8064:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    8068:	074b      	lsls	r3, r1, #29
    806a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    806e:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    8070:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    8074:	d529      	bpl.n	80ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca>
        call_handler(pin, trigger);
    8076:	4659      	mov	r1, fp
    8078:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    807a:	b2d5      	uxtb	r5, r2
    807c:	f7ff fc9e 	bl	79bc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8080:	a803      	add	r0, sp, #12
    8082:	9403      	str	r4, [sp, #12]
    8084:	f7ff fd14 	bl	7ab0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8088:	9b03      	ldr	r3, [sp, #12]
    808a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    808e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    8092:	f3c3 4301 	ubfx	r3, r3, #16, #2
    8096:	429d      	cmp	r5, r3
    8098:	d107      	bne.n	80aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    809a:	2100      	movs	r1, #0
    809c:	4620      	mov	r0, r4
    809e:	f005 fc22 	bl	d8e6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    80a2:	4629      	mov	r1, r5
    80a4:	4620      	mov	r0, r4
    80a6:	f005 fc1e 	bl	d8e6 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    80aa:	a803      	add	r0, sp, #12
    80ac:	9403      	str	r4, [sp, #12]
    80ae:	f7ff fcff 	bl	7ab0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    80b2:	9b03      	ldr	r3, [sp, #12]
    80b4:	fa0a f303 	lsl.w	r3, sl, r3
    80b8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    80bc:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    80c0:	2c00      	cmp	r4, #0
    80c2:	d1af      	bne.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    80c4:	b9cf      	cbnz	r7, 80fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa>
    80c6:	2701      	movs	r7, #1
    80c8:	e7a7      	b.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    80ca:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    80cc:	bf0c      	ite	eq
    80ce:	2103      	moveq	r1, #3
    80d0:	2102      	movne	r1, #2
    80d2:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    80d4:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    80d6:	f005 fc06 	bl	d8e6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    80da:	2d03      	cmp	r5, #3
    80dc:	d004      	beq.n	80e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>
    80de:	9a01      	ldr	r2, [sp, #4]
    80e0:	2a02      	cmp	r2, #2
    80e2:	d106      	bne.n	80f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    80e4:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    80e6:	d1e0      	bne.n	80aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa>
            call_handler(pin, trigger);
    80e8:	4659      	mov	r1, fp
    80ea:	4620      	mov	r0, r4
    80ec:	f7ff fc66 	bl	79bc <call_handler>
    80f0:	e7db      	b.n	80aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    80f2:	2a03      	cmp	r2, #3
    80f4:	d1d9      	bne.n	80aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    80f6:	2d02      	cmp	r5, #2
    80f8:	e7f5      	b.n	80e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    80fa:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    80fe:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    8102:	491a      	ldr	r1, [pc, #104]	; (816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>)
    8104:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8108:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    810c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    810e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    8112:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    8116:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    8118:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    811c:	4313      	orrs	r3, r2
    811e:	f47f af79 	bne.w	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
        mask &= ~NRFX_BIT(ch);
    8122:	2401      	movs	r4, #1
    while (mask)
    8124:	b916      	cbnz	r6, 812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    8126:	b007      	add	sp, #28
    8128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    812c:	fa96 f3a6 	rbit	r3, r6
    8130:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    8134:	fa04 f203 	lsl.w	r2, r4, r3
    8138:	009b      	lsls	r3, r3, #2
    813a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    813e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8142:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8146:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    814a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    814e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    8152:	f3c1 4101 	ubfx	r1, r1, #16, #2
    8156:	f7ff fc31 	bl	79bc <call_handler>
    815a:	e7e3      	b.n	8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>
    815c:	40006100 	.word	0x40006100
    8160:	40006000 	.word	0x40006000
    8164:	40006120 	.word	0x40006120
    8168:	20000100 	.word	0x20000100
    816c:	50000300 	.word	0x50000300

00008170 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    8170:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    8172:	4801      	ldr	r0, [pc, #4]	; (8178 <nrfx_ppi_channel_alloc+0x8>)
    8174:	f7ff ba48 	b.w	7608 <nrfx_flag32_alloc>
    8178:	2000017c 	.word	0x2000017c

0000817c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    817c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    817e:	4c11      	ldr	r4, [pc, #68]	; (81c4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    8180:	4a11      	ldr	r2, [pc, #68]	; (81c8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    8182:	4912      	ldr	r1, [pc, #72]	; (81cc <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    8184:	2303      	movs	r3, #3
    8186:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    8188:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    818a:	4b11      	ldr	r3, [pc, #68]	; (81d0 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    818c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    818e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    8190:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8194:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    8196:	2300      	movs	r3, #0
    8198:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    819a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    819c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    819e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    81a0:	4a0c      	ldr	r2, [pc, #48]	; (81d4 <_DoInit+0x58>)
    81a2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    81a4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    81a6:	2210      	movs	r2, #16
    81a8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    81aa:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    81ac:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    81ae:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    81b0:	f005 fd83 	bl	dcba <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    81b4:	4908      	ldr	r1, [pc, #32]	; (81d8 <_DoInit+0x5c>)
    81b6:	4620      	mov	r0, r4
    81b8:	f005 fd7f 	bl	dcba <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    81bc:	2320      	movs	r3, #32
    81be:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    81c0:	bd10      	pop	{r4, pc}
    81c2:	bf00      	nop
    81c4:	2000101c 	.word	0x2000101c
    81c8:	0000ffa7 	.word	0x0000ffa7
    81cc:	0000ffb0 	.word	0x0000ffb0
    81d0:	2000d30e 	.word	0x2000d30e
    81d4:	2000d2fe 	.word	0x2000d2fe
    81d8:	0000ffb4 	.word	0x0000ffb4

000081dc <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    81dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    81e0:	4f23      	ldr	r7, [pc, #140]	; (8270 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    81e2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    81e6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    81e8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    81ec:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    81ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    81f0:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    81f2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    81f4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    81f6:	d834      	bhi.n	8262 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    81f8:	f8d2 a020 	ldr.w	sl, [r2, #32]
    81fc:	ebaa 0905 	sub.w	r9, sl, r5
    8200:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    8204:	4294      	cmp	r4, r2
    8206:	d811      	bhi.n	822c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8208:	f04f 0918 	mov.w	r9, #24
    820c:	fb06 9309 	mla	r3, r6, r9, r9
    8210:	443b      	add	r3, r7
    8212:	4622      	mov	r2, r4
    8214:	6858      	ldr	r0, [r3, #4]
    8216:	4641      	mov	r1, r8
    8218:	4428      	add	r0, r5
    821a:	f005 fc2d 	bl	da78 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    821e:	fb09 7606 	mla	r6, r9, r6, r7
    8222:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    8224:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    8226:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    8228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    822c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    822e:	429c      	cmp	r4, r3
    8230:	d81b      	bhi.n	826a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8232:	fb00 bb0b 	mla	fp, r0, fp, fp
    8236:	44bb      	add	fp, r7
    8238:	464a      	mov	r2, r9
    823a:	f8db 0004 	ldr.w	r0, [fp, #4]
    823e:	442c      	add	r4, r5
    8240:	4428      	add	r0, r5
    8242:	f005 fc19 	bl	da78 <memcpy>
      if (NumBytes) {
    8246:	ebb4 040a 	subs.w	r4, r4, sl
    824a:	d006      	beq.n	825a <SEGGER_RTT_WriteSkipNoLock+0x7e>
    824c:	f8db 0004 	ldr.w	r0, [fp, #4]
    8250:	4622      	mov	r2, r4
    8252:	eb08 0109 	add.w	r1, r8, r9
    8256:	f005 fc0f 	bl	da78 <memcpy>
      pRing->WrOff = NumBytes;
    825a:	2018      	movs	r0, #24
    825c:	fb00 7606 	mla	r6, r0, r6, r7
    8260:	e7e0      	b.n	8224 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    8262:	3b01      	subs	r3, #1
    8264:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    8266:	42a3      	cmp	r3, r4
    8268:	d2ce      	bcs.n	8208 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    826a:	2000      	movs	r0, #0
    826c:	e7dc      	b.n	8228 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    826e:	bf00      	nop
    8270:	2000101c 	.word	0x2000101c

00008274 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    8274:	4b03      	ldr	r3, [pc, #12]	; (8284 <SEGGER_RTT_HasDataUp+0x10>)
    8276:	2218      	movs	r2, #24
    8278:	fb02 3300 	mla	r3, r2, r0, r3
    827c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    827e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    8280:	1a80      	subs	r0, r0, r2
    8282:	4770      	bx	lr
    8284:	2000101c 	.word	0x2000101c

00008288 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8288:	4b0e      	ldr	r3, [pc, #56]	; (82c4 <z_sys_init_run_level+0x3c>)
{
    828a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    828c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    8290:	3001      	adds	r0, #1
    8292:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    8296:	42a6      	cmp	r6, r4
    8298:	d800      	bhi.n	829c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    829a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    829c:	e9d4 3500 	ldrd	r3, r5, [r4]
    82a0:	4628      	mov	r0, r5
    82a2:	4798      	blx	r3
		if (dev != NULL) {
    82a4:	b165      	cbz	r5, 82c0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    82a6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    82a8:	b130      	cbz	r0, 82b8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    82aa:	2800      	cmp	r0, #0
    82ac:	bfb8      	it	lt
    82ae:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    82b0:	28ff      	cmp	r0, #255	; 0xff
    82b2:	bfa8      	it	ge
    82b4:	20ff      	movge	r0, #255	; 0xff
    82b6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    82b8:	785a      	ldrb	r2, [r3, #1]
    82ba:	f042 0201 	orr.w	r2, r2, #1
    82be:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    82c0:	3408      	adds	r4, #8
    82c2:	e7e8      	b.n	8296 <z_sys_init_run_level+0xe>
    82c4:	0000e7c4 	.word	0x0000e7c4

000082c8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    82c8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    82ca:	4605      	mov	r5, r0
    82cc:	b910      	cbnz	r0, 82d4 <z_impl_device_get_binding+0xc>
		return NULL;
    82ce:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    82d0:	4620      	mov	r0, r4
    82d2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    82d4:	7803      	ldrb	r3, [r0, #0]
    82d6:	2b00      	cmp	r3, #0
    82d8:	d0f9      	beq.n	82ce <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    82da:	4c0e      	ldr	r4, [pc, #56]	; (8314 <z_impl_device_get_binding+0x4c>)
    82dc:	4e0e      	ldr	r6, [pc, #56]	; (8318 <z_impl_device_get_binding+0x50>)
    82de:	42b4      	cmp	r4, r6
    82e0:	d108      	bne.n	82f4 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    82e2:	4c0c      	ldr	r4, [pc, #48]	; (8314 <z_impl_device_get_binding+0x4c>)
    82e4:	42b4      	cmp	r4, r6
    82e6:	d0f2      	beq.n	82ce <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    82e8:	4620      	mov	r0, r4
    82ea:	f005 fb13 	bl	d914 <z_device_is_ready>
    82ee:	b950      	cbnz	r0, 8306 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    82f0:	3418      	adds	r4, #24
    82f2:	e7f7      	b.n	82e4 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    82f4:	4620      	mov	r0, r4
    82f6:	f005 fb0d 	bl	d914 <z_device_is_ready>
    82fa:	b110      	cbz	r0, 8302 <z_impl_device_get_binding+0x3a>
    82fc:	6823      	ldr	r3, [r4, #0]
    82fe:	42ab      	cmp	r3, r5
    8300:	d0e6      	beq.n	82d0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    8302:	3418      	adds	r4, #24
    8304:	e7eb      	b.n	82de <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    8306:	6821      	ldr	r1, [r4, #0]
    8308:	4628      	mov	r0, r5
    830a:	f7f8 fe10 	bl	f2e <strcmp>
    830e:	2800      	cmp	r0, #0
    8310:	d1ee      	bne.n	82f0 <z_impl_device_get_binding+0x28>
    8312:	e7dd      	b.n	82d0 <z_impl_device_get_binding+0x8>
    8314:	0000e194 	.word	0x0000e194
    8318:	0000e224 	.word	0x0000e224

0000831c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8320:	4605      	mov	r5, r0
    8322:	b086      	sub	sp, #24
    8324:	460f      	mov	r7, r1
	__asm__ volatile(
    8326:	f04f 0320 	mov.w	r3, #32
    832a:	f3ef 8811 	mrs	r8, BASEPRI
    832e:	f383 8812 	msr	BASEPRI_MAX, r3
    8332:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    8336:	f001 fef1 	bl	a11c <z_impl_z_current_get>
    833a:	2d04      	cmp	r5, #4
    833c:	bf96      	itet	ls
    833e:	4b29      	ldrls	r3, [pc, #164]	; (83e4 <z_fatal_error+0xc8>)
    8340:	4b29      	ldrhi	r3, [pc, #164]	; (83e8 <z_fatal_error+0xcc>)
    8342:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    8346:	4929      	ldr	r1, [pc, #164]	; (83ec <z_fatal_error+0xd0>)
    8348:	9503      	str	r5, [sp, #12]
    834a:	2400      	movs	r4, #0
    834c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    8350:	4b27      	ldr	r3, [pc, #156]	; (83f0 <z_fatal_error+0xd4>)
    8352:	9400      	str	r4, [sp, #0]
    8354:	e9cd 4301 	strd	r4, r3, [sp, #4]
    8358:	4606      	mov	r6, r0
    835a:	4623      	mov	r3, r4
    835c:	2201      	movs	r2, #1
    835e:	4620      	mov	r0, r4
    8360:	f005 fae2 	bl	d928 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    8364:	b16f      	cbz	r7, 8382 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    8366:	69fb      	ldr	r3, [r7, #28]
    8368:	f3c3 0308 	ubfx	r3, r3, #0, #9
    836c:	b14b      	cbz	r3, 8382 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    836e:	4b21      	ldr	r3, [pc, #132]	; (83f4 <z_fatal_error+0xd8>)
    8370:	491e      	ldr	r1, [pc, #120]	; (83ec <z_fatal_error+0xd0>)
    8372:	9400      	str	r4, [sp, #0]
    8374:	e9cd 4301 	strd	r4, r3, [sp, #4]
    8378:	2201      	movs	r2, #1
    837a:	4623      	mov	r3, r4
    837c:	4620      	mov	r0, r4
    837e:	f005 fad3 	bl	d928 <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    8382:	b12e      	cbz	r6, 8390 <z_fatal_error+0x74>
    8384:	4630      	mov	r0, r6
    8386:	f005 fb05 	bl	d994 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    838a:	b108      	cbz	r0, 8390 <z_fatal_error+0x74>
    838c:	7803      	ldrb	r3, [r0, #0]
    838e:	b903      	cbnz	r3, 8392 <z_fatal_error+0x76>
		thread_name = "unknown";
    8390:	4819      	ldr	r0, [pc, #100]	; (83f8 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    8392:	4b1a      	ldr	r3, [pc, #104]	; (83fc <z_fatal_error+0xe0>)
    8394:	9302      	str	r3, [sp, #8]
    8396:	2300      	movs	r3, #0
    8398:	e9cd 6003 	strd	r6, r0, [sp, #12]
    839c:	e9cd 3300 	strd	r3, r3, [sp]
    83a0:	4618      	mov	r0, r3
    83a2:	4912      	ldr	r1, [pc, #72]	; (83ec <z_fatal_error+0xd0>)
    83a4:	2201      	movs	r2, #1
    83a6:	f005 fabf 	bl	d928 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    83aa:	4639      	mov	r1, r7
    83ac:	4628      	mov	r0, r5
    83ae:	f7ff f809 	bl	73c4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    83b2:	2d04      	cmp	r5, #4
    83b4:	d10c      	bne.n	83d0 <z_fatal_error+0xb4>
    83b6:	4912      	ldr	r1, [pc, #72]	; (8400 <z_fatal_error+0xe4>)
    83b8:	4a12      	ldr	r2, [pc, #72]	; (8404 <z_fatal_error+0xe8>)
    83ba:	4813      	ldr	r0, [pc, #76]	; (8408 <z_fatal_error+0xec>)
    83bc:	238f      	movs	r3, #143	; 0x8f
    83be:	f004 fd62 	bl	ce86 <assert_print>
    83c2:	4812      	ldr	r0, [pc, #72]	; (840c <z_fatal_error+0xf0>)
    83c4:	f004 fd5f 	bl	ce86 <assert_print>
    83c8:	480e      	ldr	r0, [pc, #56]	; (8404 <z_fatal_error+0xe8>)
    83ca:	218f      	movs	r1, #143	; 0x8f
    83cc:	f004 fd54 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    83d0:	f388 8811 	msr	BASEPRI, r8
    83d4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    83d8:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    83da:	b006      	add	sp, #24
    83dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    83e0:	f7fc bf8c 	b.w	52fc <z_impl_k_thread_abort>
    83e4:	0000e7dc 	.word	0x0000e7dc
    83e8:	0000ffbb 	.word	0x0000ffbb
    83ec:	0000e3d4 	.word	0x0000e3d4
    83f0:	0000ffd1 	.word	0x0000ffd1
    83f4:	0000fff9 	.word	0x0000fff9
    83f8:	0000ffc9 	.word	0x0000ffc9
    83fc:	0001001a 	.word	0x0001001a
    8400:	00010054 	.word	0x00010054
    8404:	00010032 	.word	0x00010032
    8408:	0000eb06 	.word	0x0000eb06
    840c:	00010071 	.word	0x00010071

00008410 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    8410:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    8412:	4b0a      	ldr	r3, [pc, #40]	; (843c <bg_thread_main+0x2c>)
    8414:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8416:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    8418:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    841a:	f7ff ff35 	bl	8288 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    841e:	f002 fb61 	bl	aae4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    8422:	2003      	movs	r0, #3
    8424:	f7ff ff30 	bl	8288 <z_sys_init_run_level>

	z_init_static_threads();
    8428:	f000 fa7c 	bl	8924 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    842c:	f7f9 feec 	bl	2208 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8430:	4a03      	ldr	r2, [pc, #12]	; (8440 <bg_thread_main+0x30>)
    8432:	7b13      	ldrb	r3, [r2, #12]
    8434:	f023 0301 	bic.w	r3, r3, #1
    8438:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    843a:	bd08      	pop	{r3, pc}
    843c:	2000d70e 	.word	0x2000d70e
    8440:	200008e8 	.word	0x200008e8

00008444 <z_bss_zero>:
{
    8444:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    8446:	4803      	ldr	r0, [pc, #12]	; (8454 <z_bss_zero+0x10>)
    8448:	4a03      	ldr	r2, [pc, #12]	; (8458 <z_bss_zero+0x14>)
    844a:	2100      	movs	r1, #0
    844c:	1a12      	subs	r2, r2, r0
    844e:	f005 fa7b 	bl	d948 <z_early_memset>
}
    8452:	bd08      	pop	{r3, pc}
    8454:	20000478 	.word	0x20000478
    8458:	2000d710 	.word	0x2000d710

0000845c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    845c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    845e:	2300      	movs	r3, #0
{
    8460:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    8462:	2201      	movs	r2, #1
    8464:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    8468:	4e13      	ldr	r6, [pc, #76]	; (84b8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    846a:	4d14      	ldr	r5, [pc, #80]	; (84bc <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    846c:	9301      	str	r3, [sp, #4]
    846e:	220f      	movs	r2, #15
    8470:	e9cd 3202 	strd	r3, r2, [sp, #8]
    8474:	4912      	ldr	r1, [pc, #72]	; (84c0 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8476:	2318      	movs	r3, #24
    8478:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    847c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    8480:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    8482:	f44f 70b0 	mov.w	r0, #352	; 0x160
    8486:	fb00 1104 	mla	r1, r0, r4, r1
    848a:	4b0e      	ldr	r3, [pc, #56]	; (84c4 <z_init_cpu+0x68>)
    848c:	9500      	str	r5, [sp, #0]
    848e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    8492:	4630      	mov	r0, r6
    8494:	f000 f992 	bl	87bc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8498:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    849a:	480b      	ldr	r0, [pc, #44]	; (84c8 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    849c:	752c      	strb	r4, [r5, #20]
    849e:	f023 0304 	bic.w	r3, r3, #4
    84a2:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    84a4:	f44f 6302 	mov.w	r3, #2080	; 0x820
    84a8:	fb03 0404 	mla	r4, r3, r4, r0
    84ac:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    84ae:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    84b0:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    84b2:	b006      	add	sp, #24
    84b4:	bd70      	pop	{r4, r5, r6, pc}
    84b6:	bf00      	nop
    84b8:	20000868 	.word	0x20000868
    84bc:	200010c4 	.word	0x200010c4
    84c0:	2000ebc0 	.word	0x2000ebc0
    84c4:	00008a81 	.word	0x00008a81
    84c8:	2000ed20 	.word	0x2000ed20

000084cc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    84cc:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    84ce:	4b2f      	ldr	r3, [pc, #188]	; (858c <z_cstart+0xc0>)
    84d0:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    84d2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    84d6:	4d2e      	ldr	r5, [pc, #184]	; (8590 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    84d8:	4e2e      	ldr	r6, [pc, #184]	; (8594 <z_cstart+0xc8>)
    84da:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    84dc:	4f2e      	ldr	r7, [pc, #184]	; (8598 <z_cstart+0xcc>)
    84de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    84e2:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    84e4:	2400      	movs	r4, #0
    84e6:	23e0      	movs	r3, #224	; 0xe0
    84e8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    84ec:	77ec      	strb	r4, [r5, #31]
    84ee:	762c      	strb	r4, [r5, #24]
    84f0:	766c      	strb	r4, [r5, #25]
    84f2:	76ac      	strb	r4, [r5, #26]
    84f4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    84f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    84fa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    84fe:	626b      	str	r3, [r5, #36]	; 0x24
    8500:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8504:	f7fc fe6e 	bl	51e4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8508:	f7fc f9b6 	bl	4878 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    850c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8510:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8512:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    8514:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8516:	f7fd f83b 	bl	5590 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    851a:	f7fc ff53 	bl	53c4 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    851e:	f7fb fb7f 	bl	3c20 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    8522:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    8526:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    8528:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    852c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    8530:	f002 fad2 	bl	aad8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    8534:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    8536:	f005 f9ec 	bl	d912 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    853a:	4620      	mov	r0, r4
    853c:	f7ff fea4 	bl	8288 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8540:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    8542:	4d16      	ldr	r5, [pc, #88]	; (859c <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8544:	f7ff fea0 	bl	8288 <z_sys_init_run_level>
	z_sched_init();
    8548:	f001 fc5a 	bl	9e00 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    854c:	4b14      	ldr	r3, [pc, #80]	; (85a0 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    854e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8550:	9305      	str	r3, [sp, #20]
    8552:	2301      	movs	r3, #1
    8554:	4913      	ldr	r1, [pc, #76]	; (85a4 <z_cstart+0xd8>)
    8556:	9400      	str	r4, [sp, #0]
    8558:	e9cd 4303 	strd	r4, r3, [sp, #12]
    855c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8560:	463b      	mov	r3, r7
    8562:	e9cd 4401 	strd	r4, r4, [sp, #4]
    8566:	4628      	mov	r0, r5
    8568:	f000 f928 	bl	87bc <z_setup_new_thread>
    856c:	7b6a      	ldrb	r2, [r5, #13]
    856e:	4606      	mov	r6, r0
    8570:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    8574:	4628      	mov	r0, r5
    8576:	736a      	strb	r2, [r5, #13]
    8578:	f001 f848 	bl	960c <z_ready_thread>
	z_init_cpu(0);
    857c:	4620      	mov	r0, r4
    857e:	f7ff ff6d 	bl	845c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8582:	463a      	mov	r2, r7
    8584:	4631      	mov	r1, r6
    8586:	4628      	mov	r0, r5
    8588:	f7fc fadc 	bl	4b44 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    858c:	2000f540 	.word	0x2000f540
    8590:	e000ed00 	.word	0xe000ed00
    8594:	200010c4 	.word	0x200010c4
    8598:	00008411 	.word	0x00008411
    859c:	200008e8 	.word	0x200008e8
    85a0:	000100f0 	.word	0x000100f0
    85a4:	2000e7a0 	.word	0x2000e7a0

000085a8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    85a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    85aa:	4c16      	ldr	r4, [pc, #88]	; (8604 <init_mem_slab_module+0x5c>)
    85ac:	4d16      	ldr	r5, [pc, #88]	; (8608 <init_mem_slab_module+0x60>)
    85ae:	4e17      	ldr	r6, [pc, #92]	; (860c <init_mem_slab_module+0x64>)
    85b0:	42ac      	cmp	r4, r5
    85b2:	d90c      	bls.n	85ce <init_mem_slab_module+0x26>
    85b4:	4916      	ldr	r1, [pc, #88]	; (8610 <init_mem_slab_module+0x68>)
    85b6:	4817      	ldr	r0, [pc, #92]	; (8614 <init_mem_slab_module+0x6c>)
    85b8:	233d      	movs	r3, #61	; 0x3d
    85ba:	4632      	mov	r2, r6
    85bc:	f004 fc63 	bl	ce86 <assert_print>
    85c0:	4815      	ldr	r0, [pc, #84]	; (8618 <init_mem_slab_module+0x70>)
    85c2:	f004 fc60 	bl	ce86 <assert_print>
    85c6:	213d      	movs	r1, #61	; 0x3d
    85c8:	4630      	mov	r0, r6
    85ca:	f004 fc55 	bl	ce78 <assert_post_action>
    85ce:	42ac      	cmp	r4, r5
    85d0:	d301      	bcc.n	85d6 <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    85d2:	2000      	movs	r0, #0
	return rc;
}
    85d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    85d6:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    85da:	ea41 0302 	orr.w	r3, r1, r2
    85de:	f013 0303 	ands.w	r3, r3, #3
    85e2:	d10b      	bne.n	85fc <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    85e4:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    85e6:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    85e8:	4283      	cmp	r3, r0
    85ea:	d101      	bne.n	85f0 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    85ec:	3420      	adds	r4, #32
    85ee:	e7df      	b.n	85b0 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    85f0:	69a7      	ldr	r7, [r4, #24]
    85f2:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    85f4:	3301      	adds	r3, #1
		slab->free_list = p;
    85f6:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    85f8:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    85fa:	e7f5      	b.n	85e8 <init_mem_slab_module+0x40>
	return rc;
    85fc:	f06f 0015 	mvn.w	r0, #21
    8600:	e7e8      	b.n	85d4 <init_mem_slab_module+0x2c>
    8602:	bf00      	nop
    8604:	200003d0 	.word	0x200003d0
    8608:	200003d0 	.word	0x200003d0
    860c:	000100f8 	.word	0x000100f8
    8610:	0001011d 	.word	0x0001011d
    8614:	0000eb06 	.word	0x0000eb06
    8618:	0001013a 	.word	0x0001013a

0000861c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    861c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8620:	4604      	mov	r4, r0
    8622:	460e      	mov	r6, r1
    8624:	4690      	mov	r8, r2
    8626:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    8628:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    862c:	f04f 0320 	mov.w	r3, #32
    8630:	f3ef 8911 	mrs	r9, BASEPRI
    8634:	f383 8812 	msr	BASEPRI_MAX, r3
    8638:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    863c:	4628      	mov	r0, r5
    863e:	f000 f9f9 	bl	8a34 <z_spin_lock_valid>
    8642:	b968      	cbnz	r0, 8660 <k_mem_slab_alloc+0x44>
    8644:	4a24      	ldr	r2, [pc, #144]	; (86d8 <k_mem_slab_alloc+0xbc>)
    8646:	4925      	ldr	r1, [pc, #148]	; (86dc <k_mem_slab_alloc+0xc0>)
    8648:	4825      	ldr	r0, [pc, #148]	; (86e0 <k_mem_slab_alloc+0xc4>)
    864a:	238e      	movs	r3, #142	; 0x8e
    864c:	f004 fc1b 	bl	ce86 <assert_print>
    8650:	4824      	ldr	r0, [pc, #144]	; (86e4 <k_mem_slab_alloc+0xc8>)
    8652:	4629      	mov	r1, r5
    8654:	f004 fc17 	bl	ce86 <assert_print>
    8658:	481f      	ldr	r0, [pc, #124]	; (86d8 <k_mem_slab_alloc+0xbc>)
    865a:	218e      	movs	r1, #142	; 0x8e
    865c:	f004 fc0c 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    8660:	4628      	mov	r0, r5
    8662:	f000 fa05 	bl	8a70 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    8666:	69a3      	ldr	r3, [r4, #24]
    8668:	b1eb      	cbz	r3, 86a6 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    866a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    866c:	681b      	ldr	r3, [r3, #0]
    866e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    8670:	69e3      	ldr	r3, [r4, #28]
    8672:	3301      	adds	r3, #1
    8674:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    8676:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8678:	4628      	mov	r0, r5
    867a:	f000 f9e9 	bl	8a50 <z_spin_unlock_valid>
    867e:	b968      	cbnz	r0, 869c <k_mem_slab_alloc+0x80>
    8680:	4a15      	ldr	r2, [pc, #84]	; (86d8 <k_mem_slab_alloc+0xbc>)
    8682:	4919      	ldr	r1, [pc, #100]	; (86e8 <k_mem_slab_alloc+0xcc>)
    8684:	4816      	ldr	r0, [pc, #88]	; (86e0 <k_mem_slab_alloc+0xc4>)
    8686:	23b9      	movs	r3, #185	; 0xb9
    8688:	f004 fbfd 	bl	ce86 <assert_print>
    868c:	4817      	ldr	r0, [pc, #92]	; (86ec <k_mem_slab_alloc+0xd0>)
    868e:	4629      	mov	r1, r5
    8690:	f004 fbf9 	bl	ce86 <assert_print>
    8694:	4810      	ldr	r0, [pc, #64]	; (86d8 <k_mem_slab_alloc+0xbc>)
    8696:	21b9      	movs	r1, #185	; 0xb9
    8698:	f004 fbee 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    869c:	f389 8811 	msr	BASEPRI, r9
    86a0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    86a4:	e013      	b.n	86ce <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    86a6:	ea58 0207 	orrs.w	r2, r8, r7
    86aa:	d103      	bne.n	86b4 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    86ac:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    86ae:	f06f 040b 	mvn.w	r4, #11
    86b2:	e7e1      	b.n	8678 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    86b4:	4622      	mov	r2, r4
    86b6:	e9cd 8700 	strd	r8, r7, [sp]
    86ba:	4649      	mov	r1, r9
    86bc:	4628      	mov	r0, r5
    86be:	f001 f955 	bl	996c <z_pend_curr>
		if (result == 0) {
    86c2:	4604      	mov	r4, r0
    86c4:	b918      	cbnz	r0, 86ce <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    86c6:	4b0a      	ldr	r3, [pc, #40]	; (86f0 <k_mem_slab_alloc+0xd4>)
    86c8:	689b      	ldr	r3, [r3, #8]
    86ca:	695b      	ldr	r3, [r3, #20]
    86cc:	6033      	str	r3, [r6, #0]
}
    86ce:	4620      	mov	r0, r4
    86d0:	b003      	add	sp, #12
    86d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    86d6:	bf00      	nop
    86d8:	0000ec50 	.word	0x0000ec50
    86dc:	0000eca9 	.word	0x0000eca9
    86e0:	0000eb06 	.word	0x0000eb06
    86e4:	0000ecbe 	.word	0x0000ecbe
    86e8:	0000ec7d 	.word	0x0000ec7d
    86ec:	0000ec94 	.word	0x0000ec94
    86f0:	200010c4 	.word	0x200010c4

000086f4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    86f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86f8:	4604      	mov	r4, r0
    86fa:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    86fc:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    8700:	f04f 0320 	mov.w	r3, #32
    8704:	f3ef 8711 	mrs	r7, BASEPRI
    8708:	f383 8812 	msr	BASEPRI_MAX, r3
    870c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8710:	4628      	mov	r0, r5
    8712:	f000 f98f 	bl	8a34 <z_spin_lock_valid>
    8716:	b968      	cbnz	r0, 8734 <k_mem_slab_free+0x40>
    8718:	4a22      	ldr	r2, [pc, #136]	; (87a4 <k_mem_slab_free+0xb0>)
    871a:	4923      	ldr	r1, [pc, #140]	; (87a8 <k_mem_slab_free+0xb4>)
    871c:	4823      	ldr	r0, [pc, #140]	; (87ac <k_mem_slab_free+0xb8>)
    871e:	238e      	movs	r3, #142	; 0x8e
    8720:	f004 fbb1 	bl	ce86 <assert_print>
    8724:	4822      	ldr	r0, [pc, #136]	; (87b0 <k_mem_slab_free+0xbc>)
    8726:	4629      	mov	r1, r5
    8728:	f004 fbad 	bl	ce86 <assert_print>
    872c:	481d      	ldr	r0, [pc, #116]	; (87a4 <k_mem_slab_free+0xb0>)
    872e:	218e      	movs	r1, #142	; 0x8e
    8730:	f004 fba2 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    8734:	4628      	mov	r0, r5
    8736:	f000 f99b 	bl	8a70 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    873a:	f8d4 8018 	ldr.w	r8, [r4, #24]
    873e:	f1b8 0f00 	cmp.w	r8, #0
    8742:	d10f      	bne.n	8764 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8744:	4620      	mov	r0, r4
    8746:	f001 fb0b 	bl	9d60 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    874a:	b158      	cbz	r0, 8764 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    874c:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    874e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8750:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    8754:	f000 ff5a 	bl	960c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8758:	4639      	mov	r1, r7
    875a:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    875c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    8760:	f000 bd08 	b.w	9174 <z_reschedule>
	**(char ***) mem = slab->free_list;
    8764:	6833      	ldr	r3, [r6, #0]
    8766:	69a2      	ldr	r2, [r4, #24]
    8768:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    876a:	6833      	ldr	r3, [r6, #0]
    876c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    876e:	69e3      	ldr	r3, [r4, #28]
    8770:	3b01      	subs	r3, #1
    8772:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8774:	4628      	mov	r0, r5
    8776:	f000 f96b 	bl	8a50 <z_spin_unlock_valid>
    877a:	b968      	cbnz	r0, 8798 <k_mem_slab_free+0xa4>
    877c:	4a09      	ldr	r2, [pc, #36]	; (87a4 <k_mem_slab_free+0xb0>)
    877e:	490d      	ldr	r1, [pc, #52]	; (87b4 <k_mem_slab_free+0xc0>)
    8780:	480a      	ldr	r0, [pc, #40]	; (87ac <k_mem_slab_free+0xb8>)
    8782:	23b9      	movs	r3, #185	; 0xb9
    8784:	f004 fb7f 	bl	ce86 <assert_print>
    8788:	480b      	ldr	r0, [pc, #44]	; (87b8 <k_mem_slab_free+0xc4>)
    878a:	4629      	mov	r1, r5
    878c:	f004 fb7b 	bl	ce86 <assert_print>
    8790:	4804      	ldr	r0, [pc, #16]	; (87a4 <k_mem_slab_free+0xb0>)
    8792:	21b9      	movs	r1, #185	; 0xb9
    8794:	f004 fb70 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    8798:	f387 8811 	msr	BASEPRI, r7
    879c:	f3bf 8f6f 	isb	sy
}
    87a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87a4:	0000ec50 	.word	0x0000ec50
    87a8:	0000eca9 	.word	0x0000eca9
    87ac:	0000eb06 	.word	0x0000eb06
    87b0:	0000ecbe 	.word	0x0000ecbe
    87b4:	0000ec7d 	.word	0x0000ec7d
    87b8:	0000ec94 	.word	0x0000ec94

000087bc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    87bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    87c0:	b085      	sub	sp, #20
    87c2:	4604      	mov	r4, r0
    87c4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    87c8:	f1b8 0f0f 	cmp.w	r8, #15
{
    87cc:	460f      	mov	r7, r1
    87ce:	4615      	mov	r5, r2
    87d0:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    87d2:	d132      	bne.n	883a <z_setup_new_thread+0x7e>
    87d4:	4b25      	ldr	r3, [pc, #148]	; (886c <z_setup_new_thread+0xb0>)
    87d6:	4599      	cmp	r9, r3
    87d8:	d133      	bne.n	8842 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    87da:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    87de:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    87e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87e4:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    87e6:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    87e8:	2304      	movs	r3, #4
    87ea:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    87ec:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    87f0:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    87f4:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    87f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    87fa:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    87fe:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8800:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8806:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    8808:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    880a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    880c:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    880e:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8810:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    8812:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    8816:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    8818:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    881a:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    881c:	4642      	mov	r2, r8
    881e:	4639      	mov	r1, r7
    8820:	4620      	mov	r0, r4
    8822:	f7fc f95d 	bl	4ae0 <arch_new_thread>
	if (!_current) {
    8826:	4b12      	ldr	r3, [pc, #72]	; (8870 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    8828:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    882a:	689b      	ldr	r3, [r3, #8]
    882c:	b103      	cbz	r3, 8830 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    882e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    8830:	6723      	str	r3, [r4, #112]	; 0x70
}
    8832:	4640      	mov	r0, r8
    8834:	b005      	add	sp, #20
    8836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    883a:	f108 0310 	add.w	r3, r8, #16
    883e:	2b1e      	cmp	r3, #30
    8840:	d9cb      	bls.n	87da <z_setup_new_thread+0x1e>
    8842:	4a0c      	ldr	r2, [pc, #48]	; (8874 <z_setup_new_thread+0xb8>)
    8844:	490c      	ldr	r1, [pc, #48]	; (8878 <z_setup_new_thread+0xbc>)
    8846:	480d      	ldr	r0, [pc, #52]	; (887c <z_setup_new_thread+0xc0>)
    8848:	f240 13ff 	movw	r3, #511	; 0x1ff
    884c:	f004 fb1b 	bl	ce86 <assert_print>
    8850:	4641      	mov	r1, r8
    8852:	480b      	ldr	r0, [pc, #44]	; (8880 <z_setup_new_thread+0xc4>)
    8854:	f06f 030f 	mvn.w	r3, #15
    8858:	220e      	movs	r2, #14
    885a:	f004 fb14 	bl	ce86 <assert_print>
    885e:	4805      	ldr	r0, [pc, #20]	; (8874 <z_setup_new_thread+0xb8>)
    8860:	f240 11ff 	movw	r1, #511	; 0x1ff
    8864:	f004 fb08 	bl	ce78 <assert_post_action>
    8868:	e7b7      	b.n	87da <z_setup_new_thread+0x1e>
    886a:	bf00      	nop
    886c:	00008a81 	.word	0x00008a81
    8870:	200010c4 	.word	0x200010c4
    8874:	00010159 	.word	0x00010159
    8878:	0001017c 	.word	0x0001017c
    887c:	0000eb06 	.word	0x0000eb06
    8880:	000101fc 	.word	0x000101fc

00008884 <z_impl_k_thread_create>:
{
    8884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8888:	b087      	sub	sp, #28
    888a:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    888e:	4604      	mov	r4, r0
    8890:	460f      	mov	r7, r1
    8892:	4690      	mov	r8, r2
    8894:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8896:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    889a:	b173      	cbz	r3, 88ba <z_impl_k_thread_create+0x36>
    889c:	491c      	ldr	r1, [pc, #112]	; (8910 <z_impl_k_thread_create+0x8c>)
    889e:	4a1d      	ldr	r2, [pc, #116]	; (8914 <z_impl_k_thread_create+0x90>)
    88a0:	481d      	ldr	r0, [pc, #116]	; (8918 <z_impl_k_thread_create+0x94>)
    88a2:	f240 236e 	movw	r3, #622	; 0x26e
    88a6:	f004 faee 	bl	ce86 <assert_print>
    88aa:	481c      	ldr	r0, [pc, #112]	; (891c <z_impl_k_thread_create+0x98>)
    88ac:	f004 faeb 	bl	ce86 <assert_print>
    88b0:	4818      	ldr	r0, [pc, #96]	; (8914 <z_impl_k_thread_create+0x90>)
    88b2:	f240 216e 	movw	r1, #622	; 0x26e
    88b6:	f004 fadf 	bl	ce78 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    88ba:	2300      	movs	r3, #0
    88bc:	9305      	str	r3, [sp, #20]
    88be:	9b12      	ldr	r3, [sp, #72]	; 0x48
    88c0:	9304      	str	r3, [sp, #16]
    88c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    88c4:	9303      	str	r3, [sp, #12]
    88c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88c8:	9302      	str	r3, [sp, #8]
    88ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88cc:	9301      	str	r3, [sp, #4]
    88ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    88d0:	9300      	str	r3, [sp, #0]
    88d2:	4642      	mov	r2, r8
    88d4:	464b      	mov	r3, r9
    88d6:	4639      	mov	r1, r7
    88d8:	4620      	mov	r0, r4
    88da:	f7ff ff6f 	bl	87bc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    88de:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    88e2:	bf08      	it	eq
    88e4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    88e8:	d005      	beq.n	88f6 <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    88ea:	ea55 0306 	orrs.w	r3, r5, r6
    88ee:	d106      	bne.n	88fe <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    88f0:	4620      	mov	r0, r4
    88f2:	f000 fed3 	bl	969c <z_sched_start>
}
    88f6:	4620      	mov	r0, r4
    88f8:	b007      	add	sp, #28
    88fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    88fe:	4908      	ldr	r1, [pc, #32]	; (8920 <z_impl_k_thread_create+0x9c>)
    8900:	4632      	mov	r2, r6
    8902:	462b      	mov	r3, r5
    8904:	f104 0018 	add.w	r0, r4, #24
    8908:	f001 fd26 	bl	a358 <z_add_timeout>
    890c:	e7f3      	b.n	88f6 <z_impl_k_thread_create+0x72>
    890e:	bf00      	nop
    8910:	0001022d 	.word	0x0001022d
    8914:	00010159 	.word	0x00010159
    8918:	0000eb06 	.word	0x0000eb06
    891c:	0001023f 	.word	0x0001023f
    8920:	00009745 	.word	0x00009745

00008924 <z_init_static_threads>:
{
    8924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8928:	4c3b      	ldr	r4, [pc, #236]	; (8a18 <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    892a:	4d3c      	ldr	r5, [pc, #240]	; (8a1c <z_init_static_threads+0xf8>)
    892c:	4f3c      	ldr	r7, [pc, #240]	; (8a20 <z_init_static_threads+0xfc>)
{
    892e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    8930:	42ac      	cmp	r4, r5
    8932:	4626      	mov	r6, r4
    8934:	d90e      	bls.n	8954 <z_init_static_threads+0x30>
    8936:	493b      	ldr	r1, [pc, #236]	; (8a24 <z_init_static_threads+0x100>)
    8938:	483b      	ldr	r0, [pc, #236]	; (8a28 <z_init_static_threads+0x104>)
    893a:	f240 23d5 	movw	r3, #725	; 0x2d5
    893e:	463a      	mov	r2, r7
    8940:	f004 faa1 	bl	ce86 <assert_print>
    8944:	4839      	ldr	r0, [pc, #228]	; (8a2c <z_init_static_threads+0x108>)
    8946:	f004 fa9e 	bl	ce86 <assert_print>
    894a:	f240 21d5 	movw	r1, #725	; 0x2d5
    894e:	4638      	mov	r0, r7
    8950:	f004 fa92 	bl	ce78 <assert_post_action>
    8954:	42ae      	cmp	r6, r5
    8956:	f104 0430 	add.w	r4, r4, #48	; 0x30
    895a:	d31f      	bcc.n	899c <z_init_static_threads+0x78>
	k_sched_lock();
    895c:	f000 fc4e 	bl	91fc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8960:	4c2d      	ldr	r4, [pc, #180]	; (8a18 <z_init_static_threads+0xf4>)
    8962:	4e2f      	ldr	r6, [pc, #188]	; (8a20 <z_init_static_threads+0xfc>)
    8964:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8a24 <z_init_static_threads+0x100>
    8968:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8a28 <z_init_static_threads+0x104>
    896c:	42ac      	cmp	r4, r5
    896e:	d90e      	bls.n	898e <z_init_static_threads+0x6a>
    8970:	4641      	mov	r1, r8
    8972:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    8976:	4632      	mov	r2, r6
    8978:	4648      	mov	r0, r9
    897a:	f004 fa84 	bl	ce86 <assert_print>
    897e:	482b      	ldr	r0, [pc, #172]	; (8a2c <z_init_static_threads+0x108>)
    8980:	f004 fa81 	bl	ce86 <assert_print>
    8984:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    8988:	4630      	mov	r0, r6
    898a:	f004 fa75 	bl	ce78 <assert_post_action>
    898e:	42ac      	cmp	r4, r5
    8990:	d320      	bcc.n	89d4 <z_init_static_threads+0xb0>
}
    8992:	b007      	add	sp, #28
    8994:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    8998:	f001 b91a 	b.w	9bd0 <k_sched_unlock>
		z_setup_new_thread(
    899c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    89a0:	9305      	str	r3, [sp, #20]
    89a2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    89a6:	9304      	str	r3, [sp, #16]
    89a8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    89ac:	9303      	str	r3, [sp, #12]
    89ae:	f854 3c18 	ldr.w	r3, [r4, #-24]
    89b2:	9302      	str	r3, [sp, #8]
    89b4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    89b8:	9301      	str	r3, [sp, #4]
    89ba:	f854 3c20 	ldr.w	r3, [r4, #-32]
    89be:	9300      	str	r3, [sp, #0]
    89c0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    89c4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    89c8:	f7ff fef8 	bl	87bc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    89cc:	f854 3c30 	ldr.w	r3, [r4, #-48]
    89d0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    89d2:	e7ad      	b.n	8930 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    89d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    89d6:	1c5a      	adds	r2, r3, #1
    89d8:	d00f      	beq.n	89fa <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    89da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    89de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    89e2:	f240 30e7 	movw	r0, #999	; 0x3e7
    89e6:	2100      	movs	r1, #0
    89e8:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    89ec:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    89f0:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    89f2:	d104      	bne.n	89fe <z_init_static_threads+0xda>
	z_sched_start(thread);
    89f4:	4638      	mov	r0, r7
    89f6:	f000 fe51 	bl	969c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    89fa:	3430      	adds	r4, #48	; 0x30
    89fc:	e7b6      	b.n	896c <z_init_static_threads+0x48>
    89fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a02:	2300      	movs	r3, #0
    8a04:	f7f8 f860 	bl	ac8 <__aeabi_uldivmod>
    8a08:	4602      	mov	r2, r0
    8a0a:	460b      	mov	r3, r1
    8a0c:	f107 0018 	add.w	r0, r7, #24
    8a10:	4907      	ldr	r1, [pc, #28]	; (8a30 <z_init_static_threads+0x10c>)
    8a12:	f001 fca1 	bl	a358 <z_add_timeout>
    8a16:	e7f0      	b.n	89fa <z_init_static_threads+0xd6>
    8a18:	200003d0 	.word	0x200003d0
    8a1c:	200003d0 	.word	0x200003d0
    8a20:	00010159 	.word	0x00010159
    8a24:	00010264 	.word	0x00010264
    8a28:	0000eb06 	.word	0x0000eb06
    8a2c:	0001013a 	.word	0x0001013a
    8a30:	00009745 	.word	0x00009745

00008a34 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    8a34:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    8a36:	b138      	cbz	r0, 8a48 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    8a38:	4b04      	ldr	r3, [pc, #16]	; (8a4c <z_spin_lock_valid+0x18>)
    8a3a:	7d1b      	ldrb	r3, [r3, #20]
    8a3c:	f000 0003 	and.w	r0, r0, #3
    8a40:	1ac0      	subs	r0, r0, r3
    8a42:	bf18      	it	ne
    8a44:	2001      	movne	r0, #1
    8a46:	4770      	bx	lr
			return false;
		}
	}
	return true;
    8a48:	2001      	movs	r0, #1
}
    8a4a:	4770      	bx	lr
    8a4c:	200010c4 	.word	0x200010c4

00008a50 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    8a50:	4906      	ldr	r1, [pc, #24]	; (8a6c <z_spin_unlock_valid+0x1c>)
{
    8a52:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    8a54:	688a      	ldr	r2, [r1, #8]
    8a56:	7d08      	ldrb	r0, [r1, #20]
    8a58:	6819      	ldr	r1, [r3, #0]
    8a5a:	4302      	orrs	r2, r0
    8a5c:	4291      	cmp	r1, r2
    8a5e:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    8a62:	bf04      	itt	eq
    8a64:	6018      	streq	r0, [r3, #0]
	return true;
    8a66:	2001      	moveq	r0, #1
}
    8a68:	4770      	bx	lr
    8a6a:	bf00      	nop
    8a6c:	200010c4 	.word	0x200010c4

00008a70 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    8a70:	4a02      	ldr	r2, [pc, #8]	; (8a7c <z_spin_lock_set_owner+0xc>)
    8a72:	7d11      	ldrb	r1, [r2, #20]
    8a74:	6893      	ldr	r3, [r2, #8]
    8a76:	430b      	orrs	r3, r1
    8a78:	6003      	str	r3, [r0, #0]
}
    8a7a:	4770      	bx	lr
    8a7c:	200010c4 	.word	0x200010c4

00008a80 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    8a80:	4c13      	ldr	r4, [pc, #76]	; (8ad0 <idle+0x50>)
{
    8a82:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    8a84:	68a3      	ldr	r3, [r4, #8]
    8a86:	f993 300e 	ldrsb.w	r3, [r3, #14]
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	da09      	bge.n	8aa2 <idle+0x22>
    8a8e:	4911      	ldr	r1, [pc, #68]	; (8ad4 <idle+0x54>)
    8a90:	4811      	ldr	r0, [pc, #68]	; (8ad8 <idle+0x58>)
    8a92:	4a12      	ldr	r2, [pc, #72]	; (8adc <idle+0x5c>)
    8a94:	2327      	movs	r3, #39	; 0x27
    8a96:	f004 f9f6 	bl	ce86 <assert_print>
    8a9a:	4810      	ldr	r0, [pc, #64]	; (8adc <idle+0x5c>)
    8a9c:	2127      	movs	r1, #39	; 0x27
    8a9e:	f004 f9eb 	bl	ce78 <assert_post_action>
	return !z_sys_post_kernel;
    8aa2:	4d0f      	ldr	r5, [pc, #60]	; (8ae0 <idle+0x60>)
	__asm__ volatile(
    8aa4:	f04f 0220 	mov.w	r2, #32
    8aa8:	f3ef 8311 	mrs	r3, BASEPRI
    8aac:	f382 8812 	msr	BASEPRI_MAX, r2
    8ab0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    8ab4:	f001 fd66 	bl	a584 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8ab8:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    8aba:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8abc:	b913      	cbnz	r3, 8ac4 <idle+0x44>
	arch_cpu_idle();
    8abe:	f7fb fee1 	bl	4884 <arch_cpu_idle>
}
    8ac2:	e7ef      	b.n	8aa4 <idle+0x24>
    8ac4:	f7fb fd34 	bl	4530 <pm_system_suspend>
    8ac8:	2800      	cmp	r0, #0
    8aca:	d1eb      	bne.n	8aa4 <idle+0x24>
    8acc:	e7f7      	b.n	8abe <idle+0x3e>
    8ace:	bf00      	nop
    8ad0:	200010c4 	.word	0x200010c4
    8ad4:	000102b2 	.word	0x000102b2
    8ad8:	0000eb06 	.word	0x0000eb06
    8adc:	00010291 	.word	0x00010291
    8ae0:	2000d70e 	.word	0x2000d70e

00008ae4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8ae4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8ae8:	4604      	mov	r4, r0
    8aea:	4617      	mov	r7, r2
    8aec:	461e      	mov	r6, r3
    8aee:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    8af2:	b163      	cbz	r3, 8b0e <z_impl_k_mutex_lock+0x2a>
    8af4:	496d      	ldr	r1, [pc, #436]	; (8cac <z_impl_k_mutex_lock+0x1c8>)
    8af6:	4a6e      	ldr	r2, [pc, #440]	; (8cb0 <z_impl_k_mutex_lock+0x1cc>)
    8af8:	486e      	ldr	r0, [pc, #440]	; (8cb4 <z_impl_k_mutex_lock+0x1d0>)
    8afa:	2365      	movs	r3, #101	; 0x65
    8afc:	f004 f9c3 	bl	ce86 <assert_print>
    8b00:	486d      	ldr	r0, [pc, #436]	; (8cb8 <z_impl_k_mutex_lock+0x1d4>)
    8b02:	f004 f9c0 	bl	ce86 <assert_print>
    8b06:	486a      	ldr	r0, [pc, #424]	; (8cb0 <z_impl_k_mutex_lock+0x1cc>)
    8b08:	2165      	movs	r1, #101	; 0x65
    8b0a:	f004 f9b5 	bl	ce78 <assert_post_action>
    8b0e:	f04f 0320 	mov.w	r3, #32
    8b12:	f3ef 8811 	mrs	r8, BASEPRI
    8b16:	f383 8812 	msr	BASEPRI_MAX, r3
    8b1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b1e:	4867      	ldr	r0, [pc, #412]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8b20:	f7ff ff88 	bl	8a34 <z_spin_lock_valid>
    8b24:	b968      	cbnz	r0, 8b42 <z_impl_k_mutex_lock+0x5e>
    8b26:	4a66      	ldr	r2, [pc, #408]	; (8cc0 <z_impl_k_mutex_lock+0x1dc>)
    8b28:	4966      	ldr	r1, [pc, #408]	; (8cc4 <z_impl_k_mutex_lock+0x1e0>)
    8b2a:	4862      	ldr	r0, [pc, #392]	; (8cb4 <z_impl_k_mutex_lock+0x1d0>)
    8b2c:	238e      	movs	r3, #142	; 0x8e
    8b2e:	f004 f9aa 	bl	ce86 <assert_print>
    8b32:	4962      	ldr	r1, [pc, #392]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8b34:	4864      	ldr	r0, [pc, #400]	; (8cc8 <z_impl_k_mutex_lock+0x1e4>)
    8b36:	f004 f9a6 	bl	ce86 <assert_print>
    8b3a:	4861      	ldr	r0, [pc, #388]	; (8cc0 <z_impl_k_mutex_lock+0x1dc>)
    8b3c:	218e      	movs	r1, #142	; 0x8e
    8b3e:	f004 f99b 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    8b42:	485e      	ldr	r0, [pc, #376]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8b44:	f7ff ff94 	bl	8a70 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    8b48:	68e3      	ldr	r3, [r4, #12]
    8b4a:	4a60      	ldr	r2, [pc, #384]	; (8ccc <z_impl_k_mutex_lock+0x1e8>)
    8b4c:	b1fb      	cbz	r3, 8b8e <z_impl_k_mutex_lock+0xaa>
    8b4e:	68a0      	ldr	r0, [r4, #8]
    8b50:	6891      	ldr	r1, [r2, #8]
    8b52:	4288      	cmp	r0, r1
    8b54:	d03d      	beq.n	8bd2 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    8b56:	ea57 0306 	orrs.w	r3, r7, r6
    8b5a:	d13c      	bne.n	8bd6 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b5c:	4857      	ldr	r0, [pc, #348]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8b5e:	f7ff ff77 	bl	8a50 <z_spin_unlock_valid>
    8b62:	b968      	cbnz	r0, 8b80 <z_impl_k_mutex_lock+0x9c>
    8b64:	4a56      	ldr	r2, [pc, #344]	; (8cc0 <z_impl_k_mutex_lock+0x1dc>)
    8b66:	495a      	ldr	r1, [pc, #360]	; (8cd0 <z_impl_k_mutex_lock+0x1ec>)
    8b68:	4852      	ldr	r0, [pc, #328]	; (8cb4 <z_impl_k_mutex_lock+0x1d0>)
    8b6a:	23b9      	movs	r3, #185	; 0xb9
    8b6c:	f004 f98b 	bl	ce86 <assert_print>
    8b70:	4952      	ldr	r1, [pc, #328]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8b72:	4858      	ldr	r0, [pc, #352]	; (8cd4 <z_impl_k_mutex_lock+0x1f0>)
    8b74:	f004 f987 	bl	ce86 <assert_print>
    8b78:	4851      	ldr	r0, [pc, #324]	; (8cc0 <z_impl_k_mutex_lock+0x1dc>)
    8b7a:	21b9      	movs	r1, #185	; 0xb9
    8b7c:	f004 f97c 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    8b80:	f388 8811 	msr	BASEPRI, r8
    8b84:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    8b88:	f06f 000f 	mvn.w	r0, #15
    8b8c:	e01e      	b.n	8bcc <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    8b8e:	6891      	ldr	r1, [r2, #8]
    8b90:	f991 100e 	ldrsb.w	r1, [r1, #14]
    8b94:	4849      	ldr	r0, [pc, #292]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    8b96:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    8b98:	3301      	adds	r3, #1
    8b9a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    8b9c:	6893      	ldr	r3, [r2, #8]
    8b9e:	60a3      	str	r3, [r4, #8]
    8ba0:	f7ff ff56 	bl	8a50 <z_spin_unlock_valid>
    8ba4:	b968      	cbnz	r0, 8bc2 <z_impl_k_mutex_lock+0xde>
    8ba6:	4a46      	ldr	r2, [pc, #280]	; (8cc0 <z_impl_k_mutex_lock+0x1dc>)
    8ba8:	4949      	ldr	r1, [pc, #292]	; (8cd0 <z_impl_k_mutex_lock+0x1ec>)
    8baa:	4842      	ldr	r0, [pc, #264]	; (8cb4 <z_impl_k_mutex_lock+0x1d0>)
    8bac:	23b9      	movs	r3, #185	; 0xb9
    8bae:	f004 f96a 	bl	ce86 <assert_print>
    8bb2:	4942      	ldr	r1, [pc, #264]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8bb4:	4847      	ldr	r0, [pc, #284]	; (8cd4 <z_impl_k_mutex_lock+0x1f0>)
    8bb6:	f004 f966 	bl	ce86 <assert_print>
    8bba:	4841      	ldr	r0, [pc, #260]	; (8cc0 <z_impl_k_mutex_lock+0x1dc>)
    8bbc:	21b9      	movs	r1, #185	; 0xb9
    8bbe:	f004 f95b 	bl	ce78 <assert_post_action>
    8bc2:	f388 8811 	msr	BASEPRI, r8
    8bc6:	f3bf 8f6f 	isb	sy
		return 0;
    8bca:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    8bcc:	b002      	add	sp, #8
    8bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    8bd2:	6921      	ldr	r1, [r4, #16]
    8bd4:	e7de      	b.n	8b94 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8bd6:	f991 100e 	ldrsb.w	r1, [r1, #14]
    8bda:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    8bde:	4299      	cmp	r1, r3
    8be0:	bfa8      	it	ge
    8be2:	4619      	movge	r1, r3
    8be4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    8be8:	4291      	cmp	r1, r2
    8bea:	bfb8      	it	lt
    8bec:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    8bee:	4299      	cmp	r1, r3
    8bf0:	da43      	bge.n	8c7a <z_impl_k_mutex_lock+0x196>
		resched = adjust_owner_prio(mutex, new_prio);
    8bf2:	f004 fed8 	bl	d9a6 <adjust_owner_prio.isra.0>
    8bf6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    8bf8:	e9cd 7600 	strd	r7, r6, [sp]
    8bfc:	482f      	ldr	r0, [pc, #188]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8bfe:	4622      	mov	r2, r4
    8c00:	4641      	mov	r1, r8
    8c02:	f000 feb3 	bl	996c <z_pend_curr>
	if (got_mutex == 0) {
    8c06:	2800      	cmp	r0, #0
    8c08:	d0e0      	beq.n	8bcc <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    8c0a:	f04f 0320 	mov.w	r3, #32
    8c0e:	f3ef 8611 	mrs	r6, BASEPRI
    8c12:	f383 8812 	msr	BASEPRI_MAX, r3
    8c16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c1a:	4828      	ldr	r0, [pc, #160]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8c1c:	f7ff ff0a 	bl	8a34 <z_spin_lock_valid>
    8c20:	b968      	cbnz	r0, 8c3e <z_impl_k_mutex_lock+0x15a>
    8c22:	4a27      	ldr	r2, [pc, #156]	; (8cc0 <z_impl_k_mutex_lock+0x1dc>)
    8c24:	4927      	ldr	r1, [pc, #156]	; (8cc4 <z_impl_k_mutex_lock+0x1e0>)
    8c26:	4823      	ldr	r0, [pc, #140]	; (8cb4 <z_impl_k_mutex_lock+0x1d0>)
    8c28:	238e      	movs	r3, #142	; 0x8e
    8c2a:	f004 f92c 	bl	ce86 <assert_print>
    8c2e:	4923      	ldr	r1, [pc, #140]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8c30:	4825      	ldr	r0, [pc, #148]	; (8cc8 <z_impl_k_mutex_lock+0x1e4>)
    8c32:	f004 f928 	bl	ce86 <assert_print>
    8c36:	4822      	ldr	r0, [pc, #136]	; (8cc0 <z_impl_k_mutex_lock+0x1dc>)
    8c38:	218e      	movs	r1, #142	; 0x8e
    8c3a:	f004 f91d 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    8c3e:	481f      	ldr	r0, [pc, #124]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8c40:	f7ff ff16 	bl	8a70 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8c44:	6823      	ldr	r3, [r4, #0]
    8c46:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c48:	42a3      	cmp	r3, r4
    8c4a:	d00a      	beq.n	8c62 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8c4c:	b14b      	cbz	r3, 8c62 <z_impl_k_mutex_lock+0x17e>
    8c4e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    8c52:	4299      	cmp	r1, r3
    8c54:	bfa8      	it	ge
    8c56:	4619      	movge	r1, r3
    8c58:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    8c5c:	4299      	cmp	r1, r3
    8c5e:	bfb8      	it	lt
    8c60:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    8c62:	68a0      	ldr	r0, [r4, #8]
    8c64:	f004 fe9f 	bl	d9a6 <adjust_owner_prio.isra.0>
    8c68:	b900      	cbnz	r0, 8c6c <z_impl_k_mutex_lock+0x188>
	if (resched) {
    8c6a:	b145      	cbz	r5, 8c7e <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
    8c6c:	4813      	ldr	r0, [pc, #76]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8c6e:	4631      	mov	r1, r6
    8c70:	f000 fa80 	bl	9174 <z_reschedule>
	return -EAGAIN;
    8c74:	f06f 000a 	mvn.w	r0, #10
    8c78:	e7a8      	b.n	8bcc <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    8c7a:	2500      	movs	r5, #0
    8c7c:	e7bc      	b.n	8bf8 <z_impl_k_mutex_lock+0x114>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c7e:	480f      	ldr	r0, [pc, #60]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8c80:	f7ff fee6 	bl	8a50 <z_spin_unlock_valid>
    8c84:	b968      	cbnz	r0, 8ca2 <z_impl_k_mutex_lock+0x1be>
    8c86:	4a0e      	ldr	r2, [pc, #56]	; (8cc0 <z_impl_k_mutex_lock+0x1dc>)
    8c88:	4911      	ldr	r1, [pc, #68]	; (8cd0 <z_impl_k_mutex_lock+0x1ec>)
    8c8a:	480a      	ldr	r0, [pc, #40]	; (8cb4 <z_impl_k_mutex_lock+0x1d0>)
    8c8c:	23b9      	movs	r3, #185	; 0xb9
    8c8e:	f004 f8fa 	bl	ce86 <assert_print>
    8c92:	490a      	ldr	r1, [pc, #40]	; (8cbc <z_impl_k_mutex_lock+0x1d8>)
    8c94:	480f      	ldr	r0, [pc, #60]	; (8cd4 <z_impl_k_mutex_lock+0x1f0>)
    8c96:	f004 f8f6 	bl	ce86 <assert_print>
    8c9a:	4809      	ldr	r0, [pc, #36]	; (8cc0 <z_impl_k_mutex_lock+0x1dc>)
    8c9c:	21b9      	movs	r1, #185	; 0xb9
    8c9e:	f004 f8eb 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    8ca2:	f386 8811 	msr	BASEPRI, r6
    8ca6:	f3bf 8f6f 	isb	sy
    8caa:	e7e3      	b.n	8c74 <z_impl_k_mutex_lock+0x190>
    8cac:	0001022d 	.word	0x0001022d
    8cb0:	000102da 	.word	0x000102da
    8cb4:	0000eb06 	.word	0x0000eb06
    8cb8:	000102fc 	.word	0x000102fc
    8cbc:	200010ec 	.word	0x200010ec
    8cc0:	0000ec50 	.word	0x0000ec50
    8cc4:	0000eca9 	.word	0x0000eca9
    8cc8:	0000ecbe 	.word	0x0000ecbe
    8ccc:	200010c4 	.word	0x200010c4
    8cd0:	0000ec7d 	.word	0x0000ec7d
    8cd4:	0000ec94 	.word	0x0000ec94

00008cd8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    8cd8:	b538      	push	{r3, r4, r5, lr}
    8cda:	4604      	mov	r4, r0
    8cdc:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    8ce0:	b163      	cbz	r3, 8cfc <z_impl_k_mutex_unlock+0x24>
    8ce2:	4950      	ldr	r1, [pc, #320]	; (8e24 <z_impl_k_mutex_unlock+0x14c>)
    8ce4:	4a50      	ldr	r2, [pc, #320]	; (8e28 <z_impl_k_mutex_unlock+0x150>)
    8ce6:	4851      	ldr	r0, [pc, #324]	; (8e2c <z_impl_k_mutex_unlock+0x154>)
    8ce8:	23c7      	movs	r3, #199	; 0xc7
    8cea:	f004 f8cc 	bl	ce86 <assert_print>
    8cee:	4850      	ldr	r0, [pc, #320]	; (8e30 <z_impl_k_mutex_unlock+0x158>)
    8cf0:	f004 f8c9 	bl	ce86 <assert_print>
    8cf4:	484c      	ldr	r0, [pc, #304]	; (8e28 <z_impl_k_mutex_unlock+0x150>)
    8cf6:	21c7      	movs	r1, #199	; 0xc7
    8cf8:	f004 f8be 	bl	ce78 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    8cfc:	68a3      	ldr	r3, [r4, #8]
    8cfe:	2b00      	cmp	r3, #0
    8d00:	f000 8089 	beq.w	8e16 <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    8d04:	4d4b      	ldr	r5, [pc, #300]	; (8e34 <z_impl_k_mutex_unlock+0x15c>)
    8d06:	68aa      	ldr	r2, [r5, #8]
    8d08:	4293      	cmp	r3, r2
    8d0a:	f040 8087 	bne.w	8e1c <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    8d0e:	68e3      	ldr	r3, [r4, #12]
    8d10:	b94b      	cbnz	r3, 8d26 <z_impl_k_mutex_unlock+0x4e>
    8d12:	4949      	ldr	r1, [pc, #292]	; (8e38 <z_impl_k_mutex_unlock+0x160>)
    8d14:	4845      	ldr	r0, [pc, #276]	; (8e2c <z_impl_k_mutex_unlock+0x154>)
    8d16:	4a44      	ldr	r2, [pc, #272]	; (8e28 <z_impl_k_mutex_unlock+0x150>)
    8d18:	23df      	movs	r3, #223	; 0xdf
    8d1a:	f004 f8b4 	bl	ce86 <assert_print>
    8d1e:	4842      	ldr	r0, [pc, #264]	; (8e28 <z_impl_k_mutex_unlock+0x150>)
    8d20:	21df      	movs	r1, #223	; 0xdf
    8d22:	f004 f8a9 	bl	ce78 <assert_post_action>
    8d26:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    8d2a:	b163      	cbz	r3, 8d46 <z_impl_k_mutex_unlock+0x6e>
    8d2c:	493d      	ldr	r1, [pc, #244]	; (8e24 <z_impl_k_mutex_unlock+0x14c>)
    8d2e:	4a43      	ldr	r2, [pc, #268]	; (8e3c <z_impl_k_mutex_unlock+0x164>)
    8d30:	483e      	ldr	r0, [pc, #248]	; (8e2c <z_impl_k_mutex_unlock+0x154>)
    8d32:	23fd      	movs	r3, #253	; 0xfd
    8d34:	f004 f8a7 	bl	ce86 <assert_print>
    8d38:	4841      	ldr	r0, [pc, #260]	; (8e40 <z_impl_k_mutex_unlock+0x168>)
    8d3a:	f004 f8a4 	bl	ce86 <assert_print>
    8d3e:	483f      	ldr	r0, [pc, #252]	; (8e3c <z_impl_k_mutex_unlock+0x164>)
    8d40:	21fd      	movs	r1, #253	; 0xfd
    8d42:	f004 f899 	bl	ce78 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    8d46:	68ab      	ldr	r3, [r5, #8]
    8d48:	7bdb      	ldrb	r3, [r3, #15]
    8d4a:	2b01      	cmp	r3, #1
    8d4c:	d10c      	bne.n	8d68 <z_impl_k_mutex_unlock+0x90>
    8d4e:	493d      	ldr	r1, [pc, #244]	; (8e44 <z_impl_k_mutex_unlock+0x16c>)
    8d50:	4a3a      	ldr	r2, [pc, #232]	; (8e3c <z_impl_k_mutex_unlock+0x164>)
    8d52:	4836      	ldr	r0, [pc, #216]	; (8e2c <z_impl_k_mutex_unlock+0x154>)
    8d54:	23fe      	movs	r3, #254	; 0xfe
    8d56:	f004 f896 	bl	ce86 <assert_print>
    8d5a:	4839      	ldr	r0, [pc, #228]	; (8e40 <z_impl_k_mutex_unlock+0x168>)
    8d5c:	f004 f893 	bl	ce86 <assert_print>
    8d60:	4836      	ldr	r0, [pc, #216]	; (8e3c <z_impl_k_mutex_unlock+0x164>)
    8d62:	21fe      	movs	r1, #254	; 0xfe
    8d64:	f004 f888 	bl	ce78 <assert_post_action>

	--_current->base.sched_locked;
    8d68:	68aa      	ldr	r2, [r5, #8]
    8d6a:	7bd3      	ldrb	r3, [r2, #15]
    8d6c:	3b01      	subs	r3, #1
    8d6e:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    8d70:	68e3      	ldr	r3, [r4, #12]
    8d72:	2b01      	cmp	r3, #1
    8d74:	d905      	bls.n	8d82 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    8d76:	3b01      	subs	r3, #1
    8d78:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    8d7a:	f000 ff29 	bl	9bd0 <k_sched_unlock>

	return 0;
    8d7e:	2000      	movs	r0, #0
}
    8d80:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    8d82:	f04f 0320 	mov.w	r3, #32
    8d86:	f3ef 8511 	mrs	r5, BASEPRI
    8d8a:	f383 8812 	msr	BASEPRI_MAX, r3
    8d8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d92:	482d      	ldr	r0, [pc, #180]	; (8e48 <z_impl_k_mutex_unlock+0x170>)
    8d94:	f7ff fe4e 	bl	8a34 <z_spin_lock_valid>
    8d98:	b968      	cbnz	r0, 8db6 <z_impl_k_mutex_unlock+0xde>
    8d9a:	4a2c      	ldr	r2, [pc, #176]	; (8e4c <z_impl_k_mutex_unlock+0x174>)
    8d9c:	492c      	ldr	r1, [pc, #176]	; (8e50 <z_impl_k_mutex_unlock+0x178>)
    8d9e:	4823      	ldr	r0, [pc, #140]	; (8e2c <z_impl_k_mutex_unlock+0x154>)
    8da0:	238e      	movs	r3, #142	; 0x8e
    8da2:	f004 f870 	bl	ce86 <assert_print>
    8da6:	4928      	ldr	r1, [pc, #160]	; (8e48 <z_impl_k_mutex_unlock+0x170>)
    8da8:	482a      	ldr	r0, [pc, #168]	; (8e54 <z_impl_k_mutex_unlock+0x17c>)
    8daa:	f004 f86c 	bl	ce86 <assert_print>
    8dae:	4827      	ldr	r0, [pc, #156]	; (8e4c <z_impl_k_mutex_unlock+0x174>)
    8db0:	218e      	movs	r1, #142	; 0x8e
    8db2:	f004 f861 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    8db6:	4824      	ldr	r0, [pc, #144]	; (8e48 <z_impl_k_mutex_unlock+0x170>)
    8db8:	f7ff fe5a 	bl	8a70 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    8dbc:	6921      	ldr	r1, [r4, #16]
    8dbe:	68a0      	ldr	r0, [r4, #8]
    8dc0:	f004 fdf1 	bl	d9a6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8dc4:	4620      	mov	r0, r4
    8dc6:	f000 ffcb 	bl	9d60 <z_unpend_first_thread>
	mutex->owner = new_owner;
    8dca:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    8dcc:	b158      	cbz	r0, 8de6 <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    8dce:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8dd2:	6122      	str	r2, [r4, #16]
    8dd4:	2200      	movs	r2, #0
    8dd6:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    8dd8:	f000 fc18 	bl	960c <z_ready_thread>
		z_reschedule(&lock, key);
    8ddc:	481a      	ldr	r0, [pc, #104]	; (8e48 <z_impl_k_mutex_unlock+0x170>)
    8dde:	4629      	mov	r1, r5
    8de0:	f000 f9c8 	bl	9174 <z_reschedule>
    8de4:	e7c9      	b.n	8d7a <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    8de6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8de8:	4817      	ldr	r0, [pc, #92]	; (8e48 <z_impl_k_mutex_unlock+0x170>)
    8dea:	f7ff fe31 	bl	8a50 <z_spin_unlock_valid>
    8dee:	b968      	cbnz	r0, 8e0c <z_impl_k_mutex_unlock+0x134>
    8df0:	4a16      	ldr	r2, [pc, #88]	; (8e4c <z_impl_k_mutex_unlock+0x174>)
    8df2:	4919      	ldr	r1, [pc, #100]	; (8e58 <z_impl_k_mutex_unlock+0x180>)
    8df4:	480d      	ldr	r0, [pc, #52]	; (8e2c <z_impl_k_mutex_unlock+0x154>)
    8df6:	23b9      	movs	r3, #185	; 0xb9
    8df8:	f004 f845 	bl	ce86 <assert_print>
    8dfc:	4912      	ldr	r1, [pc, #72]	; (8e48 <z_impl_k_mutex_unlock+0x170>)
    8dfe:	4817      	ldr	r0, [pc, #92]	; (8e5c <z_impl_k_mutex_unlock+0x184>)
    8e00:	f004 f841 	bl	ce86 <assert_print>
    8e04:	4811      	ldr	r0, [pc, #68]	; (8e4c <z_impl_k_mutex_unlock+0x174>)
    8e06:	21b9      	movs	r1, #185	; 0xb9
    8e08:	f004 f836 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    8e0c:	f385 8811 	msr	BASEPRI, r5
    8e10:	f3bf 8f6f 	isb	sy
    8e14:	e7b1      	b.n	8d7a <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    8e16:	f06f 0015 	mvn.w	r0, #21
    8e1a:	e7b1      	b.n	8d80 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    8e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e20:	e7ae      	b.n	8d80 <z_impl_k_mutex_unlock+0xa8>
    8e22:	bf00      	nop
    8e24:	0001022d 	.word	0x0001022d
    8e28:	000102da 	.word	0x000102da
    8e2c:	0000eb06 	.word	0x0000eb06
    8e30:	000102fc 	.word	0x000102fc
    8e34:	200010c4 	.word	0x200010c4
    8e38:	00010321 	.word	0x00010321
    8e3c:	00010338 	.word	0x00010338
    8e40:	00010363 	.word	0x00010363
    8e44:	00010366 	.word	0x00010366
    8e48:	200010ec 	.word	0x200010ec
    8e4c:	0000ec50 	.word	0x0000ec50
    8e50:	0000eca9 	.word	0x0000eca9
    8e54:	0000ecbe 	.word	0x0000ecbe
    8e58:	0000ec7d 	.word	0x0000ec7d
    8e5c:	0000ec94 	.word	0x0000ec94

00008e60 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8e60:	b538      	push	{r3, r4, r5, lr}
    8e62:	4604      	mov	r4, r0
	__asm__ volatile(
    8e64:	f04f 0320 	mov.w	r3, #32
    8e68:	f3ef 8511 	mrs	r5, BASEPRI
    8e6c:	f383 8812 	msr	BASEPRI_MAX, r3
    8e70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e74:	4814      	ldr	r0, [pc, #80]	; (8ec8 <z_impl_k_sem_give+0x68>)
    8e76:	f7ff fddd 	bl	8a34 <z_spin_lock_valid>
    8e7a:	b968      	cbnz	r0, 8e98 <z_impl_k_sem_give+0x38>
    8e7c:	4a13      	ldr	r2, [pc, #76]	; (8ecc <z_impl_k_sem_give+0x6c>)
    8e7e:	4914      	ldr	r1, [pc, #80]	; (8ed0 <z_impl_k_sem_give+0x70>)
    8e80:	4814      	ldr	r0, [pc, #80]	; (8ed4 <z_impl_k_sem_give+0x74>)
    8e82:	238e      	movs	r3, #142	; 0x8e
    8e84:	f003 ffff 	bl	ce86 <assert_print>
    8e88:	490f      	ldr	r1, [pc, #60]	; (8ec8 <z_impl_k_sem_give+0x68>)
    8e8a:	4813      	ldr	r0, [pc, #76]	; (8ed8 <z_impl_k_sem_give+0x78>)
    8e8c:	f003 fffb 	bl	ce86 <assert_print>
    8e90:	480e      	ldr	r0, [pc, #56]	; (8ecc <z_impl_k_sem_give+0x6c>)
    8e92:	218e      	movs	r1, #142	; 0x8e
    8e94:	f003 fff0 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    8e98:	480b      	ldr	r0, [pc, #44]	; (8ec8 <z_impl_k_sem_give+0x68>)
    8e9a:	f7ff fde9 	bl	8a70 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8e9e:	4620      	mov	r0, r4
    8ea0:	f000 ff5e 	bl	9d60 <z_unpend_first_thread>

	if (thread != NULL) {
    8ea4:	b148      	cbz	r0, 8eba <z_impl_k_sem_give+0x5a>
    8ea6:	2200      	movs	r2, #0
    8ea8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8eaa:	f000 fbaf 	bl	960c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    8eae:	4629      	mov	r1, r5
    8eb0:	4805      	ldr	r0, [pc, #20]	; (8ec8 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    8eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    8eb6:	f000 b95d 	b.w	9174 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8eba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    8ebe:	429a      	cmp	r2, r3
    8ec0:	bf18      	it	ne
    8ec2:	3301      	addne	r3, #1
    8ec4:	60a3      	str	r3, [r4, #8]
}
    8ec6:	e7f2      	b.n	8eae <z_impl_k_sem_give+0x4e>
    8ec8:	200010f0 	.word	0x200010f0
    8ecc:	0000ec50 	.word	0x0000ec50
    8ed0:	0000eca9 	.word	0x0000eca9
    8ed4:	0000eb06 	.word	0x0000eb06
    8ed8:	0000ecbe 	.word	0x0000ecbe

00008edc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8ede:	4604      	mov	r4, r0
    8ee0:	4616      	mov	r6, r2
    8ee2:	461d      	mov	r5, r3
    8ee4:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    8ee8:	b17b      	cbz	r3, 8f0a <z_impl_k_sem_take+0x2e>
    8eea:	ea52 0305 	orrs.w	r3, r2, r5
    8eee:	d00c      	beq.n	8f0a <z_impl_k_sem_take+0x2e>
    8ef0:	4935      	ldr	r1, [pc, #212]	; (8fc8 <z_impl_k_sem_take+0xec>)
    8ef2:	4a36      	ldr	r2, [pc, #216]	; (8fcc <z_impl_k_sem_take+0xf0>)
    8ef4:	4836      	ldr	r0, [pc, #216]	; (8fd0 <z_impl_k_sem_take+0xf4>)
    8ef6:	2379      	movs	r3, #121	; 0x79
    8ef8:	f003 ffc5 	bl	ce86 <assert_print>
    8efc:	4835      	ldr	r0, [pc, #212]	; (8fd4 <z_impl_k_sem_take+0xf8>)
    8efe:	f003 ffc2 	bl	ce86 <assert_print>
    8f02:	4832      	ldr	r0, [pc, #200]	; (8fcc <z_impl_k_sem_take+0xf0>)
    8f04:	2179      	movs	r1, #121	; 0x79
    8f06:	f003 ffb7 	bl	ce78 <assert_post_action>
    8f0a:	f04f 0320 	mov.w	r3, #32
    8f0e:	f3ef 8711 	mrs	r7, BASEPRI
    8f12:	f383 8812 	msr	BASEPRI_MAX, r3
    8f16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f1a:	482f      	ldr	r0, [pc, #188]	; (8fd8 <z_impl_k_sem_take+0xfc>)
    8f1c:	f7ff fd8a 	bl	8a34 <z_spin_lock_valid>
    8f20:	b968      	cbnz	r0, 8f3e <z_impl_k_sem_take+0x62>
    8f22:	4a2e      	ldr	r2, [pc, #184]	; (8fdc <z_impl_k_sem_take+0x100>)
    8f24:	492e      	ldr	r1, [pc, #184]	; (8fe0 <z_impl_k_sem_take+0x104>)
    8f26:	482a      	ldr	r0, [pc, #168]	; (8fd0 <z_impl_k_sem_take+0xf4>)
    8f28:	238e      	movs	r3, #142	; 0x8e
    8f2a:	f003 ffac 	bl	ce86 <assert_print>
    8f2e:	492a      	ldr	r1, [pc, #168]	; (8fd8 <z_impl_k_sem_take+0xfc>)
    8f30:	482c      	ldr	r0, [pc, #176]	; (8fe4 <z_impl_k_sem_take+0x108>)
    8f32:	f003 ffa8 	bl	ce86 <assert_print>
    8f36:	4829      	ldr	r0, [pc, #164]	; (8fdc <z_impl_k_sem_take+0x100>)
    8f38:	218e      	movs	r1, #142	; 0x8e
    8f3a:	f003 ff9d 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    8f3e:	4826      	ldr	r0, [pc, #152]	; (8fd8 <z_impl_k_sem_take+0xfc>)
    8f40:	f7ff fd96 	bl	8a70 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    8f44:	68a3      	ldr	r3, [r4, #8]
    8f46:	b1d3      	cbz	r3, 8f7e <z_impl_k_sem_take+0xa2>
		sem->count--;
    8f48:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f4a:	4823      	ldr	r0, [pc, #140]	; (8fd8 <z_impl_k_sem_take+0xfc>)
    8f4c:	60a3      	str	r3, [r4, #8]
    8f4e:	f7ff fd7f 	bl	8a50 <z_spin_unlock_valid>
    8f52:	b968      	cbnz	r0, 8f70 <z_impl_k_sem_take+0x94>
    8f54:	4a21      	ldr	r2, [pc, #132]	; (8fdc <z_impl_k_sem_take+0x100>)
    8f56:	4924      	ldr	r1, [pc, #144]	; (8fe8 <z_impl_k_sem_take+0x10c>)
    8f58:	481d      	ldr	r0, [pc, #116]	; (8fd0 <z_impl_k_sem_take+0xf4>)
    8f5a:	23b9      	movs	r3, #185	; 0xb9
    8f5c:	f003 ff93 	bl	ce86 <assert_print>
    8f60:	491d      	ldr	r1, [pc, #116]	; (8fd8 <z_impl_k_sem_take+0xfc>)
    8f62:	4822      	ldr	r0, [pc, #136]	; (8fec <z_impl_k_sem_take+0x110>)
    8f64:	f003 ff8f 	bl	ce86 <assert_print>
    8f68:	481c      	ldr	r0, [pc, #112]	; (8fdc <z_impl_k_sem_take+0x100>)
    8f6a:	21b9      	movs	r1, #185	; 0xb9
    8f6c:	f003 ff84 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    8f70:	f387 8811 	msr	BASEPRI, r7
    8f74:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8f78:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8f7a:	b003      	add	sp, #12
    8f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8f7e:	ea56 0305 	orrs.w	r3, r6, r5
    8f82:	d118      	bne.n	8fb6 <z_impl_k_sem_take+0xda>
    8f84:	4814      	ldr	r0, [pc, #80]	; (8fd8 <z_impl_k_sem_take+0xfc>)
    8f86:	f7ff fd63 	bl	8a50 <z_spin_unlock_valid>
    8f8a:	b968      	cbnz	r0, 8fa8 <z_impl_k_sem_take+0xcc>
    8f8c:	4a13      	ldr	r2, [pc, #76]	; (8fdc <z_impl_k_sem_take+0x100>)
    8f8e:	4916      	ldr	r1, [pc, #88]	; (8fe8 <z_impl_k_sem_take+0x10c>)
    8f90:	480f      	ldr	r0, [pc, #60]	; (8fd0 <z_impl_k_sem_take+0xf4>)
    8f92:	23b9      	movs	r3, #185	; 0xb9
    8f94:	f003 ff77 	bl	ce86 <assert_print>
    8f98:	490f      	ldr	r1, [pc, #60]	; (8fd8 <z_impl_k_sem_take+0xfc>)
    8f9a:	4814      	ldr	r0, [pc, #80]	; (8fec <z_impl_k_sem_take+0x110>)
    8f9c:	f003 ff73 	bl	ce86 <assert_print>
    8fa0:	480e      	ldr	r0, [pc, #56]	; (8fdc <z_impl_k_sem_take+0x100>)
    8fa2:	21b9      	movs	r1, #185	; 0xb9
    8fa4:	f003 ff68 	bl	ce78 <assert_post_action>
    8fa8:	f387 8811 	msr	BASEPRI, r7
    8fac:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    8fb0:	f06f 000f 	mvn.w	r0, #15
    8fb4:	e7e1      	b.n	8f7a <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8fb6:	e9cd 6500 	strd	r6, r5, [sp]
    8fba:	4622      	mov	r2, r4
    8fbc:	4639      	mov	r1, r7
    8fbe:	4806      	ldr	r0, [pc, #24]	; (8fd8 <z_impl_k_sem_take+0xfc>)
    8fc0:	f000 fcd4 	bl	996c <z_pend_curr>
	return ret;
    8fc4:	e7d9      	b.n	8f7a <z_impl_k_sem_take+0x9e>
    8fc6:	bf00      	nop
    8fc8:	000103b7 	.word	0x000103b7
    8fcc:	00010397 	.word	0x00010397
    8fd0:	0000eb06 	.word	0x0000eb06
    8fd4:	00010363 	.word	0x00010363
    8fd8:	200010f0 	.word	0x200010f0
    8fdc:	0000ec50 	.word	0x0000ec50
    8fe0:	0000eca9 	.word	0x0000eca9
    8fe4:	0000ecbe 	.word	0x0000ecbe
    8fe8:	0000ec7d 	.word	0x0000ec7d
    8fec:	0000ec94 	.word	0x0000ec94

00008ff0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    8ff0:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    8ff2:	4d07      	ldr	r5, [pc, #28]	; (9010 <z_reset_time_slice+0x20>)
    8ff4:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    8ff6:	b154      	cbz	r4, 900e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    8ff8:	f7fe f986 	bl	7308 <sys_clock_elapsed>
    8ffc:	4b05      	ldr	r3, [pc, #20]	; (9014 <z_reset_time_slice+0x24>)
    8ffe:	4404      	add	r4, r0
    9000:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    9002:	6828      	ldr	r0, [r5, #0]
    9004:	2100      	movs	r1, #0
	}
}
    9006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    900a:	f001 bb03 	b.w	a614 <z_set_timeout_expiry>
}
    900e:	bd38      	pop	{r3, r4, r5, pc}
    9010:	20001100 	.word	0x20001100
    9014:	200010c4 	.word	0x200010c4

00009018 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    9018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    901a:	4604      	mov	r4, r0
    901c:	460d      	mov	r5, r1
	__asm__ volatile(
    901e:	f04f 0320 	mov.w	r3, #32
    9022:	f3ef 8711 	mrs	r7, BASEPRI
    9026:	f383 8812 	msr	BASEPRI_MAX, r3
    902a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    902e:	4823      	ldr	r0, [pc, #140]	; (90bc <k_sched_time_slice_set+0xa4>)
    9030:	f7ff fd00 	bl	8a34 <z_spin_lock_valid>
    9034:	b968      	cbnz	r0, 9052 <k_sched_time_slice_set+0x3a>
    9036:	4a22      	ldr	r2, [pc, #136]	; (90c0 <k_sched_time_slice_set+0xa8>)
    9038:	4922      	ldr	r1, [pc, #136]	; (90c4 <k_sched_time_slice_set+0xac>)
    903a:	4823      	ldr	r0, [pc, #140]	; (90c8 <k_sched_time_slice_set+0xb0>)
    903c:	238e      	movs	r3, #142	; 0x8e
    903e:	f003 ff22 	bl	ce86 <assert_print>
    9042:	491e      	ldr	r1, [pc, #120]	; (90bc <k_sched_time_slice_set+0xa4>)
    9044:	4821      	ldr	r0, [pc, #132]	; (90cc <k_sched_time_slice_set+0xb4>)
    9046:	f003 ff1e 	bl	ce86 <assert_print>
    904a:	481d      	ldr	r0, [pc, #116]	; (90c0 <k_sched_time_slice_set+0xa8>)
    904c:	218e      	movs	r1, #142	; 0x8e
    904e:	f003 ff13 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    9052:	481a      	ldr	r0, [pc, #104]	; (90bc <k_sched_time_slice_set+0xa4>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    9054:	4e1e      	ldr	r6, [pc, #120]	; (90d0 <k_sched_time_slice_set+0xb8>)
    9056:	f7ff fd0b 	bl	8a70 <z_spin_lock_set_owner>
    905a:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    905c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    9060:	f240 30e7 	movw	r0, #999	; 0x3e7
    9064:	6131      	str	r1, [r6, #16]
    9066:	2300      	movs	r3, #0
    9068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    906c:	fbe4 010c 	umlal	r0, r1, r4, ip
    9070:	f7f7 fd2a 	bl	ac8 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    9074:	2c00      	cmp	r4, #0
    9076:	4b17      	ldr	r3, [pc, #92]	; (90d4 <k_sched_time_slice_set+0xbc>)
    9078:	dc1c      	bgt.n	90b4 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    907a:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    907c:	4b16      	ldr	r3, [pc, #88]	; (90d8 <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    907e:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    9080:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    9082:	f7ff ffb5 	bl	8ff0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9086:	480d      	ldr	r0, [pc, #52]	; (90bc <k_sched_time_slice_set+0xa4>)
    9088:	f7ff fce2 	bl	8a50 <z_spin_unlock_valid>
    908c:	b968      	cbnz	r0, 90aa <k_sched_time_slice_set+0x92>
    908e:	4a0c      	ldr	r2, [pc, #48]	; (90c0 <k_sched_time_slice_set+0xa8>)
    9090:	4912      	ldr	r1, [pc, #72]	; (90dc <k_sched_time_slice_set+0xc4>)
    9092:	480d      	ldr	r0, [pc, #52]	; (90c8 <k_sched_time_slice_set+0xb0>)
    9094:	23b9      	movs	r3, #185	; 0xb9
    9096:	f003 fef6 	bl	ce86 <assert_print>
    909a:	4908      	ldr	r1, [pc, #32]	; (90bc <k_sched_time_slice_set+0xa4>)
    909c:	4810      	ldr	r0, [pc, #64]	; (90e0 <k_sched_time_slice_set+0xc8>)
    909e:	f003 fef2 	bl	ce86 <assert_print>
    90a2:	4807      	ldr	r0, [pc, #28]	; (90c0 <k_sched_time_slice_set+0xa8>)
    90a4:	21b9      	movs	r1, #185	; 0xb9
    90a6:	f003 fee7 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    90aa:	f387 8811 	msr	BASEPRI, r7
    90ae:	f3bf 8f6f 	isb	sy
	}
}
    90b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    90b4:	2802      	cmp	r0, #2
    90b6:	bfb8      	it	lt
    90b8:	2002      	movlt	r0, #2
    90ba:	e7de      	b.n	907a <k_sched_time_slice_set+0x62>
    90bc:	200010f8 	.word	0x200010f8
    90c0:	0000ec50 	.word	0x0000ec50
    90c4:	0000eca9 	.word	0x0000eca9
    90c8:	0000eb06 	.word	0x0000eb06
    90cc:	0000ecbe 	.word	0x0000ecbe
    90d0:	200010c4 	.word	0x200010c4
    90d4:	20001100 	.word	0x20001100
    90d8:	200010fc 	.word	0x200010fc
    90dc:	0000ec7d 	.word	0x0000ec7d
    90e0:	0000ec94 	.word	0x0000ec94

000090e4 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    90e4:	b538      	push	{r3, r4, r5, lr}
    90e6:	4604      	mov	r4, r0
	__asm__ volatile(
    90e8:	f04f 0320 	mov.w	r3, #32
    90ec:	f3ef 8511 	mrs	r5, BASEPRI
    90f0:	f383 8812 	msr	BASEPRI_MAX, r3
    90f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90f8:	4817      	ldr	r0, [pc, #92]	; (9158 <z_unpend_thread_no_timeout+0x74>)
    90fa:	f7ff fc9b 	bl	8a34 <z_spin_lock_valid>
    90fe:	b968      	cbnz	r0, 911c <z_unpend_thread_no_timeout+0x38>
    9100:	4a16      	ldr	r2, [pc, #88]	; (915c <z_unpend_thread_no_timeout+0x78>)
    9102:	4917      	ldr	r1, [pc, #92]	; (9160 <z_unpend_thread_no_timeout+0x7c>)
    9104:	4817      	ldr	r0, [pc, #92]	; (9164 <z_unpend_thread_no_timeout+0x80>)
    9106:	238e      	movs	r3, #142	; 0x8e
    9108:	f003 febd 	bl	ce86 <assert_print>
    910c:	4912      	ldr	r1, [pc, #72]	; (9158 <z_unpend_thread_no_timeout+0x74>)
    910e:	4816      	ldr	r0, [pc, #88]	; (9168 <z_unpend_thread_no_timeout+0x84>)
    9110:	f003 feb9 	bl	ce86 <assert_print>
    9114:	4811      	ldr	r0, [pc, #68]	; (915c <z_unpend_thread_no_timeout+0x78>)
    9116:	218e      	movs	r1, #142	; 0x8e
    9118:	f003 feae 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    911c:	480e      	ldr	r0, [pc, #56]	; (9158 <z_unpend_thread_no_timeout+0x74>)
    911e:	f7ff fca7 	bl	8a70 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    9122:	4620      	mov	r0, r4
    9124:	f000 f900 	bl	9328 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9128:	480b      	ldr	r0, [pc, #44]	; (9158 <z_unpend_thread_no_timeout+0x74>)
    912a:	f7ff fc91 	bl	8a50 <z_spin_unlock_valid>
    912e:	b968      	cbnz	r0, 914c <z_unpend_thread_no_timeout+0x68>
    9130:	4a0a      	ldr	r2, [pc, #40]	; (915c <z_unpend_thread_no_timeout+0x78>)
    9132:	490e      	ldr	r1, [pc, #56]	; (916c <z_unpend_thread_no_timeout+0x88>)
    9134:	480b      	ldr	r0, [pc, #44]	; (9164 <z_unpend_thread_no_timeout+0x80>)
    9136:	23b9      	movs	r3, #185	; 0xb9
    9138:	f003 fea5 	bl	ce86 <assert_print>
    913c:	4906      	ldr	r1, [pc, #24]	; (9158 <z_unpend_thread_no_timeout+0x74>)
    913e:	480c      	ldr	r0, [pc, #48]	; (9170 <z_unpend_thread_no_timeout+0x8c>)
    9140:	f003 fea1 	bl	ce86 <assert_print>
    9144:	4805      	ldr	r0, [pc, #20]	; (915c <z_unpend_thread_no_timeout+0x78>)
    9146:	21b9      	movs	r1, #185	; 0xb9
    9148:	f003 fe96 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    914c:	f385 8811 	msr	BASEPRI, r5
    9150:	f3bf 8f6f 	isb	sy
	}
}
    9154:	bd38      	pop	{r3, r4, r5, pc}
    9156:	bf00      	nop
    9158:	200010f8 	.word	0x200010f8
    915c:	0000ec50 	.word	0x0000ec50
    9160:	0000eca9 	.word	0x0000eca9
    9164:	0000eb06 	.word	0x0000eb06
    9168:	0000ecbe 	.word	0x0000ecbe
    916c:	0000ec7d 	.word	0x0000ec7d
    9170:	0000ec94 	.word	0x0000ec94

00009174 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    9174:	b538      	push	{r3, r4, r5, lr}
    9176:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9178:	460d      	mov	r5, r1
    917a:	b9e9      	cbnz	r1, 91b8 <z_reschedule+0x44>
    917c:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    9180:	b9d3      	cbnz	r3, 91b8 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    9182:	4b19      	ldr	r3, [pc, #100]	; (91e8 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    9184:	69da      	ldr	r2, [r3, #28]
    9186:	689b      	ldr	r3, [r3, #8]
    9188:	429a      	cmp	r2, r3
    918a:	d015      	beq.n	91b8 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    918c:	f7ff fc60 	bl	8a50 <z_spin_unlock_valid>
    9190:	b968      	cbnz	r0, 91ae <z_reschedule+0x3a>
    9192:	4a16      	ldr	r2, [pc, #88]	; (91ec <z_reschedule+0x78>)
    9194:	4916      	ldr	r1, [pc, #88]	; (91f0 <z_reschedule+0x7c>)
    9196:	4817      	ldr	r0, [pc, #92]	; (91f4 <z_reschedule+0x80>)
    9198:	23d0      	movs	r3, #208	; 0xd0
    919a:	f003 fe74 	bl	ce86 <assert_print>
    919e:	4816      	ldr	r0, [pc, #88]	; (91f8 <z_reschedule+0x84>)
    91a0:	4621      	mov	r1, r4
    91a2:	f003 fe70 	bl	ce86 <assert_print>
    91a6:	4811      	ldr	r0, [pc, #68]	; (91ec <z_reschedule+0x78>)
    91a8:	21d0      	movs	r1, #208	; 0xd0
    91aa:	f003 fe65 	bl	ce78 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    91ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    91b2:	2000      	movs	r0, #0
    91b4:	f7fb bc40 	b.w	4a38 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    91b8:	4620      	mov	r0, r4
    91ba:	f7ff fc49 	bl	8a50 <z_spin_unlock_valid>
    91be:	b968      	cbnz	r0, 91dc <z_reschedule+0x68>
    91c0:	4a0a      	ldr	r2, [pc, #40]	; (91ec <z_reschedule+0x78>)
    91c2:	490b      	ldr	r1, [pc, #44]	; (91f0 <z_reschedule+0x7c>)
    91c4:	480b      	ldr	r0, [pc, #44]	; (91f4 <z_reschedule+0x80>)
    91c6:	23b9      	movs	r3, #185	; 0xb9
    91c8:	f003 fe5d 	bl	ce86 <assert_print>
    91cc:	480a      	ldr	r0, [pc, #40]	; (91f8 <z_reschedule+0x84>)
    91ce:	4621      	mov	r1, r4
    91d0:	f003 fe59 	bl	ce86 <assert_print>
    91d4:	4805      	ldr	r0, [pc, #20]	; (91ec <z_reschedule+0x78>)
    91d6:	21b9      	movs	r1, #185	; 0xb9
    91d8:	f003 fe4e 	bl	ce78 <assert_post_action>
    91dc:	f385 8811 	msr	BASEPRI, r5
    91e0:	f3bf 8f6f 	isb	sy
    91e4:	bd38      	pop	{r3, r4, r5, pc}
    91e6:	bf00      	nop
    91e8:	200010c4 	.word	0x200010c4
    91ec:	0000ec50 	.word	0x0000ec50
    91f0:	0000ec7d 	.word	0x0000ec7d
    91f4:	0000eb06 	.word	0x0000eb06
    91f8:	0000ec94 	.word	0x0000ec94

000091fc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    91fc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    91fe:	f04f 0320 	mov.w	r3, #32
    9202:	f3ef 8511 	mrs	r5, BASEPRI
    9206:	f383 8812 	msr	BASEPRI_MAX, r3
    920a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    920e:	4829      	ldr	r0, [pc, #164]	; (92b4 <k_sched_lock+0xb8>)
    9210:	f7ff fc10 	bl	8a34 <z_spin_lock_valid>
    9214:	b968      	cbnz	r0, 9232 <k_sched_lock+0x36>
    9216:	4a28      	ldr	r2, [pc, #160]	; (92b8 <k_sched_lock+0xbc>)
    9218:	4928      	ldr	r1, [pc, #160]	; (92bc <k_sched_lock+0xc0>)
    921a:	4829      	ldr	r0, [pc, #164]	; (92c0 <k_sched_lock+0xc4>)
    921c:	238e      	movs	r3, #142	; 0x8e
    921e:	f003 fe32 	bl	ce86 <assert_print>
    9222:	4924      	ldr	r1, [pc, #144]	; (92b4 <k_sched_lock+0xb8>)
    9224:	4827      	ldr	r0, [pc, #156]	; (92c4 <k_sched_lock+0xc8>)
    9226:	f003 fe2e 	bl	ce86 <assert_print>
    922a:	4823      	ldr	r0, [pc, #140]	; (92b8 <k_sched_lock+0xbc>)
    922c:	218e      	movs	r1, #142	; 0x8e
    922e:	f003 fe23 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    9232:	4820      	ldr	r0, [pc, #128]	; (92b4 <k_sched_lock+0xb8>)
    9234:	f7ff fc1c 	bl	8a70 <z_spin_lock_set_owner>
    9238:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    923c:	b163      	cbz	r3, 9258 <k_sched_lock+0x5c>
    923e:	4922      	ldr	r1, [pc, #136]	; (92c8 <k_sched_lock+0xcc>)
    9240:	4a22      	ldr	r2, [pc, #136]	; (92cc <k_sched_lock+0xd0>)
    9242:	481f      	ldr	r0, [pc, #124]	; (92c0 <k_sched_lock+0xc4>)
    9244:	23fd      	movs	r3, #253	; 0xfd
    9246:	f003 fe1e 	bl	ce86 <assert_print>
    924a:	4821      	ldr	r0, [pc, #132]	; (92d0 <k_sched_lock+0xd4>)
    924c:	f003 fe1b 	bl	ce86 <assert_print>
    9250:	481e      	ldr	r0, [pc, #120]	; (92cc <k_sched_lock+0xd0>)
    9252:	21fd      	movs	r1, #253	; 0xfd
    9254:	f003 fe10 	bl	ce78 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9258:	4c1e      	ldr	r4, [pc, #120]	; (92d4 <k_sched_lock+0xd8>)
    925a:	68a3      	ldr	r3, [r4, #8]
    925c:	7bdb      	ldrb	r3, [r3, #15]
    925e:	2b01      	cmp	r3, #1
    9260:	d10c      	bne.n	927c <k_sched_lock+0x80>
    9262:	491d      	ldr	r1, [pc, #116]	; (92d8 <k_sched_lock+0xdc>)
    9264:	4a19      	ldr	r2, [pc, #100]	; (92cc <k_sched_lock+0xd0>)
    9266:	4816      	ldr	r0, [pc, #88]	; (92c0 <k_sched_lock+0xc4>)
    9268:	23fe      	movs	r3, #254	; 0xfe
    926a:	f003 fe0c 	bl	ce86 <assert_print>
    926e:	4818      	ldr	r0, [pc, #96]	; (92d0 <k_sched_lock+0xd4>)
    9270:	f003 fe09 	bl	ce86 <assert_print>
    9274:	4815      	ldr	r0, [pc, #84]	; (92cc <k_sched_lock+0xd0>)
    9276:	21fe      	movs	r1, #254	; 0xfe
    9278:	f003 fdfe 	bl	ce78 <assert_post_action>
	--_current->base.sched_locked;
    927c:	68a2      	ldr	r2, [r4, #8]
    927e:	7bd3      	ldrb	r3, [r2, #15]
    9280:	3b01      	subs	r3, #1
    9282:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9284:	480b      	ldr	r0, [pc, #44]	; (92b4 <k_sched_lock+0xb8>)
    9286:	f7ff fbe3 	bl	8a50 <z_spin_unlock_valid>
    928a:	b968      	cbnz	r0, 92a8 <k_sched_lock+0xac>
    928c:	4a0a      	ldr	r2, [pc, #40]	; (92b8 <k_sched_lock+0xbc>)
    928e:	4913      	ldr	r1, [pc, #76]	; (92dc <k_sched_lock+0xe0>)
    9290:	480b      	ldr	r0, [pc, #44]	; (92c0 <k_sched_lock+0xc4>)
    9292:	23b9      	movs	r3, #185	; 0xb9
    9294:	f003 fdf7 	bl	ce86 <assert_print>
    9298:	4906      	ldr	r1, [pc, #24]	; (92b4 <k_sched_lock+0xb8>)
    929a:	4811      	ldr	r0, [pc, #68]	; (92e0 <k_sched_lock+0xe4>)
    929c:	f003 fdf3 	bl	ce86 <assert_print>
    92a0:	4805      	ldr	r0, [pc, #20]	; (92b8 <k_sched_lock+0xbc>)
    92a2:	21b9      	movs	r1, #185	; 0xb9
    92a4:	f003 fde8 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    92a8:	f385 8811 	msr	BASEPRI, r5
    92ac:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    92b0:	bd38      	pop	{r3, r4, r5, pc}
    92b2:	bf00      	nop
    92b4:	200010f8 	.word	0x200010f8
    92b8:	0000ec50 	.word	0x0000ec50
    92bc:	0000eca9 	.word	0x0000eca9
    92c0:	0000eb06 	.word	0x0000eb06
    92c4:	0000ecbe 	.word	0x0000ecbe
    92c8:	0001022d 	.word	0x0001022d
    92cc:	00010338 	.word	0x00010338
    92d0:	00010363 	.word	0x00010363
    92d4:	200010c4 	.word	0x200010c4
    92d8:	00010366 	.word	0x00010366
    92dc:	0000ec7d 	.word	0x0000ec7d
    92e0:	0000ec94 	.word	0x0000ec94

000092e4 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    92e4:	4b0c      	ldr	r3, [pc, #48]	; (9318 <z_priq_dumb_remove+0x34>)
    92e6:	4299      	cmp	r1, r3
{
    92e8:	b510      	push	{r4, lr}
    92ea:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    92ec:	d10b      	bne.n	9306 <z_priq_dumb_remove+0x22>
    92ee:	490b      	ldr	r1, [pc, #44]	; (931c <z_priq_dumb_remove+0x38>)
    92f0:	480b      	ldr	r0, [pc, #44]	; (9320 <z_priq_dumb_remove+0x3c>)
    92f2:	4a0c      	ldr	r2, [pc, #48]	; (9324 <z_priq_dumb_remove+0x40>)
    92f4:	f240 433d 	movw	r3, #1085	; 0x43d
    92f8:	f003 fdc5 	bl	ce86 <assert_print>
    92fc:	4809      	ldr	r0, [pc, #36]	; (9324 <z_priq_dumb_remove+0x40>)
    92fe:	f240 413d 	movw	r1, #1085	; 0x43d
    9302:	f003 fdb9 	bl	ce78 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    9306:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    930a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    930c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    930e:	2300      	movs	r3, #0
	node->prev = NULL;
    9310:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    9314:	bd10      	pop	{r4, pc}
    9316:	bf00      	nop
    9318:	20000868 	.word	0x20000868
    931c:	00010427 	.word	0x00010427
    9320:	0000eb06 	.word	0x0000eb06
    9324:	00010405 	.word	0x00010405

00009328 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    9328:	6883      	ldr	r3, [r0, #8]
{
    932a:	b510      	push	{r4, lr}
    932c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    932e:	b95b      	cbnz	r3, 9348 <unpend_thread_no_timeout+0x20>
    9330:	490b      	ldr	r1, [pc, #44]	; (9360 <unpend_thread_no_timeout+0x38>)
    9332:	480c      	ldr	r0, [pc, #48]	; (9364 <unpend_thread_no_timeout+0x3c>)
    9334:	4a0c      	ldr	r2, [pc, #48]	; (9368 <unpend_thread_no_timeout+0x40>)
    9336:	f240 23b9 	movw	r3, #697	; 0x2b9
    933a:	f003 fda4 	bl	ce86 <assert_print>
    933e:	480a      	ldr	r0, [pc, #40]	; (9368 <unpend_thread_no_timeout+0x40>)
    9340:	f240 21b9 	movw	r1, #697	; 0x2b9
    9344:	f003 fd98 	bl	ce78 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9348:	68a0      	ldr	r0, [r4, #8]
    934a:	4621      	mov	r1, r4
    934c:	f7ff ffca 	bl	92e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9350:	7b63      	ldrb	r3, [r4, #13]
    9352:	f023 0302 	bic.w	r3, r3, #2
    9356:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9358:	2300      	movs	r3, #0
    935a:	60a3      	str	r3, [r4, #8]
}
    935c:	bd10      	pop	{r4, pc}
    935e:	bf00      	nop
    9360:	00010448 	.word	0x00010448
    9364:	0000eb06 	.word	0x0000eb06
    9368:	00010405 	.word	0x00010405

0000936c <update_cache>:
{
    936c:	b538      	push	{r3, r4, r5, lr}
    936e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    9370:	4814      	ldr	r0, [pc, #80]	; (93c4 <update_cache+0x58>)
    9372:	4d15      	ldr	r5, [pc, #84]	; (93c8 <update_cache+0x5c>)
    9374:	f004 fb3c 	bl	d9f0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9378:	4604      	mov	r4, r0
    937a:	b900      	cbnz	r0, 937e <update_cache+0x12>
    937c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    937e:	b9ca      	cbnz	r2, 93b4 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    9380:	68ab      	ldr	r3, [r5, #8]
    9382:	b963      	cbnz	r3, 939e <update_cache+0x32>
    9384:	4911      	ldr	r1, [pc, #68]	; (93cc <update_cache+0x60>)
    9386:	4a12      	ldr	r2, [pc, #72]	; (93d0 <update_cache+0x64>)
    9388:	4812      	ldr	r0, [pc, #72]	; (93d4 <update_cache+0x68>)
    938a:	2389      	movs	r3, #137	; 0x89
    938c:	f003 fd7b 	bl	ce86 <assert_print>
    9390:	4811      	ldr	r0, [pc, #68]	; (93d8 <update_cache+0x6c>)
    9392:	f003 fd78 	bl	ce86 <assert_print>
    9396:	480e      	ldr	r0, [pc, #56]	; (93d0 <update_cache+0x64>)
    9398:	2189      	movs	r1, #137	; 0x89
    939a:	f003 fd6d 	bl	ce78 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    939e:	68ab      	ldr	r3, [r5, #8]
    93a0:	7b5a      	ldrb	r2, [r3, #13]
    93a2:	06d2      	lsls	r2, r2, #27
    93a4:	d106      	bne.n	93b4 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    93a6:	69a2      	ldr	r2, [r4, #24]
    93a8:	b922      	cbnz	r2, 93b4 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    93aa:	89da      	ldrh	r2, [r3, #14]
    93ac:	2a7f      	cmp	r2, #127	; 0x7f
    93ae:	d901      	bls.n	93b4 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    93b0:	61eb      	str	r3, [r5, #28]
}
    93b2:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    93b4:	68ab      	ldr	r3, [r5, #8]
    93b6:	42a3      	cmp	r3, r4
    93b8:	d002      	beq.n	93c0 <update_cache+0x54>
			z_reset_time_slice(thread);
    93ba:	4620      	mov	r0, r4
    93bc:	f7ff fe18 	bl	8ff0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    93c0:	61ec      	str	r4, [r5, #28]
}
    93c2:	e7f6      	b.n	93b2 <update_cache+0x46>
    93c4:	200010e4 	.word	0x200010e4
    93c8:	200010c4 	.word	0x200010c4
    93cc:	0001045f 	.word	0x0001045f
    93d0:	00010405 	.word	0x00010405
    93d4:	0000eb06 	.word	0x0000eb06
    93d8:	00010363 	.word	0x00010363

000093dc <move_thread_to_end_of_prio_q>:
{
    93dc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    93de:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    93e2:	7b43      	ldrb	r3, [r0, #13]
    93e4:	2a00      	cmp	r2, #0
{
    93e6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    93e8:	da06      	bge.n	93f8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    93ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    93ee:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    93f0:	4601      	mov	r1, r0
    93f2:	481e      	ldr	r0, [pc, #120]	; (946c <move_thread_to_end_of_prio_q+0x90>)
    93f4:	f7ff ff76 	bl	92e4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    93f8:	7b63      	ldrb	r3, [r4, #13]
    93fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    93fe:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9400:	4b1b      	ldr	r3, [pc, #108]	; (9470 <move_thread_to_end_of_prio_q+0x94>)
    9402:	429c      	cmp	r4, r3
    9404:	d109      	bne.n	941a <move_thread_to_end_of_prio_q+0x3e>
    9406:	491b      	ldr	r1, [pc, #108]	; (9474 <move_thread_to_end_of_prio_q+0x98>)
    9408:	481b      	ldr	r0, [pc, #108]	; (9478 <move_thread_to_end_of_prio_q+0x9c>)
    940a:	4a1c      	ldr	r2, [pc, #112]	; (947c <move_thread_to_end_of_prio_q+0xa0>)
    940c:	23ba      	movs	r3, #186	; 0xba
    940e:	f003 fd3a 	bl	ce86 <assert_print>
    9412:	481a      	ldr	r0, [pc, #104]	; (947c <move_thread_to_end_of_prio_q+0xa0>)
    9414:	21ba      	movs	r1, #186	; 0xba
    9416:	f003 fd2f 	bl	ce78 <assert_post_action>
	return list->head == list;
    941a:	4a19      	ldr	r2, [pc, #100]	; (9480 <move_thread_to_end_of_prio_q+0xa4>)
	return (node == list->tail) ? NULL : node->next;
    941c:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9420:	f102 0520 	add.w	r5, r2, #32
    9424:	42ab      	cmp	r3, r5
    9426:	d01b      	beq.n	9460 <move_thread_to_end_of_prio_q+0x84>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9428:	b1d3      	cbz	r3, 9460 <move_thread_to_end_of_prio_q+0x84>
	int32_t b1 = thread_1->base.prio;
    942a:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    942e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    9432:	428e      	cmp	r6, r1
    9434:	d00f      	beq.n	9456 <move_thread_to_end_of_prio_q+0x7a>
		return b2 - b1;
    9436:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    9438:	2900      	cmp	r1, #0
    943a:	dd0c      	ble.n	9456 <move_thread_to_end_of_prio_q+0x7a>
	sys_dnode_t *const prev = successor->prev;
    943c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    943e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    9442:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    9444:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    9446:	6890      	ldr	r0, [r2, #8]
    9448:	1b03      	subs	r3, r0, r4
    944a:	4258      	negs	r0, r3
}
    944c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    9450:	4158      	adcs	r0, r3
    9452:	f7ff bf8b 	b.w	936c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    9456:	4283      	cmp	r3, r0
    9458:	d002      	beq.n	9460 <move_thread_to_end_of_prio_q+0x84>
    945a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    945c:	2b00      	cmp	r3, #0
    945e:	d1e6      	bne.n	942e <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    9460:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    9464:	6004      	str	r4, [r0, #0]
	list->tail = node;
    9466:	6254      	str	r4, [r2, #36]	; 0x24
}
    9468:	e7ed      	b.n	9446 <move_thread_to_end_of_prio_q+0x6a>
    946a:	bf00      	nop
    946c:	200010e4 	.word	0x200010e4
    9470:	20000868 	.word	0x20000868
    9474:	00010427 	.word	0x00010427
    9478:	0000eb06 	.word	0x0000eb06
    947c:	00010405 	.word	0x00010405
    9480:	200010c4 	.word	0x200010c4

00009484 <z_time_slice>:
{
    9484:	b570      	push	{r4, r5, r6, lr}
    9486:	4605      	mov	r5, r0
	__asm__ volatile(
    9488:	f04f 0320 	mov.w	r3, #32
    948c:	f3ef 8611 	mrs	r6, BASEPRI
    9490:	f383 8812 	msr	BASEPRI_MAX, r3
    9494:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9498:	482a      	ldr	r0, [pc, #168]	; (9544 <z_time_slice+0xc0>)
    949a:	f7ff facb 	bl	8a34 <z_spin_lock_valid>
    949e:	b968      	cbnz	r0, 94bc <z_time_slice+0x38>
    94a0:	4a29      	ldr	r2, [pc, #164]	; (9548 <z_time_slice+0xc4>)
    94a2:	492a      	ldr	r1, [pc, #168]	; (954c <z_time_slice+0xc8>)
    94a4:	482a      	ldr	r0, [pc, #168]	; (9550 <z_time_slice+0xcc>)
    94a6:	238e      	movs	r3, #142	; 0x8e
    94a8:	f003 fced 	bl	ce86 <assert_print>
    94ac:	4925      	ldr	r1, [pc, #148]	; (9544 <z_time_slice+0xc0>)
    94ae:	4829      	ldr	r0, [pc, #164]	; (9554 <z_time_slice+0xd0>)
    94b0:	f003 fce9 	bl	ce86 <assert_print>
    94b4:	4824      	ldr	r0, [pc, #144]	; (9548 <z_time_slice+0xc4>)
    94b6:	218e      	movs	r1, #142	; 0x8e
    94b8:	f003 fcde 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    94bc:	4821      	ldr	r0, [pc, #132]	; (9544 <z_time_slice+0xc0>)
    94be:	f7ff fad7 	bl	8a70 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    94c2:	4b25      	ldr	r3, [pc, #148]	; (9558 <z_time_slice+0xd4>)
    94c4:	4a25      	ldr	r2, [pc, #148]	; (955c <z_time_slice+0xd8>)
    94c6:	689c      	ldr	r4, [r3, #8]
    94c8:	6811      	ldr	r1, [r2, #0]
    94ca:	428c      	cmp	r4, r1
    94cc:	d119      	bne.n	9502 <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    94ce:	4620      	mov	r0, r4
    94d0:	f7ff fd8e 	bl	8ff0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    94d4:	481b      	ldr	r0, [pc, #108]	; (9544 <z_time_slice+0xc0>)
    94d6:	f7ff fabb 	bl	8a50 <z_spin_unlock_valid>
    94da:	b968      	cbnz	r0, 94f8 <z_time_slice+0x74>
    94dc:	4a1a      	ldr	r2, [pc, #104]	; (9548 <z_time_slice+0xc4>)
    94de:	4920      	ldr	r1, [pc, #128]	; (9560 <z_time_slice+0xdc>)
    94e0:	481b      	ldr	r0, [pc, #108]	; (9550 <z_time_slice+0xcc>)
    94e2:	23b9      	movs	r3, #185	; 0xb9
    94e4:	f003 fccf 	bl	ce86 <assert_print>
    94e8:	4916      	ldr	r1, [pc, #88]	; (9544 <z_time_slice+0xc0>)
    94ea:	481e      	ldr	r0, [pc, #120]	; (9564 <z_time_slice+0xe0>)
    94ec:	f003 fccb 	bl	ce86 <assert_print>
    94f0:	4815      	ldr	r0, [pc, #84]	; (9548 <z_time_slice+0xc4>)
    94f2:	21b9      	movs	r1, #185	; 0xb9
    94f4:	f003 fcc0 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    94f8:	f386 8811 	msr	BASEPRI, r6
    94fc:	f3bf 8f6f 	isb	sy
}
    9500:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    9502:	2100      	movs	r1, #0
    9504:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    9506:	4a18      	ldr	r2, [pc, #96]	; (9568 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    9508:	6812      	ldr	r2, [r2, #0]
    950a:	b1c2      	cbz	r2, 953e <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    950c:	89e2      	ldrh	r2, [r4, #14]
    950e:	2a7f      	cmp	r2, #127	; 0x7f
    9510:	d815      	bhi.n	953e <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    9512:	7b62      	ldrb	r2, [r4, #13]
    9514:	06d2      	lsls	r2, r2, #27
    9516:	d112      	bne.n	953e <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    9518:	4a14      	ldr	r2, [pc, #80]	; (956c <z_time_slice+0xe8>)
    951a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    951e:	6812      	ldr	r2, [r2, #0]
    9520:	4291      	cmp	r1, r2
    9522:	db0c      	blt.n	953e <z_time_slice+0xba>
	if (slice_time(_current) && sliceable(_current)) {
    9524:	4a12      	ldr	r2, [pc, #72]	; (9570 <z_time_slice+0xec>)
    9526:	4294      	cmp	r4, r2
    9528:	d009      	beq.n	953e <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    952a:	691a      	ldr	r2, [r3, #16]
    952c:	42aa      	cmp	r2, r5
    952e:	dc03      	bgt.n	9538 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    9530:	4620      	mov	r0, r4
    9532:	f7ff ff53 	bl	93dc <move_thread_to_end_of_prio_q>
    9536:	e7ca      	b.n	94ce <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    9538:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    953a:	611a      	str	r2, [r3, #16]
    953c:	e7ca      	b.n	94d4 <z_time_slice+0x50>
    953e:	2200      	movs	r2, #0
    9540:	e7fb      	b.n	953a <z_time_slice+0xb6>
    9542:	bf00      	nop
    9544:	200010f8 	.word	0x200010f8
    9548:	0000ec50 	.word	0x0000ec50
    954c:	0000eca9 	.word	0x0000eca9
    9550:	0000eb06 	.word	0x0000eb06
    9554:	0000ecbe 	.word	0x0000ecbe
    9558:	200010c4 	.word	0x200010c4
    955c:	200010f4 	.word	0x200010f4
    9560:	0000ec7d 	.word	0x0000ec7d
    9564:	0000ec94 	.word	0x0000ec94
    9568:	20001100 	.word	0x20001100
    956c:	200010fc 	.word	0x200010fc
    9570:	20000868 	.word	0x20000868

00009574 <ready_thread>:
{
    9574:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    9576:	f990 200d 	ldrsb.w	r2, [r0, #13]
    957a:	7b43      	ldrb	r3, [r0, #13]
    957c:	2a00      	cmp	r2, #0
{
    957e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    9580:	db39      	blt.n	95f6 <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9582:	06da      	lsls	r2, r3, #27
    9584:	d137      	bne.n	95f6 <ready_thread+0x82>
    9586:	6982      	ldr	r2, [r0, #24]
    9588:	2a00      	cmp	r2, #0
    958a:	d134      	bne.n	95f6 <ready_thread+0x82>
	thread->base.thread_state |= _THREAD_QUEUED;
    958c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9590:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9592:	4b19      	ldr	r3, [pc, #100]	; (95f8 <ready_thread+0x84>)
    9594:	4298      	cmp	r0, r3
    9596:	d109      	bne.n	95ac <ready_thread+0x38>
    9598:	4918      	ldr	r1, [pc, #96]	; (95fc <ready_thread+0x88>)
    959a:	4819      	ldr	r0, [pc, #100]	; (9600 <ready_thread+0x8c>)
    959c:	4a19      	ldr	r2, [pc, #100]	; (9604 <ready_thread+0x90>)
    959e:	23ba      	movs	r3, #186	; 0xba
    95a0:	f003 fc71 	bl	ce86 <assert_print>
    95a4:	4817      	ldr	r0, [pc, #92]	; (9604 <ready_thread+0x90>)
    95a6:	21ba      	movs	r1, #186	; 0xba
    95a8:	f003 fc66 	bl	ce78 <assert_post_action>
	return list->head == list;
    95ac:	4a16      	ldr	r2, [pc, #88]	; (9608 <ready_thread+0x94>)
	return (node == list->tail) ? NULL : node->next;
    95ae:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    95b2:	f102 0520 	add.w	r5, r2, #32
    95b6:	42ab      	cmp	r3, r5
    95b8:	d018      	beq.n	95ec <ready_thread+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    95ba:	b1bb      	cbz	r3, 95ec <ready_thread+0x78>
	int32_t b1 = thread_1->base.prio;
    95bc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    95c0:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    95c4:	428e      	cmp	r6, r1
    95c6:	d00c      	beq.n	95e2 <ready_thread+0x6e>
		return b2 - b1;
    95c8:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    95ca:	2900      	cmp	r1, #0
    95cc:	dd09      	ble.n	95e2 <ready_thread+0x6e>
	sys_dnode_t *const prev = successor->prev;
    95ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    95d0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    95d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    95d6:	605c      	str	r4, [r3, #4]
}
    95d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    95dc:	2000      	movs	r0, #0
    95de:	f7ff bec5 	b.w	936c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    95e2:	4298      	cmp	r0, r3
    95e4:	d002      	beq.n	95ec <ready_thread+0x78>
    95e6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    95e8:	2b00      	cmp	r3, #0
    95ea:	d1e9      	bne.n	95c0 <ready_thread+0x4c>
	node->prev = tail;
    95ec:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    95f0:	6004      	str	r4, [r0, #0]
	list->tail = node;
    95f2:	6254      	str	r4, [r2, #36]	; 0x24
}
    95f4:	e7f0      	b.n	95d8 <ready_thread+0x64>
}
    95f6:	bd70      	pop	{r4, r5, r6, pc}
    95f8:	20000868 	.word	0x20000868
    95fc:	00010427 	.word	0x00010427
    9600:	0000eb06 	.word	0x0000eb06
    9604:	00010405 	.word	0x00010405
    9608:	200010c4 	.word	0x200010c4

0000960c <z_ready_thread>:
{
    960c:	b538      	push	{r3, r4, r5, lr}
    960e:	4604      	mov	r4, r0
	__asm__ volatile(
    9610:	f04f 0320 	mov.w	r3, #32
    9614:	f3ef 8511 	mrs	r5, BASEPRI
    9618:	f383 8812 	msr	BASEPRI_MAX, r3
    961c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9620:	4817      	ldr	r0, [pc, #92]	; (9680 <z_ready_thread+0x74>)
    9622:	f7ff fa07 	bl	8a34 <z_spin_lock_valid>
    9626:	b968      	cbnz	r0, 9644 <z_ready_thread+0x38>
    9628:	4a16      	ldr	r2, [pc, #88]	; (9684 <z_ready_thread+0x78>)
    962a:	4917      	ldr	r1, [pc, #92]	; (9688 <z_ready_thread+0x7c>)
    962c:	4817      	ldr	r0, [pc, #92]	; (968c <z_ready_thread+0x80>)
    962e:	238e      	movs	r3, #142	; 0x8e
    9630:	f003 fc29 	bl	ce86 <assert_print>
    9634:	4912      	ldr	r1, [pc, #72]	; (9680 <z_ready_thread+0x74>)
    9636:	4816      	ldr	r0, [pc, #88]	; (9690 <z_ready_thread+0x84>)
    9638:	f003 fc25 	bl	ce86 <assert_print>
    963c:	4811      	ldr	r0, [pc, #68]	; (9684 <z_ready_thread+0x78>)
    963e:	218e      	movs	r1, #142	; 0x8e
    9640:	f003 fc1a 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    9644:	480e      	ldr	r0, [pc, #56]	; (9680 <z_ready_thread+0x74>)
    9646:	f7ff fa13 	bl	8a70 <z_spin_lock_set_owner>
			ready_thread(thread);
    964a:	4620      	mov	r0, r4
    964c:	f7ff ff92 	bl	9574 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9650:	480b      	ldr	r0, [pc, #44]	; (9680 <z_ready_thread+0x74>)
    9652:	f7ff f9fd 	bl	8a50 <z_spin_unlock_valid>
    9656:	b968      	cbnz	r0, 9674 <z_ready_thread+0x68>
    9658:	4a0a      	ldr	r2, [pc, #40]	; (9684 <z_ready_thread+0x78>)
    965a:	490e      	ldr	r1, [pc, #56]	; (9694 <z_ready_thread+0x88>)
    965c:	480b      	ldr	r0, [pc, #44]	; (968c <z_ready_thread+0x80>)
    965e:	23b9      	movs	r3, #185	; 0xb9
    9660:	f003 fc11 	bl	ce86 <assert_print>
    9664:	4906      	ldr	r1, [pc, #24]	; (9680 <z_ready_thread+0x74>)
    9666:	480c      	ldr	r0, [pc, #48]	; (9698 <z_ready_thread+0x8c>)
    9668:	f003 fc0d 	bl	ce86 <assert_print>
    966c:	4805      	ldr	r0, [pc, #20]	; (9684 <z_ready_thread+0x78>)
    966e:	21b9      	movs	r1, #185	; 0xb9
    9670:	f003 fc02 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    9674:	f385 8811 	msr	BASEPRI, r5
    9678:	f3bf 8f6f 	isb	sy
}
    967c:	bd38      	pop	{r3, r4, r5, pc}
    967e:	bf00      	nop
    9680:	200010f8 	.word	0x200010f8
    9684:	0000ec50 	.word	0x0000ec50
    9688:	0000eca9 	.word	0x0000eca9
    968c:	0000eb06 	.word	0x0000eb06
    9690:	0000ecbe 	.word	0x0000ecbe
    9694:	0000ec7d 	.word	0x0000ec7d
    9698:	0000ec94 	.word	0x0000ec94

0000969c <z_sched_start>:
{
    969c:	b538      	push	{r3, r4, r5, lr}
    969e:	4604      	mov	r4, r0
	__asm__ volatile(
    96a0:	f04f 0320 	mov.w	r3, #32
    96a4:	f3ef 8511 	mrs	r5, BASEPRI
    96a8:	f383 8812 	msr	BASEPRI_MAX, r3
    96ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    96b0:	481d      	ldr	r0, [pc, #116]	; (9728 <z_sched_start+0x8c>)
    96b2:	f7ff f9bf 	bl	8a34 <z_spin_lock_valid>
    96b6:	b968      	cbnz	r0, 96d4 <z_sched_start+0x38>
    96b8:	4a1c      	ldr	r2, [pc, #112]	; (972c <z_sched_start+0x90>)
    96ba:	491d      	ldr	r1, [pc, #116]	; (9730 <z_sched_start+0x94>)
    96bc:	481d      	ldr	r0, [pc, #116]	; (9734 <z_sched_start+0x98>)
    96be:	238e      	movs	r3, #142	; 0x8e
    96c0:	f003 fbe1 	bl	ce86 <assert_print>
    96c4:	4918      	ldr	r1, [pc, #96]	; (9728 <z_sched_start+0x8c>)
    96c6:	481c      	ldr	r0, [pc, #112]	; (9738 <z_sched_start+0x9c>)
    96c8:	f003 fbdd 	bl	ce86 <assert_print>
    96cc:	4817      	ldr	r0, [pc, #92]	; (972c <z_sched_start+0x90>)
    96ce:	218e      	movs	r1, #142	; 0x8e
    96d0:	f003 fbd2 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    96d4:	4814      	ldr	r0, [pc, #80]	; (9728 <z_sched_start+0x8c>)
    96d6:	f7ff f9cb 	bl	8a70 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    96da:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    96dc:	075a      	lsls	r2, r3, #29
    96de:	d416      	bmi.n	970e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    96e0:	4811      	ldr	r0, [pc, #68]	; (9728 <z_sched_start+0x8c>)
    96e2:	f7ff f9b5 	bl	8a50 <z_spin_unlock_valid>
    96e6:	b968      	cbnz	r0, 9704 <z_sched_start+0x68>
    96e8:	4a10      	ldr	r2, [pc, #64]	; (972c <z_sched_start+0x90>)
    96ea:	4914      	ldr	r1, [pc, #80]	; (973c <z_sched_start+0xa0>)
    96ec:	4811      	ldr	r0, [pc, #68]	; (9734 <z_sched_start+0x98>)
    96ee:	23b9      	movs	r3, #185	; 0xb9
    96f0:	f003 fbc9 	bl	ce86 <assert_print>
    96f4:	490c      	ldr	r1, [pc, #48]	; (9728 <z_sched_start+0x8c>)
    96f6:	4812      	ldr	r0, [pc, #72]	; (9740 <z_sched_start+0xa4>)
    96f8:	f003 fbc5 	bl	ce86 <assert_print>
    96fc:	480b      	ldr	r0, [pc, #44]	; (972c <z_sched_start+0x90>)
    96fe:	21b9      	movs	r1, #185	; 0xb9
    9700:	f003 fbba 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    9704:	f385 8811 	msr	BASEPRI, r5
    9708:	f3bf 8f6f 	isb	sy
}
    970c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    970e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    9712:	4620      	mov	r0, r4
    9714:	7363      	strb	r3, [r4, #13]
    9716:	f7ff ff2d 	bl	9574 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    971a:	4629      	mov	r1, r5
    971c:	4802      	ldr	r0, [pc, #8]	; (9728 <z_sched_start+0x8c>)
}
    971e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    9722:	f7ff bd27 	b.w	9174 <z_reschedule>
    9726:	bf00      	nop
    9728:	200010f8 	.word	0x200010f8
    972c:	0000ec50 	.word	0x0000ec50
    9730:	0000eca9 	.word	0x0000eca9
    9734:	0000eb06 	.word	0x0000eb06
    9738:	0000ecbe 	.word	0x0000ecbe
    973c:	0000ec7d 	.word	0x0000ec7d
    9740:	0000ec94 	.word	0x0000ec94

00009744 <z_thread_timeout>:
{
    9744:	b570      	push	{r4, r5, r6, lr}
    9746:	4604      	mov	r4, r0
	__asm__ volatile(
    9748:	f04f 0320 	mov.w	r3, #32
    974c:	f3ef 8611 	mrs	r6, BASEPRI
    9750:	f383 8812 	msr	BASEPRI_MAX, r3
    9754:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9758:	4820      	ldr	r0, [pc, #128]	; (97dc <z_thread_timeout+0x98>)
    975a:	f7ff f96b 	bl	8a34 <z_spin_lock_valid>
    975e:	b968      	cbnz	r0, 977c <z_thread_timeout+0x38>
    9760:	4a1f      	ldr	r2, [pc, #124]	; (97e0 <z_thread_timeout+0x9c>)
    9762:	4920      	ldr	r1, [pc, #128]	; (97e4 <z_thread_timeout+0xa0>)
    9764:	4820      	ldr	r0, [pc, #128]	; (97e8 <z_thread_timeout+0xa4>)
    9766:	238e      	movs	r3, #142	; 0x8e
    9768:	f003 fb8d 	bl	ce86 <assert_print>
    976c:	491b      	ldr	r1, [pc, #108]	; (97dc <z_thread_timeout+0x98>)
    976e:	481f      	ldr	r0, [pc, #124]	; (97ec <z_thread_timeout+0xa8>)
    9770:	f003 fb89 	bl	ce86 <assert_print>
    9774:	481a      	ldr	r0, [pc, #104]	; (97e0 <z_thread_timeout+0x9c>)
    9776:	218e      	movs	r1, #142	; 0x8e
    9778:	f003 fb7e 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    977c:	4817      	ldr	r0, [pc, #92]	; (97dc <z_thread_timeout+0x98>)
    977e:	f7ff f977 	bl	8a70 <z_spin_lock_set_owner>
		if (!killed) {
    9782:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    9786:	f013 0f28 	tst.w	r3, #40	; 0x28
    978a:	d110      	bne.n	97ae <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    978c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    9790:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    9794:	b113      	cbz	r3, 979c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    9796:	4628      	mov	r0, r5
    9798:	f7ff fdc6 	bl	9328 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    979c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    97a0:	f023 0314 	bic.w	r3, r3, #20
    97a4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    97a8:	4628      	mov	r0, r5
    97aa:	f7ff fee3 	bl	9574 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    97ae:	480b      	ldr	r0, [pc, #44]	; (97dc <z_thread_timeout+0x98>)
    97b0:	f7ff f94e 	bl	8a50 <z_spin_unlock_valid>
    97b4:	b968      	cbnz	r0, 97d2 <z_thread_timeout+0x8e>
    97b6:	4a0a      	ldr	r2, [pc, #40]	; (97e0 <z_thread_timeout+0x9c>)
    97b8:	490d      	ldr	r1, [pc, #52]	; (97f0 <z_thread_timeout+0xac>)
    97ba:	480b      	ldr	r0, [pc, #44]	; (97e8 <z_thread_timeout+0xa4>)
    97bc:	23b9      	movs	r3, #185	; 0xb9
    97be:	f003 fb62 	bl	ce86 <assert_print>
    97c2:	4906      	ldr	r1, [pc, #24]	; (97dc <z_thread_timeout+0x98>)
    97c4:	480b      	ldr	r0, [pc, #44]	; (97f4 <z_thread_timeout+0xb0>)
    97c6:	f003 fb5e 	bl	ce86 <assert_print>
    97ca:	4805      	ldr	r0, [pc, #20]	; (97e0 <z_thread_timeout+0x9c>)
    97cc:	21b9      	movs	r1, #185	; 0xb9
    97ce:	f003 fb53 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    97d2:	f386 8811 	msr	BASEPRI, r6
    97d6:	f3bf 8f6f 	isb	sy
}
    97da:	bd70      	pop	{r4, r5, r6, pc}
    97dc:	200010f8 	.word	0x200010f8
    97e0:	0000ec50 	.word	0x0000ec50
    97e4:	0000eca9 	.word	0x0000eca9
    97e8:	0000eb06 	.word	0x0000eb06
    97ec:	0000ecbe 	.word	0x0000ecbe
    97f0:	0000ec7d 	.word	0x0000ec7d
    97f4:	0000ec94 	.word	0x0000ec94

000097f8 <unready_thread>:
{
    97f8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    97fa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    97fe:	7b43      	ldrb	r3, [r0, #13]
    9800:	2a00      	cmp	r2, #0
{
    9802:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    9804:	da06      	bge.n	9814 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    980a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    980c:	4601      	mov	r1, r0
    980e:	4806      	ldr	r0, [pc, #24]	; (9828 <unready_thread+0x30>)
    9810:	f7ff fd68 	bl	92e4 <z_priq_dumb_remove>
	update_cache(thread == _current);
    9814:	4b05      	ldr	r3, [pc, #20]	; (982c <unready_thread+0x34>)
    9816:	6898      	ldr	r0, [r3, #8]
    9818:	1b03      	subs	r3, r0, r4
    981a:	4258      	negs	r0, r3
}
    981c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    9820:	4158      	adcs	r0, r3
    9822:	f7ff bda3 	b.w	936c <update_cache>
    9826:	bf00      	nop
    9828:	200010e4 	.word	0x200010e4
    982c:	200010c4 	.word	0x200010c4

00009830 <add_to_waitq_locked>:
{
    9830:	b538      	push	{r3, r4, r5, lr}
    9832:	4604      	mov	r4, r0
    9834:	460d      	mov	r5, r1
	unready_thread(thread);
    9836:	f7ff ffdf 	bl	97f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    983a:	7b63      	ldrb	r3, [r4, #13]
    983c:	f043 0302 	orr.w	r3, r3, #2
    9840:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    9842:	b1fd      	cbz	r5, 9884 <add_to_waitq_locked+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9844:	4b16      	ldr	r3, [pc, #88]	; (98a0 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    9846:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9848:	429c      	cmp	r4, r3
    984a:	d109      	bne.n	9860 <add_to_waitq_locked+0x30>
    984c:	4915      	ldr	r1, [pc, #84]	; (98a4 <add_to_waitq_locked+0x74>)
    984e:	4816      	ldr	r0, [pc, #88]	; (98a8 <add_to_waitq_locked+0x78>)
    9850:	4a16      	ldr	r2, [pc, #88]	; (98ac <add_to_waitq_locked+0x7c>)
    9852:	23ba      	movs	r3, #186	; 0xba
    9854:	f003 fb17 	bl	ce86 <assert_print>
    9858:	4814      	ldr	r0, [pc, #80]	; (98ac <add_to_waitq_locked+0x7c>)
    985a:	21ba      	movs	r1, #186	; 0xba
    985c:	f003 fb0c 	bl	ce78 <assert_post_action>
	return list->head == list;
    9860:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9862:	429d      	cmp	r5, r3
    9864:	d015      	beq.n	9892 <add_to_waitq_locked+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9866:	b1a3      	cbz	r3, 9892 <add_to_waitq_locked+0x62>
	int32_t b1 = thread_1->base.prio;
    9868:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    986c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    9870:	4291      	cmp	r1, r2
    9872:	d008      	beq.n	9886 <add_to_waitq_locked+0x56>
		return b2 - b1;
    9874:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    9876:	2a00      	cmp	r2, #0
    9878:	dd05      	ble.n	9886 <add_to_waitq_locked+0x56>
	sys_dnode_t *const prev = successor->prev;
    987a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    987c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    9880:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9882:	605c      	str	r4, [r3, #4]
}
    9884:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    9886:	686a      	ldr	r2, [r5, #4]
    9888:	4293      	cmp	r3, r2
    988a:	d002      	beq.n	9892 <add_to_waitq_locked+0x62>
    988c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    988e:	2b00      	cmp	r3, #0
    9890:	d1ec      	bne.n	986c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    9892:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    9894:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    9898:	601c      	str	r4, [r3, #0]
	list->tail = node;
    989a:	606c      	str	r4, [r5, #4]
}
    989c:	e7f2      	b.n	9884 <add_to_waitq_locked+0x54>
    989e:	bf00      	nop
    98a0:	20000868 	.word	0x20000868
    98a4:	00010427 	.word	0x00010427
    98a8:	0000eb06 	.word	0x0000eb06
    98ac:	00010405 	.word	0x00010405

000098b0 <pend>:
{
    98b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98b4:	4604      	mov	r4, r0
    98b6:	4688      	mov	r8, r1
    98b8:	4616      	mov	r6, r2
    98ba:	461d      	mov	r5, r3
	__asm__ volatile(
    98bc:	f04f 0320 	mov.w	r3, #32
    98c0:	f3ef 8711 	mrs	r7, BASEPRI
    98c4:	f383 8812 	msr	BASEPRI_MAX, r3
    98c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    98cc:	481f      	ldr	r0, [pc, #124]	; (994c <pend+0x9c>)
    98ce:	f7ff f8b1 	bl	8a34 <z_spin_lock_valid>
    98d2:	b968      	cbnz	r0, 98f0 <pend+0x40>
    98d4:	4a1e      	ldr	r2, [pc, #120]	; (9950 <pend+0xa0>)
    98d6:	491f      	ldr	r1, [pc, #124]	; (9954 <pend+0xa4>)
    98d8:	481f      	ldr	r0, [pc, #124]	; (9958 <pend+0xa8>)
    98da:	238e      	movs	r3, #142	; 0x8e
    98dc:	f003 fad3 	bl	ce86 <assert_print>
    98e0:	491a      	ldr	r1, [pc, #104]	; (994c <pend+0x9c>)
    98e2:	481e      	ldr	r0, [pc, #120]	; (995c <pend+0xac>)
    98e4:	f003 facf 	bl	ce86 <assert_print>
    98e8:	4819      	ldr	r0, [pc, #100]	; (9950 <pend+0xa0>)
    98ea:	218e      	movs	r1, #142	; 0x8e
    98ec:	f003 fac4 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    98f0:	4816      	ldr	r0, [pc, #88]	; (994c <pend+0x9c>)
    98f2:	f7ff f8bd 	bl	8a70 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    98f6:	4620      	mov	r0, r4
    98f8:	4641      	mov	r1, r8
    98fa:	f7ff ff99 	bl	9830 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    98fe:	4813      	ldr	r0, [pc, #76]	; (994c <pend+0x9c>)
    9900:	f7ff f8a6 	bl	8a50 <z_spin_unlock_valid>
    9904:	b968      	cbnz	r0, 9922 <pend+0x72>
    9906:	4a12      	ldr	r2, [pc, #72]	; (9950 <pend+0xa0>)
    9908:	4915      	ldr	r1, [pc, #84]	; (9960 <pend+0xb0>)
    990a:	4813      	ldr	r0, [pc, #76]	; (9958 <pend+0xa8>)
    990c:	23b9      	movs	r3, #185	; 0xb9
    990e:	f003 faba 	bl	ce86 <assert_print>
    9912:	490e      	ldr	r1, [pc, #56]	; (994c <pend+0x9c>)
    9914:	4813      	ldr	r0, [pc, #76]	; (9964 <pend+0xb4>)
    9916:	f003 fab6 	bl	ce86 <assert_print>
    991a:	480d      	ldr	r0, [pc, #52]	; (9950 <pend+0xa0>)
    991c:	21b9      	movs	r1, #185	; 0xb9
    991e:	f003 faab 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    9922:	f387 8811 	msr	BASEPRI, r7
    9926:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    992a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    992e:	bf08      	it	eq
    9930:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    9934:	d008      	beq.n	9948 <pend+0x98>
    9936:	4632      	mov	r2, r6
    9938:	462b      	mov	r3, r5
    993a:	f104 0018 	add.w	r0, r4, #24
    993e:	490a      	ldr	r1, [pc, #40]	; (9968 <pend+0xb8>)
}
    9940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9944:	f000 bd08 	b.w	a358 <z_add_timeout>
    9948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    994c:	200010f8 	.word	0x200010f8
    9950:	0000ec50 	.word	0x0000ec50
    9954:	0000eca9 	.word	0x0000eca9
    9958:	0000eb06 	.word	0x0000eb06
    995c:	0000ecbe 	.word	0x0000ecbe
    9960:	0000ec7d 	.word	0x0000ec7d
    9964:	0000ec94 	.word	0x0000ec94
    9968:	00009745 	.word	0x00009745

0000996c <z_pend_curr>:
{
    996c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    996e:	4b11      	ldr	r3, [pc, #68]	; (99b4 <z_pend_curr+0x48>)
{
    9970:	4604      	mov	r4, r0
	pending_current = _current;
    9972:	6898      	ldr	r0, [r3, #8]
    9974:	4b10      	ldr	r3, [pc, #64]	; (99b8 <z_pend_curr+0x4c>)
{
    9976:	460d      	mov	r5, r1
	pending_current = _current;
    9978:	6018      	str	r0, [r3, #0]
{
    997a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    997c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9980:	f7ff ff96 	bl	98b0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9984:	4620      	mov	r0, r4
    9986:	f7ff f863 	bl	8a50 <z_spin_unlock_valid>
    998a:	b968      	cbnz	r0, 99a8 <z_pend_curr+0x3c>
    998c:	4a0b      	ldr	r2, [pc, #44]	; (99bc <z_pend_curr+0x50>)
    998e:	490c      	ldr	r1, [pc, #48]	; (99c0 <z_pend_curr+0x54>)
    9990:	480c      	ldr	r0, [pc, #48]	; (99c4 <z_pend_curr+0x58>)
    9992:	23d0      	movs	r3, #208	; 0xd0
    9994:	f003 fa77 	bl	ce86 <assert_print>
    9998:	480b      	ldr	r0, [pc, #44]	; (99c8 <z_pend_curr+0x5c>)
    999a:	4621      	mov	r1, r4
    999c:	f003 fa73 	bl	ce86 <assert_print>
    99a0:	4806      	ldr	r0, [pc, #24]	; (99bc <z_pend_curr+0x50>)
    99a2:	21d0      	movs	r1, #208	; 0xd0
    99a4:	f003 fa68 	bl	ce78 <assert_post_action>
    99a8:	4628      	mov	r0, r5
}
    99aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    99ae:	f7fb b843 	b.w	4a38 <arch_swap>
    99b2:	bf00      	nop
    99b4:	200010c4 	.word	0x200010c4
    99b8:	200010f4 	.word	0x200010f4
    99bc:	0000ec50 	.word	0x0000ec50
    99c0:	0000ec7d 	.word	0x0000ec7d
    99c4:	0000eb06 	.word	0x0000eb06
    99c8:	0000ec94 	.word	0x0000ec94

000099cc <z_set_prio>:
{
    99cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99ce:	4604      	mov	r4, r0
    99d0:	460d      	mov	r5, r1
	__asm__ volatile(
    99d2:	f04f 0320 	mov.w	r3, #32
    99d6:	f3ef 8611 	mrs	r6, BASEPRI
    99da:	f383 8812 	msr	BASEPRI_MAX, r3
    99de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    99e2:	483a      	ldr	r0, [pc, #232]	; (9acc <z_set_prio+0x100>)
    99e4:	f7ff f826 	bl	8a34 <z_spin_lock_valid>
    99e8:	b968      	cbnz	r0, 9a06 <z_set_prio+0x3a>
    99ea:	4a39      	ldr	r2, [pc, #228]	; (9ad0 <z_set_prio+0x104>)
    99ec:	4939      	ldr	r1, [pc, #228]	; (9ad4 <z_set_prio+0x108>)
    99ee:	483a      	ldr	r0, [pc, #232]	; (9ad8 <z_set_prio+0x10c>)
    99f0:	238e      	movs	r3, #142	; 0x8e
    99f2:	f003 fa48 	bl	ce86 <assert_print>
    99f6:	4935      	ldr	r1, [pc, #212]	; (9acc <z_set_prio+0x100>)
    99f8:	4838      	ldr	r0, [pc, #224]	; (9adc <z_set_prio+0x110>)
    99fa:	f003 fa44 	bl	ce86 <assert_print>
    99fe:	4834      	ldr	r0, [pc, #208]	; (9ad0 <z_set_prio+0x104>)
    9a00:	218e      	movs	r1, #142	; 0x8e
    9a02:	f003 fa39 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    9a06:	4831      	ldr	r0, [pc, #196]	; (9acc <z_set_prio+0x100>)
    9a08:	f7ff f832 	bl	8a70 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    9a0c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9a0e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    9a10:	b26d      	sxtb	r5, r5
    9a12:	d157      	bne.n	9ac4 <z_set_prio+0xf8>
		if (need_sched) {
    9a14:	69a2      	ldr	r2, [r4, #24]
    9a16:	2a00      	cmp	r2, #0
    9a18:	d154      	bne.n	9ac4 <z_set_prio+0xf8>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9a1e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9a20:	482f      	ldr	r0, [pc, #188]	; (9ae0 <z_set_prio+0x114>)
    9a22:	4621      	mov	r1, r4
    9a24:	f7ff fc5e 	bl	92e4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    9a28:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    9a2a:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    9a2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9a30:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9a32:	4b2c      	ldr	r3, [pc, #176]	; (9ae4 <z_set_prio+0x118>)
    9a34:	429c      	cmp	r4, r3
    9a36:	d109      	bne.n	9a4c <z_set_prio+0x80>
    9a38:	492b      	ldr	r1, [pc, #172]	; (9ae8 <z_set_prio+0x11c>)
    9a3a:	4827      	ldr	r0, [pc, #156]	; (9ad8 <z_set_prio+0x10c>)
    9a3c:	4a2b      	ldr	r2, [pc, #172]	; (9aec <z_set_prio+0x120>)
    9a3e:	23ba      	movs	r3, #186	; 0xba
    9a40:	f003 fa21 	bl	ce86 <assert_print>
    9a44:	4829      	ldr	r0, [pc, #164]	; (9aec <z_set_prio+0x120>)
    9a46:	21ba      	movs	r1, #186	; 0xba
    9a48:	f003 fa16 	bl	ce78 <assert_post_action>
	return list->head == list;
    9a4c:	4a28      	ldr	r2, [pc, #160]	; (9af0 <z_set_prio+0x124>)
	return (node == list->tail) ? NULL : node->next;
    9a4e:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a52:	f102 0520 	add.w	r5, r2, #32
    9a56:	42ab      	cmp	r3, r5
    9a58:	d02f      	beq.n	9aba <z_set_prio+0xee>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9a5a:	b373      	cbz	r3, 9aba <z_set_prio+0xee>
	int32_t b1 = thread_1->base.prio;
    9a5c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    9a60:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    9a64:	428f      	cmp	r7, r1
    9a66:	d023      	beq.n	9ab0 <z_set_prio+0xe4>
		return b2 - b1;
    9a68:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    9a6a:	2900      	cmp	r1, #0
    9a6c:	dd20      	ble.n	9ab0 <z_set_prio+0xe4>
	sys_dnode_t *const prev = successor->prev;
    9a6e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9a70:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    9a74:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9a76:	605c      	str	r4, [r3, #4]
			update_cache(1);
    9a78:	2001      	movs	r0, #1
    9a7a:	f7ff fc77 	bl	936c <update_cache>
    9a7e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9a80:	4812      	ldr	r0, [pc, #72]	; (9acc <z_set_prio+0x100>)
    9a82:	f7fe ffe5 	bl	8a50 <z_spin_unlock_valid>
    9a86:	b968      	cbnz	r0, 9aa4 <z_set_prio+0xd8>
    9a88:	4a11      	ldr	r2, [pc, #68]	; (9ad0 <z_set_prio+0x104>)
    9a8a:	491a      	ldr	r1, [pc, #104]	; (9af4 <z_set_prio+0x128>)
    9a8c:	4812      	ldr	r0, [pc, #72]	; (9ad8 <z_set_prio+0x10c>)
    9a8e:	23b9      	movs	r3, #185	; 0xb9
    9a90:	f003 f9f9 	bl	ce86 <assert_print>
    9a94:	490d      	ldr	r1, [pc, #52]	; (9acc <z_set_prio+0x100>)
    9a96:	4818      	ldr	r0, [pc, #96]	; (9af8 <z_set_prio+0x12c>)
    9a98:	f003 f9f5 	bl	ce86 <assert_print>
    9a9c:	480c      	ldr	r0, [pc, #48]	; (9ad0 <z_set_prio+0x104>)
    9a9e:	21b9      	movs	r1, #185	; 0xb9
    9aa0:	f003 f9ea 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    9aa4:	f386 8811 	msr	BASEPRI, r6
    9aa8:	f3bf 8f6f 	isb	sy
}
    9aac:	4620      	mov	r0, r4
    9aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    9ab0:	4283      	cmp	r3, r0
    9ab2:	d002      	beq.n	9aba <z_set_prio+0xee>
    9ab4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9ab6:	2b00      	cmp	r3, #0
    9ab8:	d1d2      	bne.n	9a60 <z_set_prio+0x94>
	node->prev = tail;
    9aba:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    9abe:	6004      	str	r4, [r0, #0]
	list->tail = node;
    9ac0:	6254      	str	r4, [r2, #36]	; 0x24
}
    9ac2:	e7d9      	b.n	9a78 <z_set_prio+0xac>
			thread->base.prio = prio;
    9ac4:	73a5      	strb	r5, [r4, #14]
    9ac6:	2400      	movs	r4, #0
    9ac8:	e7da      	b.n	9a80 <z_set_prio+0xb4>
    9aca:	bf00      	nop
    9acc:	200010f8 	.word	0x200010f8
    9ad0:	0000ec50 	.word	0x0000ec50
    9ad4:	0000eca9 	.word	0x0000eca9
    9ad8:	0000eb06 	.word	0x0000eb06
    9adc:	0000ecbe 	.word	0x0000ecbe
    9ae0:	200010e4 	.word	0x200010e4
    9ae4:	20000868 	.word	0x20000868
    9ae8:	00010427 	.word	0x00010427
    9aec:	00010405 	.word	0x00010405
    9af0:	200010c4 	.word	0x200010c4
    9af4:	0000ec7d 	.word	0x0000ec7d
    9af8:	0000ec94 	.word	0x0000ec94

00009afc <z_impl_k_thread_suspend>:
{
    9afc:	b570      	push	{r4, r5, r6, lr}
    9afe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    9b00:	3018      	adds	r0, #24
    9b02:	f000 fcf1 	bl	a4e8 <z_abort_timeout>
	__asm__ volatile(
    9b06:	f04f 0320 	mov.w	r3, #32
    9b0a:	f3ef 8611 	mrs	r6, BASEPRI
    9b0e:	f383 8812 	msr	BASEPRI_MAX, r3
    9b12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b16:	4825      	ldr	r0, [pc, #148]	; (9bac <z_impl_k_thread_suspend+0xb0>)
    9b18:	f7fe ff8c 	bl	8a34 <z_spin_lock_valid>
    9b1c:	b968      	cbnz	r0, 9b3a <z_impl_k_thread_suspend+0x3e>
    9b1e:	4a24      	ldr	r2, [pc, #144]	; (9bb0 <z_impl_k_thread_suspend+0xb4>)
    9b20:	4924      	ldr	r1, [pc, #144]	; (9bb4 <z_impl_k_thread_suspend+0xb8>)
    9b22:	4825      	ldr	r0, [pc, #148]	; (9bb8 <z_impl_k_thread_suspend+0xbc>)
    9b24:	238e      	movs	r3, #142	; 0x8e
    9b26:	f003 f9ae 	bl	ce86 <assert_print>
    9b2a:	4920      	ldr	r1, [pc, #128]	; (9bac <z_impl_k_thread_suspend+0xb0>)
    9b2c:	4823      	ldr	r0, [pc, #140]	; (9bbc <z_impl_k_thread_suspend+0xc0>)
    9b2e:	f003 f9aa 	bl	ce86 <assert_print>
    9b32:	481f      	ldr	r0, [pc, #124]	; (9bb0 <z_impl_k_thread_suspend+0xb4>)
    9b34:	218e      	movs	r1, #142	; 0x8e
    9b36:	f003 f99f 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    9b3a:	481c      	ldr	r0, [pc, #112]	; (9bac <z_impl_k_thread_suspend+0xb0>)
    9b3c:	f7fe ff98 	bl	8a70 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    9b40:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    9b44:	7b63      	ldrb	r3, [r4, #13]
    9b46:	2a00      	cmp	r2, #0
    9b48:	da06      	bge.n	9b58 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    9b4e:	481c      	ldr	r0, [pc, #112]	; (9bc0 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9b50:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9b52:	4621      	mov	r1, r4
    9b54:	f7ff fbc6 	bl	92e4 <z_priq_dumb_remove>
		update_cache(thread == _current);
    9b58:	4d1a      	ldr	r5, [pc, #104]	; (9bc4 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9b5a:	7b63      	ldrb	r3, [r4, #13]
    9b5c:	68a8      	ldr	r0, [r5, #8]
    9b5e:	f043 0310 	orr.w	r3, r3, #16
    9b62:	7363      	strb	r3, [r4, #13]
    9b64:	1b03      	subs	r3, r0, r4
    9b66:	4258      	negs	r0, r3
    9b68:	4158      	adcs	r0, r3
    9b6a:	f7ff fbff 	bl	936c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b6e:	480f      	ldr	r0, [pc, #60]	; (9bac <z_impl_k_thread_suspend+0xb0>)
    9b70:	f7fe ff6e 	bl	8a50 <z_spin_unlock_valid>
    9b74:	b968      	cbnz	r0, 9b92 <z_impl_k_thread_suspend+0x96>
    9b76:	4a0e      	ldr	r2, [pc, #56]	; (9bb0 <z_impl_k_thread_suspend+0xb4>)
    9b78:	4913      	ldr	r1, [pc, #76]	; (9bc8 <z_impl_k_thread_suspend+0xcc>)
    9b7a:	480f      	ldr	r0, [pc, #60]	; (9bb8 <z_impl_k_thread_suspend+0xbc>)
    9b7c:	23b9      	movs	r3, #185	; 0xb9
    9b7e:	f003 f982 	bl	ce86 <assert_print>
    9b82:	490a      	ldr	r1, [pc, #40]	; (9bac <z_impl_k_thread_suspend+0xb0>)
    9b84:	4811      	ldr	r0, [pc, #68]	; (9bcc <z_impl_k_thread_suspend+0xd0>)
    9b86:	f003 f97e 	bl	ce86 <assert_print>
    9b8a:	4809      	ldr	r0, [pc, #36]	; (9bb0 <z_impl_k_thread_suspend+0xb4>)
    9b8c:	21b9      	movs	r1, #185	; 0xb9
    9b8e:	f003 f973 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    9b92:	f386 8811 	msr	BASEPRI, r6
    9b96:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    9b9a:	68ab      	ldr	r3, [r5, #8]
    9b9c:	42a3      	cmp	r3, r4
    9b9e:	d103      	bne.n	9ba8 <z_impl_k_thread_suspend+0xac>
}
    9ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    9ba4:	f003 bf1a 	b.w	d9dc <z_reschedule_unlocked>
}
    9ba8:	bd70      	pop	{r4, r5, r6, pc}
    9baa:	bf00      	nop
    9bac:	200010f8 	.word	0x200010f8
    9bb0:	0000ec50 	.word	0x0000ec50
    9bb4:	0000eca9 	.word	0x0000eca9
    9bb8:	0000eb06 	.word	0x0000eb06
    9bbc:	0000ecbe 	.word	0x0000ecbe
    9bc0:	200010e4 	.word	0x200010e4
    9bc4:	200010c4 	.word	0x200010c4
    9bc8:	0000ec7d 	.word	0x0000ec7d
    9bcc:	0000ec94 	.word	0x0000ec94

00009bd0 <k_sched_unlock>:
{
    9bd0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9bd2:	f04f 0320 	mov.w	r3, #32
    9bd6:	f3ef 8511 	mrs	r5, BASEPRI
    9bda:	f383 8812 	msr	BASEPRI_MAX, r3
    9bde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9be2:	482d      	ldr	r0, [pc, #180]	; (9c98 <k_sched_unlock+0xc8>)
    9be4:	f7fe ff26 	bl	8a34 <z_spin_lock_valid>
    9be8:	b968      	cbnz	r0, 9c06 <k_sched_unlock+0x36>
    9bea:	4a2c      	ldr	r2, [pc, #176]	; (9c9c <k_sched_unlock+0xcc>)
    9bec:	492c      	ldr	r1, [pc, #176]	; (9ca0 <k_sched_unlock+0xd0>)
    9bee:	482d      	ldr	r0, [pc, #180]	; (9ca4 <k_sched_unlock+0xd4>)
    9bf0:	238e      	movs	r3, #142	; 0x8e
    9bf2:	f003 f948 	bl	ce86 <assert_print>
    9bf6:	4928      	ldr	r1, [pc, #160]	; (9c98 <k_sched_unlock+0xc8>)
    9bf8:	482b      	ldr	r0, [pc, #172]	; (9ca8 <k_sched_unlock+0xd8>)
    9bfa:	f003 f944 	bl	ce86 <assert_print>
    9bfe:	4827      	ldr	r0, [pc, #156]	; (9c9c <k_sched_unlock+0xcc>)
    9c00:	218e      	movs	r1, #142	; 0x8e
    9c02:	f003 f939 	bl	ce78 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    9c06:	4c29      	ldr	r4, [pc, #164]	; (9cac <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    9c08:	4823      	ldr	r0, [pc, #140]	; (9c98 <k_sched_unlock+0xc8>)
    9c0a:	f7fe ff31 	bl	8a70 <z_spin_lock_set_owner>
    9c0e:	68a3      	ldr	r3, [r4, #8]
    9c10:	7bdb      	ldrb	r3, [r3, #15]
    9c12:	b973      	cbnz	r3, 9c32 <k_sched_unlock+0x62>
    9c14:	4926      	ldr	r1, [pc, #152]	; (9cb0 <k_sched_unlock+0xe0>)
    9c16:	4a27      	ldr	r2, [pc, #156]	; (9cb4 <k_sched_unlock+0xe4>)
    9c18:	4822      	ldr	r0, [pc, #136]	; (9ca4 <k_sched_unlock+0xd4>)
    9c1a:	f240 33bb 	movw	r3, #955	; 0x3bb
    9c1e:	f003 f932 	bl	ce86 <assert_print>
    9c22:	4825      	ldr	r0, [pc, #148]	; (9cb8 <k_sched_unlock+0xe8>)
    9c24:	f003 f92f 	bl	ce86 <assert_print>
    9c28:	4822      	ldr	r0, [pc, #136]	; (9cb4 <k_sched_unlock+0xe4>)
    9c2a:	f240 31bb 	movw	r1, #955	; 0x3bb
    9c2e:	f003 f923 	bl	ce78 <assert_post_action>
    9c32:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    9c36:	b173      	cbz	r3, 9c56 <k_sched_unlock+0x86>
    9c38:	4920      	ldr	r1, [pc, #128]	; (9cbc <k_sched_unlock+0xec>)
    9c3a:	4a1e      	ldr	r2, [pc, #120]	; (9cb4 <k_sched_unlock+0xe4>)
    9c3c:	4819      	ldr	r0, [pc, #100]	; (9ca4 <k_sched_unlock+0xd4>)
    9c3e:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    9c42:	f003 f920 	bl	ce86 <assert_print>
    9c46:	481c      	ldr	r0, [pc, #112]	; (9cb8 <k_sched_unlock+0xe8>)
    9c48:	f003 f91d 	bl	ce86 <assert_print>
    9c4c:	4819      	ldr	r0, [pc, #100]	; (9cb4 <k_sched_unlock+0xe4>)
    9c4e:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    9c52:	f003 f911 	bl	ce78 <assert_post_action>
		++_current->base.sched_locked;
    9c56:	68a2      	ldr	r2, [r4, #8]
    9c58:	7bd3      	ldrb	r3, [r2, #15]
    9c5a:	3301      	adds	r3, #1
		update_cache(0);
    9c5c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    9c5e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    9c60:	f7ff fb84 	bl	936c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9c64:	480c      	ldr	r0, [pc, #48]	; (9c98 <k_sched_unlock+0xc8>)
    9c66:	f7fe fef3 	bl	8a50 <z_spin_unlock_valid>
    9c6a:	b968      	cbnz	r0, 9c88 <k_sched_unlock+0xb8>
    9c6c:	4a0b      	ldr	r2, [pc, #44]	; (9c9c <k_sched_unlock+0xcc>)
    9c6e:	4914      	ldr	r1, [pc, #80]	; (9cc0 <k_sched_unlock+0xf0>)
    9c70:	480c      	ldr	r0, [pc, #48]	; (9ca4 <k_sched_unlock+0xd4>)
    9c72:	23b9      	movs	r3, #185	; 0xb9
    9c74:	f003 f907 	bl	ce86 <assert_print>
    9c78:	4907      	ldr	r1, [pc, #28]	; (9c98 <k_sched_unlock+0xc8>)
    9c7a:	4812      	ldr	r0, [pc, #72]	; (9cc4 <k_sched_unlock+0xf4>)
    9c7c:	f003 f903 	bl	ce86 <assert_print>
    9c80:	4806      	ldr	r0, [pc, #24]	; (9c9c <k_sched_unlock+0xcc>)
    9c82:	21b9      	movs	r1, #185	; 0xb9
    9c84:	f003 f8f8 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    9c88:	f385 8811 	msr	BASEPRI, r5
    9c8c:	f3bf 8f6f 	isb	sy
}
    9c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    9c94:	f003 bea2 	b.w	d9dc <z_reschedule_unlocked>
    9c98:	200010f8 	.word	0x200010f8
    9c9c:	0000ec50 	.word	0x0000ec50
    9ca0:	0000eca9 	.word	0x0000eca9
    9ca4:	0000eb06 	.word	0x0000eb06
    9ca8:	0000ecbe 	.word	0x0000ecbe
    9cac:	200010c4 	.word	0x200010c4
    9cb0:	00010486 	.word	0x00010486
    9cb4:	00010405 	.word	0x00010405
    9cb8:	00010363 	.word	0x00010363
    9cbc:	0001022d 	.word	0x0001022d
    9cc0:	0000ec7d 	.word	0x0000ec7d
    9cc4:	0000ec94 	.word	0x0000ec94

00009cc8 <z_unpend1_no_timeout>:
{
    9cc8:	b538      	push	{r3, r4, r5, lr}
    9cca:	4604      	mov	r4, r0
	__asm__ volatile(
    9ccc:	f04f 0320 	mov.w	r3, #32
    9cd0:	f3ef 8511 	mrs	r5, BASEPRI
    9cd4:	f383 8812 	msr	BASEPRI_MAX, r3
    9cd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9cdc:	4819      	ldr	r0, [pc, #100]	; (9d44 <z_unpend1_no_timeout+0x7c>)
    9cde:	f7fe fea9 	bl	8a34 <z_spin_lock_valid>
    9ce2:	b968      	cbnz	r0, 9d00 <z_unpend1_no_timeout+0x38>
    9ce4:	4a18      	ldr	r2, [pc, #96]	; (9d48 <z_unpend1_no_timeout+0x80>)
    9ce6:	4919      	ldr	r1, [pc, #100]	; (9d4c <z_unpend1_no_timeout+0x84>)
    9ce8:	4819      	ldr	r0, [pc, #100]	; (9d50 <z_unpend1_no_timeout+0x88>)
    9cea:	238e      	movs	r3, #142	; 0x8e
    9cec:	f003 f8cb 	bl	ce86 <assert_print>
    9cf0:	4914      	ldr	r1, [pc, #80]	; (9d44 <z_unpend1_no_timeout+0x7c>)
    9cf2:	4818      	ldr	r0, [pc, #96]	; (9d54 <z_unpend1_no_timeout+0x8c>)
    9cf4:	f003 f8c7 	bl	ce86 <assert_print>
    9cf8:	4813      	ldr	r0, [pc, #76]	; (9d48 <z_unpend1_no_timeout+0x80>)
    9cfa:	218e      	movs	r1, #142	; 0x8e
    9cfc:	f003 f8bc 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    9d00:	4810      	ldr	r0, [pc, #64]	; (9d44 <z_unpend1_no_timeout+0x7c>)
    9d02:	f7fe feb5 	bl	8a70 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    9d06:	4620      	mov	r0, r4
    9d08:	f003 fe72 	bl	d9f0 <z_priq_dumb_best>
		if (thread != NULL) {
    9d0c:	4604      	mov	r4, r0
    9d0e:	b108      	cbz	r0, 9d14 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    9d10:	f7ff fb0a 	bl	9328 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d14:	480b      	ldr	r0, [pc, #44]	; (9d44 <z_unpend1_no_timeout+0x7c>)
    9d16:	f7fe fe9b 	bl	8a50 <z_spin_unlock_valid>
    9d1a:	b968      	cbnz	r0, 9d38 <z_unpend1_no_timeout+0x70>
    9d1c:	4a0a      	ldr	r2, [pc, #40]	; (9d48 <z_unpend1_no_timeout+0x80>)
    9d1e:	490e      	ldr	r1, [pc, #56]	; (9d58 <z_unpend1_no_timeout+0x90>)
    9d20:	480b      	ldr	r0, [pc, #44]	; (9d50 <z_unpend1_no_timeout+0x88>)
    9d22:	23b9      	movs	r3, #185	; 0xb9
    9d24:	f003 f8af 	bl	ce86 <assert_print>
    9d28:	4906      	ldr	r1, [pc, #24]	; (9d44 <z_unpend1_no_timeout+0x7c>)
    9d2a:	480c      	ldr	r0, [pc, #48]	; (9d5c <z_unpend1_no_timeout+0x94>)
    9d2c:	f003 f8ab 	bl	ce86 <assert_print>
    9d30:	4805      	ldr	r0, [pc, #20]	; (9d48 <z_unpend1_no_timeout+0x80>)
    9d32:	21b9      	movs	r1, #185	; 0xb9
    9d34:	f003 f8a0 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    9d38:	f385 8811 	msr	BASEPRI, r5
    9d3c:	f3bf 8f6f 	isb	sy
}
    9d40:	4620      	mov	r0, r4
    9d42:	bd38      	pop	{r3, r4, r5, pc}
    9d44:	200010f8 	.word	0x200010f8
    9d48:	0000ec50 	.word	0x0000ec50
    9d4c:	0000eca9 	.word	0x0000eca9
    9d50:	0000eb06 	.word	0x0000eb06
    9d54:	0000ecbe 	.word	0x0000ecbe
    9d58:	0000ec7d 	.word	0x0000ec7d
    9d5c:	0000ec94 	.word	0x0000ec94

00009d60 <z_unpend_first_thread>:
{
    9d60:	b538      	push	{r3, r4, r5, lr}
    9d62:	4604      	mov	r4, r0
	__asm__ volatile(
    9d64:	f04f 0320 	mov.w	r3, #32
    9d68:	f3ef 8511 	mrs	r5, BASEPRI
    9d6c:	f383 8812 	msr	BASEPRI_MAX, r3
    9d70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d74:	481b      	ldr	r0, [pc, #108]	; (9de4 <z_unpend_first_thread+0x84>)
    9d76:	f7fe fe5d 	bl	8a34 <z_spin_lock_valid>
    9d7a:	b968      	cbnz	r0, 9d98 <z_unpend_first_thread+0x38>
    9d7c:	4a1a      	ldr	r2, [pc, #104]	; (9de8 <z_unpend_first_thread+0x88>)
    9d7e:	491b      	ldr	r1, [pc, #108]	; (9dec <z_unpend_first_thread+0x8c>)
    9d80:	481b      	ldr	r0, [pc, #108]	; (9df0 <z_unpend_first_thread+0x90>)
    9d82:	238e      	movs	r3, #142	; 0x8e
    9d84:	f003 f87f 	bl	ce86 <assert_print>
    9d88:	4916      	ldr	r1, [pc, #88]	; (9de4 <z_unpend_first_thread+0x84>)
    9d8a:	481a      	ldr	r0, [pc, #104]	; (9df4 <z_unpend_first_thread+0x94>)
    9d8c:	f003 f87b 	bl	ce86 <assert_print>
    9d90:	4815      	ldr	r0, [pc, #84]	; (9de8 <z_unpend_first_thread+0x88>)
    9d92:	218e      	movs	r1, #142	; 0x8e
    9d94:	f003 f870 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    9d98:	4812      	ldr	r0, [pc, #72]	; (9de4 <z_unpend_first_thread+0x84>)
    9d9a:	f7fe fe69 	bl	8a70 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    9d9e:	4620      	mov	r0, r4
    9da0:	f003 fe26 	bl	d9f0 <z_priq_dumb_best>
		if (thread != NULL) {
    9da4:	4604      	mov	r4, r0
    9da6:	b128      	cbz	r0, 9db4 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    9da8:	f7ff fabe 	bl	9328 <unpend_thread_no_timeout>
    9dac:	f104 0018 	add.w	r0, r4, #24
    9db0:	f000 fb9a 	bl	a4e8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9db4:	480b      	ldr	r0, [pc, #44]	; (9de4 <z_unpend_first_thread+0x84>)
    9db6:	f7fe fe4b 	bl	8a50 <z_spin_unlock_valid>
    9dba:	b968      	cbnz	r0, 9dd8 <z_unpend_first_thread+0x78>
    9dbc:	4a0a      	ldr	r2, [pc, #40]	; (9de8 <z_unpend_first_thread+0x88>)
    9dbe:	490e      	ldr	r1, [pc, #56]	; (9df8 <z_unpend_first_thread+0x98>)
    9dc0:	480b      	ldr	r0, [pc, #44]	; (9df0 <z_unpend_first_thread+0x90>)
    9dc2:	23b9      	movs	r3, #185	; 0xb9
    9dc4:	f003 f85f 	bl	ce86 <assert_print>
    9dc8:	4906      	ldr	r1, [pc, #24]	; (9de4 <z_unpend_first_thread+0x84>)
    9dca:	480c      	ldr	r0, [pc, #48]	; (9dfc <z_unpend_first_thread+0x9c>)
    9dcc:	f003 f85b 	bl	ce86 <assert_print>
    9dd0:	4805      	ldr	r0, [pc, #20]	; (9de8 <z_unpend_first_thread+0x88>)
    9dd2:	21b9      	movs	r1, #185	; 0xb9
    9dd4:	f003 f850 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    9dd8:	f385 8811 	msr	BASEPRI, r5
    9ddc:	f3bf 8f6f 	isb	sy
}
    9de0:	4620      	mov	r0, r4
    9de2:	bd38      	pop	{r3, r4, r5, pc}
    9de4:	200010f8 	.word	0x200010f8
    9de8:	0000ec50 	.word	0x0000ec50
    9dec:	0000eca9 	.word	0x0000eca9
    9df0:	0000eb06 	.word	0x0000eb06
    9df4:	0000ecbe 	.word	0x0000ecbe
    9df8:	0000ec7d 	.word	0x0000ec7d
    9dfc:	0000ec94 	.word	0x0000ec94

00009e00 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    9e00:	4b04      	ldr	r3, [pc, #16]	; (9e14 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    9e02:	2100      	movs	r1, #0
    9e04:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    9e08:	e9c3 2208 	strd	r2, r2, [r3, #32]
    9e0c:	4608      	mov	r0, r1
    9e0e:	f7ff b903 	b.w	9018 <k_sched_time_slice_set>
    9e12:	bf00      	nop
    9e14:	200010c4 	.word	0x200010c4

00009e18 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    9e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e1a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9e1e:	b173      	cbz	r3, 9e3e <z_impl_k_yield+0x26>
    9e20:	493f      	ldr	r1, [pc, #252]	; (9f20 <z_impl_k_yield+0x108>)
    9e22:	4a40      	ldr	r2, [pc, #256]	; (9f24 <z_impl_k_yield+0x10c>)
    9e24:	4840      	ldr	r0, [pc, #256]	; (9f28 <z_impl_k_yield+0x110>)
    9e26:	f240 5332 	movw	r3, #1330	; 0x532
    9e2a:	f003 f82c 	bl	ce86 <assert_print>
    9e2e:	483f      	ldr	r0, [pc, #252]	; (9f2c <z_impl_k_yield+0x114>)
    9e30:	f003 f829 	bl	ce86 <assert_print>
    9e34:	483b      	ldr	r0, [pc, #236]	; (9f24 <z_impl_k_yield+0x10c>)
    9e36:	f240 5132 	movw	r1, #1330	; 0x532
    9e3a:	f003 f81d 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    9e3e:	f04f 0320 	mov.w	r3, #32
    9e42:	f3ef 8611 	mrs	r6, BASEPRI
    9e46:	f383 8812 	msr	BASEPRI_MAX, r3
    9e4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e4e:	4838      	ldr	r0, [pc, #224]	; (9f30 <z_impl_k_yield+0x118>)
    9e50:	f7fe fdf0 	bl	8a34 <z_spin_lock_valid>
    9e54:	b968      	cbnz	r0, 9e72 <z_impl_k_yield+0x5a>
    9e56:	4a37      	ldr	r2, [pc, #220]	; (9f34 <z_impl_k_yield+0x11c>)
    9e58:	4937      	ldr	r1, [pc, #220]	; (9f38 <z_impl_k_yield+0x120>)
    9e5a:	4833      	ldr	r0, [pc, #204]	; (9f28 <z_impl_k_yield+0x110>)
    9e5c:	238e      	movs	r3, #142	; 0x8e
    9e5e:	f003 f812 	bl	ce86 <assert_print>
    9e62:	4933      	ldr	r1, [pc, #204]	; (9f30 <z_impl_k_yield+0x118>)
    9e64:	4835      	ldr	r0, [pc, #212]	; (9f3c <z_impl_k_yield+0x124>)
    9e66:	f003 f80e 	bl	ce86 <assert_print>
    9e6a:	4832      	ldr	r0, [pc, #200]	; (9f34 <z_impl_k_yield+0x11c>)
    9e6c:	218e      	movs	r1, #142	; 0x8e
    9e6e:	f003 f803 	bl	ce78 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    9e72:	4d33      	ldr	r5, [pc, #204]	; (9f40 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    9e74:	482e      	ldr	r0, [pc, #184]	; (9f30 <z_impl_k_yield+0x118>)
    9e76:	f7fe fdfb 	bl	8a70 <z_spin_lock_set_owner>
    9e7a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9e7c:	7b4b      	ldrb	r3, [r1, #13]
    9e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9e82:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9e84:	f105 0020 	add.w	r0, r5, #32
    9e88:	f7ff fa2c 	bl	92e4 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    9e8c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    9e8e:	7b63      	ldrb	r3, [r4, #13]
    9e90:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9e94:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9e96:	4b2b      	ldr	r3, [pc, #172]	; (9f44 <z_impl_k_yield+0x12c>)
    9e98:	429c      	cmp	r4, r3
    9e9a:	d109      	bne.n	9eb0 <z_impl_k_yield+0x98>
    9e9c:	492a      	ldr	r1, [pc, #168]	; (9f48 <z_impl_k_yield+0x130>)
    9e9e:	4822      	ldr	r0, [pc, #136]	; (9f28 <z_impl_k_yield+0x110>)
    9ea0:	4a20      	ldr	r2, [pc, #128]	; (9f24 <z_impl_k_yield+0x10c>)
    9ea2:	23ba      	movs	r3, #186	; 0xba
    9ea4:	f002 ffef 	bl	ce86 <assert_print>
    9ea8:	481e      	ldr	r0, [pc, #120]	; (9f24 <z_impl_k_yield+0x10c>)
    9eaa:	21ba      	movs	r1, #186	; 0xba
    9eac:	f002 ffe4 	bl	ce78 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    9eb0:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9eb4:	4825      	ldr	r0, [pc, #148]	; (9f4c <z_impl_k_yield+0x134>)
    9eb6:	4283      	cmp	r3, r0
    9eb8:	d02d      	beq.n	9f16 <z_impl_k_yield+0xfe>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9eba:	b363      	cbz	r3, 9f16 <z_impl_k_yield+0xfe>
	int32_t b1 = thread_1->base.prio;
    9ebc:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    9ec0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    9ec4:	4297      	cmp	r7, r2
    9ec6:	d021      	beq.n	9f0c <z_impl_k_yield+0xf4>
		return b2 - b1;
    9ec8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    9eca:	2a00      	cmp	r2, #0
    9ecc:	dd1e      	ble.n	9f0c <z_impl_k_yield+0xf4>
	sys_dnode_t *const prev = successor->prev;
    9ece:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9ed0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    9ed4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9ed6:	605c      	str	r4, [r3, #4]
	update_cache(1);
    9ed8:	2001      	movs	r0, #1
    9eda:	f7ff fa47 	bl	936c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9ede:	4814      	ldr	r0, [pc, #80]	; (9f30 <z_impl_k_yield+0x118>)
    9ee0:	f7fe fdb6 	bl	8a50 <z_spin_unlock_valid>
    9ee4:	b968      	cbnz	r0, 9f02 <z_impl_k_yield+0xea>
    9ee6:	4a13      	ldr	r2, [pc, #76]	; (9f34 <z_impl_k_yield+0x11c>)
    9ee8:	4919      	ldr	r1, [pc, #100]	; (9f50 <z_impl_k_yield+0x138>)
    9eea:	480f      	ldr	r0, [pc, #60]	; (9f28 <z_impl_k_yield+0x110>)
    9eec:	23d0      	movs	r3, #208	; 0xd0
    9eee:	f002 ffca 	bl	ce86 <assert_print>
    9ef2:	490f      	ldr	r1, [pc, #60]	; (9f30 <z_impl_k_yield+0x118>)
    9ef4:	4817      	ldr	r0, [pc, #92]	; (9f54 <z_impl_k_yield+0x13c>)
    9ef6:	f002 ffc6 	bl	ce86 <assert_print>
    9efa:	480e      	ldr	r0, [pc, #56]	; (9f34 <z_impl_k_yield+0x11c>)
    9efc:	21d0      	movs	r1, #208	; 0xd0
    9efe:	f002 ffbb 	bl	ce78 <assert_post_action>
    9f02:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    9f04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9f08:	f7fa bd96 	b.w	4a38 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    9f0c:	428b      	cmp	r3, r1
    9f0e:	d002      	beq.n	9f16 <z_impl_k_yield+0xfe>
    9f10:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9f12:	2b00      	cmp	r3, #0
    9f14:	d1d4      	bne.n	9ec0 <z_impl_k_yield+0xa8>
	node->prev = tail;
    9f16:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    9f1a:	600c      	str	r4, [r1, #0]
	list->tail = node;
    9f1c:	626c      	str	r4, [r5, #36]	; 0x24
}
    9f1e:	e7db      	b.n	9ed8 <z_impl_k_yield+0xc0>
    9f20:	0001022d 	.word	0x0001022d
    9f24:	00010405 	.word	0x00010405
    9f28:	0000eb06 	.word	0x0000eb06
    9f2c:	00010363 	.word	0x00010363
    9f30:	200010f8 	.word	0x200010f8
    9f34:	0000ec50 	.word	0x0000ec50
    9f38:	0000eca9 	.word	0x0000eca9
    9f3c:	0000ecbe 	.word	0x0000ecbe
    9f40:	200010c4 	.word	0x200010c4
    9f44:	20000868 	.word	0x20000868
    9f48:	00010427 	.word	0x00010427
    9f4c:	200010e4 	.word	0x200010e4
    9f50:	0000ec7d 	.word	0x0000ec7d
    9f54:	0000ec94 	.word	0x0000ec94

00009f58 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    9f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f5c:	4605      	mov	r5, r0
    9f5e:	460e      	mov	r6, r1
    9f60:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    9f64:	b173      	cbz	r3, 9f84 <z_tick_sleep+0x2c>
    9f66:	4943      	ldr	r1, [pc, #268]	; (a074 <z_tick_sleep+0x11c>)
    9f68:	4a43      	ldr	r2, [pc, #268]	; (a078 <z_tick_sleep+0x120>)
    9f6a:	4844      	ldr	r0, [pc, #272]	; (a07c <z_tick_sleep+0x124>)
    9f6c:	f240 534e 	movw	r3, #1358	; 0x54e
    9f70:	f002 ff89 	bl	ce86 <assert_print>
    9f74:	4842      	ldr	r0, [pc, #264]	; (a080 <z_tick_sleep+0x128>)
    9f76:	f002 ff86 	bl	ce86 <assert_print>
    9f7a:	483f      	ldr	r0, [pc, #252]	; (a078 <z_tick_sleep+0x120>)
    9f7c:	f240 514e 	movw	r1, #1358	; 0x54e
    9f80:	f002 ff7a 	bl	ce78 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    9f84:	ea55 0306 	orrs.w	r3, r5, r6
    9f88:	d103      	bne.n	9f92 <z_tick_sleep+0x3a>
	z_impl_k_yield();
    9f8a:	f7ff ff45 	bl	9e18 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    9f8e:	2000      	movs	r0, #0
    9f90:	e06d      	b.n	a06e <z_tick_sleep+0x116>
	if (Z_TICK_ABS(ticks) <= 0) {
    9f92:	f06f 0401 	mvn.w	r4, #1
    9f96:	1b64      	subs	r4, r4, r5
    9f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f9c:	eb63 0306 	sbc.w	r3, r3, r6
    9fa0:	2c01      	cmp	r4, #1
    9fa2:	f173 0300 	sbcs.w	r3, r3, #0
    9fa6:	da02      	bge.n	9fae <z_tick_sleep+0x56>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    9fa8:	f003 fd28 	bl	d9fc <sys_clock_tick_get_32>
    9fac:	1944      	adds	r4, r0, r5
    9fae:	f04f 0320 	mov.w	r3, #32
    9fb2:	f3ef 8811 	mrs	r8, BASEPRI
    9fb6:	f383 8812 	msr	BASEPRI_MAX, r3
    9fba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9fbe:	4831      	ldr	r0, [pc, #196]	; (a084 <z_tick_sleep+0x12c>)
    9fc0:	f7fe fd38 	bl	8a34 <z_spin_lock_valid>
    9fc4:	b968      	cbnz	r0, 9fe2 <z_tick_sleep+0x8a>
    9fc6:	4a30      	ldr	r2, [pc, #192]	; (a088 <z_tick_sleep+0x130>)
    9fc8:	4930      	ldr	r1, [pc, #192]	; (a08c <z_tick_sleep+0x134>)
    9fca:	482c      	ldr	r0, [pc, #176]	; (a07c <z_tick_sleep+0x124>)
    9fcc:	238e      	movs	r3, #142	; 0x8e
    9fce:	f002 ff5a 	bl	ce86 <assert_print>
    9fd2:	492c      	ldr	r1, [pc, #176]	; (a084 <z_tick_sleep+0x12c>)
    9fd4:	482e      	ldr	r0, [pc, #184]	; (a090 <z_tick_sleep+0x138>)
    9fd6:	f002 ff56 	bl	ce86 <assert_print>
    9fda:	482b      	ldr	r0, [pc, #172]	; (a088 <z_tick_sleep+0x130>)
    9fdc:	218e      	movs	r1, #142	; 0x8e
    9fde:	f002 ff4b 	bl	ce78 <assert_post_action>
	pending_current = _current;
    9fe2:	4f2c      	ldr	r7, [pc, #176]	; (a094 <z_tick_sleep+0x13c>)
	z_spin_lock_set_owner(l);
    9fe4:	4827      	ldr	r0, [pc, #156]	; (a084 <z_tick_sleep+0x12c>)
    9fe6:	f7fe fd43 	bl	8a70 <z_spin_lock_set_owner>
    9fea:	4b2b      	ldr	r3, [pc, #172]	; (a098 <z_tick_sleep+0x140>)
    9fec:	68b8      	ldr	r0, [r7, #8]
    9fee:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    9ff0:	f7ff fc02 	bl	97f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    9ff4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9ff6:	4929      	ldr	r1, [pc, #164]	; (a09c <z_tick_sleep+0x144>)
    9ff8:	462a      	mov	r2, r5
    9ffa:	4633      	mov	r3, r6
    9ffc:	3018      	adds	r0, #24
    9ffe:	f000 f9ab 	bl	a358 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    a002:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a004:	481f      	ldr	r0, [pc, #124]	; (a084 <z_tick_sleep+0x12c>)
    a006:	7b53      	ldrb	r3, [r2, #13]
    a008:	f043 0310 	orr.w	r3, r3, #16
    a00c:	7353      	strb	r3, [r2, #13]
    a00e:	f7fe fd1f 	bl	8a50 <z_spin_unlock_valid>
    a012:	b968      	cbnz	r0, a030 <z_tick_sleep+0xd8>
    a014:	4a1c      	ldr	r2, [pc, #112]	; (a088 <z_tick_sleep+0x130>)
    a016:	4922      	ldr	r1, [pc, #136]	; (a0a0 <z_tick_sleep+0x148>)
    a018:	4818      	ldr	r0, [pc, #96]	; (a07c <z_tick_sleep+0x124>)
    a01a:	23d0      	movs	r3, #208	; 0xd0
    a01c:	f002 ff33 	bl	ce86 <assert_print>
    a020:	4918      	ldr	r1, [pc, #96]	; (a084 <z_tick_sleep+0x12c>)
    a022:	4820      	ldr	r0, [pc, #128]	; (a0a4 <z_tick_sleep+0x14c>)
    a024:	f002 ff2f 	bl	ce86 <assert_print>
    a028:	4817      	ldr	r0, [pc, #92]	; (a088 <z_tick_sleep+0x130>)
    a02a:	21d0      	movs	r1, #208	; 0xd0
    a02c:	f002 ff24 	bl	ce78 <assert_post_action>
    a030:	4640      	mov	r0, r8
    a032:	f7fa fd01 	bl	4a38 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    a036:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    a038:	7b5b      	ldrb	r3, [r3, #13]
    a03a:	06db      	lsls	r3, r3, #27
    a03c:	d50e      	bpl.n	a05c <z_tick_sleep+0x104>
    a03e:	491a      	ldr	r1, [pc, #104]	; (a0a8 <z_tick_sleep+0x150>)
    a040:	4a0d      	ldr	r2, [pc, #52]	; (a078 <z_tick_sleep+0x120>)
    a042:	480e      	ldr	r0, [pc, #56]	; (a07c <z_tick_sleep+0x124>)
    a044:	f240 536f 	movw	r3, #1391	; 0x56f
    a048:	f002 ff1d 	bl	ce86 <assert_print>
    a04c:	480c      	ldr	r0, [pc, #48]	; (a080 <z_tick_sleep+0x128>)
    a04e:	f002 ff1a 	bl	ce86 <assert_print>
    a052:	4809      	ldr	r0, [pc, #36]	; (a078 <z_tick_sleep+0x120>)
    a054:	f240 516f 	movw	r1, #1391	; 0x56f
    a058:	f002 ff0e 	bl	ce78 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    a05c:	f003 fcce 	bl	d9fc <sys_clock_tick_get_32>
    a060:	1a20      	subs	r0, r4, r0
    a062:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    a066:	2801      	cmp	r0, #1
    a068:	f173 0300 	sbcs.w	r3, r3, #0
    a06c:	db8f      	blt.n	9f8e <z_tick_sleep+0x36>
}
    a06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a072:	bf00      	nop
    a074:	0001022d 	.word	0x0001022d
    a078:	00010405 	.word	0x00010405
    a07c:	0000eb06 	.word	0x0000eb06
    a080:	00010363 	.word	0x00010363
    a084:	200010f8 	.word	0x200010f8
    a088:	0000ec50 	.word	0x0000ec50
    a08c:	0000eca9 	.word	0x0000eca9
    a090:	0000ecbe 	.word	0x0000ecbe
    a094:	200010c4 	.word	0x200010c4
    a098:	200010f4 	.word	0x200010f4
    a09c:	00009745 	.word	0x00009745
    a0a0:	0000ec7d 	.word	0x0000ec7d
    a0a4:	0000ec94 	.word	0x0000ec94
    a0a8:	000104b7 	.word	0x000104b7

0000a0ac <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    a0ac:	b538      	push	{r3, r4, r5, lr}
    a0ae:	4605      	mov	r5, r0
    a0b0:	460c      	mov	r4, r1
    a0b2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    a0b6:	b173      	cbz	r3, a0d6 <z_impl_k_sleep+0x2a>
    a0b8:	4913      	ldr	r1, [pc, #76]	; (a108 <z_impl_k_sleep+0x5c>)
    a0ba:	4a14      	ldr	r2, [pc, #80]	; (a10c <z_impl_k_sleep+0x60>)
    a0bc:	4814      	ldr	r0, [pc, #80]	; (a110 <z_impl_k_sleep+0x64>)
    a0be:	f240 537e 	movw	r3, #1406	; 0x57e
    a0c2:	f002 fee0 	bl	ce86 <assert_print>
    a0c6:	4813      	ldr	r0, [pc, #76]	; (a114 <z_impl_k_sleep+0x68>)
    a0c8:	f002 fedd 	bl	ce86 <assert_print>
    a0cc:	480f      	ldr	r0, [pc, #60]	; (a10c <z_impl_k_sleep+0x60>)
    a0ce:	f240 517e 	movw	r1, #1406	; 0x57e
    a0d2:	f002 fed1 	bl	ce78 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a0d6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    a0da:	bf08      	it	eq
    a0dc:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    a0e0:	d106      	bne.n	a0f0 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    a0e2:	4b0d      	ldr	r3, [pc, #52]	; (a118 <z_impl_k_sleep+0x6c>)
    a0e4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    a0e6:	f7ff fd09 	bl	9afc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    a0ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    a0ee:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    a0f0:	4628      	mov	r0, r5
    a0f2:	4621      	mov	r1, r4
    a0f4:	f7ff ff30 	bl	9f58 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    a0f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a0fc:	fb80 0303 	smull	r0, r3, r0, r3
    a100:	0bc0      	lsrs	r0, r0, #15
    a102:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    a106:	e7f2      	b.n	a0ee <z_impl_k_sleep+0x42>
    a108:	0001022d 	.word	0x0001022d
    a10c:	00010405 	.word	0x00010405
    a110:	0000eb06 	.word	0x0000eb06
    a114:	00010363 	.word	0x00010363
    a118:	200010c4 	.word	0x200010c4

0000a11c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    a11c:	4b01      	ldr	r3, [pc, #4]	; (a124 <z_impl_z_current_get+0x8>)
    a11e:	6898      	ldr	r0, [r3, #8]
    a120:	4770      	bx	lr
    a122:	bf00      	nop
    a124:	200010c4 	.word	0x200010c4

0000a128 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    a128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a12c:	4604      	mov	r4, r0
    a12e:	f04f 0320 	mov.w	r3, #32
    a132:	f3ef 8611 	mrs	r6, BASEPRI
    a136:	f383 8812 	msr	BASEPRI_MAX, r3
    a13a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a13e:	4848      	ldr	r0, [pc, #288]	; (a260 <z_thread_abort+0x138>)
    a140:	f7fe fc78 	bl	8a34 <z_spin_lock_valid>
    a144:	b968      	cbnz	r0, a162 <z_thread_abort+0x3a>
    a146:	4a47      	ldr	r2, [pc, #284]	; (a264 <z_thread_abort+0x13c>)
    a148:	4947      	ldr	r1, [pc, #284]	; (a268 <z_thread_abort+0x140>)
    a14a:	4848      	ldr	r0, [pc, #288]	; (a26c <z_thread_abort+0x144>)
    a14c:	238e      	movs	r3, #142	; 0x8e
    a14e:	f002 fe9a 	bl	ce86 <assert_print>
    a152:	4943      	ldr	r1, [pc, #268]	; (a260 <z_thread_abort+0x138>)
    a154:	4846      	ldr	r0, [pc, #280]	; (a270 <z_thread_abort+0x148>)
    a156:	f002 fe96 	bl	ce86 <assert_print>
    a15a:	4842      	ldr	r0, [pc, #264]	; (a264 <z_thread_abort+0x13c>)
    a15c:	218e      	movs	r1, #142	; 0x8e
    a15e:	f002 fe8b 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    a162:	483f      	ldr	r0, [pc, #252]	; (a260 <z_thread_abort+0x138>)
    a164:	f7fe fc84 	bl	8a70 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    a168:	7b63      	ldrb	r3, [r4, #13]
    a16a:	071a      	lsls	r2, r3, #28
    a16c:	d517      	bpl.n	a19e <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a16e:	483c      	ldr	r0, [pc, #240]	; (a260 <z_thread_abort+0x138>)
    a170:	f7fe fc6e 	bl	8a50 <z_spin_unlock_valid>
    a174:	b968      	cbnz	r0, a192 <z_thread_abort+0x6a>
    a176:	4a3b      	ldr	r2, [pc, #236]	; (a264 <z_thread_abort+0x13c>)
    a178:	493e      	ldr	r1, [pc, #248]	; (a274 <z_thread_abort+0x14c>)
    a17a:	483c      	ldr	r0, [pc, #240]	; (a26c <z_thread_abort+0x144>)
    a17c:	23b9      	movs	r3, #185	; 0xb9
    a17e:	f002 fe82 	bl	ce86 <assert_print>
    a182:	4937      	ldr	r1, [pc, #220]	; (a260 <z_thread_abort+0x138>)
    a184:	483c      	ldr	r0, [pc, #240]	; (a278 <z_thread_abort+0x150>)
    a186:	f002 fe7e 	bl	ce86 <assert_print>
    a18a:	4836      	ldr	r0, [pc, #216]	; (a264 <z_thread_abort+0x13c>)
    a18c:	21b9      	movs	r1, #185	; 0xb9
    a18e:	f002 fe73 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    a192:	f386 8811 	msr	BASEPRI, r6
    a196:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    a19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a19e:	f023 0220 	bic.w	r2, r3, #32
    a1a2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    a1a6:	09d2      	lsrs	r2, r2, #7
    a1a8:	d142      	bne.n	a230 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a1aa:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    a1ac:	68a3      	ldr	r3, [r4, #8]
    a1ae:	b113      	cbz	r3, a1b6 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    a1b0:	4620      	mov	r0, r4
    a1b2:	f7ff f8b9 	bl	9328 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    a1b6:	f104 0018 	add.w	r0, r4, #24
    a1ba:	f000 f995 	bl	a4e8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    a1be:	f104 0758 	add.w	r7, r4, #88	; 0x58
    a1c2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    a1c6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a1c8:	42bd      	cmp	r5, r7
    a1ca:	d001      	beq.n	a1d0 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a1cc:	2d00      	cmp	r5, #0
    a1ce:	d139      	bne.n	a244 <z_thread_abort+0x11c>
		update_cache(1);
    a1d0:	2001      	movs	r0, #1
    a1d2:	f7ff f8cb 	bl	936c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    a1d6:	4b29      	ldr	r3, [pc, #164]	; (a27c <z_thread_abort+0x154>)
    a1d8:	689b      	ldr	r3, [r3, #8]
    a1da:	42a3      	cmp	r3, r4
    a1dc:	d1c7      	bne.n	a16e <z_thread_abort+0x46>
    a1de:	f3ef 8305 	mrs	r3, IPSR
    a1e2:	2b00      	cmp	r3, #0
    a1e4:	d1c3      	bne.n	a16e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a1e6:	481e      	ldr	r0, [pc, #120]	; (a260 <z_thread_abort+0x138>)
    a1e8:	f7fe fc32 	bl	8a50 <z_spin_unlock_valid>
    a1ec:	b968      	cbnz	r0, a20a <z_thread_abort+0xe2>
    a1ee:	4a1d      	ldr	r2, [pc, #116]	; (a264 <z_thread_abort+0x13c>)
    a1f0:	4920      	ldr	r1, [pc, #128]	; (a274 <z_thread_abort+0x14c>)
    a1f2:	481e      	ldr	r0, [pc, #120]	; (a26c <z_thread_abort+0x144>)
    a1f4:	23d0      	movs	r3, #208	; 0xd0
    a1f6:	f002 fe46 	bl	ce86 <assert_print>
    a1fa:	4919      	ldr	r1, [pc, #100]	; (a260 <z_thread_abort+0x138>)
    a1fc:	481e      	ldr	r0, [pc, #120]	; (a278 <z_thread_abort+0x150>)
    a1fe:	f002 fe42 	bl	ce86 <assert_print>
    a202:	4818      	ldr	r0, [pc, #96]	; (a264 <z_thread_abort+0x13c>)
    a204:	21d0      	movs	r1, #208	; 0xd0
    a206:	f002 fe37 	bl	ce78 <assert_post_action>
    a20a:	4630      	mov	r0, r6
    a20c:	f7fa fc14 	bl	4a38 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    a210:	4a1b      	ldr	r2, [pc, #108]	; (a280 <z_thread_abort+0x158>)
    a212:	491c      	ldr	r1, [pc, #112]	; (a284 <z_thread_abort+0x15c>)
    a214:	4815      	ldr	r0, [pc, #84]	; (a26c <z_thread_abort+0x144>)
    a216:	f240 63ac 	movw	r3, #1708	; 0x6ac
    a21a:	f002 fe34 	bl	ce86 <assert_print>
    a21e:	481a      	ldr	r0, [pc, #104]	; (a288 <z_thread_abort+0x160>)
    a220:	f002 fe31 	bl	ce86 <assert_print>
    a224:	4816      	ldr	r0, [pc, #88]	; (a280 <z_thread_abort+0x158>)
    a226:	f240 61ac 	movw	r1, #1708	; 0x6ac
    a22a:	f002 fe25 	bl	ce78 <assert_post_action>
    a22e:	e79e      	b.n	a16e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a230:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    a234:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    a238:	4814      	ldr	r0, [pc, #80]	; (a28c <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a23a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a23c:	4621      	mov	r1, r4
    a23e:	f7ff f851 	bl	92e4 <z_priq_dumb_remove>
}
    a242:	e7b3      	b.n	a1ac <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    a244:	4628      	mov	r0, r5
    a246:	f7ff f86f 	bl	9328 <unpend_thread_no_timeout>
    a24a:	f105 0018 	add.w	r0, r5, #24
    a24e:	f000 f94b 	bl	a4e8 <z_abort_timeout>
    a252:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    a256:	4628      	mov	r0, r5
    a258:	f7ff f98c 	bl	9574 <ready_thread>
    a25c:	e7b3      	b.n	a1c6 <z_thread_abort+0x9e>
    a25e:	bf00      	nop
    a260:	200010f8 	.word	0x200010f8
    a264:	0000ec50 	.word	0x0000ec50
    a268:	0000eca9 	.word	0x0000eca9
    a26c:	0000eb06 	.word	0x0000eb06
    a270:	0000ecbe 	.word	0x0000ecbe
    a274:	0000ec7d 	.word	0x0000ec7d
    a278:	0000ec94 	.word	0x0000ec94
    a27c:	200010c4 	.word	0x200010c4
    a280:	00010405 	.word	0x00010405
    a284:	0000f7bd 	.word	0x0000f7bd
    a288:	000104f7 	.word	0x000104f7
    a28c:	200010e4 	.word	0x200010e4

0000a290 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    a290:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    a292:	4806      	ldr	r0, [pc, #24]	; (a2ac <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    a294:	4a06      	ldr	r2, [pc, #24]	; (a2b0 <z_data_copy+0x20>)
    a296:	4907      	ldr	r1, [pc, #28]	; (a2b4 <z_data_copy+0x24>)
    a298:	1a12      	subs	r2, r2, r0
    a29a:	f003 fb57 	bl	d94c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    a29e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    a2a2:	4a05      	ldr	r2, [pc, #20]	; (a2b8 <z_data_copy+0x28>)
    a2a4:	4905      	ldr	r1, [pc, #20]	; (a2bc <z_data_copy+0x2c>)
    a2a6:	4806      	ldr	r0, [pc, #24]	; (a2c0 <z_data_copy+0x30>)
    a2a8:	f003 bb50 	b.w	d94c <z_early_memcpy>
    a2ac:	20000000 	.word	0x20000000
    a2b0:	20000474 	.word	0x20000474
    a2b4:	00010ed0 	.word	0x00010ed0
    a2b8:	00000000 	.word	0x00000000
    a2bc:	00010ed0 	.word	0x00010ed0
    a2c0:	20000000 	.word	0x20000000

0000a2c4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    a2c4:	4b03      	ldr	r3, [pc, #12]	; (a2d4 <elapsed+0x10>)
    a2c6:	681b      	ldr	r3, [r3, #0]
    a2c8:	b90b      	cbnz	r3, a2ce <elapsed+0xa>
    a2ca:	f7fd b81d 	b.w	7308 <sys_clock_elapsed>
}
    a2ce:	2000      	movs	r0, #0
    a2d0:	4770      	bx	lr
    a2d2:	bf00      	nop
    a2d4:	20001104 	.word	0x20001104

0000a2d8 <next_timeout>:
	return list->head == list;
    a2d8:	4b10      	ldr	r3, [pc, #64]	; (a31c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    a2da:	b510      	push	{r4, lr}
    a2dc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a2de:	429c      	cmp	r4, r3
    a2e0:	bf08      	it	eq
    a2e2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    a2e4:	f7ff ffee 	bl	a2c4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    a2e8:	b1a4      	cbz	r4, a314 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    a2ea:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    a2ee:	1a1b      	subs	r3, r3, r0
    a2f0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    a2f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a2f8:	f170 0200 	sbcs.w	r2, r0, #0
    a2fc:	da0a      	bge.n	a314 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    a2fe:	2800      	cmp	r0, #0
    a300:	bfac      	ite	ge
    a302:	4618      	movge	r0, r3
    a304:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    a306:	4b06      	ldr	r3, [pc, #24]	; (a320 <next_timeout+0x48>)
    a308:	691b      	ldr	r3, [r3, #16]
    a30a:	b113      	cbz	r3, a312 <next_timeout+0x3a>
    a30c:	4298      	cmp	r0, r3
    a30e:	bfa8      	it	ge
    a310:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    a312:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    a314:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    a318:	e7f5      	b.n	a306 <next_timeout+0x2e>
    a31a:	bf00      	nop
    a31c:	20000180 	.word	0x20000180
    a320:	200010c4 	.word	0x200010c4

0000a324 <remove_timeout>:
{
    a324:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    a326:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a328:	b168      	cbz	r0, a346 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    a32a:	4a0a      	ldr	r2, [pc, #40]	; (a354 <remove_timeout+0x30>)
    a32c:	6852      	ldr	r2, [r2, #4]
    a32e:	4290      	cmp	r0, r2
    a330:	d009      	beq.n	a346 <remove_timeout+0x22>
	if (next(t) != NULL) {
    a332:	b143      	cbz	r3, a346 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    a334:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    a338:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    a33c:	1912      	adds	r2, r2, r4
    a33e:	eb41 0105 	adc.w	r1, r1, r5
    a342:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    a346:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    a348:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a34a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a34c:	2300      	movs	r3, #0
	node->prev = NULL;
    a34e:	e9c0 3300 	strd	r3, r3, [r0]
}
    a352:	bd30      	pop	{r4, r5, pc}
    a354:	20000180 	.word	0x20000180

0000a358 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a35c:	bf08      	it	eq
    a35e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    a362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a366:	4604      	mov	r4, r0
    a368:	460e      	mov	r6, r1
    a36a:	4698      	mov	r8, r3
    a36c:	4615      	mov	r5, r2
    a36e:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a370:	f000 809e 	beq.w	a4b0 <z_add_timeout+0x158>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    a374:	6803      	ldr	r3, [r0, #0]
    a376:	b163      	cbz	r3, a392 <z_add_timeout+0x3a>
    a378:	494e      	ldr	r1, [pc, #312]	; (a4b4 <z_add_timeout+0x15c>)
    a37a:	4a4f      	ldr	r2, [pc, #316]	; (a4b8 <z_add_timeout+0x160>)
    a37c:	484f      	ldr	r0, [pc, #316]	; (a4bc <z_add_timeout+0x164>)
    a37e:	2363      	movs	r3, #99	; 0x63
    a380:	f002 fd81 	bl	ce86 <assert_print>
    a384:	484e      	ldr	r0, [pc, #312]	; (a4c0 <z_add_timeout+0x168>)
    a386:	f002 fd7e 	bl	ce86 <assert_print>
    a38a:	484b      	ldr	r0, [pc, #300]	; (a4b8 <z_add_timeout+0x160>)
    a38c:	2163      	movs	r1, #99	; 0x63
    a38e:	f002 fd73 	bl	ce78 <assert_post_action>
	to->fn = fn;
    a392:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    a394:	f04f 0320 	mov.w	r3, #32
    a398:	f3ef 8611 	mrs	r6, BASEPRI
    a39c:	f383 8812 	msr	BASEPRI_MAX, r3
    a3a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a3a4:	4847      	ldr	r0, [pc, #284]	; (a4c4 <z_add_timeout+0x16c>)
    a3a6:	f7fe fb45 	bl	8a34 <z_spin_lock_valid>
    a3aa:	b968      	cbnz	r0, a3c8 <z_add_timeout+0x70>
    a3ac:	4a46      	ldr	r2, [pc, #280]	; (a4c8 <z_add_timeout+0x170>)
    a3ae:	4947      	ldr	r1, [pc, #284]	; (a4cc <z_add_timeout+0x174>)
    a3b0:	4842      	ldr	r0, [pc, #264]	; (a4bc <z_add_timeout+0x164>)
    a3b2:	238e      	movs	r3, #142	; 0x8e
    a3b4:	f002 fd67 	bl	ce86 <assert_print>
    a3b8:	4942      	ldr	r1, [pc, #264]	; (a4c4 <z_add_timeout+0x16c>)
    a3ba:	4845      	ldr	r0, [pc, #276]	; (a4d0 <z_add_timeout+0x178>)
    a3bc:	f002 fd63 	bl	ce86 <assert_print>
    a3c0:	4841      	ldr	r0, [pc, #260]	; (a4c8 <z_add_timeout+0x170>)
    a3c2:	218e      	movs	r1, #142	; 0x8e
    a3c4:	f002 fd58 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    a3c8:	483e      	ldr	r0, [pc, #248]	; (a4c4 <z_add_timeout+0x16c>)
    a3ca:	f7fe fb51 	bl	8a70 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    a3ce:	f06f 0201 	mvn.w	r2, #1
    a3d2:	1b53      	subs	r3, r2, r5
    a3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a3d8:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    a3dc:	2b00      	cmp	r3, #0
    a3de:	db1b      	blt.n	a418 <z_add_timeout+0xc0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    a3e0:	4b3c      	ldr	r3, [pc, #240]	; (a4d4 <z_add_timeout+0x17c>)
    a3e2:	e9d3 1300 	ldrd	r1, r3, [r3]
    a3e6:	1a52      	subs	r2, r2, r1
    a3e8:	eb60 0303 	sbc.w	r3, r0, r3
    a3ec:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    a3ee:	eb63 0707 	sbc.w	r7, r3, r7
    a3f2:	2d01      	cmp	r5, #1
    a3f4:	f177 0300 	sbcs.w	r3, r7, #0
    a3f8:	bfbc      	itt	lt
    a3fa:	2501      	movlt	r5, #1
    a3fc:	2700      	movlt	r7, #0
    a3fe:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
    a402:	4a35      	ldr	r2, [pc, #212]	; (a4d8 <z_add_timeout+0x180>)
	sys_dnode_t *const tail = list->tail;
    a404:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a408:	4293      	cmp	r3, r2
    a40a:	d118      	bne.n	a43e <z_add_timeout+0xe6>
	node->prev = tail;
    a40c:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    a410:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    a414:	6054      	str	r4, [r2, #4]
}
    a416:	e026      	b.n	a466 <z_add_timeout+0x10e>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    a418:	f7ff ff54 	bl	a2c4 <elapsed>
    a41c:	3501      	adds	r5, #1
    a41e:	f148 0800 	adc.w	r8, r8, #0
    a422:	182d      	adds	r5, r5, r0
    a424:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
    a428:	e9c4 5004 	strd	r5, r0, [r4, #16]
    a42c:	e7e9      	b.n	a402 <z_add_timeout+0xaa>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    a42e:	1a09      	subs	r1, r1, r0
    a430:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    a434:	459c      	cmp	ip, r3
    a436:	e9c4 1504 	strd	r1, r5, [r4, #16]
    a43a:	d0e7      	beq.n	a40c <z_add_timeout+0xb4>
    a43c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    a43e:	2b00      	cmp	r3, #0
    a440:	d0e4      	beq.n	a40c <z_add_timeout+0xb4>
			if (t->dticks > to->dticks) {
    a442:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    a446:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    a44a:	4281      	cmp	r1, r0
    a44c:	eb75 0e07 	sbcs.w	lr, r5, r7
    a450:	daed      	bge.n	a42e <z_add_timeout+0xd6>
				t->dticks -= to->dticks;
    a452:	1a41      	subs	r1, r0, r1
    a454:	eb67 0505 	sbc.w	r5, r7, r5
    a458:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    a45c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    a45e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    a462:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    a464:	605c      	str	r4, [r3, #4]
	return list->head == list;
    a466:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a468:	4293      	cmp	r3, r2
    a46a:	d00b      	beq.n	a484 <z_add_timeout+0x12c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    a46c:	429c      	cmp	r4, r3
    a46e:	d109      	bne.n	a484 <z_add_timeout+0x12c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    a470:	f7ff ff32 	bl	a2d8 <next_timeout>

			if (next_time == 0 ||
    a474:	b118      	cbz	r0, a47e <z_add_timeout+0x126>
			    _current_cpu->slice_ticks != next_time) {
    a476:	4b19      	ldr	r3, [pc, #100]	; (a4dc <z_add_timeout+0x184>)
			if (next_time == 0 ||
    a478:	691b      	ldr	r3, [r3, #16]
    a47a:	4283      	cmp	r3, r0
    a47c:	d002      	beq.n	a484 <z_add_timeout+0x12c>
				sys_clock_set_timeout(next_time, false);
    a47e:	2100      	movs	r1, #0
    a480:	f7fc ff10 	bl	72a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a484:	480f      	ldr	r0, [pc, #60]	; (a4c4 <z_add_timeout+0x16c>)
    a486:	f7fe fae3 	bl	8a50 <z_spin_unlock_valid>
    a48a:	b968      	cbnz	r0, a4a8 <z_add_timeout+0x150>
    a48c:	4a0e      	ldr	r2, [pc, #56]	; (a4c8 <z_add_timeout+0x170>)
    a48e:	4914      	ldr	r1, [pc, #80]	; (a4e0 <z_add_timeout+0x188>)
    a490:	480a      	ldr	r0, [pc, #40]	; (a4bc <z_add_timeout+0x164>)
    a492:	23b9      	movs	r3, #185	; 0xb9
    a494:	f002 fcf7 	bl	ce86 <assert_print>
    a498:	490a      	ldr	r1, [pc, #40]	; (a4c4 <z_add_timeout+0x16c>)
    a49a:	4812      	ldr	r0, [pc, #72]	; (a4e4 <z_add_timeout+0x18c>)
    a49c:	f002 fcf3 	bl	ce86 <assert_print>
    a4a0:	4809      	ldr	r0, [pc, #36]	; (a4c8 <z_add_timeout+0x170>)
    a4a2:	21b9      	movs	r1, #185	; 0xb9
    a4a4:	f002 fce8 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    a4a8:	f386 8811 	msr	BASEPRI, r6
    a4ac:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    a4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4b4:	0001053d 	.word	0x0001053d
    a4b8:	00010519 	.word	0x00010519
    a4bc:	0000eb06 	.word	0x0000eb06
    a4c0:	00010363 	.word	0x00010363
    a4c4:	20001108 	.word	0x20001108
    a4c8:	0000ec50 	.word	0x0000ec50
    a4cc:	0000eca9 	.word	0x0000eca9
    a4d0:	0000ecbe 	.word	0x0000ecbe
    a4d4:	20000968 	.word	0x20000968
    a4d8:	20000180 	.word	0x20000180
    a4dc:	200010c4 	.word	0x200010c4
    a4e0:	0000ec7d 	.word	0x0000ec7d
    a4e4:	0000ec94 	.word	0x0000ec94

0000a4e8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    a4e8:	b538      	push	{r3, r4, r5, lr}
    a4ea:	4604      	mov	r4, r0
	__asm__ volatile(
    a4ec:	f04f 0320 	mov.w	r3, #32
    a4f0:	f3ef 8511 	mrs	r5, BASEPRI
    a4f4:	f383 8812 	msr	BASEPRI_MAX, r3
    a4f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a4fc:	481a      	ldr	r0, [pc, #104]	; (a568 <z_abort_timeout+0x80>)
    a4fe:	f7fe fa99 	bl	8a34 <z_spin_lock_valid>
    a502:	b968      	cbnz	r0, a520 <z_abort_timeout+0x38>
    a504:	4a19      	ldr	r2, [pc, #100]	; (a56c <z_abort_timeout+0x84>)
    a506:	491a      	ldr	r1, [pc, #104]	; (a570 <z_abort_timeout+0x88>)
    a508:	481a      	ldr	r0, [pc, #104]	; (a574 <z_abort_timeout+0x8c>)
    a50a:	238e      	movs	r3, #142	; 0x8e
    a50c:	f002 fcbb 	bl	ce86 <assert_print>
    a510:	4915      	ldr	r1, [pc, #84]	; (a568 <z_abort_timeout+0x80>)
    a512:	4819      	ldr	r0, [pc, #100]	; (a578 <z_abort_timeout+0x90>)
    a514:	f002 fcb7 	bl	ce86 <assert_print>
    a518:	4814      	ldr	r0, [pc, #80]	; (a56c <z_abort_timeout+0x84>)
    a51a:	218e      	movs	r1, #142	; 0x8e
    a51c:	f002 fcac 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    a520:	4811      	ldr	r0, [pc, #68]	; (a568 <z_abort_timeout+0x80>)
    a522:	f7fe faa5 	bl	8a70 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    a526:	6823      	ldr	r3, [r4, #0]
    a528:	b1db      	cbz	r3, a562 <z_abort_timeout+0x7a>
			remove_timeout(to);
    a52a:	4620      	mov	r0, r4
    a52c:	f7ff fefa 	bl	a324 <remove_timeout>
			ret = 0;
    a530:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a532:	480d      	ldr	r0, [pc, #52]	; (a568 <z_abort_timeout+0x80>)
    a534:	f7fe fa8c 	bl	8a50 <z_spin_unlock_valid>
    a538:	b968      	cbnz	r0, a556 <z_abort_timeout+0x6e>
    a53a:	4a0c      	ldr	r2, [pc, #48]	; (a56c <z_abort_timeout+0x84>)
    a53c:	490f      	ldr	r1, [pc, #60]	; (a57c <z_abort_timeout+0x94>)
    a53e:	480d      	ldr	r0, [pc, #52]	; (a574 <z_abort_timeout+0x8c>)
    a540:	23b9      	movs	r3, #185	; 0xb9
    a542:	f002 fca0 	bl	ce86 <assert_print>
    a546:	4908      	ldr	r1, [pc, #32]	; (a568 <z_abort_timeout+0x80>)
    a548:	480d      	ldr	r0, [pc, #52]	; (a580 <z_abort_timeout+0x98>)
    a54a:	f002 fc9c 	bl	ce86 <assert_print>
    a54e:	4807      	ldr	r0, [pc, #28]	; (a56c <z_abort_timeout+0x84>)
    a550:	21b9      	movs	r1, #185	; 0xb9
    a552:	f002 fc91 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    a556:	f385 8811 	msr	BASEPRI, r5
    a55a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    a55e:	4620      	mov	r0, r4
    a560:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    a562:	f06f 0415 	mvn.w	r4, #21
    a566:	e7e4      	b.n	a532 <z_abort_timeout+0x4a>
    a568:	20001108 	.word	0x20001108
    a56c:	0000ec50 	.word	0x0000ec50
    a570:	0000eca9 	.word	0x0000eca9
    a574:	0000eb06 	.word	0x0000eb06
    a578:	0000ecbe 	.word	0x0000ecbe
    a57c:	0000ec7d 	.word	0x0000ec7d
    a580:	0000ec94 	.word	0x0000ec94

0000a584 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    a584:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a586:	f04f 0320 	mov.w	r3, #32
    a58a:	f3ef 8511 	mrs	r5, BASEPRI
    a58e:	f383 8812 	msr	BASEPRI_MAX, r3
    a592:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a596:	4818      	ldr	r0, [pc, #96]	; (a5f8 <z_get_next_timeout_expiry+0x74>)
    a598:	f7fe fa4c 	bl	8a34 <z_spin_lock_valid>
    a59c:	b968      	cbnz	r0, a5ba <z_get_next_timeout_expiry+0x36>
    a59e:	4a17      	ldr	r2, [pc, #92]	; (a5fc <z_get_next_timeout_expiry+0x78>)
    a5a0:	4917      	ldr	r1, [pc, #92]	; (a600 <z_get_next_timeout_expiry+0x7c>)
    a5a2:	4818      	ldr	r0, [pc, #96]	; (a604 <z_get_next_timeout_expiry+0x80>)
    a5a4:	238e      	movs	r3, #142	; 0x8e
    a5a6:	f002 fc6e 	bl	ce86 <assert_print>
    a5aa:	4913      	ldr	r1, [pc, #76]	; (a5f8 <z_get_next_timeout_expiry+0x74>)
    a5ac:	4816      	ldr	r0, [pc, #88]	; (a608 <z_get_next_timeout_expiry+0x84>)
    a5ae:	f002 fc6a 	bl	ce86 <assert_print>
    a5b2:	4812      	ldr	r0, [pc, #72]	; (a5fc <z_get_next_timeout_expiry+0x78>)
    a5b4:	218e      	movs	r1, #142	; 0x8e
    a5b6:	f002 fc5f 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    a5ba:	480f      	ldr	r0, [pc, #60]	; (a5f8 <z_get_next_timeout_expiry+0x74>)
    a5bc:	f7fe fa58 	bl	8a70 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    a5c0:	f7ff fe8a 	bl	a2d8 <next_timeout>
    a5c4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a5c6:	480c      	ldr	r0, [pc, #48]	; (a5f8 <z_get_next_timeout_expiry+0x74>)
    a5c8:	f7fe fa42 	bl	8a50 <z_spin_unlock_valid>
    a5cc:	b968      	cbnz	r0, a5ea <z_get_next_timeout_expiry+0x66>
    a5ce:	4a0b      	ldr	r2, [pc, #44]	; (a5fc <z_get_next_timeout_expiry+0x78>)
    a5d0:	490e      	ldr	r1, [pc, #56]	; (a60c <z_get_next_timeout_expiry+0x88>)
    a5d2:	480c      	ldr	r0, [pc, #48]	; (a604 <z_get_next_timeout_expiry+0x80>)
    a5d4:	23b9      	movs	r3, #185	; 0xb9
    a5d6:	f002 fc56 	bl	ce86 <assert_print>
    a5da:	4907      	ldr	r1, [pc, #28]	; (a5f8 <z_get_next_timeout_expiry+0x74>)
    a5dc:	480c      	ldr	r0, [pc, #48]	; (a610 <z_get_next_timeout_expiry+0x8c>)
    a5de:	f002 fc52 	bl	ce86 <assert_print>
    a5e2:	4806      	ldr	r0, [pc, #24]	; (a5fc <z_get_next_timeout_expiry+0x78>)
    a5e4:	21b9      	movs	r1, #185	; 0xb9
    a5e6:	f002 fc47 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    a5ea:	f385 8811 	msr	BASEPRI, r5
    a5ee:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    a5f2:	4620      	mov	r0, r4
    a5f4:	bd38      	pop	{r3, r4, r5, pc}
    a5f6:	bf00      	nop
    a5f8:	20001108 	.word	0x20001108
    a5fc:	0000ec50 	.word	0x0000ec50
    a600:	0000eca9 	.word	0x0000eca9
    a604:	0000eb06 	.word	0x0000eb06
    a608:	0000ecbe 	.word	0x0000ecbe
    a60c:	0000ec7d 	.word	0x0000ec7d
    a610:	0000ec94 	.word	0x0000ec94

0000a614 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    a614:	b570      	push	{r4, r5, r6, lr}
    a616:	4604      	mov	r4, r0
    a618:	460d      	mov	r5, r1
	__asm__ volatile(
    a61a:	f04f 0320 	mov.w	r3, #32
    a61e:	f3ef 8611 	mrs	r6, BASEPRI
    a622:	f383 8812 	msr	BASEPRI_MAX, r3
    a626:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a62a:	481b      	ldr	r0, [pc, #108]	; (a698 <z_set_timeout_expiry+0x84>)
    a62c:	f7fe fa02 	bl	8a34 <z_spin_lock_valid>
    a630:	b968      	cbnz	r0, a64e <z_set_timeout_expiry+0x3a>
    a632:	4a1a      	ldr	r2, [pc, #104]	; (a69c <z_set_timeout_expiry+0x88>)
    a634:	491a      	ldr	r1, [pc, #104]	; (a6a0 <z_set_timeout_expiry+0x8c>)
    a636:	481b      	ldr	r0, [pc, #108]	; (a6a4 <z_set_timeout_expiry+0x90>)
    a638:	238e      	movs	r3, #142	; 0x8e
    a63a:	f002 fc24 	bl	ce86 <assert_print>
    a63e:	4916      	ldr	r1, [pc, #88]	; (a698 <z_set_timeout_expiry+0x84>)
    a640:	4819      	ldr	r0, [pc, #100]	; (a6a8 <z_set_timeout_expiry+0x94>)
    a642:	f002 fc20 	bl	ce86 <assert_print>
    a646:	4815      	ldr	r0, [pc, #84]	; (a69c <z_set_timeout_expiry+0x88>)
    a648:	218e      	movs	r1, #142	; 0x8e
    a64a:	f002 fc15 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    a64e:	4812      	ldr	r0, [pc, #72]	; (a698 <z_set_timeout_expiry+0x84>)
    a650:	f7fe fa0e 	bl	8a70 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    a654:	f7ff fe40 	bl	a2d8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    a658:	2801      	cmp	r0, #1
    a65a:	dd05      	ble.n	a668 <z_set_timeout_expiry+0x54>
    a65c:	42a0      	cmp	r0, r4
    a65e:	db03      	blt.n	a668 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    a660:	4629      	mov	r1, r5
    a662:	4620      	mov	r0, r4
    a664:	f7fc fe1e 	bl	72a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a668:	480b      	ldr	r0, [pc, #44]	; (a698 <z_set_timeout_expiry+0x84>)
    a66a:	f7fe f9f1 	bl	8a50 <z_spin_unlock_valid>
    a66e:	b968      	cbnz	r0, a68c <z_set_timeout_expiry+0x78>
    a670:	4a0a      	ldr	r2, [pc, #40]	; (a69c <z_set_timeout_expiry+0x88>)
    a672:	490e      	ldr	r1, [pc, #56]	; (a6ac <z_set_timeout_expiry+0x98>)
    a674:	480b      	ldr	r0, [pc, #44]	; (a6a4 <z_set_timeout_expiry+0x90>)
    a676:	23b9      	movs	r3, #185	; 0xb9
    a678:	f002 fc05 	bl	ce86 <assert_print>
    a67c:	4906      	ldr	r1, [pc, #24]	; (a698 <z_set_timeout_expiry+0x84>)
    a67e:	480c      	ldr	r0, [pc, #48]	; (a6b0 <z_set_timeout_expiry+0x9c>)
    a680:	f002 fc01 	bl	ce86 <assert_print>
    a684:	4805      	ldr	r0, [pc, #20]	; (a69c <z_set_timeout_expiry+0x88>)
    a686:	21b9      	movs	r1, #185	; 0xb9
    a688:	f002 fbf6 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    a68c:	f386 8811 	msr	BASEPRI, r6
    a690:	f3bf 8f6f 	isb	sy
		}
	}
}
    a694:	bd70      	pop	{r4, r5, r6, pc}
    a696:	bf00      	nop
    a698:	20001108 	.word	0x20001108
    a69c:	0000ec50 	.word	0x0000ec50
    a6a0:	0000eca9 	.word	0x0000eca9
    a6a4:	0000eb06 	.word	0x0000eb06
    a6a8:	0000ecbe 	.word	0x0000ecbe
    a6ac:	0000ec7d 	.word	0x0000ec7d
    a6b0:	0000ec94 	.word	0x0000ec94

0000a6b4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    a6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a6b8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    a6ba:	f7fe fee3 	bl	9484 <z_time_slice>
	__asm__ volatile(
    a6be:	f04f 0320 	mov.w	r3, #32
    a6c2:	f3ef 8511 	mrs	r5, BASEPRI
    a6c6:	f383 8812 	msr	BASEPRI_MAX, r3
    a6ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a6ce:	484c      	ldr	r0, [pc, #304]	; (a800 <sys_clock_announce+0x14c>)
    a6d0:	f7fe f9b0 	bl	8a34 <z_spin_lock_valid>
    a6d4:	b968      	cbnz	r0, a6f2 <sys_clock_announce+0x3e>
    a6d6:	4a4b      	ldr	r2, [pc, #300]	; (a804 <sys_clock_announce+0x150>)
    a6d8:	494b      	ldr	r1, [pc, #300]	; (a808 <sys_clock_announce+0x154>)
    a6da:	484c      	ldr	r0, [pc, #304]	; (a80c <sys_clock_announce+0x158>)
    a6dc:	238e      	movs	r3, #142	; 0x8e
    a6de:	f002 fbd2 	bl	ce86 <assert_print>
    a6e2:	4947      	ldr	r1, [pc, #284]	; (a800 <sys_clock_announce+0x14c>)
    a6e4:	484a      	ldr	r0, [pc, #296]	; (a810 <sys_clock_announce+0x15c>)
    a6e6:	f002 fbce 	bl	ce86 <assert_print>
    a6ea:	4846      	ldr	r0, [pc, #280]	; (a804 <sys_clock_announce+0x150>)
    a6ec:	218e      	movs	r1, #142	; 0x8e
    a6ee:	f002 fbc3 	bl	ce78 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    a6f2:	4f48      	ldr	r7, [pc, #288]	; (a814 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    a6f4:	4842      	ldr	r0, [pc, #264]	; (a800 <sys_clock_announce+0x14c>)
	return list->head == list;
    a6f6:	f8df 8120 	ldr.w	r8, [pc, #288]	; a818 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    a6fa:	4e48      	ldr	r6, [pc, #288]	; (a81c <sys_clock_announce+0x168>)
    a6fc:	f7fe f9b8 	bl	8a70 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    a700:	603c      	str	r4, [r7, #0]
    a702:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    a706:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a708:	4544      	cmp	r4, r8
		curr_tick += dt;
    a70a:	e9d6 1e00 	ldrd	r1, lr, [r6]
    a70e:	ea4f 70e2 	mov.w	r0, r2, asr #31
    a712:	d00b      	beq.n	a72c <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    a714:	b154      	cbz	r4, a72c <sys_clock_announce+0x78>
    a716:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    a71a:	429a      	cmp	r2, r3
    a71c:	eb70 090c 	sbcs.w	r9, r0, ip
    a720:	da28      	bge.n	a774 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    a722:	1a9b      	subs	r3, r3, r2
    a724:	eb6c 0c00 	sbc.w	ip, ip, r0
    a728:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    a72c:	1852      	adds	r2, r2, r1
    a72e:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    a732:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    a734:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
    a738:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    a73a:	f7ff fdcd 	bl	a2d8 <next_timeout>
    a73e:	4621      	mov	r1, r4
    a740:	f7fc fdb0 	bl	72a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a744:	482e      	ldr	r0, [pc, #184]	; (a800 <sys_clock_announce+0x14c>)
    a746:	f7fe f983 	bl	8a50 <z_spin_unlock_valid>
    a74a:	b968      	cbnz	r0, a768 <sys_clock_announce+0xb4>
    a74c:	4a2d      	ldr	r2, [pc, #180]	; (a804 <sys_clock_announce+0x150>)
    a74e:	4934      	ldr	r1, [pc, #208]	; (a820 <sys_clock_announce+0x16c>)
    a750:	482e      	ldr	r0, [pc, #184]	; (a80c <sys_clock_announce+0x158>)
    a752:	23b9      	movs	r3, #185	; 0xb9
    a754:	f002 fb97 	bl	ce86 <assert_print>
    a758:	4929      	ldr	r1, [pc, #164]	; (a800 <sys_clock_announce+0x14c>)
    a75a:	4832      	ldr	r0, [pc, #200]	; (a824 <sys_clock_announce+0x170>)
    a75c:	f002 fb93 	bl	ce86 <assert_print>
    a760:	4828      	ldr	r0, [pc, #160]	; (a804 <sys_clock_announce+0x150>)
    a762:	21b9      	movs	r1, #185	; 0xb9
    a764:	f002 fb88 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    a768:	f385 8811 	msr	BASEPRI, r5
    a76c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    a770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    a774:	1859      	adds	r1, r3, r1
    a776:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    a77a:	1ad3      	subs	r3, r2, r3
    a77c:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    a77e:	2200      	movs	r2, #0
    a780:	2300      	movs	r3, #0
		curr_tick += dt;
    a782:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    a786:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    a78a:	4620      	mov	r0, r4
    a78c:	f7ff fdca 	bl	a324 <remove_timeout>
    a790:	481b      	ldr	r0, [pc, #108]	; (a800 <sys_clock_announce+0x14c>)
    a792:	f7fe f95d 	bl	8a50 <z_spin_unlock_valid>
    a796:	b968      	cbnz	r0, a7b4 <sys_clock_announce+0x100>
    a798:	4a1a      	ldr	r2, [pc, #104]	; (a804 <sys_clock_announce+0x150>)
    a79a:	4921      	ldr	r1, [pc, #132]	; (a820 <sys_clock_announce+0x16c>)
    a79c:	481b      	ldr	r0, [pc, #108]	; (a80c <sys_clock_announce+0x158>)
    a79e:	23b9      	movs	r3, #185	; 0xb9
    a7a0:	f002 fb71 	bl	ce86 <assert_print>
    a7a4:	4916      	ldr	r1, [pc, #88]	; (a800 <sys_clock_announce+0x14c>)
    a7a6:	481f      	ldr	r0, [pc, #124]	; (a824 <sys_clock_announce+0x170>)
    a7a8:	f002 fb6d 	bl	ce86 <assert_print>
    a7ac:	4815      	ldr	r0, [pc, #84]	; (a804 <sys_clock_announce+0x150>)
    a7ae:	21b9      	movs	r1, #185	; 0xb9
    a7b0:	f002 fb62 	bl	ce78 <assert_post_action>
    a7b4:	f385 8811 	msr	BASEPRI, r5
    a7b8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    a7bc:	68a3      	ldr	r3, [r4, #8]
    a7be:	4620      	mov	r0, r4
    a7c0:	4798      	blx	r3
	__asm__ volatile(
    a7c2:	f04f 0320 	mov.w	r3, #32
    a7c6:	f3ef 8511 	mrs	r5, BASEPRI
    a7ca:	f383 8812 	msr	BASEPRI_MAX, r3
    a7ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a7d2:	480b      	ldr	r0, [pc, #44]	; (a800 <sys_clock_announce+0x14c>)
    a7d4:	f7fe f92e 	bl	8a34 <z_spin_lock_valid>
    a7d8:	b968      	cbnz	r0, a7f6 <sys_clock_announce+0x142>
    a7da:	4a0a      	ldr	r2, [pc, #40]	; (a804 <sys_clock_announce+0x150>)
    a7dc:	490a      	ldr	r1, [pc, #40]	; (a808 <sys_clock_announce+0x154>)
    a7de:	480b      	ldr	r0, [pc, #44]	; (a80c <sys_clock_announce+0x158>)
    a7e0:	238e      	movs	r3, #142	; 0x8e
    a7e2:	f002 fb50 	bl	ce86 <assert_print>
    a7e6:	4906      	ldr	r1, [pc, #24]	; (a800 <sys_clock_announce+0x14c>)
    a7e8:	4809      	ldr	r0, [pc, #36]	; (a810 <sys_clock_announce+0x15c>)
    a7ea:	f002 fb4c 	bl	ce86 <assert_print>
    a7ee:	4805      	ldr	r0, [pc, #20]	; (a804 <sys_clock_announce+0x150>)
    a7f0:	218e      	movs	r1, #142	; 0x8e
    a7f2:	f002 fb41 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    a7f6:	4802      	ldr	r0, [pc, #8]	; (a800 <sys_clock_announce+0x14c>)
    a7f8:	f7fe f93a 	bl	8a70 <z_spin_lock_set_owner>
	return k;
    a7fc:	e781      	b.n	a702 <sys_clock_announce+0x4e>
    a7fe:	bf00      	nop
    a800:	20001108 	.word	0x20001108
    a804:	0000ec50 	.word	0x0000ec50
    a808:	0000eca9 	.word	0x0000eca9
    a80c:	0000eb06 	.word	0x0000eb06
    a810:	0000ecbe 	.word	0x0000ecbe
    a814:	20001104 	.word	0x20001104
    a818:	20000180 	.word	0x20000180
    a81c:	20000968 	.word	0x20000968
    a820:	0000ec7d 	.word	0x0000ec7d
    a824:	0000ec94 	.word	0x0000ec94

0000a828 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    a828:	b570      	push	{r4, r5, r6, lr}
    a82a:	f04f 0320 	mov.w	r3, #32
    a82e:	f3ef 8611 	mrs	r6, BASEPRI
    a832:	f383 8812 	msr	BASEPRI_MAX, r3
    a836:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a83a:	481b      	ldr	r0, [pc, #108]	; (a8a8 <sys_clock_tick_get+0x80>)
    a83c:	f7fe f8fa 	bl	8a34 <z_spin_lock_valid>
    a840:	b968      	cbnz	r0, a85e <sys_clock_tick_get+0x36>
    a842:	4a1a      	ldr	r2, [pc, #104]	; (a8ac <sys_clock_tick_get+0x84>)
    a844:	491a      	ldr	r1, [pc, #104]	; (a8b0 <sys_clock_tick_get+0x88>)
    a846:	481b      	ldr	r0, [pc, #108]	; (a8b4 <sys_clock_tick_get+0x8c>)
    a848:	238e      	movs	r3, #142	; 0x8e
    a84a:	f002 fb1c 	bl	ce86 <assert_print>
    a84e:	4916      	ldr	r1, [pc, #88]	; (a8a8 <sys_clock_tick_get+0x80>)
    a850:	4819      	ldr	r0, [pc, #100]	; (a8b8 <sys_clock_tick_get+0x90>)
    a852:	f002 fb18 	bl	ce86 <assert_print>
    a856:	4815      	ldr	r0, [pc, #84]	; (a8ac <sys_clock_tick_get+0x84>)
    a858:	218e      	movs	r1, #142	; 0x8e
    a85a:	f002 fb0d 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    a85e:	4812      	ldr	r0, [pc, #72]	; (a8a8 <sys_clock_tick_get+0x80>)
    a860:	f7fe f906 	bl	8a70 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    a864:	f7fc fd50 	bl	7308 <sys_clock_elapsed>
    a868:	4b14      	ldr	r3, [pc, #80]	; (a8bc <sys_clock_tick_get+0x94>)
    a86a:	e9d3 4500 	ldrd	r4, r5, [r3]
    a86e:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a870:	480d      	ldr	r0, [pc, #52]	; (a8a8 <sys_clock_tick_get+0x80>)
    a872:	f145 0500 	adc.w	r5, r5, #0
    a876:	f7fe f8eb 	bl	8a50 <z_spin_unlock_valid>
    a87a:	b968      	cbnz	r0, a898 <sys_clock_tick_get+0x70>
    a87c:	4a0b      	ldr	r2, [pc, #44]	; (a8ac <sys_clock_tick_get+0x84>)
    a87e:	4910      	ldr	r1, [pc, #64]	; (a8c0 <sys_clock_tick_get+0x98>)
    a880:	480c      	ldr	r0, [pc, #48]	; (a8b4 <sys_clock_tick_get+0x8c>)
    a882:	23b9      	movs	r3, #185	; 0xb9
    a884:	f002 faff 	bl	ce86 <assert_print>
    a888:	4907      	ldr	r1, [pc, #28]	; (a8a8 <sys_clock_tick_get+0x80>)
    a88a:	480e      	ldr	r0, [pc, #56]	; (a8c4 <sys_clock_tick_get+0x9c>)
    a88c:	f002 fafb 	bl	ce86 <assert_print>
    a890:	4806      	ldr	r0, [pc, #24]	; (a8ac <sys_clock_tick_get+0x84>)
    a892:	21b9      	movs	r1, #185	; 0xb9
    a894:	f002 faf0 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    a898:	f386 8811 	msr	BASEPRI, r6
    a89c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    a8a0:	4620      	mov	r0, r4
    a8a2:	4629      	mov	r1, r5
    a8a4:	bd70      	pop	{r4, r5, r6, pc}
    a8a6:	bf00      	nop
    a8a8:	20001108 	.word	0x20001108
    a8ac:	0000ec50 	.word	0x0000ec50
    a8b0:	0000eca9 	.word	0x0000eca9
    a8b4:	0000eb06 	.word	0x0000eb06
    a8b8:	0000ecbe 	.word	0x0000ecbe
    a8bc:	20000968 	.word	0x20000968
    a8c0:	0000ec7d 	.word	0x0000ec7d
    a8c4:	0000ec94 	.word	0x0000ec94

0000a8c8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    a8c8:	b570      	push	{r4, r5, r6, lr}
    a8ca:	4604      	mov	r4, r0
	__asm__ volatile(
    a8cc:	f04f 0320 	mov.w	r3, #32
    a8d0:	f3ef 8511 	mrs	r5, BASEPRI
    a8d4:	f383 8812 	msr	BASEPRI_MAX, r3
    a8d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a8dc:	484d      	ldr	r0, [pc, #308]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a8de:	f7fe f8a9 	bl	8a34 <z_spin_lock_valid>
    a8e2:	b968      	cbnz	r0, a900 <z_timer_expiration_handler+0x38>
    a8e4:	4a4c      	ldr	r2, [pc, #304]	; (aa18 <z_timer_expiration_handler+0x150>)
    a8e6:	494d      	ldr	r1, [pc, #308]	; (aa1c <z_timer_expiration_handler+0x154>)
    a8e8:	484d      	ldr	r0, [pc, #308]	; (aa20 <z_timer_expiration_handler+0x158>)
    a8ea:	238e      	movs	r3, #142	; 0x8e
    a8ec:	f002 facb 	bl	ce86 <assert_print>
    a8f0:	4948      	ldr	r1, [pc, #288]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a8f2:	484c      	ldr	r0, [pc, #304]	; (aa24 <z_timer_expiration_handler+0x15c>)
    a8f4:	f002 fac7 	bl	ce86 <assert_print>
    a8f8:	4847      	ldr	r0, [pc, #284]	; (aa18 <z_timer_expiration_handler+0x150>)
    a8fa:	218e      	movs	r1, #142	; 0x8e
    a8fc:	f002 fabc 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    a900:	4844      	ldr	r0, [pc, #272]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a902:	f7fe f8b5 	bl	8a70 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    a906:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    a90a:	3301      	adds	r3, #1
    a90c:	f142 0200 	adc.w	r2, r2, #0
    a910:	2b02      	cmp	r3, #2
    a912:	f172 0300 	sbcs.w	r3, r2, #0
    a916:	d305      	bcc.n	a924 <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a918:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    a91c:	4942      	ldr	r1, [pc, #264]	; (aa28 <z_timer_expiration_handler+0x160>)
    a91e:	4620      	mov	r0, r4
    a920:	f7ff fd1a 	bl	a358 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    a924:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a926:	3301      	adds	r3, #1
    a928:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    a92a:	6a23      	ldr	r3, [r4, #32]
    a92c:	2b00      	cmp	r3, #0
    a92e:	d035      	beq.n	a99c <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a930:	4838      	ldr	r0, [pc, #224]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a932:	f7fe f88d 	bl	8a50 <z_spin_unlock_valid>
    a936:	b968      	cbnz	r0, a954 <z_timer_expiration_handler+0x8c>
    a938:	4a37      	ldr	r2, [pc, #220]	; (aa18 <z_timer_expiration_handler+0x150>)
    a93a:	493c      	ldr	r1, [pc, #240]	; (aa2c <z_timer_expiration_handler+0x164>)
    a93c:	4838      	ldr	r0, [pc, #224]	; (aa20 <z_timer_expiration_handler+0x158>)
    a93e:	23b9      	movs	r3, #185	; 0xb9
    a940:	f002 faa1 	bl	ce86 <assert_print>
    a944:	4933      	ldr	r1, [pc, #204]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a946:	483a      	ldr	r0, [pc, #232]	; (aa30 <z_timer_expiration_handler+0x168>)
    a948:	f002 fa9d 	bl	ce86 <assert_print>
    a94c:	4832      	ldr	r0, [pc, #200]	; (aa18 <z_timer_expiration_handler+0x150>)
    a94e:	21b9      	movs	r1, #185	; 0xb9
    a950:	f002 fa92 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    a954:	f385 8811 	msr	BASEPRI, r5
    a958:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    a95c:	6a23      	ldr	r3, [r4, #32]
    a95e:	4620      	mov	r0, r4
    a960:	4798      	blx	r3
	__asm__ volatile(
    a962:	f04f 0320 	mov.w	r3, #32
    a966:	f3ef 8511 	mrs	r5, BASEPRI
    a96a:	f383 8812 	msr	BASEPRI_MAX, r3
    a96e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a972:	4828      	ldr	r0, [pc, #160]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a974:	f7fe f85e 	bl	8a34 <z_spin_lock_valid>
    a978:	b968      	cbnz	r0, a996 <z_timer_expiration_handler+0xce>
    a97a:	4a27      	ldr	r2, [pc, #156]	; (aa18 <z_timer_expiration_handler+0x150>)
    a97c:	4927      	ldr	r1, [pc, #156]	; (aa1c <z_timer_expiration_handler+0x154>)
    a97e:	4828      	ldr	r0, [pc, #160]	; (aa20 <z_timer_expiration_handler+0x158>)
    a980:	238e      	movs	r3, #142	; 0x8e
    a982:	f002 fa80 	bl	ce86 <assert_print>
    a986:	4923      	ldr	r1, [pc, #140]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a988:	4826      	ldr	r0, [pc, #152]	; (aa24 <z_timer_expiration_handler+0x15c>)
    a98a:	f002 fa7c 	bl	ce86 <assert_print>
    a98e:	4822      	ldr	r0, [pc, #136]	; (aa18 <z_timer_expiration_handler+0x150>)
    a990:	218e      	movs	r1, #142	; 0x8e
    a992:	f002 fa71 	bl	ce78 <assert_post_action>
	z_spin_lock_set_owner(l);
    a996:	481f      	ldr	r0, [pc, #124]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a998:	f7fe f86a 	bl	8a70 <z_spin_lock_set_owner>
	return list->head == list;
    a99c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a9a0:	42a6      	cmp	r6, r4
    a9a2:	d000      	beq.n	a9a6 <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    a9a4:	b9b6      	cbnz	r6, a9d4 <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a9a6:	481b      	ldr	r0, [pc, #108]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a9a8:	f7fe f852 	bl	8a50 <z_spin_unlock_valid>
    a9ac:	b968      	cbnz	r0, a9ca <z_timer_expiration_handler+0x102>
    a9ae:	4a1a      	ldr	r2, [pc, #104]	; (aa18 <z_timer_expiration_handler+0x150>)
    a9b0:	491e      	ldr	r1, [pc, #120]	; (aa2c <z_timer_expiration_handler+0x164>)
    a9b2:	481b      	ldr	r0, [pc, #108]	; (aa20 <z_timer_expiration_handler+0x158>)
    a9b4:	23b9      	movs	r3, #185	; 0xb9
    a9b6:	f002 fa66 	bl	ce86 <assert_print>
    a9ba:	4916      	ldr	r1, [pc, #88]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a9bc:	481c      	ldr	r0, [pc, #112]	; (aa30 <z_timer_expiration_handler+0x168>)
    a9be:	f002 fa62 	bl	ce86 <assert_print>
    a9c2:	4815      	ldr	r0, [pc, #84]	; (aa18 <z_timer_expiration_handler+0x150>)
    a9c4:	21b9      	movs	r1, #185	; 0xb9
    a9c6:	f002 fa57 	bl	ce78 <assert_post_action>
	__asm__ volatile(
    a9ca:	f385 8811 	msr	BASEPRI, r5
    a9ce:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    a9d2:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    a9d4:	4630      	mov	r0, r6
    a9d6:	f7fe fb85 	bl	90e4 <z_unpend_thread_no_timeout>
    a9da:	2300      	movs	r3, #0
    a9dc:	480d      	ldr	r0, [pc, #52]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a9de:	67b3      	str	r3, [r6, #120]	; 0x78
    a9e0:	f7fe f836 	bl	8a50 <z_spin_unlock_valid>
    a9e4:	b968      	cbnz	r0, aa02 <z_timer_expiration_handler+0x13a>
    a9e6:	4a0c      	ldr	r2, [pc, #48]	; (aa18 <z_timer_expiration_handler+0x150>)
    a9e8:	4910      	ldr	r1, [pc, #64]	; (aa2c <z_timer_expiration_handler+0x164>)
    a9ea:	480d      	ldr	r0, [pc, #52]	; (aa20 <z_timer_expiration_handler+0x158>)
    a9ec:	23b9      	movs	r3, #185	; 0xb9
    a9ee:	f002 fa4a 	bl	ce86 <assert_print>
    a9f2:	4908      	ldr	r1, [pc, #32]	; (aa14 <z_timer_expiration_handler+0x14c>)
    a9f4:	480e      	ldr	r0, [pc, #56]	; (aa30 <z_timer_expiration_handler+0x168>)
    a9f6:	f002 fa46 	bl	ce86 <assert_print>
    a9fa:	4807      	ldr	r0, [pc, #28]	; (aa18 <z_timer_expiration_handler+0x150>)
    a9fc:	21b9      	movs	r1, #185	; 0xb9
    a9fe:	f002 fa3b 	bl	ce78 <assert_post_action>
    aa02:	f385 8811 	msr	BASEPRI, r5
    aa06:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    aa0a:	4630      	mov	r0, r6
}
    aa0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    aa10:	f7fe bdfc 	b.w	960c <z_ready_thread>
    aa14:	2000110c 	.word	0x2000110c
    aa18:	0000ec50 	.word	0x0000ec50
    aa1c:	0000eca9 	.word	0x0000eca9
    aa20:	0000eb06 	.word	0x0000eb06
    aa24:	0000ecbe 	.word	0x0000ecbe
    aa28:	0000a8c9 	.word	0x0000a8c9
    aa2c:	0000ec7d 	.word	0x0000ec7d
    aa30:	0000ec94 	.word	0x0000ec94

0000aa34 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    aa34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa38:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    aa3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    aa3e:	bf08      	it	eq
    aa40:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    aa44:	4606      	mov	r6, r0
    aa46:	461c      	mov	r4, r3
    aa48:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    aa4c:	4689      	mov	r9, r1
    aa4e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    aa50:	d03e      	beq.n	aad0 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    aa52:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    aa56:	bf08      	it	eq
    aa58:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    aa5c:	4615      	mov	r5, r2
    aa5e:	4607      	mov	r7, r0
    aa60:	d014      	beq.n	aa8c <z_impl_k_timer_start+0x58>
    aa62:	ea50 0302 	orrs.w	r3, r0, r2
    aa66:	d011      	beq.n	aa8c <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    aa68:	f06f 0301 	mvn.w	r3, #1
    aa6c:	1a9b      	subs	r3, r3, r2
    aa6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aa72:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    aa76:	2b00      	cmp	r3, #0
    aa78:	da08      	bge.n	aa8c <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    aa7a:	2a02      	cmp	r2, #2
    aa7c:	f170 0300 	sbcs.w	r3, r0, #0
    aa80:	bfbc      	itt	lt
    aa82:	2502      	movlt	r5, #2
    aa84:	2700      	movlt	r7, #0
    aa86:	3d01      	subs	r5, #1
    aa88:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    aa8c:	f06f 0301 	mvn.w	r3, #1
    aa90:	1a5b      	subs	r3, r3, r1
    aa92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aa96:	eb63 0304 	sbc.w	r3, r3, r4
    aa9a:	2b00      	cmp	r3, #0
    aa9c:	da09      	bge.n	aab2 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    aa9e:	2901      	cmp	r1, #1
    aaa0:	f174 0300 	sbcs.w	r3, r4, #0
    aaa4:	bfbc      	itt	lt
    aaa6:	2101      	movlt	r1, #1
    aaa8:	2400      	movlt	r4, #0
    aaaa:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    aaae:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    aab2:	4630      	mov	r0, r6
    aab4:	f7ff fd18 	bl	a4e8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    aab8:	2300      	movs	r3, #0
    aaba:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    aabc:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    aac0:	464a      	mov	r2, r9
    aac2:	4643      	mov	r3, r8
    aac4:	4630      	mov	r0, r6
    aac6:	4903      	ldr	r1, [pc, #12]	; (aad4 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    aac8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    aacc:	f7ff bc44 	b.w	a358 <z_add_timeout>
}
    aad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aad4:	0000a8c9 	.word	0x0000a8c9

0000aad8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    aad8:	4b01      	ldr	r3, [pc, #4]	; (aae0 <k_thread_system_pool_assign+0x8>)
    aada:	6703      	str	r3, [r0, #112]	; 0x70
}
    aadc:	4770      	bx	lr
    aade:	bf00      	nop
    aae0:	200003d0 	.word	0x200003d0

0000aae4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    aae4:	4a02      	ldr	r2, [pc, #8]	; (aaf0 <boot_banner+0xc>)
    aae6:	4903      	ldr	r1, [pc, #12]	; (aaf4 <boot_banner+0x10>)
    aae8:	4803      	ldr	r0, [pc, #12]	; (aaf8 <boot_banner+0x14>)
    aaea:	f002 b918 	b.w	cd1e <printk>
    aaee:	bf00      	nop
    aaf0:	00010365 	.word	0x00010365
    aaf4:	0001055d 	.word	0x0001055d
    aaf8:	0001056a 	.word	0x0001056a

0000aafc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    aafc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    aafe:	4c0e      	ldr	r4, [pc, #56]	; (ab38 <statics_init+0x3c>)
    ab00:	4d0e      	ldr	r5, [pc, #56]	; (ab3c <statics_init+0x40>)
    ab02:	4e0f      	ldr	r6, [pc, #60]	; (ab40 <statics_init+0x44>)
    ab04:	42ac      	cmp	r4, r5
    ab06:	d90c      	bls.n	ab22 <statics_init+0x26>
    ab08:	490e      	ldr	r1, [pc, #56]	; (ab44 <statics_init+0x48>)
    ab0a:	480f      	ldr	r0, [pc, #60]	; (ab48 <statics_init+0x4c>)
    ab0c:	2318      	movs	r3, #24
    ab0e:	4632      	mov	r2, r6
    ab10:	f002 f9b9 	bl	ce86 <assert_print>
    ab14:	480d      	ldr	r0, [pc, #52]	; (ab4c <statics_init+0x50>)
    ab16:	f002 f9b6 	bl	ce86 <assert_print>
    ab1a:	2118      	movs	r1, #24
    ab1c:	4630      	mov	r0, r6
    ab1e:	f002 f9ab 	bl	ce78 <assert_post_action>
    ab22:	42ac      	cmp	r4, r5
    ab24:	d301      	bcc.n	ab2a <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    ab26:	2000      	movs	r0, #0
    ab28:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    ab2a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    ab2e:	4620      	mov	r0, r4
    ab30:	f002 ff95 	bl	da5e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ab34:	3418      	adds	r4, #24
    ab36:	e7e5      	b.n	ab04 <statics_init+0x8>
    ab38:	200003d0 	.word	0x200003d0
    ab3c:	200003e8 	.word	0x200003e8
    ab40:	00010591 	.word	0x00010591
    ab44:	000105b3 	.word	0x000105b3
    ab48:	0000eb06 	.word	0x0000eb06
    ab4c:	0001013a 	.word	0x0001013a

0000ab50 <exit>:
    ab50:	b508      	push	{r3, lr}
    ab52:	4b07      	ldr	r3, [pc, #28]	; (ab70 <exit+0x20>)
    ab54:	4604      	mov	r4, r0
    ab56:	b113      	cbz	r3, ab5e <exit+0xe>
    ab58:	2100      	movs	r1, #0
    ab5a:	f3af 8000 	nop.w
    ab5e:	4b05      	ldr	r3, [pc, #20]	; (ab74 <exit+0x24>)
    ab60:	6818      	ldr	r0, [r3, #0]
    ab62:	6a83      	ldr	r3, [r0, #40]	; 0x28
    ab64:	b103      	cbz	r3, ab68 <exit+0x18>
    ab66:	4798      	blx	r3
    ab68:	4620      	mov	r0, r4
    ab6a:	f7fa fdc7 	bl	56fc <_exit>
    ab6e:	bf00      	nop
    ab70:	00000000 	.word	0x00000000
    ab74:	0000e7f0 	.word	0x0000e7f0

0000ab78 <malloc>:
    ab78:	4b02      	ldr	r3, [pc, #8]	; (ab84 <malloc+0xc>)
    ab7a:	4601      	mov	r1, r0
    ab7c:	6818      	ldr	r0, [r3, #0]
    ab7e:	f000 b855 	b.w	ac2c <_malloc_r>
    ab82:	bf00      	nop
    ab84:	20000188 	.word	0x20000188

0000ab88 <free>:
    ab88:	4b02      	ldr	r3, [pc, #8]	; (ab94 <free+0xc>)
    ab8a:	4601      	mov	r1, r0
    ab8c:	6818      	ldr	r0, [r3, #0]
    ab8e:	f000 b803 	b.w	ab98 <_free_r>
    ab92:	bf00      	nop
    ab94:	20000188 	.word	0x20000188

0000ab98 <_free_r>:
    ab98:	b538      	push	{r3, r4, r5, lr}
    ab9a:	4605      	mov	r5, r0
    ab9c:	2900      	cmp	r1, #0
    ab9e:	d041      	beq.n	ac24 <_free_r+0x8c>
    aba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    aba4:	1f0c      	subs	r4, r1, #4
    aba6:	2b00      	cmp	r3, #0
    aba8:	bfb8      	it	lt
    abaa:	18e4      	addlt	r4, r4, r3
    abac:	f001 f86a 	bl	bc84 <__malloc_lock>
    abb0:	4a1d      	ldr	r2, [pc, #116]	; (ac28 <_free_r+0x90>)
    abb2:	6813      	ldr	r3, [r2, #0]
    abb4:	b933      	cbnz	r3, abc4 <_free_r+0x2c>
    abb6:	6063      	str	r3, [r4, #4]
    abb8:	6014      	str	r4, [r2, #0]
    abba:	4628      	mov	r0, r5
    abbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    abc0:	f001 b866 	b.w	bc90 <__malloc_unlock>
    abc4:	42a3      	cmp	r3, r4
    abc6:	d908      	bls.n	abda <_free_r+0x42>
    abc8:	6820      	ldr	r0, [r4, #0]
    abca:	1821      	adds	r1, r4, r0
    abcc:	428b      	cmp	r3, r1
    abce:	bf01      	itttt	eq
    abd0:	6819      	ldreq	r1, [r3, #0]
    abd2:	685b      	ldreq	r3, [r3, #4]
    abd4:	1809      	addeq	r1, r1, r0
    abd6:	6021      	streq	r1, [r4, #0]
    abd8:	e7ed      	b.n	abb6 <_free_r+0x1e>
    abda:	461a      	mov	r2, r3
    abdc:	685b      	ldr	r3, [r3, #4]
    abde:	b10b      	cbz	r3, abe4 <_free_r+0x4c>
    abe0:	42a3      	cmp	r3, r4
    abe2:	d9fa      	bls.n	abda <_free_r+0x42>
    abe4:	6811      	ldr	r1, [r2, #0]
    abe6:	1850      	adds	r0, r2, r1
    abe8:	42a0      	cmp	r0, r4
    abea:	d10b      	bne.n	ac04 <_free_r+0x6c>
    abec:	6820      	ldr	r0, [r4, #0]
    abee:	4401      	add	r1, r0
    abf0:	1850      	adds	r0, r2, r1
    abf2:	4283      	cmp	r3, r0
    abf4:	6011      	str	r1, [r2, #0]
    abf6:	d1e0      	bne.n	abba <_free_r+0x22>
    abf8:	6818      	ldr	r0, [r3, #0]
    abfa:	685b      	ldr	r3, [r3, #4]
    abfc:	6053      	str	r3, [r2, #4]
    abfe:	4401      	add	r1, r0
    ac00:	6011      	str	r1, [r2, #0]
    ac02:	e7da      	b.n	abba <_free_r+0x22>
    ac04:	d902      	bls.n	ac0c <_free_r+0x74>
    ac06:	230c      	movs	r3, #12
    ac08:	602b      	str	r3, [r5, #0]
    ac0a:	e7d6      	b.n	abba <_free_r+0x22>
    ac0c:	6820      	ldr	r0, [r4, #0]
    ac0e:	1821      	adds	r1, r4, r0
    ac10:	428b      	cmp	r3, r1
    ac12:	bf04      	itt	eq
    ac14:	6819      	ldreq	r1, [r3, #0]
    ac16:	685b      	ldreq	r3, [r3, #4]
    ac18:	6063      	str	r3, [r4, #4]
    ac1a:	bf04      	itt	eq
    ac1c:	1809      	addeq	r1, r1, r0
    ac1e:	6021      	streq	r1, [r4, #0]
    ac20:	6054      	str	r4, [r2, #4]
    ac22:	e7ca      	b.n	abba <_free_r+0x22>
    ac24:	bd38      	pop	{r3, r4, r5, pc}
    ac26:	bf00      	nop
    ac28:	20001110 	.word	0x20001110

0000ac2c <_malloc_r>:
    ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac2e:	1ccd      	adds	r5, r1, #3
    ac30:	f025 0503 	bic.w	r5, r5, #3
    ac34:	3508      	adds	r5, #8
    ac36:	2d0c      	cmp	r5, #12
    ac38:	bf38      	it	cc
    ac3a:	250c      	movcc	r5, #12
    ac3c:	2d00      	cmp	r5, #0
    ac3e:	4606      	mov	r6, r0
    ac40:	db01      	blt.n	ac46 <_malloc_r+0x1a>
    ac42:	42a9      	cmp	r1, r5
    ac44:	d903      	bls.n	ac4e <_malloc_r+0x22>
    ac46:	230c      	movs	r3, #12
    ac48:	6033      	str	r3, [r6, #0]
    ac4a:	2000      	movs	r0, #0
    ac4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac4e:	f001 f819 	bl	bc84 <__malloc_lock>
    ac52:	4921      	ldr	r1, [pc, #132]	; (acd8 <_malloc_r+0xac>)
    ac54:	680a      	ldr	r2, [r1, #0]
    ac56:	4614      	mov	r4, r2
    ac58:	b99c      	cbnz	r4, ac82 <_malloc_r+0x56>
    ac5a:	4f20      	ldr	r7, [pc, #128]	; (acdc <_malloc_r+0xb0>)
    ac5c:	683b      	ldr	r3, [r7, #0]
    ac5e:	b923      	cbnz	r3, ac6a <_malloc_r+0x3e>
    ac60:	4621      	mov	r1, r4
    ac62:	4630      	mov	r0, r6
    ac64:	f000 fc46 	bl	b4f4 <_sbrk_r>
    ac68:	6038      	str	r0, [r7, #0]
    ac6a:	4629      	mov	r1, r5
    ac6c:	4630      	mov	r0, r6
    ac6e:	f000 fc41 	bl	b4f4 <_sbrk_r>
    ac72:	1c43      	adds	r3, r0, #1
    ac74:	d123      	bne.n	acbe <_malloc_r+0x92>
    ac76:	230c      	movs	r3, #12
    ac78:	6033      	str	r3, [r6, #0]
    ac7a:	4630      	mov	r0, r6
    ac7c:	f001 f808 	bl	bc90 <__malloc_unlock>
    ac80:	e7e3      	b.n	ac4a <_malloc_r+0x1e>
    ac82:	6823      	ldr	r3, [r4, #0]
    ac84:	1b5b      	subs	r3, r3, r5
    ac86:	d417      	bmi.n	acb8 <_malloc_r+0x8c>
    ac88:	2b0b      	cmp	r3, #11
    ac8a:	d903      	bls.n	ac94 <_malloc_r+0x68>
    ac8c:	6023      	str	r3, [r4, #0]
    ac8e:	441c      	add	r4, r3
    ac90:	6025      	str	r5, [r4, #0]
    ac92:	e004      	b.n	ac9e <_malloc_r+0x72>
    ac94:	6863      	ldr	r3, [r4, #4]
    ac96:	42a2      	cmp	r2, r4
    ac98:	bf0c      	ite	eq
    ac9a:	600b      	streq	r3, [r1, #0]
    ac9c:	6053      	strne	r3, [r2, #4]
    ac9e:	4630      	mov	r0, r6
    aca0:	f000 fff6 	bl	bc90 <__malloc_unlock>
    aca4:	f104 000b 	add.w	r0, r4, #11
    aca8:	1d23      	adds	r3, r4, #4
    acaa:	f020 0007 	bic.w	r0, r0, #7
    acae:	1ac2      	subs	r2, r0, r3
    acb0:	d0cc      	beq.n	ac4c <_malloc_r+0x20>
    acb2:	1a1b      	subs	r3, r3, r0
    acb4:	50a3      	str	r3, [r4, r2]
    acb6:	e7c9      	b.n	ac4c <_malloc_r+0x20>
    acb8:	4622      	mov	r2, r4
    acba:	6864      	ldr	r4, [r4, #4]
    acbc:	e7cc      	b.n	ac58 <_malloc_r+0x2c>
    acbe:	1cc4      	adds	r4, r0, #3
    acc0:	f024 0403 	bic.w	r4, r4, #3
    acc4:	42a0      	cmp	r0, r4
    acc6:	d0e3      	beq.n	ac90 <_malloc_r+0x64>
    acc8:	1a21      	subs	r1, r4, r0
    acca:	4630      	mov	r0, r6
    accc:	f000 fc12 	bl	b4f4 <_sbrk_r>
    acd0:	3001      	adds	r0, #1
    acd2:	d1dd      	bne.n	ac90 <_malloc_r+0x64>
    acd4:	e7cf      	b.n	ac76 <_malloc_r+0x4a>
    acd6:	bf00      	nop
    acd8:	20001110 	.word	0x20001110
    acdc:	20001114 	.word	0x20001114

0000ace0 <_printf_float>:
    ace0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ace4:	b091      	sub	sp, #68	; 0x44
    ace6:	460c      	mov	r4, r1
    ace8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    acec:	4616      	mov	r6, r2
    acee:	461f      	mov	r7, r3
    acf0:	4605      	mov	r5, r0
    acf2:	f000 ffc3 	bl	bc7c <_localeconv_r>
    acf6:	6803      	ldr	r3, [r0, #0]
    acf8:	9309      	str	r3, [sp, #36]	; 0x24
    acfa:	4618      	mov	r0, r3
    acfc:	f7f6 f921 	bl	f42 <strlen>
    ad00:	2300      	movs	r3, #0
    ad02:	930e      	str	r3, [sp, #56]	; 0x38
    ad04:	f8d8 3000 	ldr.w	r3, [r8]
    ad08:	900a      	str	r0, [sp, #40]	; 0x28
    ad0a:	3307      	adds	r3, #7
    ad0c:	f023 0307 	bic.w	r3, r3, #7
    ad10:	f103 0208 	add.w	r2, r3, #8
    ad14:	f894 9018 	ldrb.w	r9, [r4, #24]
    ad18:	f8d4 b000 	ldr.w	fp, [r4]
    ad1c:	f8c8 2000 	str.w	r2, [r8]
    ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    ad28:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
    ad2c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
    ad30:	930b      	str	r3, [sp, #44]	; 0x2c
    ad32:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ad34:	4b9c      	ldr	r3, [pc, #624]	; (afa8 <_printf_float+0x2c8>)
    ad36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ad3a:	4640      	mov	r0, r8
    ad3c:	f7f5 ff66 	bl	c0c <__aeabi_dcmpun>
    ad40:	bb70      	cbnz	r0, ada0 <_printf_float+0xc0>
    ad42:	4b99      	ldr	r3, [pc, #612]	; (afa8 <_printf_float+0x2c8>)
    ad44:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ad46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ad4a:	4640      	mov	r0, r8
    ad4c:	f7f5 ff40 	bl	bd0 <__aeabi_dcmple>
    ad50:	bb30      	cbnz	r0, ada0 <_printf_float+0xc0>
    ad52:	2200      	movs	r2, #0
    ad54:	2300      	movs	r3, #0
    ad56:	4640      	mov	r0, r8
    ad58:	4651      	mov	r1, sl
    ad5a:	f7f5 ff2f 	bl	bbc <__aeabi_dcmplt>
    ad5e:	b110      	cbz	r0, ad66 <_printf_float+0x86>
    ad60:	232d      	movs	r3, #45	; 0x2d
    ad62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    ad66:	4b91      	ldr	r3, [pc, #580]	; (afac <_printf_float+0x2cc>)
    ad68:	4891      	ldr	r0, [pc, #580]	; (afb0 <_printf_float+0x2d0>)
    ad6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    ad6e:	bf94      	ite	ls
    ad70:	4698      	movls	r8, r3
    ad72:	4680      	movhi	r8, r0
    ad74:	2303      	movs	r3, #3
    ad76:	6123      	str	r3, [r4, #16]
    ad78:	f02b 0304 	bic.w	r3, fp, #4
    ad7c:	6023      	str	r3, [r4, #0]
    ad7e:	f04f 0a00 	mov.w	sl, #0
    ad82:	9700      	str	r7, [sp, #0]
    ad84:	4633      	mov	r3, r6
    ad86:	aa0f      	add	r2, sp, #60	; 0x3c
    ad88:	4621      	mov	r1, r4
    ad8a:	4628      	mov	r0, r5
    ad8c:	f002 ff28 	bl	dbe0 <_printf_common>
    ad90:	3001      	adds	r0, #1
    ad92:	f040 808f 	bne.w	aeb4 <_printf_float+0x1d4>
    ad96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ad9a:	b011      	add	sp, #68	; 0x44
    ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ada0:	4642      	mov	r2, r8
    ada2:	4653      	mov	r3, sl
    ada4:	4640      	mov	r0, r8
    ada6:	4651      	mov	r1, sl
    ada8:	f7f5 ff30 	bl	c0c <__aeabi_dcmpun>
    adac:	b140      	cbz	r0, adc0 <_printf_float+0xe0>
    adae:	f1ba 0f00 	cmp.w	sl, #0
    adb2:	bfbc      	itt	lt
    adb4:	232d      	movlt	r3, #45	; 0x2d
    adb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
    adba:	487e      	ldr	r0, [pc, #504]	; (afb4 <_printf_float+0x2d4>)
    adbc:	4b7e      	ldr	r3, [pc, #504]	; (afb8 <_printf_float+0x2d8>)
    adbe:	e7d4      	b.n	ad6a <_printf_float+0x8a>
    adc0:	6863      	ldr	r3, [r4, #4]
    adc2:	1c5a      	adds	r2, r3, #1
    adc4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    adc8:	d142      	bne.n	ae50 <_printf_float+0x170>
    adca:	2306      	movs	r3, #6
    adcc:	6063      	str	r3, [r4, #4]
    adce:	2200      	movs	r2, #0
    add0:	9206      	str	r2, [sp, #24]
    add2:	aa0e      	add	r2, sp, #56	; 0x38
    add4:	e9cd 9204 	strd	r9, r2, [sp, #16]
    add8:	aa0d      	add	r2, sp, #52	; 0x34
    adda:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
    adde:	9203      	str	r2, [sp, #12]
    ade0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    ade4:	e9cd 3201 	strd	r3, r2, [sp, #4]
    ade8:	6023      	str	r3, [r4, #0]
    adea:	6863      	ldr	r3, [r4, #4]
    adec:	9300      	str	r3, [sp, #0]
    adee:	4642      	mov	r2, r8
    adf0:	4653      	mov	r3, sl
    adf2:	4628      	mov	r0, r5
    adf4:	910b      	str	r1, [sp, #44]	; 0x2c
    adf6:	f002 fe55 	bl	daa4 <__cvt>
    adfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    adfc:	2947      	cmp	r1, #71	; 0x47
    adfe:	4680      	mov	r8, r0
    ae00:	990d      	ldr	r1, [sp, #52]	; 0x34
    ae02:	d108      	bne.n	ae16 <_printf_float+0x136>
    ae04:	1cc8      	adds	r0, r1, #3
    ae06:	db02      	blt.n	ae0e <_printf_float+0x12e>
    ae08:	6863      	ldr	r3, [r4, #4]
    ae0a:	4299      	cmp	r1, r3
    ae0c:	dd40      	ble.n	ae90 <_printf_float+0x1b0>
    ae0e:	f1a9 0902 	sub.w	r9, r9, #2
    ae12:	fa5f f989 	uxtb.w	r9, r9
    ae16:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    ae1a:	d81f      	bhi.n	ae5c <_printf_float+0x17c>
    ae1c:	3901      	subs	r1, #1
    ae1e:	464a      	mov	r2, r9
    ae20:	f104 0050 	add.w	r0, r4, #80	; 0x50
    ae24:	910d      	str	r1, [sp, #52]	; 0x34
    ae26:	f002 fe9d 	bl	db64 <__exponent>
    ae2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ae2c:	1813      	adds	r3, r2, r0
    ae2e:	2a01      	cmp	r2, #1
    ae30:	4682      	mov	sl, r0
    ae32:	6123      	str	r3, [r4, #16]
    ae34:	dc02      	bgt.n	ae3c <_printf_float+0x15c>
    ae36:	6822      	ldr	r2, [r4, #0]
    ae38:	07d2      	lsls	r2, r2, #31
    ae3a:	d501      	bpl.n	ae40 <_printf_float+0x160>
    ae3c:	3301      	adds	r3, #1
    ae3e:	6123      	str	r3, [r4, #16]
    ae40:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    ae44:	2b00      	cmp	r3, #0
    ae46:	d09c      	beq.n	ad82 <_printf_float+0xa2>
    ae48:	232d      	movs	r3, #45	; 0x2d
    ae4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    ae4e:	e798      	b.n	ad82 <_printf_float+0xa2>
    ae50:	2947      	cmp	r1, #71	; 0x47
    ae52:	d1bc      	bne.n	adce <_printf_float+0xee>
    ae54:	2b00      	cmp	r3, #0
    ae56:	d1ba      	bne.n	adce <_printf_float+0xee>
    ae58:	2301      	movs	r3, #1
    ae5a:	e7b7      	b.n	adcc <_printf_float+0xec>
    ae5c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    ae60:	d118      	bne.n	ae94 <_printf_float+0x1b4>
    ae62:	2900      	cmp	r1, #0
    ae64:	6863      	ldr	r3, [r4, #4]
    ae66:	dd0b      	ble.n	ae80 <_printf_float+0x1a0>
    ae68:	6121      	str	r1, [r4, #16]
    ae6a:	b913      	cbnz	r3, ae72 <_printf_float+0x192>
    ae6c:	6822      	ldr	r2, [r4, #0]
    ae6e:	07d0      	lsls	r0, r2, #31
    ae70:	d502      	bpl.n	ae78 <_printf_float+0x198>
    ae72:	3301      	adds	r3, #1
    ae74:	440b      	add	r3, r1
    ae76:	6123      	str	r3, [r4, #16]
    ae78:	65a1      	str	r1, [r4, #88]	; 0x58
    ae7a:	f04f 0a00 	mov.w	sl, #0
    ae7e:	e7df      	b.n	ae40 <_printf_float+0x160>
    ae80:	b913      	cbnz	r3, ae88 <_printf_float+0x1a8>
    ae82:	6822      	ldr	r2, [r4, #0]
    ae84:	07d2      	lsls	r2, r2, #31
    ae86:	d501      	bpl.n	ae8c <_printf_float+0x1ac>
    ae88:	3302      	adds	r3, #2
    ae8a:	e7f4      	b.n	ae76 <_printf_float+0x196>
    ae8c:	2301      	movs	r3, #1
    ae8e:	e7f2      	b.n	ae76 <_printf_float+0x196>
    ae90:	f04f 0967 	mov.w	r9, #103	; 0x67
    ae94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae96:	4299      	cmp	r1, r3
    ae98:	db05      	blt.n	aea6 <_printf_float+0x1c6>
    ae9a:	6823      	ldr	r3, [r4, #0]
    ae9c:	6121      	str	r1, [r4, #16]
    ae9e:	07d8      	lsls	r0, r3, #31
    aea0:	d5ea      	bpl.n	ae78 <_printf_float+0x198>
    aea2:	1c4b      	adds	r3, r1, #1
    aea4:	e7e7      	b.n	ae76 <_printf_float+0x196>
    aea6:	2900      	cmp	r1, #0
    aea8:	bfd4      	ite	le
    aeaa:	f1c1 0202 	rsble	r2, r1, #2
    aeae:	2201      	movgt	r2, #1
    aeb0:	4413      	add	r3, r2
    aeb2:	e7e0      	b.n	ae76 <_printf_float+0x196>
    aeb4:	6823      	ldr	r3, [r4, #0]
    aeb6:	055a      	lsls	r2, r3, #21
    aeb8:	d407      	bmi.n	aeca <_printf_float+0x1ea>
    aeba:	6923      	ldr	r3, [r4, #16]
    aebc:	4642      	mov	r2, r8
    aebe:	4631      	mov	r1, r6
    aec0:	4628      	mov	r0, r5
    aec2:	47b8      	blx	r7
    aec4:	3001      	adds	r0, #1
    aec6:	d12b      	bne.n	af20 <_printf_float+0x240>
    aec8:	e765      	b.n	ad96 <_printf_float+0xb6>
    aeca:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    aece:	f240 80dc 	bls.w	b08a <_printf_float+0x3aa>
    aed2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    aed6:	2200      	movs	r2, #0
    aed8:	2300      	movs	r3, #0
    aeda:	f7f5 fe65 	bl	ba8 <__aeabi_dcmpeq>
    aede:	2800      	cmp	r0, #0
    aee0:	d033      	beq.n	af4a <_printf_float+0x26a>
    aee2:	4a36      	ldr	r2, [pc, #216]	; (afbc <_printf_float+0x2dc>)
    aee4:	2301      	movs	r3, #1
    aee6:	4631      	mov	r1, r6
    aee8:	4628      	mov	r0, r5
    aeea:	47b8      	blx	r7
    aeec:	3001      	adds	r0, #1
    aeee:	f43f af52 	beq.w	ad96 <_printf_float+0xb6>
    aef2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    aef6:	429a      	cmp	r2, r3
    aef8:	db02      	blt.n	af00 <_printf_float+0x220>
    aefa:	6823      	ldr	r3, [r4, #0]
    aefc:	07d8      	lsls	r0, r3, #31
    aefe:	d50f      	bpl.n	af20 <_printf_float+0x240>
    af00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    af04:	4631      	mov	r1, r6
    af06:	4628      	mov	r0, r5
    af08:	47b8      	blx	r7
    af0a:	3001      	adds	r0, #1
    af0c:	f43f af43 	beq.w	ad96 <_printf_float+0xb6>
    af10:	f04f 0800 	mov.w	r8, #0
    af14:	f104 091a 	add.w	r9, r4, #26
    af18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af1a:	3b01      	subs	r3, #1
    af1c:	4543      	cmp	r3, r8
    af1e:	dc09      	bgt.n	af34 <_printf_float+0x254>
    af20:	6823      	ldr	r3, [r4, #0]
    af22:	079b      	lsls	r3, r3, #30
    af24:	f100 8101 	bmi.w	b12a <_printf_float+0x44a>
    af28:	68e0      	ldr	r0, [r4, #12]
    af2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af2c:	4298      	cmp	r0, r3
    af2e:	bfb8      	it	lt
    af30:	4618      	movlt	r0, r3
    af32:	e732      	b.n	ad9a <_printf_float+0xba>
    af34:	2301      	movs	r3, #1
    af36:	464a      	mov	r2, r9
    af38:	4631      	mov	r1, r6
    af3a:	4628      	mov	r0, r5
    af3c:	47b8      	blx	r7
    af3e:	3001      	adds	r0, #1
    af40:	f43f af29 	beq.w	ad96 <_printf_float+0xb6>
    af44:	f108 0801 	add.w	r8, r8, #1
    af48:	e7e6      	b.n	af18 <_printf_float+0x238>
    af4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    af4c:	2b00      	cmp	r3, #0
    af4e:	dc37      	bgt.n	afc0 <_printf_float+0x2e0>
    af50:	4a1a      	ldr	r2, [pc, #104]	; (afbc <_printf_float+0x2dc>)
    af52:	2301      	movs	r3, #1
    af54:	4631      	mov	r1, r6
    af56:	4628      	mov	r0, r5
    af58:	47b8      	blx	r7
    af5a:	3001      	adds	r0, #1
    af5c:	f43f af1b 	beq.w	ad96 <_printf_float+0xb6>
    af60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    af64:	4313      	orrs	r3, r2
    af66:	d102      	bne.n	af6e <_printf_float+0x28e>
    af68:	6823      	ldr	r3, [r4, #0]
    af6a:	07d9      	lsls	r1, r3, #31
    af6c:	d5d8      	bpl.n	af20 <_printf_float+0x240>
    af6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    af72:	4631      	mov	r1, r6
    af74:	4628      	mov	r0, r5
    af76:	47b8      	blx	r7
    af78:	3001      	adds	r0, #1
    af7a:	f43f af0c 	beq.w	ad96 <_printf_float+0xb6>
    af7e:	f04f 0900 	mov.w	r9, #0
    af82:	f104 0a1a 	add.w	sl, r4, #26
    af86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    af88:	425b      	negs	r3, r3
    af8a:	454b      	cmp	r3, r9
    af8c:	dc01      	bgt.n	af92 <_printf_float+0x2b2>
    af8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af90:	e794      	b.n	aebc <_printf_float+0x1dc>
    af92:	2301      	movs	r3, #1
    af94:	4652      	mov	r2, sl
    af96:	4631      	mov	r1, r6
    af98:	4628      	mov	r0, r5
    af9a:	47b8      	blx	r7
    af9c:	3001      	adds	r0, #1
    af9e:	f43f aefa 	beq.w	ad96 <_printf_float+0xb6>
    afa2:	f109 0901 	add.w	r9, r9, #1
    afa6:	e7ee      	b.n	af86 <_printf_float+0x2a6>
    afa8:	7fefffff 	.word	0x7fefffff
    afac:	000106ca 	.word	0x000106ca
    afb0:	0000f083 	.word	0x0000f083
    afb4:	000106d2 	.word	0x000106d2
    afb8:	000106ce 	.word	0x000106ce
    afbc:	0000f7bd 	.word	0x0000f7bd
    afc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    afc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    afc4:	429a      	cmp	r2, r3
    afc6:	bfa8      	it	ge
    afc8:	461a      	movge	r2, r3
    afca:	2a00      	cmp	r2, #0
    afcc:	4691      	mov	r9, r2
    afce:	dc37      	bgt.n	b040 <_printf_float+0x360>
    afd0:	f04f 0b00 	mov.w	fp, #0
    afd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    afd8:	f104 021a 	add.w	r2, r4, #26
    afdc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
    afe0:	ebaa 0309 	sub.w	r3, sl, r9
    afe4:	455b      	cmp	r3, fp
    afe6:	dc33      	bgt.n	b050 <_printf_float+0x370>
    afe8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    afec:	429a      	cmp	r2, r3
    afee:	db3b      	blt.n	b068 <_printf_float+0x388>
    aff0:	6823      	ldr	r3, [r4, #0]
    aff2:	07da      	lsls	r2, r3, #31
    aff4:	d438      	bmi.n	b068 <_printf_float+0x388>
    aff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aff8:	990d      	ldr	r1, [sp, #52]	; 0x34
    affa:	eba3 020a 	sub.w	r2, r3, sl
    affe:	eba3 0901 	sub.w	r9, r3, r1
    b002:	4591      	cmp	r9, r2
    b004:	bfa8      	it	ge
    b006:	4691      	movge	r9, r2
    b008:	f1b9 0f00 	cmp.w	r9, #0
    b00c:	dc34      	bgt.n	b078 <_printf_float+0x398>
    b00e:	f04f 0800 	mov.w	r8, #0
    b012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    b016:	f104 0a1a 	add.w	sl, r4, #26
    b01a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    b01e:	1a9b      	subs	r3, r3, r2
    b020:	eba3 0309 	sub.w	r3, r3, r9
    b024:	4543      	cmp	r3, r8
    b026:	f77f af7b 	ble.w	af20 <_printf_float+0x240>
    b02a:	2301      	movs	r3, #1
    b02c:	4652      	mov	r2, sl
    b02e:	4631      	mov	r1, r6
    b030:	4628      	mov	r0, r5
    b032:	47b8      	blx	r7
    b034:	3001      	adds	r0, #1
    b036:	f43f aeae 	beq.w	ad96 <_printf_float+0xb6>
    b03a:	f108 0801 	add.w	r8, r8, #1
    b03e:	e7ec      	b.n	b01a <_printf_float+0x33a>
    b040:	4613      	mov	r3, r2
    b042:	4631      	mov	r1, r6
    b044:	4642      	mov	r2, r8
    b046:	4628      	mov	r0, r5
    b048:	47b8      	blx	r7
    b04a:	3001      	adds	r0, #1
    b04c:	d1c0      	bne.n	afd0 <_printf_float+0x2f0>
    b04e:	e6a2      	b.n	ad96 <_printf_float+0xb6>
    b050:	2301      	movs	r3, #1
    b052:	4631      	mov	r1, r6
    b054:	4628      	mov	r0, r5
    b056:	920b      	str	r2, [sp, #44]	; 0x2c
    b058:	47b8      	blx	r7
    b05a:	3001      	adds	r0, #1
    b05c:	f43f ae9b 	beq.w	ad96 <_printf_float+0xb6>
    b060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b062:	f10b 0b01 	add.w	fp, fp, #1
    b066:	e7b9      	b.n	afdc <_printf_float+0x2fc>
    b068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    b06c:	4631      	mov	r1, r6
    b06e:	4628      	mov	r0, r5
    b070:	47b8      	blx	r7
    b072:	3001      	adds	r0, #1
    b074:	d1bf      	bne.n	aff6 <_printf_float+0x316>
    b076:	e68e      	b.n	ad96 <_printf_float+0xb6>
    b078:	464b      	mov	r3, r9
    b07a:	eb08 020a 	add.w	r2, r8, sl
    b07e:	4631      	mov	r1, r6
    b080:	4628      	mov	r0, r5
    b082:	47b8      	blx	r7
    b084:	3001      	adds	r0, #1
    b086:	d1c2      	bne.n	b00e <_printf_float+0x32e>
    b088:	e685      	b.n	ad96 <_printf_float+0xb6>
    b08a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b08c:	2a01      	cmp	r2, #1
    b08e:	dc01      	bgt.n	b094 <_printf_float+0x3b4>
    b090:	07db      	lsls	r3, r3, #31
    b092:	d537      	bpl.n	b104 <_printf_float+0x424>
    b094:	2301      	movs	r3, #1
    b096:	4642      	mov	r2, r8
    b098:	4631      	mov	r1, r6
    b09a:	4628      	mov	r0, r5
    b09c:	47b8      	blx	r7
    b09e:	3001      	adds	r0, #1
    b0a0:	f43f ae79 	beq.w	ad96 <_printf_float+0xb6>
    b0a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    b0a8:	4631      	mov	r1, r6
    b0aa:	4628      	mov	r0, r5
    b0ac:	47b8      	blx	r7
    b0ae:	3001      	adds	r0, #1
    b0b0:	f43f ae71 	beq.w	ad96 <_printf_float+0xb6>
    b0b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    b0b8:	2200      	movs	r2, #0
    b0ba:	2300      	movs	r3, #0
    b0bc:	f7f5 fd74 	bl	ba8 <__aeabi_dcmpeq>
    b0c0:	b9d8      	cbnz	r0, b0fa <_printf_float+0x41a>
    b0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b0c4:	f108 0201 	add.w	r2, r8, #1
    b0c8:	3b01      	subs	r3, #1
    b0ca:	4631      	mov	r1, r6
    b0cc:	4628      	mov	r0, r5
    b0ce:	47b8      	blx	r7
    b0d0:	3001      	adds	r0, #1
    b0d2:	d10e      	bne.n	b0f2 <_printf_float+0x412>
    b0d4:	e65f      	b.n	ad96 <_printf_float+0xb6>
    b0d6:	2301      	movs	r3, #1
    b0d8:	464a      	mov	r2, r9
    b0da:	4631      	mov	r1, r6
    b0dc:	4628      	mov	r0, r5
    b0de:	47b8      	blx	r7
    b0e0:	3001      	adds	r0, #1
    b0e2:	f43f ae58 	beq.w	ad96 <_printf_float+0xb6>
    b0e6:	f108 0801 	add.w	r8, r8, #1
    b0ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b0ec:	3b01      	subs	r3, #1
    b0ee:	4543      	cmp	r3, r8
    b0f0:	dcf1      	bgt.n	b0d6 <_printf_float+0x3f6>
    b0f2:	4653      	mov	r3, sl
    b0f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
    b0f8:	e6e1      	b.n	aebe <_printf_float+0x1de>
    b0fa:	f04f 0800 	mov.w	r8, #0
    b0fe:	f104 091a 	add.w	r9, r4, #26
    b102:	e7f2      	b.n	b0ea <_printf_float+0x40a>
    b104:	2301      	movs	r3, #1
    b106:	4642      	mov	r2, r8
    b108:	e7df      	b.n	b0ca <_printf_float+0x3ea>
    b10a:	2301      	movs	r3, #1
    b10c:	464a      	mov	r2, r9
    b10e:	4631      	mov	r1, r6
    b110:	4628      	mov	r0, r5
    b112:	47b8      	blx	r7
    b114:	3001      	adds	r0, #1
    b116:	f43f ae3e 	beq.w	ad96 <_printf_float+0xb6>
    b11a:	f108 0801 	add.w	r8, r8, #1
    b11e:	68e3      	ldr	r3, [r4, #12]
    b120:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b122:	1a5b      	subs	r3, r3, r1
    b124:	4543      	cmp	r3, r8
    b126:	dcf0      	bgt.n	b10a <_printf_float+0x42a>
    b128:	e6fe      	b.n	af28 <_printf_float+0x248>
    b12a:	f04f 0800 	mov.w	r8, #0
    b12e:	f104 0919 	add.w	r9, r4, #25
    b132:	e7f4      	b.n	b11e <_printf_float+0x43e>

0000b134 <_printf_i>:
    b134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    b138:	7e0f      	ldrb	r7, [r1, #24]
    b13a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b13c:	2f78      	cmp	r7, #120	; 0x78
    b13e:	4691      	mov	r9, r2
    b140:	4680      	mov	r8, r0
    b142:	460c      	mov	r4, r1
    b144:	469a      	mov	sl, r3
    b146:	f101 0243 	add.w	r2, r1, #67	; 0x43
    b14a:	d807      	bhi.n	b15c <_printf_i+0x28>
    b14c:	2f62      	cmp	r7, #98	; 0x62
    b14e:	d80a      	bhi.n	b166 <_printf_i+0x32>
    b150:	2f00      	cmp	r7, #0
    b152:	f000 80d8 	beq.w	b306 <_printf_i+0x1d2>
    b156:	2f58      	cmp	r7, #88	; 0x58
    b158:	f000 80a3 	beq.w	b2a2 <_printf_i+0x16e>
    b15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    b160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    b164:	e03a      	b.n	b1dc <_printf_i+0xa8>
    b166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    b16a:	2b15      	cmp	r3, #21
    b16c:	d8f6      	bhi.n	b15c <_printf_i+0x28>
    b16e:	a101      	add	r1, pc, #4	; (adr r1, b174 <_printf_i+0x40>)
    b170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    b174:	0000b1cd 	.word	0x0000b1cd
    b178:	0000b1e1 	.word	0x0000b1e1
    b17c:	0000b15d 	.word	0x0000b15d
    b180:	0000b15d 	.word	0x0000b15d
    b184:	0000b15d 	.word	0x0000b15d
    b188:	0000b15d 	.word	0x0000b15d
    b18c:	0000b1e1 	.word	0x0000b1e1
    b190:	0000b15d 	.word	0x0000b15d
    b194:	0000b15d 	.word	0x0000b15d
    b198:	0000b15d 	.word	0x0000b15d
    b19c:	0000b15d 	.word	0x0000b15d
    b1a0:	0000b2ed 	.word	0x0000b2ed
    b1a4:	0000b211 	.word	0x0000b211
    b1a8:	0000b2cf 	.word	0x0000b2cf
    b1ac:	0000b15d 	.word	0x0000b15d
    b1b0:	0000b15d 	.word	0x0000b15d
    b1b4:	0000b30f 	.word	0x0000b30f
    b1b8:	0000b15d 	.word	0x0000b15d
    b1bc:	0000b211 	.word	0x0000b211
    b1c0:	0000b15d 	.word	0x0000b15d
    b1c4:	0000b15d 	.word	0x0000b15d
    b1c8:	0000b2d7 	.word	0x0000b2d7
    b1cc:	682b      	ldr	r3, [r5, #0]
    b1ce:	1d1a      	adds	r2, r3, #4
    b1d0:	681b      	ldr	r3, [r3, #0]
    b1d2:	602a      	str	r2, [r5, #0]
    b1d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
    b1d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    b1dc:	2301      	movs	r3, #1
    b1de:	e0a3      	b.n	b328 <_printf_i+0x1f4>
    b1e0:	6820      	ldr	r0, [r4, #0]
    b1e2:	6829      	ldr	r1, [r5, #0]
    b1e4:	0606      	lsls	r6, r0, #24
    b1e6:	f101 0304 	add.w	r3, r1, #4
    b1ea:	d50a      	bpl.n	b202 <_printf_i+0xce>
    b1ec:	680e      	ldr	r6, [r1, #0]
    b1ee:	602b      	str	r3, [r5, #0]
    b1f0:	2e00      	cmp	r6, #0
    b1f2:	da03      	bge.n	b1fc <_printf_i+0xc8>
    b1f4:	232d      	movs	r3, #45	; 0x2d
    b1f6:	4276      	negs	r6, r6
    b1f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    b1fc:	485e      	ldr	r0, [pc, #376]	; (b378 <_printf_i+0x244>)
    b1fe:	230a      	movs	r3, #10
    b200:	e019      	b.n	b236 <_printf_i+0x102>
    b202:	680e      	ldr	r6, [r1, #0]
    b204:	602b      	str	r3, [r5, #0]
    b206:	f010 0f40 	tst.w	r0, #64	; 0x40
    b20a:	bf18      	it	ne
    b20c:	b236      	sxthne	r6, r6
    b20e:	e7ef      	b.n	b1f0 <_printf_i+0xbc>
    b210:	682b      	ldr	r3, [r5, #0]
    b212:	6820      	ldr	r0, [r4, #0]
    b214:	1d19      	adds	r1, r3, #4
    b216:	6029      	str	r1, [r5, #0]
    b218:	0601      	lsls	r1, r0, #24
    b21a:	d501      	bpl.n	b220 <_printf_i+0xec>
    b21c:	681e      	ldr	r6, [r3, #0]
    b21e:	e002      	b.n	b226 <_printf_i+0xf2>
    b220:	0646      	lsls	r6, r0, #25
    b222:	d5fb      	bpl.n	b21c <_printf_i+0xe8>
    b224:	881e      	ldrh	r6, [r3, #0]
    b226:	4854      	ldr	r0, [pc, #336]	; (b378 <_printf_i+0x244>)
    b228:	2f6f      	cmp	r7, #111	; 0x6f
    b22a:	bf0c      	ite	eq
    b22c:	2308      	moveq	r3, #8
    b22e:	230a      	movne	r3, #10
    b230:	2100      	movs	r1, #0
    b232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    b236:	6865      	ldr	r5, [r4, #4]
    b238:	60a5      	str	r5, [r4, #8]
    b23a:	2d00      	cmp	r5, #0
    b23c:	bfa2      	ittt	ge
    b23e:	6821      	ldrge	r1, [r4, #0]
    b240:	f021 0104 	bicge.w	r1, r1, #4
    b244:	6021      	strge	r1, [r4, #0]
    b246:	b90e      	cbnz	r6, b24c <_printf_i+0x118>
    b248:	2d00      	cmp	r5, #0
    b24a:	d04d      	beq.n	b2e8 <_printf_i+0x1b4>
    b24c:	4615      	mov	r5, r2
    b24e:	fbb6 f1f3 	udiv	r1, r6, r3
    b252:	fb03 6711 	mls	r7, r3, r1, r6
    b256:	5dc7      	ldrb	r7, [r0, r7]
    b258:	f805 7d01 	strb.w	r7, [r5, #-1]!
    b25c:	4637      	mov	r7, r6
    b25e:	42bb      	cmp	r3, r7
    b260:	460e      	mov	r6, r1
    b262:	d9f4      	bls.n	b24e <_printf_i+0x11a>
    b264:	2b08      	cmp	r3, #8
    b266:	d10b      	bne.n	b280 <_printf_i+0x14c>
    b268:	6823      	ldr	r3, [r4, #0]
    b26a:	07de      	lsls	r6, r3, #31
    b26c:	d508      	bpl.n	b280 <_printf_i+0x14c>
    b26e:	6923      	ldr	r3, [r4, #16]
    b270:	6861      	ldr	r1, [r4, #4]
    b272:	4299      	cmp	r1, r3
    b274:	bfde      	ittt	le
    b276:	2330      	movle	r3, #48	; 0x30
    b278:	f805 3c01 	strble.w	r3, [r5, #-1]
    b27c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    b280:	1b52      	subs	r2, r2, r5
    b282:	6122      	str	r2, [r4, #16]
    b284:	f8cd a000 	str.w	sl, [sp]
    b288:	464b      	mov	r3, r9
    b28a:	aa03      	add	r2, sp, #12
    b28c:	4621      	mov	r1, r4
    b28e:	4640      	mov	r0, r8
    b290:	f002 fca6 	bl	dbe0 <_printf_common>
    b294:	3001      	adds	r0, #1
    b296:	d14c      	bne.n	b332 <_printf_i+0x1fe>
    b298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b29c:	b004      	add	sp, #16
    b29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b2a2:	4835      	ldr	r0, [pc, #212]	; (b378 <_printf_i+0x244>)
    b2a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
    b2a8:	6829      	ldr	r1, [r5, #0]
    b2aa:	6823      	ldr	r3, [r4, #0]
    b2ac:	f851 6b04 	ldr.w	r6, [r1], #4
    b2b0:	6029      	str	r1, [r5, #0]
    b2b2:	061d      	lsls	r5, r3, #24
    b2b4:	d514      	bpl.n	b2e0 <_printf_i+0x1ac>
    b2b6:	07df      	lsls	r7, r3, #31
    b2b8:	bf44      	itt	mi
    b2ba:	f043 0320 	orrmi.w	r3, r3, #32
    b2be:	6023      	strmi	r3, [r4, #0]
    b2c0:	b91e      	cbnz	r6, b2ca <_printf_i+0x196>
    b2c2:	6823      	ldr	r3, [r4, #0]
    b2c4:	f023 0320 	bic.w	r3, r3, #32
    b2c8:	6023      	str	r3, [r4, #0]
    b2ca:	2310      	movs	r3, #16
    b2cc:	e7b0      	b.n	b230 <_printf_i+0xfc>
    b2ce:	6823      	ldr	r3, [r4, #0]
    b2d0:	f043 0320 	orr.w	r3, r3, #32
    b2d4:	6023      	str	r3, [r4, #0]
    b2d6:	2378      	movs	r3, #120	; 0x78
    b2d8:	4828      	ldr	r0, [pc, #160]	; (b37c <_printf_i+0x248>)
    b2da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    b2de:	e7e3      	b.n	b2a8 <_printf_i+0x174>
    b2e0:	0659      	lsls	r1, r3, #25
    b2e2:	bf48      	it	mi
    b2e4:	b2b6      	uxthmi	r6, r6
    b2e6:	e7e6      	b.n	b2b6 <_printf_i+0x182>
    b2e8:	4615      	mov	r5, r2
    b2ea:	e7bb      	b.n	b264 <_printf_i+0x130>
    b2ec:	682b      	ldr	r3, [r5, #0]
    b2ee:	6826      	ldr	r6, [r4, #0]
    b2f0:	6961      	ldr	r1, [r4, #20]
    b2f2:	1d18      	adds	r0, r3, #4
    b2f4:	6028      	str	r0, [r5, #0]
    b2f6:	0635      	lsls	r5, r6, #24
    b2f8:	681b      	ldr	r3, [r3, #0]
    b2fa:	d501      	bpl.n	b300 <_printf_i+0x1cc>
    b2fc:	6019      	str	r1, [r3, #0]
    b2fe:	e002      	b.n	b306 <_printf_i+0x1d2>
    b300:	0670      	lsls	r0, r6, #25
    b302:	d5fb      	bpl.n	b2fc <_printf_i+0x1c8>
    b304:	8019      	strh	r1, [r3, #0]
    b306:	2300      	movs	r3, #0
    b308:	6123      	str	r3, [r4, #16]
    b30a:	4615      	mov	r5, r2
    b30c:	e7ba      	b.n	b284 <_printf_i+0x150>
    b30e:	682b      	ldr	r3, [r5, #0]
    b310:	1d1a      	adds	r2, r3, #4
    b312:	602a      	str	r2, [r5, #0]
    b314:	681d      	ldr	r5, [r3, #0]
    b316:	6862      	ldr	r2, [r4, #4]
    b318:	2100      	movs	r1, #0
    b31a:	4628      	mov	r0, r5
    b31c:	f7f4 fef0 	bl	100 <memchr>
    b320:	b108      	cbz	r0, b326 <_printf_i+0x1f2>
    b322:	1b40      	subs	r0, r0, r5
    b324:	6060      	str	r0, [r4, #4]
    b326:	6863      	ldr	r3, [r4, #4]
    b328:	6123      	str	r3, [r4, #16]
    b32a:	2300      	movs	r3, #0
    b32c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    b330:	e7a8      	b.n	b284 <_printf_i+0x150>
    b332:	6923      	ldr	r3, [r4, #16]
    b334:	462a      	mov	r2, r5
    b336:	4649      	mov	r1, r9
    b338:	4640      	mov	r0, r8
    b33a:	47d0      	blx	sl
    b33c:	3001      	adds	r0, #1
    b33e:	d0ab      	beq.n	b298 <_printf_i+0x164>
    b340:	6823      	ldr	r3, [r4, #0]
    b342:	079b      	lsls	r3, r3, #30
    b344:	d413      	bmi.n	b36e <_printf_i+0x23a>
    b346:	68e0      	ldr	r0, [r4, #12]
    b348:	9b03      	ldr	r3, [sp, #12]
    b34a:	4298      	cmp	r0, r3
    b34c:	bfb8      	it	lt
    b34e:	4618      	movlt	r0, r3
    b350:	e7a4      	b.n	b29c <_printf_i+0x168>
    b352:	2301      	movs	r3, #1
    b354:	4632      	mov	r2, r6
    b356:	4649      	mov	r1, r9
    b358:	4640      	mov	r0, r8
    b35a:	47d0      	blx	sl
    b35c:	3001      	adds	r0, #1
    b35e:	d09b      	beq.n	b298 <_printf_i+0x164>
    b360:	3501      	adds	r5, #1
    b362:	68e3      	ldr	r3, [r4, #12]
    b364:	9903      	ldr	r1, [sp, #12]
    b366:	1a5b      	subs	r3, r3, r1
    b368:	42ab      	cmp	r3, r5
    b36a:	dcf2      	bgt.n	b352 <_printf_i+0x21e>
    b36c:	e7eb      	b.n	b346 <_printf_i+0x212>
    b36e:	2500      	movs	r5, #0
    b370:	f104 0619 	add.w	r6, r4, #25
    b374:	e7f5      	b.n	b362 <_printf_i+0x22e>
    b376:	bf00      	nop
    b378:	000106d6 	.word	0x000106d6
    b37c:	000106e7 	.word	0x000106e7

0000b380 <_perror_r>:
    b380:	6983      	ldr	r3, [r0, #24]
    b382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b384:	68c4      	ldr	r4, [r0, #12]
    b386:	4605      	mov	r5, r0
    b388:	460e      	mov	r6, r1
    b38a:	b90b      	cbnz	r3, b390 <_perror_r+0x10>
    b38c:	f000 fbf8 	bl	bb80 <__sinit>
    b390:	4b43      	ldr	r3, [pc, #268]	; (b4a0 <_perror_r+0x120>)
    b392:	429c      	cmp	r4, r3
    b394:	d132      	bne.n	b3fc <_perror_r+0x7c>
    b396:	686c      	ldr	r4, [r5, #4]
    b398:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b39a:	07d8      	lsls	r0, r3, #31
    b39c:	d405      	bmi.n	b3aa <_perror_r+0x2a>
    b39e:	89a3      	ldrh	r3, [r4, #12]
    b3a0:	0599      	lsls	r1, r3, #22
    b3a2:	d402      	bmi.n	b3aa <_perror_r+0x2a>
    b3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b3a6:	f7fa f9f7 	bl	5798 <__retarget_lock_acquire_recursive>
    b3aa:	4621      	mov	r1, r4
    b3ac:	4628      	mov	r0, r5
    b3ae:	f000 fb2b 	bl	ba08 <_fflush_r>
    b3b2:	bb6e      	cbnz	r6, b410 <_perror_r+0x90>
    b3b4:	6829      	ldr	r1, [r5, #0]
    b3b6:	ab01      	add	r3, sp, #4
    b3b8:	2201      	movs	r2, #1
    b3ba:	4628      	mov	r0, r5
    b3bc:	f000 f8aa 	bl	b514 <_strerror_r>
    b3c0:	4607      	mov	r7, r0
    b3c2:	2800      	cmp	r0, #0
    b3c4:	d14f      	bne.n	b466 <_perror_r+0xe6>
    b3c6:	4837      	ldr	r0, [pc, #220]	; (b4a4 <_perror_r+0x124>)
    b3c8:	4f36      	ldr	r7, [pc, #216]	; (b4a4 <_perror_r+0x124>)
    b3ca:	f7f5 fdba 	bl	f42 <strlen>
    b3ce:	4606      	mov	r6, r0
    b3d0:	b156      	cbz	r6, b3e8 <_perror_r+0x68>
    b3d2:	4620      	mov	r0, r4
    b3d4:	f000 fb54 	bl	ba80 <fileno>
    b3d8:	4633      	mov	r3, r6
    b3da:	4601      	mov	r1, r0
    b3dc:	463a      	mov	r2, r7
    b3de:	4628      	mov	r0, r5
    b3e0:	f000 fa7e 	bl	b8e0 <_write_r>
    b3e4:	2800      	cmp	r0, #0
    b3e6:	da51      	bge.n	b48c <_perror_r+0x10c>
    b3e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b3ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
    b3ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b3f2:	07d2      	lsls	r2, r2, #31
    b3f4:	81a3      	strh	r3, [r4, #12]
    b3f6:	d54c      	bpl.n	b492 <_perror_r+0x112>
    b3f8:	b003      	add	sp, #12
    b3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3fc:	4b2a      	ldr	r3, [pc, #168]	; (b4a8 <_perror_r+0x128>)
    b3fe:	429c      	cmp	r4, r3
    b400:	d101      	bne.n	b406 <_perror_r+0x86>
    b402:	68ac      	ldr	r4, [r5, #8]
    b404:	e7c8      	b.n	b398 <_perror_r+0x18>
    b406:	4b29      	ldr	r3, [pc, #164]	; (b4ac <_perror_r+0x12c>)
    b408:	429c      	cmp	r4, r3
    b40a:	bf08      	it	eq
    b40c:	68ec      	ldreq	r4, [r5, #12]
    b40e:	e7c3      	b.n	b398 <_perror_r+0x18>
    b410:	7833      	ldrb	r3, [r6, #0]
    b412:	2b00      	cmp	r3, #0
    b414:	d0ce      	beq.n	b3b4 <_perror_r+0x34>
    b416:	4630      	mov	r0, r6
    b418:	f7f5 fd93 	bl	f42 <strlen>
    b41c:	4607      	mov	r7, r0
    b41e:	b157      	cbz	r7, b436 <_perror_r+0xb6>
    b420:	4620      	mov	r0, r4
    b422:	f000 fb2d 	bl	ba80 <fileno>
    b426:	463b      	mov	r3, r7
    b428:	4601      	mov	r1, r0
    b42a:	4632      	mov	r2, r6
    b42c:	4628      	mov	r0, r5
    b42e:	f000 fa57 	bl	b8e0 <_write_r>
    b432:	2800      	cmp	r0, #0
    b434:	da14      	bge.n	b460 <_perror_r+0xe0>
    b436:	481e      	ldr	r0, [pc, #120]	; (b4b0 <_perror_r+0x130>)
    b438:	4f1d      	ldr	r7, [pc, #116]	; (b4b0 <_perror_r+0x130>)
    b43a:	f7f5 fd82 	bl	f42 <strlen>
    b43e:	4606      	mov	r6, r0
    b440:	2e00      	cmp	r6, #0
    b442:	d0b7      	beq.n	b3b4 <_perror_r+0x34>
    b444:	4620      	mov	r0, r4
    b446:	f000 fb1b 	bl	ba80 <fileno>
    b44a:	4633      	mov	r3, r6
    b44c:	4601      	mov	r1, r0
    b44e:	463a      	mov	r2, r7
    b450:	4628      	mov	r0, r5
    b452:	f000 fa45 	bl	b8e0 <_write_r>
    b456:	2800      	cmp	r0, #0
    b458:	dbac      	blt.n	b3b4 <_perror_r+0x34>
    b45a:	1a36      	subs	r6, r6, r0
    b45c:	4407      	add	r7, r0
    b45e:	e7ef      	b.n	b440 <_perror_r+0xc0>
    b460:	1a3f      	subs	r7, r7, r0
    b462:	4406      	add	r6, r0
    b464:	e7db      	b.n	b41e <_perror_r+0x9e>
    b466:	f7f5 fd6c 	bl	f42 <strlen>
    b46a:	4606      	mov	r6, r0
    b46c:	2e00      	cmp	r6, #0
    b46e:	d0aa      	beq.n	b3c6 <_perror_r+0x46>
    b470:	4620      	mov	r0, r4
    b472:	f000 fb05 	bl	ba80 <fileno>
    b476:	4633      	mov	r3, r6
    b478:	4601      	mov	r1, r0
    b47a:	463a      	mov	r2, r7
    b47c:	4628      	mov	r0, r5
    b47e:	f000 fa2f 	bl	b8e0 <_write_r>
    b482:	2800      	cmp	r0, #0
    b484:	db9f      	blt.n	b3c6 <_perror_r+0x46>
    b486:	1a36      	subs	r6, r6, r0
    b488:	4407      	add	r7, r0
    b48a:	e7ef      	b.n	b46c <_perror_r+0xec>
    b48c:	1a36      	subs	r6, r6, r0
    b48e:	4407      	add	r7, r0
    b490:	e79e      	b.n	b3d0 <_perror_r+0x50>
    b492:	059b      	lsls	r3, r3, #22
    b494:	d4b0      	bmi.n	b3f8 <_perror_r+0x78>
    b496:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b498:	f7fa f99c 	bl	57d4 <__retarget_lock_release_recursive>
    b49c:	e7ac      	b.n	b3f8 <_perror_r+0x78>
    b49e:	bf00      	nop
    b4a0:	0000e814 	.word	0x0000e814
    b4a4:	00010364 	.word	0x00010364
    b4a8:	0000e834 	.word	0x0000e834
    b4ac:	0000e7f4 	.word	0x0000e7f4
    b4b0:	00010e97 	.word	0x00010e97

0000b4b4 <perror>:
    b4b4:	4b02      	ldr	r3, [pc, #8]	; (b4c0 <perror+0xc>)
    b4b6:	4601      	mov	r1, r0
    b4b8:	6818      	ldr	r0, [r3, #0]
    b4ba:	f7ff bf61 	b.w	b380 <_perror_r>
    b4be:	bf00      	nop
    b4c0:	20000188 	.word	0x20000188

0000b4c4 <iprintf>:
    b4c4:	b40f      	push	{r0, r1, r2, r3}
    b4c6:	4b0a      	ldr	r3, [pc, #40]	; (b4f0 <iprintf+0x2c>)
    b4c8:	b513      	push	{r0, r1, r4, lr}
    b4ca:	681c      	ldr	r4, [r3, #0]
    b4cc:	b124      	cbz	r4, b4d8 <iprintf+0x14>
    b4ce:	69a3      	ldr	r3, [r4, #24]
    b4d0:	b913      	cbnz	r3, b4d8 <iprintf+0x14>
    b4d2:	4620      	mov	r0, r4
    b4d4:	f000 fb54 	bl	bb80 <__sinit>
    b4d8:	ab05      	add	r3, sp, #20
    b4da:	9a04      	ldr	r2, [sp, #16]
    b4dc:	68a1      	ldr	r1, [r4, #8]
    b4de:	9301      	str	r3, [sp, #4]
    b4e0:	4620      	mov	r0, r4
    b4e2:	f000 feef 	bl	c2c4 <_vfiprintf_r>
    b4e6:	b002      	add	sp, #8
    b4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b4ec:	b004      	add	sp, #16
    b4ee:	4770      	bx	lr
    b4f0:	20000188 	.word	0x20000188

0000b4f4 <_sbrk_r>:
    b4f4:	b538      	push	{r3, r4, r5, lr}
    b4f6:	4d06      	ldr	r5, [pc, #24]	; (b510 <_sbrk_r+0x1c>)
    b4f8:	2300      	movs	r3, #0
    b4fa:	4604      	mov	r4, r0
    b4fc:	4608      	mov	r0, r1
    b4fe:	602b      	str	r3, [r5, #0]
    b500:	f7fa f904 	bl	570c <_sbrk>
    b504:	1c43      	adds	r3, r0, #1
    b506:	d102      	bne.n	b50e <_sbrk_r+0x1a>
    b508:	682b      	ldr	r3, [r5, #0]
    b50a:	b103      	cbz	r3, b50e <_sbrk_r+0x1a>
    b50c:	6023      	str	r3, [r4, #0]
    b50e:	bd38      	pop	{r3, r4, r5, pc}
    b510:	20001118 	.word	0x20001118

0000b514 <_strerror_r>:
    b514:	b510      	push	{r4, lr}
    b516:	4604      	mov	r4, r0
    b518:	4608      	mov	r0, r1
    b51a:	4611      	mov	r1, r2
    b51c:	288e      	cmp	r0, #142	; 0x8e
    b51e:	f200 8130 	bhi.w	b782 <_strerror_r+0x26e>
    b522:	e8df f010 	tbh	[pc, r0, lsl #1]
    b526:	0139      	.short	0x0139
    b528:	0092008f 	.word	0x0092008f
    b52c:	00960094 	.word	0x00960094
    b530:	009a0098 	.word	0x009a0098
    b534:	009e009c 	.word	0x009e009c
    b538:	00a400a2 	.word	0x00a400a2
    b53c:	00aa00a8 	.word	0x00aa00a8
    b540:	00ae00ac 	.word	0x00ae00ac
    b544:	00b0012e 	.word	0x00b0012e
    b548:	00b400b2 	.word	0x00b400b2
    b54c:	00b800b6 	.word	0x00b800b6
    b550:	00c000be 	.word	0x00c000be
    b554:	00c800c6 	.word	0x00c800c6
    b558:	00cc00ca 	.word	0x00cc00ca
    b55c:	00d200ce 	.word	0x00d200ce
    b560:	00d800d6 	.word	0x00d800d6
    b564:	00dc00da 	.word	0x00dc00da
    b568:	00e000de 	.word	0x00e000de
    b56c:	00e400e2 	.word	0x00e400e2
    b570:	012e012e 	.word	0x012e012e
    b574:	012e012e 	.word	0x012e012e
    b578:	012e012e 	.word	0x012e012e
    b57c:	012e012e 	.word	0x012e012e
    b580:	00ec00e8 	.word	0x00ec00e8
    b584:	012e012e 	.word	0x012e012e
    b588:	012e012e 	.word	0x012e012e
    b58c:	012e012e 	.word	0x012e012e
    b590:	012e012e 	.word	0x012e012e
    b594:	012e012e 	.word	0x012e012e
    b598:	012e012e 	.word	0x012e012e
    b59c:	00ee012e 	.word	0x00ee012e
    b5a0:	00f00108 	.word	0x00f00108
    b5a4:	012e00f2 	.word	0x012e00f2
    b5a8:	012e012e 	.word	0x012e012e
    b5ac:	012e00f4 	.word	0x012e00f4
    b5b0:	012e012e 	.word	0x012e012e
    b5b4:	012e00f6 	.word	0x012e00f6
    b5b8:	00fa012e 	.word	0x00fa012e
    b5bc:	012e012e 	.word	0x012e012e
    b5c0:	012e00fc 	.word	0x012e00fc
    b5c4:	012e012e 	.word	0x012e012e
    b5c8:	012e012e 	.word	0x012e012e
    b5cc:	012e012e 	.word	0x012e012e
    b5d0:	012e012e 	.word	0x012e012e
    b5d4:	00fe012e 	.word	0x00fe012e
    b5d8:	0100012e 	.word	0x0100012e
    b5dc:	01040102 	.word	0x01040102
    b5e0:	012e012e 	.word	0x012e012e
    b5e4:	012e0126 	.word	0x012e0126
    b5e8:	012e012e 	.word	0x012e012e
    b5ec:	012e012e 	.word	0x012e012e
    b5f0:	012e012e 	.word	0x012e012e
    b5f4:	0114012e 	.word	0x0114012e
    b5f8:	010a0106 	.word	0x010a0106
    b5fc:	010e010c 	.word	0x010e010c
    b600:	012e0110 	.word	0x012e0110
    b604:	01160112 	.word	0x01160112
    b608:	00ea011a 	.word	0x00ea011a
    b60c:	012c00c2 	.word	0x012c00c2
    b610:	00d000ba 	.word	0x00d000ba
    b614:	00a000bc 	.word	0x00a000bc
    b618:	012a00a6 	.word	0x012a00a6
    b61c:	012e00f8 	.word	0x012e00f8
    b620:	00c40118 	.word	0x00c40118
    b624:	011c011e 	.word	0x011c011e
    b628:	012e012e 	.word	0x012e012e
    b62c:	012e012e 	.word	0x012e012e
    b630:	00d4012e 	.word	0x00d4012e
    b634:	012e012e 	.word	0x012e012e
    b638:	00e6012e 	.word	0x00e6012e
    b63c:	01200128 	.word	0x01200128
    b640:	01240122 	.word	0x01240122
    b644:	4b55      	ldr	r3, [pc, #340]	; (b79c <_strerror_r+0x288>)
    b646:	4618      	mov	r0, r3
    b648:	bd10      	pop	{r4, pc}
    b64a:	4b55      	ldr	r3, [pc, #340]	; (b7a0 <_strerror_r+0x28c>)
    b64c:	e7fb      	b.n	b646 <_strerror_r+0x132>
    b64e:	4b55      	ldr	r3, [pc, #340]	; (b7a4 <_strerror_r+0x290>)
    b650:	e7f9      	b.n	b646 <_strerror_r+0x132>
    b652:	4b55      	ldr	r3, [pc, #340]	; (b7a8 <_strerror_r+0x294>)
    b654:	e7f7      	b.n	b646 <_strerror_r+0x132>
    b656:	4b55      	ldr	r3, [pc, #340]	; (b7ac <_strerror_r+0x298>)
    b658:	e7f5      	b.n	b646 <_strerror_r+0x132>
    b65a:	4b55      	ldr	r3, [pc, #340]	; (b7b0 <_strerror_r+0x29c>)
    b65c:	e7f3      	b.n	b646 <_strerror_r+0x132>
    b65e:	4b55      	ldr	r3, [pc, #340]	; (b7b4 <_strerror_r+0x2a0>)
    b660:	e7f1      	b.n	b646 <_strerror_r+0x132>
    b662:	4b55      	ldr	r3, [pc, #340]	; (b7b8 <_strerror_r+0x2a4>)
    b664:	e7ef      	b.n	b646 <_strerror_r+0x132>
    b666:	4b55      	ldr	r3, [pc, #340]	; (b7bc <_strerror_r+0x2a8>)
    b668:	e7ed      	b.n	b646 <_strerror_r+0x132>
    b66a:	4b55      	ldr	r3, [pc, #340]	; (b7c0 <_strerror_r+0x2ac>)
    b66c:	e7eb      	b.n	b646 <_strerror_r+0x132>
    b66e:	4b55      	ldr	r3, [pc, #340]	; (b7c4 <_strerror_r+0x2b0>)
    b670:	e7e9      	b.n	b646 <_strerror_r+0x132>
    b672:	4b55      	ldr	r3, [pc, #340]	; (b7c8 <_strerror_r+0x2b4>)
    b674:	e7e7      	b.n	b646 <_strerror_r+0x132>
    b676:	4b55      	ldr	r3, [pc, #340]	; (b7cc <_strerror_r+0x2b8>)
    b678:	e7e5      	b.n	b646 <_strerror_r+0x132>
    b67a:	4b55      	ldr	r3, [pc, #340]	; (b7d0 <_strerror_r+0x2bc>)
    b67c:	e7e3      	b.n	b646 <_strerror_r+0x132>
    b67e:	4b55      	ldr	r3, [pc, #340]	; (b7d4 <_strerror_r+0x2c0>)
    b680:	e7e1      	b.n	b646 <_strerror_r+0x132>
    b682:	4b55      	ldr	r3, [pc, #340]	; (b7d8 <_strerror_r+0x2c4>)
    b684:	e7df      	b.n	b646 <_strerror_r+0x132>
    b686:	4b55      	ldr	r3, [pc, #340]	; (b7dc <_strerror_r+0x2c8>)
    b688:	e7dd      	b.n	b646 <_strerror_r+0x132>
    b68a:	4b55      	ldr	r3, [pc, #340]	; (b7e0 <_strerror_r+0x2cc>)
    b68c:	e7db      	b.n	b646 <_strerror_r+0x132>
    b68e:	4b55      	ldr	r3, [pc, #340]	; (b7e4 <_strerror_r+0x2d0>)
    b690:	e7d9      	b.n	b646 <_strerror_r+0x132>
    b692:	4b55      	ldr	r3, [pc, #340]	; (b7e8 <_strerror_r+0x2d4>)
    b694:	e7d7      	b.n	b646 <_strerror_r+0x132>
    b696:	4b55      	ldr	r3, [pc, #340]	; (b7ec <_strerror_r+0x2d8>)
    b698:	e7d5      	b.n	b646 <_strerror_r+0x132>
    b69a:	4b55      	ldr	r3, [pc, #340]	; (b7f0 <_strerror_r+0x2dc>)
    b69c:	e7d3      	b.n	b646 <_strerror_r+0x132>
    b69e:	4b55      	ldr	r3, [pc, #340]	; (b7f4 <_strerror_r+0x2e0>)
    b6a0:	e7d1      	b.n	b646 <_strerror_r+0x132>
    b6a2:	4b55      	ldr	r3, [pc, #340]	; (b7f8 <_strerror_r+0x2e4>)
    b6a4:	e7cf      	b.n	b646 <_strerror_r+0x132>
    b6a6:	4b55      	ldr	r3, [pc, #340]	; (b7fc <_strerror_r+0x2e8>)
    b6a8:	e7cd      	b.n	b646 <_strerror_r+0x132>
    b6aa:	4b55      	ldr	r3, [pc, #340]	; (b800 <_strerror_r+0x2ec>)
    b6ac:	e7cb      	b.n	b646 <_strerror_r+0x132>
    b6ae:	4b55      	ldr	r3, [pc, #340]	; (b804 <_strerror_r+0x2f0>)
    b6b0:	e7c9      	b.n	b646 <_strerror_r+0x132>
    b6b2:	4b55      	ldr	r3, [pc, #340]	; (b808 <_strerror_r+0x2f4>)
    b6b4:	e7c7      	b.n	b646 <_strerror_r+0x132>
    b6b6:	4b55      	ldr	r3, [pc, #340]	; (b80c <_strerror_r+0x2f8>)
    b6b8:	e7c5      	b.n	b646 <_strerror_r+0x132>
    b6ba:	4b55      	ldr	r3, [pc, #340]	; (b810 <_strerror_r+0x2fc>)
    b6bc:	e7c3      	b.n	b646 <_strerror_r+0x132>
    b6be:	4b55      	ldr	r3, [pc, #340]	; (b814 <_strerror_r+0x300>)
    b6c0:	e7c1      	b.n	b646 <_strerror_r+0x132>
    b6c2:	4b55      	ldr	r3, [pc, #340]	; (b818 <_strerror_r+0x304>)
    b6c4:	e7bf      	b.n	b646 <_strerror_r+0x132>
    b6c6:	4b55      	ldr	r3, [pc, #340]	; (b81c <_strerror_r+0x308>)
    b6c8:	e7bd      	b.n	b646 <_strerror_r+0x132>
    b6ca:	4b55      	ldr	r3, [pc, #340]	; (b820 <_strerror_r+0x30c>)
    b6cc:	e7bb      	b.n	b646 <_strerror_r+0x132>
    b6ce:	4b55      	ldr	r3, [pc, #340]	; (b824 <_strerror_r+0x310>)
    b6d0:	e7b9      	b.n	b646 <_strerror_r+0x132>
    b6d2:	4b55      	ldr	r3, [pc, #340]	; (b828 <_strerror_r+0x314>)
    b6d4:	e7b7      	b.n	b646 <_strerror_r+0x132>
    b6d6:	4b55      	ldr	r3, [pc, #340]	; (b82c <_strerror_r+0x318>)
    b6d8:	e7b5      	b.n	b646 <_strerror_r+0x132>
    b6da:	4b55      	ldr	r3, [pc, #340]	; (b830 <_strerror_r+0x31c>)
    b6dc:	e7b3      	b.n	b646 <_strerror_r+0x132>
    b6de:	4b55      	ldr	r3, [pc, #340]	; (b834 <_strerror_r+0x320>)
    b6e0:	e7b1      	b.n	b646 <_strerror_r+0x132>
    b6e2:	4b55      	ldr	r3, [pc, #340]	; (b838 <_strerror_r+0x324>)
    b6e4:	e7af      	b.n	b646 <_strerror_r+0x132>
    b6e6:	4b55      	ldr	r3, [pc, #340]	; (b83c <_strerror_r+0x328>)
    b6e8:	e7ad      	b.n	b646 <_strerror_r+0x132>
    b6ea:	4b55      	ldr	r3, [pc, #340]	; (b840 <_strerror_r+0x32c>)
    b6ec:	e7ab      	b.n	b646 <_strerror_r+0x132>
    b6ee:	4b55      	ldr	r3, [pc, #340]	; (b844 <_strerror_r+0x330>)
    b6f0:	e7a9      	b.n	b646 <_strerror_r+0x132>
    b6f2:	4b55      	ldr	r3, [pc, #340]	; (b848 <_strerror_r+0x334>)
    b6f4:	e7a7      	b.n	b646 <_strerror_r+0x132>
    b6f6:	4b55      	ldr	r3, [pc, #340]	; (b84c <_strerror_r+0x338>)
    b6f8:	e7a5      	b.n	b646 <_strerror_r+0x132>
    b6fa:	4b55      	ldr	r3, [pc, #340]	; (b850 <_strerror_r+0x33c>)
    b6fc:	e7a3      	b.n	b646 <_strerror_r+0x132>
    b6fe:	4b55      	ldr	r3, [pc, #340]	; (b854 <_strerror_r+0x340>)
    b700:	e7a1      	b.n	b646 <_strerror_r+0x132>
    b702:	4b55      	ldr	r3, [pc, #340]	; (b858 <_strerror_r+0x344>)
    b704:	e79f      	b.n	b646 <_strerror_r+0x132>
    b706:	4b55      	ldr	r3, [pc, #340]	; (b85c <_strerror_r+0x348>)
    b708:	e79d      	b.n	b646 <_strerror_r+0x132>
    b70a:	4b55      	ldr	r3, [pc, #340]	; (b860 <_strerror_r+0x34c>)
    b70c:	e79b      	b.n	b646 <_strerror_r+0x132>
    b70e:	4b55      	ldr	r3, [pc, #340]	; (b864 <_strerror_r+0x350>)
    b710:	e799      	b.n	b646 <_strerror_r+0x132>
    b712:	4b55      	ldr	r3, [pc, #340]	; (b868 <_strerror_r+0x354>)
    b714:	e797      	b.n	b646 <_strerror_r+0x132>
    b716:	4b55      	ldr	r3, [pc, #340]	; (b86c <_strerror_r+0x358>)
    b718:	e795      	b.n	b646 <_strerror_r+0x132>
    b71a:	4b55      	ldr	r3, [pc, #340]	; (b870 <_strerror_r+0x35c>)
    b71c:	e793      	b.n	b646 <_strerror_r+0x132>
    b71e:	4b55      	ldr	r3, [pc, #340]	; (b874 <_strerror_r+0x360>)
    b720:	e791      	b.n	b646 <_strerror_r+0x132>
    b722:	4b55      	ldr	r3, [pc, #340]	; (b878 <_strerror_r+0x364>)
    b724:	e78f      	b.n	b646 <_strerror_r+0x132>
    b726:	4b55      	ldr	r3, [pc, #340]	; (b87c <_strerror_r+0x368>)
    b728:	e78d      	b.n	b646 <_strerror_r+0x132>
    b72a:	4b55      	ldr	r3, [pc, #340]	; (b880 <_strerror_r+0x36c>)
    b72c:	e78b      	b.n	b646 <_strerror_r+0x132>
    b72e:	4b55      	ldr	r3, [pc, #340]	; (b884 <_strerror_r+0x370>)
    b730:	e789      	b.n	b646 <_strerror_r+0x132>
    b732:	4b55      	ldr	r3, [pc, #340]	; (b888 <_strerror_r+0x374>)
    b734:	e787      	b.n	b646 <_strerror_r+0x132>
    b736:	4b55      	ldr	r3, [pc, #340]	; (b88c <_strerror_r+0x378>)
    b738:	e785      	b.n	b646 <_strerror_r+0x132>
    b73a:	4b55      	ldr	r3, [pc, #340]	; (b890 <_strerror_r+0x37c>)
    b73c:	e783      	b.n	b646 <_strerror_r+0x132>
    b73e:	4b55      	ldr	r3, [pc, #340]	; (b894 <_strerror_r+0x380>)
    b740:	e781      	b.n	b646 <_strerror_r+0x132>
    b742:	4b55      	ldr	r3, [pc, #340]	; (b898 <_strerror_r+0x384>)
    b744:	e77f      	b.n	b646 <_strerror_r+0x132>
    b746:	4b55      	ldr	r3, [pc, #340]	; (b89c <_strerror_r+0x388>)
    b748:	e77d      	b.n	b646 <_strerror_r+0x132>
    b74a:	4b55      	ldr	r3, [pc, #340]	; (b8a0 <_strerror_r+0x38c>)
    b74c:	e77b      	b.n	b646 <_strerror_r+0x132>
    b74e:	4b55      	ldr	r3, [pc, #340]	; (b8a4 <_strerror_r+0x390>)
    b750:	e779      	b.n	b646 <_strerror_r+0x132>
    b752:	4b55      	ldr	r3, [pc, #340]	; (b8a8 <_strerror_r+0x394>)
    b754:	e777      	b.n	b646 <_strerror_r+0x132>
    b756:	4b55      	ldr	r3, [pc, #340]	; (b8ac <_strerror_r+0x398>)
    b758:	e775      	b.n	b646 <_strerror_r+0x132>
    b75a:	4b55      	ldr	r3, [pc, #340]	; (b8b0 <_strerror_r+0x39c>)
    b75c:	e773      	b.n	b646 <_strerror_r+0x132>
    b75e:	4b55      	ldr	r3, [pc, #340]	; (b8b4 <_strerror_r+0x3a0>)
    b760:	e771      	b.n	b646 <_strerror_r+0x132>
    b762:	4b55      	ldr	r3, [pc, #340]	; (b8b8 <_strerror_r+0x3a4>)
    b764:	e76f      	b.n	b646 <_strerror_r+0x132>
    b766:	4b55      	ldr	r3, [pc, #340]	; (b8bc <_strerror_r+0x3a8>)
    b768:	e76d      	b.n	b646 <_strerror_r+0x132>
    b76a:	4b55      	ldr	r3, [pc, #340]	; (b8c0 <_strerror_r+0x3ac>)
    b76c:	e76b      	b.n	b646 <_strerror_r+0x132>
    b76e:	4b55      	ldr	r3, [pc, #340]	; (b8c4 <_strerror_r+0x3b0>)
    b770:	e769      	b.n	b646 <_strerror_r+0x132>
    b772:	4b55      	ldr	r3, [pc, #340]	; (b8c8 <_strerror_r+0x3b4>)
    b774:	e767      	b.n	b646 <_strerror_r+0x132>
    b776:	4b55      	ldr	r3, [pc, #340]	; (b8cc <_strerror_r+0x3b8>)
    b778:	e765      	b.n	b646 <_strerror_r+0x132>
    b77a:	4b55      	ldr	r3, [pc, #340]	; (b8d0 <_strerror_r+0x3bc>)
    b77c:	e763      	b.n	b646 <_strerror_r+0x132>
    b77e:	4b55      	ldr	r3, [pc, #340]	; (b8d4 <_strerror_r+0x3c0>)
    b780:	e761      	b.n	b646 <_strerror_r+0x132>
    b782:	2b00      	cmp	r3, #0
    b784:	bf14      	ite	ne
    b786:	461a      	movne	r2, r3
    b788:	4622      	moveq	r2, r4
    b78a:	f002 faaa 	bl	dce2 <_user_strerror>
    b78e:	4b52      	ldr	r3, [pc, #328]	; (b8d8 <_strerror_r+0x3c4>)
    b790:	2800      	cmp	r0, #0
    b792:	bf18      	it	ne
    b794:	4603      	movne	r3, r0
    b796:	e756      	b.n	b646 <_strerror_r+0x132>
    b798:	4b50      	ldr	r3, [pc, #320]	; (b8dc <_strerror_r+0x3c8>)
    b79a:	e754      	b.n	b646 <_strerror_r+0x132>
    b79c:	000106f8 	.word	0x000106f8
    b7a0:	00010702 	.word	0x00010702
    b7a4:	0001071c 	.word	0x0001071c
    b7a8:	0001072c 	.word	0x0001072c
    b7ac:	00010744 	.word	0x00010744
    b7b0:	0001074e 	.word	0x0001074e
    b7b4:	00010768 	.word	0x00010768
    b7b8:	0001077a 	.word	0x0001077a
    b7bc:	0001078c 	.word	0x0001078c
    b7c0:	000107a5 	.word	0x000107a5
    b7c4:	000107b5 	.word	0x000107b5
    b7c8:	000107c1 	.word	0x000107c1
    b7cc:	000107de 	.word	0x000107de
    b7d0:	000107f0 	.word	0x000107f0
    b7d4:	00010801 	.word	0x00010801
    b7d8:	00010813 	.word	0x00010813
    b7dc:	0001081f 	.word	0x0001081f
    b7e0:	00010837 	.word	0x00010837
    b7e4:	00010843 	.word	0x00010843
    b7e8:	00010855 	.word	0x00010855
    b7ec:	00010864 	.word	0x00010864
    b7f0:	00010874 	.word	0x00010874
    b7f4:	00010881 	.word	0x00010881
    b7f8:	000108a0 	.word	0x000108a0
    b7fc:	000108af 	.word	0x000108af
    b800:	000108c0 	.word	0x000108c0
    b804:	000108e4 	.word	0x000108e4
    b808:	00010902 	.word	0x00010902
    b80c:	00010920 	.word	0x00010920
    b810:	00010940 	.word	0x00010940
    b814:	00010957 	.word	0x00010957
    b818:	00010966 	.word	0x00010966
    b81c:	00010975 	.word	0x00010975
    b820:	00010989 	.word	0x00010989
    b824:	000109a1 	.word	0x000109a1
    b828:	000109af 	.word	0x000109af
    b82c:	000109bc 	.word	0x000109bc
    b830:	000109d2 	.word	0x000109d2
    b834:	000109e1 	.word	0x000109e1
    b838:	000109ed 	.word	0x000109ed
    b83c:	00010a1c 	.word	0x00010a1c
    b840:	00010a2d 	.word	0x00010a2d
    b844:	00010a48 	.word	0x00010a48
    b848:	00010a5b 	.word	0x00010a5b
    b84c:	00010a71 	.word	0x00010a71
    b850:	00010a7a 	.word	0x00010a7a
    b854:	00010a91 	.word	0x00010a91
    b858:	00010a99 	.word	0x00010a99
    b85c:	00010aa6 	.word	0x00010aa6
    b860:	00010abb 	.word	0x00010abb
    b864:	00010acf 	.word	0x00010acf
    b868:	00010ae7 	.word	0x00010ae7
    b86c:	00010af6 	.word	0x00010af6
    b870:	00010b07 	.word	0x00010b07
    b874:	00010b1a 	.word	0x00010b1a
    b878:	00010b26 	.word	0x00010b26
    b87c:	00010b3f 	.word	0x00010b3f
    b880:	00010b53 	.word	0x00010b53
    b884:	00010b6e 	.word	0x00010b6e
    b888:	00010b86 	.word	0x00010b86
    b88c:	00010ba0 	.word	0x00010ba0
    b890:	00010ba8 	.word	0x00010ba8
    b894:	00010bd8 	.word	0x00010bd8
    b898:	00010bf7 	.word	0x00010bf7
    b89c:	00010c16 	.word	0x00010c16
    b8a0:	00010c2d 	.word	0x00010c2d
    b8a4:	00010c40 	.word	0x00010c40
    b8a8:	00010c59 	.word	0x00010c59
    b8ac:	00010c70 	.word	0x00010c70
    b8b0:	00010c86 	.word	0x00010c86
    b8b4:	00010ca7 	.word	0x00010ca7
    b8b8:	00010cbf 	.word	0x00010cbf
    b8bc:	00010cdb 	.word	0x00010cdb
    b8c0:	00010cee 	.word	0x00010cee
    b8c4:	00010d04 	.word	0x00010d04
    b8c8:	00010d18 	.word	0x00010d18
    b8cc:	00010d3a 	.word	0x00010d3a
    b8d0:	00010d60 	.word	0x00010d60
    b8d4:	00010d71 	.word	0x00010d71
    b8d8:	00010365 	.word	0x00010365
    b8dc:	00010d86 	.word	0x00010d86

0000b8e0 <_write_r>:
    b8e0:	b538      	push	{r3, r4, r5, lr}
    b8e2:	4d07      	ldr	r5, [pc, #28]	; (b900 <_write_r+0x20>)
    b8e4:	4604      	mov	r4, r0
    b8e6:	4608      	mov	r0, r1
    b8e8:	4611      	mov	r1, r2
    b8ea:	2200      	movs	r2, #0
    b8ec:	602a      	str	r2, [r5, #0]
    b8ee:	461a      	mov	r2, r3
    b8f0:	f001 fba8 	bl	d044 <_write>
    b8f4:	1c43      	adds	r3, r0, #1
    b8f6:	d102      	bne.n	b8fe <_write_r+0x1e>
    b8f8:	682b      	ldr	r3, [r5, #0]
    b8fa:	b103      	cbz	r3, b8fe <_write_r+0x1e>
    b8fc:	6023      	str	r3, [r4, #0]
    b8fe:	bd38      	pop	{r3, r4, r5, pc}
    b900:	20001118 	.word	0x20001118

0000b904 <__sflush_r>:
    b904:	898a      	ldrh	r2, [r1, #12]
    b906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b908:	4605      	mov	r5, r0
    b90a:	0710      	lsls	r0, r2, #28
    b90c:	460c      	mov	r4, r1
    b90e:	d457      	bmi.n	b9c0 <__sflush_r+0xbc>
    b910:	684b      	ldr	r3, [r1, #4]
    b912:	2b00      	cmp	r3, #0
    b914:	dc04      	bgt.n	b920 <__sflush_r+0x1c>
    b916:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    b918:	2b00      	cmp	r3, #0
    b91a:	dc01      	bgt.n	b920 <__sflush_r+0x1c>
    b91c:	2000      	movs	r0, #0
    b91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    b922:	2e00      	cmp	r6, #0
    b924:	d0fa      	beq.n	b91c <__sflush_r+0x18>
    b926:	2300      	movs	r3, #0
    b928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    b92c:	682f      	ldr	r7, [r5, #0]
    b92e:	602b      	str	r3, [r5, #0]
    b930:	d032      	beq.n	b998 <__sflush_r+0x94>
    b932:	6d60      	ldr	r0, [r4, #84]	; 0x54
    b934:	89a3      	ldrh	r3, [r4, #12]
    b936:	075a      	lsls	r2, r3, #29
    b938:	d505      	bpl.n	b946 <__sflush_r+0x42>
    b93a:	6863      	ldr	r3, [r4, #4]
    b93c:	1ac0      	subs	r0, r0, r3
    b93e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b940:	b10b      	cbz	r3, b946 <__sflush_r+0x42>
    b942:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b944:	1ac0      	subs	r0, r0, r3
    b946:	2300      	movs	r3, #0
    b948:	4602      	mov	r2, r0
    b94a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    b94c:	6a21      	ldr	r1, [r4, #32]
    b94e:	4628      	mov	r0, r5
    b950:	47b0      	blx	r6
    b952:	1c43      	adds	r3, r0, #1
    b954:	89a3      	ldrh	r3, [r4, #12]
    b956:	d106      	bne.n	b966 <__sflush_r+0x62>
    b958:	6829      	ldr	r1, [r5, #0]
    b95a:	291d      	cmp	r1, #29
    b95c:	d82c      	bhi.n	b9b8 <__sflush_r+0xb4>
    b95e:	4a29      	ldr	r2, [pc, #164]	; (ba04 <__sflush_r+0x100>)
    b960:	40ca      	lsrs	r2, r1
    b962:	07d6      	lsls	r6, r2, #31
    b964:	d528      	bpl.n	b9b8 <__sflush_r+0xb4>
    b966:	2200      	movs	r2, #0
    b968:	6062      	str	r2, [r4, #4]
    b96a:	04d9      	lsls	r1, r3, #19
    b96c:	6922      	ldr	r2, [r4, #16]
    b96e:	6022      	str	r2, [r4, #0]
    b970:	d504      	bpl.n	b97c <__sflush_r+0x78>
    b972:	1c42      	adds	r2, r0, #1
    b974:	d101      	bne.n	b97a <__sflush_r+0x76>
    b976:	682b      	ldr	r3, [r5, #0]
    b978:	b903      	cbnz	r3, b97c <__sflush_r+0x78>
    b97a:	6560      	str	r0, [r4, #84]	; 0x54
    b97c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b97e:	602f      	str	r7, [r5, #0]
    b980:	2900      	cmp	r1, #0
    b982:	d0cb      	beq.n	b91c <__sflush_r+0x18>
    b984:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b988:	4299      	cmp	r1, r3
    b98a:	d002      	beq.n	b992 <__sflush_r+0x8e>
    b98c:	4628      	mov	r0, r5
    b98e:	f7ff f903 	bl	ab98 <_free_r>
    b992:	2000      	movs	r0, #0
    b994:	6360      	str	r0, [r4, #52]	; 0x34
    b996:	e7c2      	b.n	b91e <__sflush_r+0x1a>
    b998:	6a21      	ldr	r1, [r4, #32]
    b99a:	2301      	movs	r3, #1
    b99c:	4628      	mov	r0, r5
    b99e:	47b0      	blx	r6
    b9a0:	1c41      	adds	r1, r0, #1
    b9a2:	d1c7      	bne.n	b934 <__sflush_r+0x30>
    b9a4:	682b      	ldr	r3, [r5, #0]
    b9a6:	2b00      	cmp	r3, #0
    b9a8:	d0c4      	beq.n	b934 <__sflush_r+0x30>
    b9aa:	2b1d      	cmp	r3, #29
    b9ac:	d001      	beq.n	b9b2 <__sflush_r+0xae>
    b9ae:	2b16      	cmp	r3, #22
    b9b0:	d101      	bne.n	b9b6 <__sflush_r+0xb2>
    b9b2:	602f      	str	r7, [r5, #0]
    b9b4:	e7b2      	b.n	b91c <__sflush_r+0x18>
    b9b6:	89a3      	ldrh	r3, [r4, #12]
    b9b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b9bc:	81a3      	strh	r3, [r4, #12]
    b9be:	e7ae      	b.n	b91e <__sflush_r+0x1a>
    b9c0:	690f      	ldr	r7, [r1, #16]
    b9c2:	2f00      	cmp	r7, #0
    b9c4:	d0aa      	beq.n	b91c <__sflush_r+0x18>
    b9c6:	0793      	lsls	r3, r2, #30
    b9c8:	680e      	ldr	r6, [r1, #0]
    b9ca:	bf08      	it	eq
    b9cc:	694b      	ldreq	r3, [r1, #20]
    b9ce:	600f      	str	r7, [r1, #0]
    b9d0:	bf18      	it	ne
    b9d2:	2300      	movne	r3, #0
    b9d4:	1bf6      	subs	r6, r6, r7
    b9d6:	608b      	str	r3, [r1, #8]
    b9d8:	2e00      	cmp	r6, #0
    b9da:	dd9f      	ble.n	b91c <__sflush_r+0x18>
    b9dc:	6a21      	ldr	r1, [r4, #32]
    b9de:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    b9e2:	4633      	mov	r3, r6
    b9e4:	463a      	mov	r2, r7
    b9e6:	4628      	mov	r0, r5
    b9e8:	47e0      	blx	ip
    b9ea:	2800      	cmp	r0, #0
    b9ec:	dc06      	bgt.n	b9fc <__sflush_r+0xf8>
    b9ee:	89a3      	ldrh	r3, [r4, #12]
    b9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b9f4:	81a3      	strh	r3, [r4, #12]
    b9f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b9fa:	e790      	b.n	b91e <__sflush_r+0x1a>
    b9fc:	4407      	add	r7, r0
    b9fe:	1a36      	subs	r6, r6, r0
    ba00:	e7ea      	b.n	b9d8 <__sflush_r+0xd4>
    ba02:	bf00      	nop
    ba04:	20400001 	.word	0x20400001

0000ba08 <_fflush_r>:
    ba08:	b538      	push	{r3, r4, r5, lr}
    ba0a:	690b      	ldr	r3, [r1, #16]
    ba0c:	4605      	mov	r5, r0
    ba0e:	460c      	mov	r4, r1
    ba10:	b913      	cbnz	r3, ba18 <_fflush_r+0x10>
    ba12:	2500      	movs	r5, #0
    ba14:	4628      	mov	r0, r5
    ba16:	bd38      	pop	{r3, r4, r5, pc}
    ba18:	b118      	cbz	r0, ba22 <_fflush_r+0x1a>
    ba1a:	6983      	ldr	r3, [r0, #24]
    ba1c:	b90b      	cbnz	r3, ba22 <_fflush_r+0x1a>
    ba1e:	f000 f8af 	bl	bb80 <__sinit>
    ba22:	4b14      	ldr	r3, [pc, #80]	; (ba74 <_fflush_r+0x6c>)
    ba24:	429c      	cmp	r4, r3
    ba26:	d11b      	bne.n	ba60 <_fflush_r+0x58>
    ba28:	686c      	ldr	r4, [r5, #4]
    ba2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ba2e:	2b00      	cmp	r3, #0
    ba30:	d0ef      	beq.n	ba12 <_fflush_r+0xa>
    ba32:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ba34:	07d0      	lsls	r0, r2, #31
    ba36:	d404      	bmi.n	ba42 <_fflush_r+0x3a>
    ba38:	0599      	lsls	r1, r3, #22
    ba3a:	d402      	bmi.n	ba42 <_fflush_r+0x3a>
    ba3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ba3e:	f7f9 feab 	bl	5798 <__retarget_lock_acquire_recursive>
    ba42:	4628      	mov	r0, r5
    ba44:	4621      	mov	r1, r4
    ba46:	f7ff ff5d 	bl	b904 <__sflush_r>
    ba4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ba4c:	07da      	lsls	r2, r3, #31
    ba4e:	4605      	mov	r5, r0
    ba50:	d4e0      	bmi.n	ba14 <_fflush_r+0xc>
    ba52:	89a3      	ldrh	r3, [r4, #12]
    ba54:	059b      	lsls	r3, r3, #22
    ba56:	d4dd      	bmi.n	ba14 <_fflush_r+0xc>
    ba58:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ba5a:	f7f9 febb 	bl	57d4 <__retarget_lock_release_recursive>
    ba5e:	e7d9      	b.n	ba14 <_fflush_r+0xc>
    ba60:	4b05      	ldr	r3, [pc, #20]	; (ba78 <_fflush_r+0x70>)
    ba62:	429c      	cmp	r4, r3
    ba64:	d101      	bne.n	ba6a <_fflush_r+0x62>
    ba66:	68ac      	ldr	r4, [r5, #8]
    ba68:	e7df      	b.n	ba2a <_fflush_r+0x22>
    ba6a:	4b04      	ldr	r3, [pc, #16]	; (ba7c <_fflush_r+0x74>)
    ba6c:	429c      	cmp	r4, r3
    ba6e:	bf08      	it	eq
    ba70:	68ec      	ldreq	r4, [r5, #12]
    ba72:	e7da      	b.n	ba2a <_fflush_r+0x22>
    ba74:	0000e814 	.word	0x0000e814
    ba78:	0000e834 	.word	0x0000e834
    ba7c:	0000e7f4 	.word	0x0000e7f4

0000ba80 <fileno>:
    ba80:	b570      	push	{r4, r5, r6, lr}
    ba82:	4e1a      	ldr	r6, [pc, #104]	; (baec <fileno+0x6c>)
    ba84:	6835      	ldr	r5, [r6, #0]
    ba86:	4604      	mov	r4, r0
    ba88:	b125      	cbz	r5, ba94 <fileno+0x14>
    ba8a:	69ab      	ldr	r3, [r5, #24]
    ba8c:	b913      	cbnz	r3, ba94 <fileno+0x14>
    ba8e:	4628      	mov	r0, r5
    ba90:	f000 f876 	bl	bb80 <__sinit>
    ba94:	4b16      	ldr	r3, [pc, #88]	; (baf0 <fileno+0x70>)
    ba96:	429c      	cmp	r4, r3
    ba98:	d118      	bne.n	bacc <fileno+0x4c>
    ba9a:	686c      	ldr	r4, [r5, #4]
    ba9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ba9e:	07d8      	lsls	r0, r3, #31
    baa0:	d405      	bmi.n	baae <fileno+0x2e>
    baa2:	89a3      	ldrh	r3, [r4, #12]
    baa4:	0599      	lsls	r1, r3, #22
    baa6:	d402      	bmi.n	baae <fileno+0x2e>
    baa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    baaa:	f7f9 fe75 	bl	5798 <__retarget_lock_acquire_recursive>
    baae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bab2:	b1ab      	cbz	r3, bae0 <fileno+0x60>
    bab4:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
    bab8:	6e62      	ldr	r2, [r4, #100]	; 0x64
    baba:	07d2      	lsls	r2, r2, #31
    babc:	d404      	bmi.n	bac8 <fileno+0x48>
    babe:	059b      	lsls	r3, r3, #22
    bac0:	d402      	bmi.n	bac8 <fileno+0x48>
    bac2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bac4:	f7f9 fe86 	bl	57d4 <__retarget_lock_release_recursive>
    bac8:	4628      	mov	r0, r5
    baca:	bd70      	pop	{r4, r5, r6, pc}
    bacc:	4b09      	ldr	r3, [pc, #36]	; (baf4 <fileno+0x74>)
    bace:	429c      	cmp	r4, r3
    bad0:	d101      	bne.n	bad6 <fileno+0x56>
    bad2:	68ac      	ldr	r4, [r5, #8]
    bad4:	e7e2      	b.n	ba9c <fileno+0x1c>
    bad6:	4b08      	ldr	r3, [pc, #32]	; (baf8 <fileno+0x78>)
    bad8:	429c      	cmp	r4, r3
    bada:	bf08      	it	eq
    badc:	68ec      	ldreq	r4, [r5, #12]
    bade:	e7dd      	b.n	ba9c <fileno+0x1c>
    bae0:	6832      	ldr	r2, [r6, #0]
    bae2:	2109      	movs	r1, #9
    bae4:	6011      	str	r1, [r2, #0]
    bae6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    baea:	e7e5      	b.n	bab8 <fileno+0x38>
    baec:	20000188 	.word	0x20000188
    baf0:	0000e814 	.word	0x0000e814
    baf4:	0000e834 	.word	0x0000e834
    baf8:	0000e7f4 	.word	0x0000e7f4

0000bafc <std>:
    bafc:	2300      	movs	r3, #0
    bafe:	b510      	push	{r4, lr}
    bb00:	4604      	mov	r4, r0
    bb02:	e9c0 3300 	strd	r3, r3, [r0]
    bb06:	e9c0 3304 	strd	r3, r3, [r0, #16]
    bb0a:	6083      	str	r3, [r0, #8]
    bb0c:	8181      	strh	r1, [r0, #12]
    bb0e:	6643      	str	r3, [r0, #100]	; 0x64
    bb10:	81c2      	strh	r2, [r0, #14]
    bb12:	6183      	str	r3, [r0, #24]
    bb14:	4619      	mov	r1, r3
    bb16:	2208      	movs	r2, #8
    bb18:	305c      	adds	r0, #92	; 0x5c
    bb1a:	f001 ffbb 	bl	da94 <memset>
    bb1e:	4b05      	ldr	r3, [pc, #20]	; (bb34 <std+0x38>)
    bb20:	6263      	str	r3, [r4, #36]	; 0x24
    bb22:	4b05      	ldr	r3, [pc, #20]	; (bb38 <std+0x3c>)
    bb24:	62a3      	str	r3, [r4, #40]	; 0x28
    bb26:	4b05      	ldr	r3, [pc, #20]	; (bb3c <std+0x40>)
    bb28:	62e3      	str	r3, [r4, #44]	; 0x2c
    bb2a:	4b05      	ldr	r3, [pc, #20]	; (bb40 <std+0x44>)
    bb2c:	6224      	str	r4, [r4, #32]
    bb2e:	6323      	str	r3, [r4, #48]	; 0x30
    bb30:	bd10      	pop	{r4, pc}
    bb32:	bf00      	nop
    bb34:	0000df99 	.word	0x0000df99
    bb38:	0000dfbb 	.word	0x0000dfbb
    bb3c:	0000dff3 	.word	0x0000dff3
    bb40:	0000e017 	.word	0x0000e017

0000bb44 <_cleanup_r>:
    bb44:	4901      	ldr	r1, [pc, #4]	; (bb4c <_cleanup_r+0x8>)
    bb46:	f002 b96b 	b.w	de20 <_fwalk_reent>
    bb4a:	bf00      	nop
    bb4c:	0000ba09 	.word	0x0000ba09

0000bb50 <__sfp_lock_acquire>:
    bb50:	4801      	ldr	r0, [pc, #4]	; (bb58 <__sfp_lock_acquire+0x8>)
    bb52:	f7f9 be21 	b.w	5798 <__retarget_lock_acquire_recursive>
    bb56:	bf00      	nop
    bb58:	200003fc 	.word	0x200003fc

0000bb5c <__sfp_lock_release>:
    bb5c:	4801      	ldr	r0, [pc, #4]	; (bb64 <__sfp_lock_release+0x8>)
    bb5e:	f7f9 be39 	b.w	57d4 <__retarget_lock_release_recursive>
    bb62:	bf00      	nop
    bb64:	200003fc 	.word	0x200003fc

0000bb68 <__sinit_lock_acquire>:
    bb68:	4801      	ldr	r0, [pc, #4]	; (bb70 <__sinit_lock_acquire+0x8>)
    bb6a:	f7f9 be15 	b.w	5798 <__retarget_lock_acquire_recursive>
    bb6e:	bf00      	nop
    bb70:	20000410 	.word	0x20000410

0000bb74 <__sinit_lock_release>:
    bb74:	4801      	ldr	r0, [pc, #4]	; (bb7c <__sinit_lock_release+0x8>)
    bb76:	f7f9 be2d 	b.w	57d4 <__retarget_lock_release_recursive>
    bb7a:	bf00      	nop
    bb7c:	20000410 	.word	0x20000410

0000bb80 <__sinit>:
    bb80:	b510      	push	{r4, lr}
    bb82:	4604      	mov	r4, r0
    bb84:	f7ff fff0 	bl	bb68 <__sinit_lock_acquire>
    bb88:	69a3      	ldr	r3, [r4, #24]
    bb8a:	b11b      	cbz	r3, bb94 <__sinit+0x14>
    bb8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb90:	f7ff bff0 	b.w	bb74 <__sinit_lock_release>
    bb94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    bb98:	6523      	str	r3, [r4, #80]	; 0x50
    bb9a:	4b13      	ldr	r3, [pc, #76]	; (bbe8 <__sinit+0x68>)
    bb9c:	4a13      	ldr	r2, [pc, #76]	; (bbec <__sinit+0x6c>)
    bb9e:	681b      	ldr	r3, [r3, #0]
    bba0:	62a2      	str	r2, [r4, #40]	; 0x28
    bba2:	42a3      	cmp	r3, r4
    bba4:	bf04      	itt	eq
    bba6:	2301      	moveq	r3, #1
    bba8:	61a3      	streq	r3, [r4, #24]
    bbaa:	4620      	mov	r0, r4
    bbac:	f000 f820 	bl	bbf0 <__sfp>
    bbb0:	6060      	str	r0, [r4, #4]
    bbb2:	4620      	mov	r0, r4
    bbb4:	f000 f81c 	bl	bbf0 <__sfp>
    bbb8:	60a0      	str	r0, [r4, #8]
    bbba:	4620      	mov	r0, r4
    bbbc:	f000 f818 	bl	bbf0 <__sfp>
    bbc0:	2200      	movs	r2, #0
    bbc2:	60e0      	str	r0, [r4, #12]
    bbc4:	2104      	movs	r1, #4
    bbc6:	6860      	ldr	r0, [r4, #4]
    bbc8:	f7ff ff98 	bl	bafc <std>
    bbcc:	68a0      	ldr	r0, [r4, #8]
    bbce:	2201      	movs	r2, #1
    bbd0:	2109      	movs	r1, #9
    bbd2:	f7ff ff93 	bl	bafc <std>
    bbd6:	68e0      	ldr	r0, [r4, #12]
    bbd8:	2202      	movs	r2, #2
    bbda:	2112      	movs	r1, #18
    bbdc:	f7ff ff8e 	bl	bafc <std>
    bbe0:	2301      	movs	r3, #1
    bbe2:	61a3      	str	r3, [r4, #24]
    bbe4:	e7d2      	b.n	bb8c <__sinit+0xc>
    bbe6:	bf00      	nop
    bbe8:	0000e7f0 	.word	0x0000e7f0
    bbec:	0000bb45 	.word	0x0000bb45

0000bbf0 <__sfp>:
    bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbf2:	4607      	mov	r7, r0
    bbf4:	f7ff ffac 	bl	bb50 <__sfp_lock_acquire>
    bbf8:	4b1e      	ldr	r3, [pc, #120]	; (bc74 <__sfp+0x84>)
    bbfa:	681e      	ldr	r6, [r3, #0]
    bbfc:	69b3      	ldr	r3, [r6, #24]
    bbfe:	b913      	cbnz	r3, bc06 <__sfp+0x16>
    bc00:	4630      	mov	r0, r6
    bc02:	f7ff ffbd 	bl	bb80 <__sinit>
    bc06:	3648      	adds	r6, #72	; 0x48
    bc08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    bc0c:	3b01      	subs	r3, #1
    bc0e:	d503      	bpl.n	bc18 <__sfp+0x28>
    bc10:	6833      	ldr	r3, [r6, #0]
    bc12:	b30b      	cbz	r3, bc58 <__sfp+0x68>
    bc14:	6836      	ldr	r6, [r6, #0]
    bc16:	e7f7      	b.n	bc08 <__sfp+0x18>
    bc18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    bc1c:	b9d5      	cbnz	r5, bc54 <__sfp+0x64>
    bc1e:	4b16      	ldr	r3, [pc, #88]	; (bc78 <__sfp+0x88>)
    bc20:	60e3      	str	r3, [r4, #12]
    bc22:	f104 0058 	add.w	r0, r4, #88	; 0x58
    bc26:	6665      	str	r5, [r4, #100]	; 0x64
    bc28:	f7f9 fd84 	bl	5734 <__retarget_lock_init_recursive>
    bc2c:	f7ff ff96 	bl	bb5c <__sfp_lock_release>
    bc30:	e9c4 5501 	strd	r5, r5, [r4, #4]
    bc34:	e9c4 5504 	strd	r5, r5, [r4, #16]
    bc38:	6025      	str	r5, [r4, #0]
    bc3a:	61a5      	str	r5, [r4, #24]
    bc3c:	2208      	movs	r2, #8
    bc3e:	4629      	mov	r1, r5
    bc40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    bc44:	f001 ff26 	bl	da94 <memset>
    bc48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    bc4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    bc50:	4620      	mov	r0, r4
    bc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc54:	3468      	adds	r4, #104	; 0x68
    bc56:	e7d9      	b.n	bc0c <__sfp+0x1c>
    bc58:	2104      	movs	r1, #4
    bc5a:	4638      	mov	r0, r7
    bc5c:	f002 f8ca 	bl	ddf4 <__sfmoreglue>
    bc60:	4604      	mov	r4, r0
    bc62:	6030      	str	r0, [r6, #0]
    bc64:	2800      	cmp	r0, #0
    bc66:	d1d5      	bne.n	bc14 <__sfp+0x24>
    bc68:	f7ff ff78 	bl	bb5c <__sfp_lock_release>
    bc6c:	230c      	movs	r3, #12
    bc6e:	603b      	str	r3, [r7, #0]
    bc70:	e7ee      	b.n	bc50 <__sfp+0x60>
    bc72:	bf00      	nop
    bc74:	0000e7f0 	.word	0x0000e7f0
    bc78:	ffff0001 	.word	0xffff0001

0000bc7c <_localeconv_r>:
    bc7c:	4800      	ldr	r0, [pc, #0]	; (bc80 <_localeconv_r+0x4>)
    bc7e:	4770      	bx	lr
    bc80:	200002dc 	.word	0x200002dc

0000bc84 <__malloc_lock>:
    bc84:	4801      	ldr	r0, [pc, #4]	; (bc8c <__malloc_lock+0x8>)
    bc86:	f7f9 bd87 	b.w	5798 <__retarget_lock_acquire_recursive>
    bc8a:	bf00      	nop
    bc8c:	200003e8 	.word	0x200003e8

0000bc90 <__malloc_unlock>:
    bc90:	4801      	ldr	r0, [pc, #4]	; (bc98 <__malloc_unlock+0x8>)
    bc92:	f7f9 bd9f 	b.w	57d4 <__retarget_lock_release_recursive>
    bc96:	bf00      	nop
    bc98:	200003e8 	.word	0x200003e8

0000bc9c <_Balloc>:
    bc9c:	b570      	push	{r4, r5, r6, lr}
    bc9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
    bca0:	4604      	mov	r4, r0
    bca2:	460d      	mov	r5, r1
    bca4:	b976      	cbnz	r6, bcc4 <_Balloc+0x28>
    bca6:	2010      	movs	r0, #16
    bca8:	f7fe ff66 	bl	ab78 <malloc>
    bcac:	4602      	mov	r2, r0
    bcae:	6260      	str	r0, [r4, #36]	; 0x24
    bcb0:	b920      	cbnz	r0, bcbc <_Balloc+0x20>
    bcb2:	4b18      	ldr	r3, [pc, #96]	; (bd14 <_Balloc+0x78>)
    bcb4:	4818      	ldr	r0, [pc, #96]	; (bd18 <_Balloc+0x7c>)
    bcb6:	2166      	movs	r1, #102	; 0x66
    bcb8:	f000 fcf4 	bl	c6a4 <__assert_func>
    bcbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
    bcc0:	6006      	str	r6, [r0, #0]
    bcc2:	60c6      	str	r6, [r0, #12]
    bcc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
    bcc6:	68f3      	ldr	r3, [r6, #12]
    bcc8:	b183      	cbz	r3, bcec <_Balloc+0x50>
    bcca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bccc:	68db      	ldr	r3, [r3, #12]
    bcce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    bcd2:	b9b8      	cbnz	r0, bd04 <_Balloc+0x68>
    bcd4:	2101      	movs	r1, #1
    bcd6:	fa01 f605 	lsl.w	r6, r1, r5
    bcda:	1d72      	adds	r2, r6, #5
    bcdc:	0092      	lsls	r2, r2, #2
    bcde:	4620      	mov	r0, r4
    bce0:	f002 f925 	bl	df2e <_calloc_r>
    bce4:	b160      	cbz	r0, bd00 <_Balloc+0x64>
    bce6:	e9c0 5601 	strd	r5, r6, [r0, #4]
    bcea:	e00e      	b.n	bd0a <_Balloc+0x6e>
    bcec:	2221      	movs	r2, #33	; 0x21
    bcee:	2104      	movs	r1, #4
    bcf0:	4620      	mov	r0, r4
    bcf2:	f002 f91c 	bl	df2e <_calloc_r>
    bcf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bcf8:	60f0      	str	r0, [r6, #12]
    bcfa:	68db      	ldr	r3, [r3, #12]
    bcfc:	2b00      	cmp	r3, #0
    bcfe:	d1e4      	bne.n	bcca <_Balloc+0x2e>
    bd00:	2000      	movs	r0, #0
    bd02:	bd70      	pop	{r4, r5, r6, pc}
    bd04:	6802      	ldr	r2, [r0, #0]
    bd06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    bd0a:	2300      	movs	r3, #0
    bd0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    bd10:	e7f7      	b.n	bd02 <_Balloc+0x66>
    bd12:	bf00      	nop
    bd14:	00010d9b 	.word	0x00010d9b
    bd18:	00010e1f 	.word	0x00010e1f

0000bd1c <_Bfree>:
    bd1c:	b570      	push	{r4, r5, r6, lr}
    bd1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
    bd20:	4605      	mov	r5, r0
    bd22:	460c      	mov	r4, r1
    bd24:	b976      	cbnz	r6, bd44 <_Bfree+0x28>
    bd26:	2010      	movs	r0, #16
    bd28:	f7fe ff26 	bl	ab78 <malloc>
    bd2c:	4602      	mov	r2, r0
    bd2e:	6268      	str	r0, [r5, #36]	; 0x24
    bd30:	b920      	cbnz	r0, bd3c <_Bfree+0x20>
    bd32:	4b09      	ldr	r3, [pc, #36]	; (bd58 <_Bfree+0x3c>)
    bd34:	4809      	ldr	r0, [pc, #36]	; (bd5c <_Bfree+0x40>)
    bd36:	218a      	movs	r1, #138	; 0x8a
    bd38:	f000 fcb4 	bl	c6a4 <__assert_func>
    bd3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
    bd40:	6006      	str	r6, [r0, #0]
    bd42:	60c6      	str	r6, [r0, #12]
    bd44:	b13c      	cbz	r4, bd56 <_Bfree+0x3a>
    bd46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    bd48:	6862      	ldr	r2, [r4, #4]
    bd4a:	68db      	ldr	r3, [r3, #12]
    bd4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    bd50:	6021      	str	r1, [r4, #0]
    bd52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    bd56:	bd70      	pop	{r4, r5, r6, pc}
    bd58:	00010d9b 	.word	0x00010d9b
    bd5c:	00010e1f 	.word	0x00010e1f

0000bd60 <__multadd>:
    bd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd64:	690d      	ldr	r5, [r1, #16]
    bd66:	4607      	mov	r7, r0
    bd68:	460c      	mov	r4, r1
    bd6a:	461e      	mov	r6, r3
    bd6c:	f101 0c14 	add.w	ip, r1, #20
    bd70:	2000      	movs	r0, #0
    bd72:	f8dc 3000 	ldr.w	r3, [ip]
    bd76:	b299      	uxth	r1, r3
    bd78:	fb02 6101 	mla	r1, r2, r1, r6
    bd7c:	0c1e      	lsrs	r6, r3, #16
    bd7e:	0c0b      	lsrs	r3, r1, #16
    bd80:	fb02 3306 	mla	r3, r2, r6, r3
    bd84:	b289      	uxth	r1, r1
    bd86:	3001      	adds	r0, #1
    bd88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    bd8c:	4285      	cmp	r5, r0
    bd8e:	f84c 1b04 	str.w	r1, [ip], #4
    bd92:	ea4f 4613 	mov.w	r6, r3, lsr #16
    bd96:	dcec      	bgt.n	bd72 <__multadd+0x12>
    bd98:	b30e      	cbz	r6, bdde <__multadd+0x7e>
    bd9a:	68a3      	ldr	r3, [r4, #8]
    bd9c:	42ab      	cmp	r3, r5
    bd9e:	dc19      	bgt.n	bdd4 <__multadd+0x74>
    bda0:	6861      	ldr	r1, [r4, #4]
    bda2:	4638      	mov	r0, r7
    bda4:	3101      	adds	r1, #1
    bda6:	f7ff ff79 	bl	bc9c <_Balloc>
    bdaa:	4680      	mov	r8, r0
    bdac:	b928      	cbnz	r0, bdba <__multadd+0x5a>
    bdae:	4602      	mov	r2, r0
    bdb0:	4b0c      	ldr	r3, [pc, #48]	; (bde4 <__multadd+0x84>)
    bdb2:	480d      	ldr	r0, [pc, #52]	; (bde8 <__multadd+0x88>)
    bdb4:	21b5      	movs	r1, #181	; 0xb5
    bdb6:	f000 fc75 	bl	c6a4 <__assert_func>
    bdba:	6922      	ldr	r2, [r4, #16]
    bdbc:	3202      	adds	r2, #2
    bdbe:	f104 010c 	add.w	r1, r4, #12
    bdc2:	0092      	lsls	r2, r2, #2
    bdc4:	300c      	adds	r0, #12
    bdc6:	f001 fe57 	bl	da78 <memcpy>
    bdca:	4621      	mov	r1, r4
    bdcc:	4638      	mov	r0, r7
    bdce:	f7ff ffa5 	bl	bd1c <_Bfree>
    bdd2:	4644      	mov	r4, r8
    bdd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    bdd8:	3501      	adds	r5, #1
    bdda:	615e      	str	r6, [r3, #20]
    bddc:	6125      	str	r5, [r4, #16]
    bdde:	4620      	mov	r0, r4
    bde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bde4:	00010e0e 	.word	0x00010e0e
    bde8:	00010e1f 	.word	0x00010e1f

0000bdec <__i2b>:
    bdec:	b510      	push	{r4, lr}
    bdee:	460c      	mov	r4, r1
    bdf0:	2101      	movs	r1, #1
    bdf2:	f7ff ff53 	bl	bc9c <_Balloc>
    bdf6:	4602      	mov	r2, r0
    bdf8:	b928      	cbnz	r0, be06 <__i2b+0x1a>
    bdfa:	4b05      	ldr	r3, [pc, #20]	; (be10 <__i2b+0x24>)
    bdfc:	4805      	ldr	r0, [pc, #20]	; (be14 <__i2b+0x28>)
    bdfe:	f44f 71a0 	mov.w	r1, #320	; 0x140
    be02:	f000 fc4f 	bl	c6a4 <__assert_func>
    be06:	2301      	movs	r3, #1
    be08:	6144      	str	r4, [r0, #20]
    be0a:	6103      	str	r3, [r0, #16]
    be0c:	bd10      	pop	{r4, pc}
    be0e:	bf00      	nop
    be10:	00010e0e 	.word	0x00010e0e
    be14:	00010e1f 	.word	0x00010e1f

0000be18 <__multiply>:
    be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be1c:	4691      	mov	r9, r2
    be1e:	690a      	ldr	r2, [r1, #16]
    be20:	f8d9 3010 	ldr.w	r3, [r9, #16]
    be24:	429a      	cmp	r2, r3
    be26:	bfb8      	it	lt
    be28:	460b      	movlt	r3, r1
    be2a:	460c      	mov	r4, r1
    be2c:	bfbc      	itt	lt
    be2e:	464c      	movlt	r4, r9
    be30:	4699      	movlt	r9, r3
    be32:	6927      	ldr	r7, [r4, #16]
    be34:	f8d9 a010 	ldr.w	sl, [r9, #16]
    be38:	68a3      	ldr	r3, [r4, #8]
    be3a:	6861      	ldr	r1, [r4, #4]
    be3c:	eb07 060a 	add.w	r6, r7, sl
    be40:	42b3      	cmp	r3, r6
    be42:	b085      	sub	sp, #20
    be44:	bfb8      	it	lt
    be46:	3101      	addlt	r1, #1
    be48:	f7ff ff28 	bl	bc9c <_Balloc>
    be4c:	b930      	cbnz	r0, be5c <__multiply+0x44>
    be4e:	4602      	mov	r2, r0
    be50:	4b43      	ldr	r3, [pc, #268]	; (bf60 <__multiply+0x148>)
    be52:	4844      	ldr	r0, [pc, #272]	; (bf64 <__multiply+0x14c>)
    be54:	f240 115d 	movw	r1, #349	; 0x15d
    be58:	f000 fc24 	bl	c6a4 <__assert_func>
    be5c:	f100 0514 	add.w	r5, r0, #20
    be60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    be64:	462b      	mov	r3, r5
    be66:	2200      	movs	r2, #0
    be68:	4543      	cmp	r3, r8
    be6a:	d321      	bcc.n	beb0 <__multiply+0x98>
    be6c:	f104 0314 	add.w	r3, r4, #20
    be70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    be74:	f109 0314 	add.w	r3, r9, #20
    be78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
    be7c:	9202      	str	r2, [sp, #8]
    be7e:	1b3a      	subs	r2, r7, r4
    be80:	3a15      	subs	r2, #21
    be82:	f022 0203 	bic.w	r2, r2, #3
    be86:	3204      	adds	r2, #4
    be88:	f104 0115 	add.w	r1, r4, #21
    be8c:	428f      	cmp	r7, r1
    be8e:	bf38      	it	cc
    be90:	2204      	movcc	r2, #4
    be92:	9201      	str	r2, [sp, #4]
    be94:	9a02      	ldr	r2, [sp, #8]
    be96:	9303      	str	r3, [sp, #12]
    be98:	429a      	cmp	r2, r3
    be9a:	d80c      	bhi.n	beb6 <__multiply+0x9e>
    be9c:	2e00      	cmp	r6, #0
    be9e:	dd03      	ble.n	bea8 <__multiply+0x90>
    bea0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    bea4:	2b00      	cmp	r3, #0
    bea6:	d059      	beq.n	bf5c <__multiply+0x144>
    bea8:	6106      	str	r6, [r0, #16]
    beaa:	b005      	add	sp, #20
    beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    beb0:	f843 2b04 	str.w	r2, [r3], #4
    beb4:	e7d8      	b.n	be68 <__multiply+0x50>
    beb6:	f8b3 a000 	ldrh.w	sl, [r3]
    beba:	f1ba 0f00 	cmp.w	sl, #0
    bebe:	d023      	beq.n	bf08 <__multiply+0xf0>
    bec0:	f104 0e14 	add.w	lr, r4, #20
    bec4:	46a9      	mov	r9, r5
    bec6:	f04f 0c00 	mov.w	ip, #0
    beca:	f85e 2b04 	ldr.w	r2, [lr], #4
    bece:	f8d9 1000 	ldr.w	r1, [r9]
    bed2:	fa1f fb82 	uxth.w	fp, r2
    bed6:	b289      	uxth	r1, r1
    bed8:	fb0a 110b 	mla	r1, sl, fp, r1
    bedc:	4461      	add	r1, ip
    bede:	f8d9 c000 	ldr.w	ip, [r9]
    bee2:	0c12      	lsrs	r2, r2, #16
    bee4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    bee8:	fb0a c202 	mla	r2, sl, r2, ip
    beec:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    bef0:	b289      	uxth	r1, r1
    bef2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    bef6:	4577      	cmp	r7, lr
    bef8:	f849 1b04 	str.w	r1, [r9], #4
    befc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    bf00:	d8e3      	bhi.n	beca <__multiply+0xb2>
    bf02:	9a01      	ldr	r2, [sp, #4]
    bf04:	f845 c002 	str.w	ip, [r5, r2]
    bf08:	9a03      	ldr	r2, [sp, #12]
    bf0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
    bf0e:	3304      	adds	r3, #4
    bf10:	f1b9 0f00 	cmp.w	r9, #0
    bf14:	d020      	beq.n	bf58 <__multiply+0x140>
    bf16:	6829      	ldr	r1, [r5, #0]
    bf18:	f104 0c14 	add.w	ip, r4, #20
    bf1c:	46ae      	mov	lr, r5
    bf1e:	f04f 0a00 	mov.w	sl, #0
    bf22:	f8bc b000 	ldrh.w	fp, [ip]
    bf26:	f8be 2002 	ldrh.w	r2, [lr, #2]
    bf2a:	fb09 220b 	mla	r2, r9, fp, r2
    bf2e:	4492      	add	sl, r2
    bf30:	b289      	uxth	r1, r1
    bf32:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    bf36:	f84e 1b04 	str.w	r1, [lr], #4
    bf3a:	f85c 2b04 	ldr.w	r2, [ip], #4
    bf3e:	f8be 1000 	ldrh.w	r1, [lr]
    bf42:	0c12      	lsrs	r2, r2, #16
    bf44:	fb09 1102 	mla	r1, r9, r2, r1
    bf48:	eb01 411a 	add.w	r1, r1, sl, lsr #16
    bf4c:	4567      	cmp	r7, ip
    bf4e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
    bf52:	d8e6      	bhi.n	bf22 <__multiply+0x10a>
    bf54:	9a01      	ldr	r2, [sp, #4]
    bf56:	50a9      	str	r1, [r5, r2]
    bf58:	3504      	adds	r5, #4
    bf5a:	e79b      	b.n	be94 <__multiply+0x7c>
    bf5c:	3e01      	subs	r6, #1
    bf5e:	e79d      	b.n	be9c <__multiply+0x84>
    bf60:	00010e0e 	.word	0x00010e0e
    bf64:	00010e1f 	.word	0x00010e1f

0000bf68 <__pow5mult>:
    bf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bf6c:	4615      	mov	r5, r2
    bf6e:	f012 0203 	ands.w	r2, r2, #3
    bf72:	4606      	mov	r6, r0
    bf74:	460f      	mov	r7, r1
    bf76:	d007      	beq.n	bf88 <__pow5mult+0x20>
    bf78:	4c25      	ldr	r4, [pc, #148]	; (c010 <__pow5mult+0xa8>)
    bf7a:	3a01      	subs	r2, #1
    bf7c:	2300      	movs	r3, #0
    bf7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    bf82:	f7ff feed 	bl	bd60 <__multadd>
    bf86:	4607      	mov	r7, r0
    bf88:	10ad      	asrs	r5, r5, #2
    bf8a:	d03d      	beq.n	c008 <__pow5mult+0xa0>
    bf8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
    bf8e:	b97c      	cbnz	r4, bfb0 <__pow5mult+0x48>
    bf90:	2010      	movs	r0, #16
    bf92:	f7fe fdf1 	bl	ab78 <malloc>
    bf96:	4602      	mov	r2, r0
    bf98:	6270      	str	r0, [r6, #36]	; 0x24
    bf9a:	b928      	cbnz	r0, bfa8 <__pow5mult+0x40>
    bf9c:	4b1d      	ldr	r3, [pc, #116]	; (c014 <__pow5mult+0xac>)
    bf9e:	481e      	ldr	r0, [pc, #120]	; (c018 <__pow5mult+0xb0>)
    bfa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    bfa4:	f000 fb7e 	bl	c6a4 <__assert_func>
    bfa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
    bfac:	6004      	str	r4, [r0, #0]
    bfae:	60c4      	str	r4, [r0, #12]
    bfb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    bfb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
    bfb8:	b94c      	cbnz	r4, bfce <__pow5mult+0x66>
    bfba:	f240 2171 	movw	r1, #625	; 0x271
    bfbe:	4630      	mov	r0, r6
    bfc0:	f7ff ff14 	bl	bdec <__i2b>
    bfc4:	2300      	movs	r3, #0
    bfc6:	f8c8 0008 	str.w	r0, [r8, #8]
    bfca:	4604      	mov	r4, r0
    bfcc:	6003      	str	r3, [r0, #0]
    bfce:	f04f 0900 	mov.w	r9, #0
    bfd2:	07eb      	lsls	r3, r5, #31
    bfd4:	d50a      	bpl.n	bfec <__pow5mult+0x84>
    bfd6:	4639      	mov	r1, r7
    bfd8:	4622      	mov	r2, r4
    bfda:	4630      	mov	r0, r6
    bfdc:	f7ff ff1c 	bl	be18 <__multiply>
    bfe0:	4639      	mov	r1, r7
    bfe2:	4680      	mov	r8, r0
    bfe4:	4630      	mov	r0, r6
    bfe6:	f7ff fe99 	bl	bd1c <_Bfree>
    bfea:	4647      	mov	r7, r8
    bfec:	106d      	asrs	r5, r5, #1
    bfee:	d00b      	beq.n	c008 <__pow5mult+0xa0>
    bff0:	6820      	ldr	r0, [r4, #0]
    bff2:	b938      	cbnz	r0, c004 <__pow5mult+0x9c>
    bff4:	4622      	mov	r2, r4
    bff6:	4621      	mov	r1, r4
    bff8:	4630      	mov	r0, r6
    bffa:	f7ff ff0d 	bl	be18 <__multiply>
    bffe:	6020      	str	r0, [r4, #0]
    c000:	f8c0 9000 	str.w	r9, [r0]
    c004:	4604      	mov	r4, r0
    c006:	e7e4      	b.n	bfd2 <__pow5mult+0x6a>
    c008:	4638      	mov	r0, r7
    c00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c00e:	bf00      	nop
    c010:	0000e854 	.word	0x0000e854
    c014:	00010d9b 	.word	0x00010d9b
    c018:	00010e1f 	.word	0x00010e1f

0000c01c <__lshift>:
    c01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c020:	460c      	mov	r4, r1
    c022:	6849      	ldr	r1, [r1, #4]
    c024:	6923      	ldr	r3, [r4, #16]
    c026:	eb03 1862 	add.w	r8, r3, r2, asr #5
    c02a:	68a3      	ldr	r3, [r4, #8]
    c02c:	4607      	mov	r7, r0
    c02e:	4691      	mov	r9, r2
    c030:	ea4f 1a62 	mov.w	sl, r2, asr #5
    c034:	f108 0601 	add.w	r6, r8, #1
    c038:	42b3      	cmp	r3, r6
    c03a:	db0b      	blt.n	c054 <__lshift+0x38>
    c03c:	4638      	mov	r0, r7
    c03e:	f7ff fe2d 	bl	bc9c <_Balloc>
    c042:	4605      	mov	r5, r0
    c044:	b948      	cbnz	r0, c05a <__lshift+0x3e>
    c046:	4602      	mov	r2, r0
    c048:	4b2a      	ldr	r3, [pc, #168]	; (c0f4 <__lshift+0xd8>)
    c04a:	482b      	ldr	r0, [pc, #172]	; (c0f8 <__lshift+0xdc>)
    c04c:	f240 11d9 	movw	r1, #473	; 0x1d9
    c050:	f000 fb28 	bl	c6a4 <__assert_func>
    c054:	3101      	adds	r1, #1
    c056:	005b      	lsls	r3, r3, #1
    c058:	e7ee      	b.n	c038 <__lshift+0x1c>
    c05a:	2300      	movs	r3, #0
    c05c:	f100 0114 	add.w	r1, r0, #20
    c060:	f100 0210 	add.w	r2, r0, #16
    c064:	4618      	mov	r0, r3
    c066:	4553      	cmp	r3, sl
    c068:	db37      	blt.n	c0da <__lshift+0xbe>
    c06a:	6920      	ldr	r0, [r4, #16]
    c06c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    c070:	f104 0314 	add.w	r3, r4, #20
    c074:	f019 091f 	ands.w	r9, r9, #31
    c078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
    c07c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    c080:	d02f      	beq.n	c0e2 <__lshift+0xc6>
    c082:	f1c9 0e20 	rsb	lr, r9, #32
    c086:	468a      	mov	sl, r1
    c088:	f04f 0c00 	mov.w	ip, #0
    c08c:	681a      	ldr	r2, [r3, #0]
    c08e:	fa02 f209 	lsl.w	r2, r2, r9
    c092:	ea42 020c 	orr.w	r2, r2, ip
    c096:	f84a 2b04 	str.w	r2, [sl], #4
    c09a:	f853 2b04 	ldr.w	r2, [r3], #4
    c09e:	4298      	cmp	r0, r3
    c0a0:	fa22 fc0e 	lsr.w	ip, r2, lr
    c0a4:	d8f2      	bhi.n	c08c <__lshift+0x70>
    c0a6:	1b03      	subs	r3, r0, r4
    c0a8:	3b15      	subs	r3, #21
    c0aa:	f023 0303 	bic.w	r3, r3, #3
    c0ae:	3304      	adds	r3, #4
    c0b0:	f104 0215 	add.w	r2, r4, #21
    c0b4:	4290      	cmp	r0, r2
    c0b6:	bf38      	it	cc
    c0b8:	2304      	movcc	r3, #4
    c0ba:	f841 c003 	str.w	ip, [r1, r3]
    c0be:	f1bc 0f00 	cmp.w	ip, #0
    c0c2:	d001      	beq.n	c0c8 <__lshift+0xac>
    c0c4:	f108 0602 	add.w	r6, r8, #2
    c0c8:	3e01      	subs	r6, #1
    c0ca:	4638      	mov	r0, r7
    c0cc:	612e      	str	r6, [r5, #16]
    c0ce:	4621      	mov	r1, r4
    c0d0:	f7ff fe24 	bl	bd1c <_Bfree>
    c0d4:	4628      	mov	r0, r5
    c0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c0da:	f842 0f04 	str.w	r0, [r2, #4]!
    c0de:	3301      	adds	r3, #1
    c0e0:	e7c1      	b.n	c066 <__lshift+0x4a>
    c0e2:	3904      	subs	r1, #4
    c0e4:	f853 2b04 	ldr.w	r2, [r3], #4
    c0e8:	f841 2f04 	str.w	r2, [r1, #4]!
    c0ec:	4298      	cmp	r0, r3
    c0ee:	d8f9      	bhi.n	c0e4 <__lshift+0xc8>
    c0f0:	e7ea      	b.n	c0c8 <__lshift+0xac>
    c0f2:	bf00      	nop
    c0f4:	00010e0e 	.word	0x00010e0e
    c0f8:	00010e1f 	.word	0x00010e1f

0000c0fc <__mdiff>:
    c0fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c100:	460d      	mov	r5, r1
    c102:	4607      	mov	r7, r0
    c104:	4611      	mov	r1, r2
    c106:	4628      	mov	r0, r5
    c108:	4614      	mov	r4, r2
    c10a:	f001 fef5 	bl	def8 <__mcmp>
    c10e:	1e06      	subs	r6, r0, #0
    c110:	d111      	bne.n	c136 <__mdiff+0x3a>
    c112:	4631      	mov	r1, r6
    c114:	4638      	mov	r0, r7
    c116:	f7ff fdc1 	bl	bc9c <_Balloc>
    c11a:	4602      	mov	r2, r0
    c11c:	b928      	cbnz	r0, c12a <__mdiff+0x2e>
    c11e:	4b39      	ldr	r3, [pc, #228]	; (c204 <__mdiff+0x108>)
    c120:	f240 2132 	movw	r1, #562	; 0x232
    c124:	4838      	ldr	r0, [pc, #224]	; (c208 <__mdiff+0x10c>)
    c126:	f000 fabd 	bl	c6a4 <__assert_func>
    c12a:	2301      	movs	r3, #1
    c12c:	e9c0 3604 	strd	r3, r6, [r0, #16]
    c130:	4610      	mov	r0, r2
    c132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c136:	bfa4      	itt	ge
    c138:	4623      	movge	r3, r4
    c13a:	462c      	movge	r4, r5
    c13c:	4638      	mov	r0, r7
    c13e:	6861      	ldr	r1, [r4, #4]
    c140:	bfa6      	itte	ge
    c142:	461d      	movge	r5, r3
    c144:	2600      	movge	r6, #0
    c146:	2601      	movlt	r6, #1
    c148:	f7ff fda8 	bl	bc9c <_Balloc>
    c14c:	4602      	mov	r2, r0
    c14e:	b918      	cbnz	r0, c158 <__mdiff+0x5c>
    c150:	4b2c      	ldr	r3, [pc, #176]	; (c204 <__mdiff+0x108>)
    c152:	f44f 7110 	mov.w	r1, #576	; 0x240
    c156:	e7e5      	b.n	c124 <__mdiff+0x28>
    c158:	6927      	ldr	r7, [r4, #16]
    c15a:	60c6      	str	r6, [r0, #12]
    c15c:	692e      	ldr	r6, [r5, #16]
    c15e:	f104 0014 	add.w	r0, r4, #20
    c162:	f105 0914 	add.w	r9, r5, #20
    c166:	f102 0e14 	add.w	lr, r2, #20
    c16a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
    c16e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
    c172:	3410      	adds	r4, #16
    c174:	46f2      	mov	sl, lr
    c176:	2100      	movs	r1, #0
    c178:	f859 3b04 	ldr.w	r3, [r9], #4
    c17c:	f854 bf04 	ldr.w	fp, [r4, #4]!
    c180:	fa1f f883 	uxth.w	r8, r3
    c184:	fa11 f18b 	uxtah	r1, r1, fp
    c188:	0c1b      	lsrs	r3, r3, #16
    c18a:	eba1 0808 	sub.w	r8, r1, r8
    c18e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
    c192:	eb03 4328 	add.w	r3, r3, r8, asr #16
    c196:	fa1f f888 	uxth.w	r8, r8
    c19a:	1419      	asrs	r1, r3, #16
    c19c:	454e      	cmp	r6, r9
    c19e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    c1a2:	f84a 3b04 	str.w	r3, [sl], #4
    c1a6:	d8e7      	bhi.n	c178 <__mdiff+0x7c>
    c1a8:	1b73      	subs	r3, r6, r5
    c1aa:	3b15      	subs	r3, #21
    c1ac:	f023 0303 	bic.w	r3, r3, #3
    c1b0:	3304      	adds	r3, #4
    c1b2:	3515      	adds	r5, #21
    c1b4:	42ae      	cmp	r6, r5
    c1b6:	bf38      	it	cc
    c1b8:	2304      	movcc	r3, #4
    c1ba:	4418      	add	r0, r3
    c1bc:	4473      	add	r3, lr
    c1be:	469e      	mov	lr, r3
    c1c0:	4606      	mov	r6, r0
    c1c2:	4566      	cmp	r6, ip
    c1c4:	d30e      	bcc.n	c1e4 <__mdiff+0xe8>
    c1c6:	f10c 0103 	add.w	r1, ip, #3
    c1ca:	1a09      	subs	r1, r1, r0
    c1cc:	f021 0103 	bic.w	r1, r1, #3
    c1d0:	3803      	subs	r0, #3
    c1d2:	4584      	cmp	ip, r0
    c1d4:	bf38      	it	cc
    c1d6:	2100      	movcc	r1, #0
    c1d8:	4419      	add	r1, r3
    c1da:	f851 3d04 	ldr.w	r3, [r1, #-4]!
    c1de:	b17b      	cbz	r3, c200 <__mdiff+0x104>
    c1e0:	6117      	str	r7, [r2, #16]
    c1e2:	e7a5      	b.n	c130 <__mdiff+0x34>
    c1e4:	f856 8b04 	ldr.w	r8, [r6], #4
    c1e8:	fa11 f488 	uxtah	r4, r1, r8
    c1ec:	1425      	asrs	r5, r4, #16
    c1ee:	eb05 4518 	add.w	r5, r5, r8, lsr #16
    c1f2:	b2a4      	uxth	r4, r4
    c1f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    c1f8:	f84e 4b04 	str.w	r4, [lr], #4
    c1fc:	1429      	asrs	r1, r5, #16
    c1fe:	e7e0      	b.n	c1c2 <__mdiff+0xc6>
    c200:	3f01      	subs	r7, #1
    c202:	e7ea      	b.n	c1da <__mdiff+0xde>
    c204:	00010e0e 	.word	0x00010e0e
    c208:	00010e1f 	.word	0x00010e1f

0000c20c <__d2b>:
    c20c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c210:	2101      	movs	r1, #1
    c212:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    c216:	4690      	mov	r8, r2
    c218:	461d      	mov	r5, r3
    c21a:	f7ff fd3f 	bl	bc9c <_Balloc>
    c21e:	4604      	mov	r4, r0
    c220:	b930      	cbnz	r0, c230 <__d2b+0x24>
    c222:	4602      	mov	r2, r0
    c224:	4b25      	ldr	r3, [pc, #148]	; (c2bc <__d2b+0xb0>)
    c226:	4826      	ldr	r0, [pc, #152]	; (c2c0 <__d2b+0xb4>)
    c228:	f240 310a 	movw	r1, #778	; 0x30a
    c22c:	f000 fa3a 	bl	c6a4 <__assert_func>
    c230:	f3c5 0313 	ubfx	r3, r5, #0, #20
    c234:	f3c5 550a 	ubfx	r5, r5, #20, #11
    c238:	bb2d      	cbnz	r5, c286 <__d2b+0x7a>
    c23a:	9301      	str	r3, [sp, #4]
    c23c:	f1b8 0300 	subs.w	r3, r8, #0
    c240:	d026      	beq.n	c290 <__d2b+0x84>
    c242:	4668      	mov	r0, sp
    c244:	9300      	str	r3, [sp, #0]
    c246:	f001 fe2a 	bl	de9e <__lo0bits>
    c24a:	9900      	ldr	r1, [sp, #0]
    c24c:	b1f0      	cbz	r0, c28c <__d2b+0x80>
    c24e:	9a01      	ldr	r2, [sp, #4]
    c250:	f1c0 0320 	rsb	r3, r0, #32
    c254:	fa02 f303 	lsl.w	r3, r2, r3
    c258:	430b      	orrs	r3, r1
    c25a:	40c2      	lsrs	r2, r0
    c25c:	6163      	str	r3, [r4, #20]
    c25e:	9201      	str	r2, [sp, #4]
    c260:	9b01      	ldr	r3, [sp, #4]
    c262:	61a3      	str	r3, [r4, #24]
    c264:	2b00      	cmp	r3, #0
    c266:	bf14      	ite	ne
    c268:	2102      	movne	r1, #2
    c26a:	2101      	moveq	r1, #1
    c26c:	6121      	str	r1, [r4, #16]
    c26e:	b1c5      	cbz	r5, c2a2 <__d2b+0x96>
    c270:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    c274:	4405      	add	r5, r0
    c276:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    c27a:	603d      	str	r5, [r7, #0]
    c27c:	6030      	str	r0, [r6, #0]
    c27e:	4620      	mov	r0, r4
    c280:	b002      	add	sp, #8
    c282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c28a:	e7d6      	b.n	c23a <__d2b+0x2e>
    c28c:	6161      	str	r1, [r4, #20]
    c28e:	e7e7      	b.n	c260 <__d2b+0x54>
    c290:	a801      	add	r0, sp, #4
    c292:	f001 fe04 	bl	de9e <__lo0bits>
    c296:	9b01      	ldr	r3, [sp, #4]
    c298:	6163      	str	r3, [r4, #20]
    c29a:	2101      	movs	r1, #1
    c29c:	6121      	str	r1, [r4, #16]
    c29e:	3020      	adds	r0, #32
    c2a0:	e7e5      	b.n	c26e <__d2b+0x62>
    c2a2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
    c2a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    c2aa:	6038      	str	r0, [r7, #0]
    c2ac:	6918      	ldr	r0, [r3, #16]
    c2ae:	f001 fdd6 	bl	de5e <__hi0bits>
    c2b2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
    c2b6:	6031      	str	r1, [r6, #0]
    c2b8:	e7e1      	b.n	c27e <__d2b+0x72>
    c2ba:	bf00      	nop
    c2bc:	00010e0e 	.word	0x00010e0e
    c2c0:	00010e1f 	.word	0x00010e1f

0000c2c4 <_vfiprintf_r>:
    c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2c8:	460d      	mov	r5, r1
    c2ca:	b09d      	sub	sp, #116	; 0x74
    c2cc:	4614      	mov	r4, r2
    c2ce:	4698      	mov	r8, r3
    c2d0:	4606      	mov	r6, r0
    c2d2:	b118      	cbz	r0, c2dc <_vfiprintf_r+0x18>
    c2d4:	6983      	ldr	r3, [r0, #24]
    c2d6:	b90b      	cbnz	r3, c2dc <_vfiprintf_r+0x18>
    c2d8:	f7ff fc52 	bl	bb80 <__sinit>
    c2dc:	4b89      	ldr	r3, [pc, #548]	; (c504 <_vfiprintf_r+0x240>)
    c2de:	429d      	cmp	r5, r3
    c2e0:	d11b      	bne.n	c31a <_vfiprintf_r+0x56>
    c2e2:	6875      	ldr	r5, [r6, #4]
    c2e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    c2e6:	07d9      	lsls	r1, r3, #31
    c2e8:	d405      	bmi.n	c2f6 <_vfiprintf_r+0x32>
    c2ea:	89ab      	ldrh	r3, [r5, #12]
    c2ec:	059a      	lsls	r2, r3, #22
    c2ee:	d402      	bmi.n	c2f6 <_vfiprintf_r+0x32>
    c2f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c2f2:	f7f9 fa51 	bl	5798 <__retarget_lock_acquire_recursive>
    c2f6:	89ab      	ldrh	r3, [r5, #12]
    c2f8:	071b      	lsls	r3, r3, #28
    c2fa:	d501      	bpl.n	c300 <_vfiprintf_r+0x3c>
    c2fc:	692b      	ldr	r3, [r5, #16]
    c2fe:	b9eb      	cbnz	r3, c33c <_vfiprintf_r+0x78>
    c300:	4629      	mov	r1, r5
    c302:	4630      	mov	r0, r6
    c304:	f000 f960 	bl	c5c8 <__swsetup_r>
    c308:	b1c0      	cbz	r0, c33c <_vfiprintf_r+0x78>
    c30a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    c30c:	07dc      	lsls	r4, r3, #31
    c30e:	d50e      	bpl.n	c32e <_vfiprintf_r+0x6a>
    c310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c314:	b01d      	add	sp, #116	; 0x74
    c316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c31a:	4b7b      	ldr	r3, [pc, #492]	; (c508 <_vfiprintf_r+0x244>)
    c31c:	429d      	cmp	r5, r3
    c31e:	d101      	bne.n	c324 <_vfiprintf_r+0x60>
    c320:	68b5      	ldr	r5, [r6, #8]
    c322:	e7df      	b.n	c2e4 <_vfiprintf_r+0x20>
    c324:	4b79      	ldr	r3, [pc, #484]	; (c50c <_vfiprintf_r+0x248>)
    c326:	429d      	cmp	r5, r3
    c328:	bf08      	it	eq
    c32a:	68f5      	ldreq	r5, [r6, #12]
    c32c:	e7da      	b.n	c2e4 <_vfiprintf_r+0x20>
    c32e:	89ab      	ldrh	r3, [r5, #12]
    c330:	0598      	lsls	r0, r3, #22
    c332:	d4ed      	bmi.n	c310 <_vfiprintf_r+0x4c>
    c334:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c336:	f7f9 fa4d 	bl	57d4 <__retarget_lock_release_recursive>
    c33a:	e7e9      	b.n	c310 <_vfiprintf_r+0x4c>
    c33c:	2300      	movs	r3, #0
    c33e:	9309      	str	r3, [sp, #36]	; 0x24
    c340:	2320      	movs	r3, #32
    c342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    c346:	f8cd 800c 	str.w	r8, [sp, #12]
    c34a:	2330      	movs	r3, #48	; 0x30
    c34c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; c510 <_vfiprintf_r+0x24c>
    c350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    c354:	f04f 0901 	mov.w	r9, #1
    c358:	4623      	mov	r3, r4
    c35a:	469a      	mov	sl, r3
    c35c:	f813 2b01 	ldrb.w	r2, [r3], #1
    c360:	b10a      	cbz	r2, c366 <_vfiprintf_r+0xa2>
    c362:	2a25      	cmp	r2, #37	; 0x25
    c364:	d1f9      	bne.n	c35a <_vfiprintf_r+0x96>
    c366:	ebba 0b04 	subs.w	fp, sl, r4
    c36a:	d00b      	beq.n	c384 <_vfiprintf_r+0xc0>
    c36c:	465b      	mov	r3, fp
    c36e:	4622      	mov	r2, r4
    c370:	4629      	mov	r1, r5
    c372:	4630      	mov	r0, r6
    c374:	f001 fdfe 	bl	df74 <__sfputs_r>
    c378:	3001      	adds	r0, #1
    c37a:	f000 80aa 	beq.w	c4d2 <_vfiprintf_r+0x20e>
    c37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c380:	445a      	add	r2, fp
    c382:	9209      	str	r2, [sp, #36]	; 0x24
    c384:	f89a 3000 	ldrb.w	r3, [sl]
    c388:	2b00      	cmp	r3, #0
    c38a:	f000 80a2 	beq.w	c4d2 <_vfiprintf_r+0x20e>
    c38e:	2300      	movs	r3, #0
    c390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c394:	e9cd 2305 	strd	r2, r3, [sp, #20]
    c398:	f10a 0a01 	add.w	sl, sl, #1
    c39c:	9304      	str	r3, [sp, #16]
    c39e:	9307      	str	r3, [sp, #28]
    c3a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c3a4:	931a      	str	r3, [sp, #104]	; 0x68
    c3a6:	4654      	mov	r4, sl
    c3a8:	2205      	movs	r2, #5
    c3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
    c3ae:	4858      	ldr	r0, [pc, #352]	; (c510 <_vfiprintf_r+0x24c>)
    c3b0:	f7f3 fea6 	bl	100 <memchr>
    c3b4:	9a04      	ldr	r2, [sp, #16]
    c3b6:	b9d8      	cbnz	r0, c3f0 <_vfiprintf_r+0x12c>
    c3b8:	06d1      	lsls	r1, r2, #27
    c3ba:	bf44      	itt	mi
    c3bc:	2320      	movmi	r3, #32
    c3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    c3c2:	0713      	lsls	r3, r2, #28
    c3c4:	bf44      	itt	mi
    c3c6:	232b      	movmi	r3, #43	; 0x2b
    c3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    c3cc:	f89a 3000 	ldrb.w	r3, [sl]
    c3d0:	2b2a      	cmp	r3, #42	; 0x2a
    c3d2:	d015      	beq.n	c400 <_vfiprintf_r+0x13c>
    c3d4:	9a07      	ldr	r2, [sp, #28]
    c3d6:	4654      	mov	r4, sl
    c3d8:	2000      	movs	r0, #0
    c3da:	f04f 0c0a 	mov.w	ip, #10
    c3de:	4621      	mov	r1, r4
    c3e0:	f811 3b01 	ldrb.w	r3, [r1], #1
    c3e4:	3b30      	subs	r3, #48	; 0x30
    c3e6:	2b09      	cmp	r3, #9
    c3e8:	d94e      	bls.n	c488 <_vfiprintf_r+0x1c4>
    c3ea:	b1b0      	cbz	r0, c41a <_vfiprintf_r+0x156>
    c3ec:	9207      	str	r2, [sp, #28]
    c3ee:	e014      	b.n	c41a <_vfiprintf_r+0x156>
    c3f0:	eba0 0308 	sub.w	r3, r0, r8
    c3f4:	fa09 f303 	lsl.w	r3, r9, r3
    c3f8:	4313      	orrs	r3, r2
    c3fa:	9304      	str	r3, [sp, #16]
    c3fc:	46a2      	mov	sl, r4
    c3fe:	e7d2      	b.n	c3a6 <_vfiprintf_r+0xe2>
    c400:	9b03      	ldr	r3, [sp, #12]
    c402:	1d19      	adds	r1, r3, #4
    c404:	681b      	ldr	r3, [r3, #0]
    c406:	9103      	str	r1, [sp, #12]
    c408:	2b00      	cmp	r3, #0
    c40a:	bfbb      	ittet	lt
    c40c:	425b      	neglt	r3, r3
    c40e:	f042 0202 	orrlt.w	r2, r2, #2
    c412:	9307      	strge	r3, [sp, #28]
    c414:	9307      	strlt	r3, [sp, #28]
    c416:	bfb8      	it	lt
    c418:	9204      	strlt	r2, [sp, #16]
    c41a:	7823      	ldrb	r3, [r4, #0]
    c41c:	2b2e      	cmp	r3, #46	; 0x2e
    c41e:	d10c      	bne.n	c43a <_vfiprintf_r+0x176>
    c420:	7863      	ldrb	r3, [r4, #1]
    c422:	2b2a      	cmp	r3, #42	; 0x2a
    c424:	d135      	bne.n	c492 <_vfiprintf_r+0x1ce>
    c426:	9b03      	ldr	r3, [sp, #12]
    c428:	1d1a      	adds	r2, r3, #4
    c42a:	681b      	ldr	r3, [r3, #0]
    c42c:	9203      	str	r2, [sp, #12]
    c42e:	2b00      	cmp	r3, #0
    c430:	bfb8      	it	lt
    c432:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    c436:	3402      	adds	r4, #2
    c438:	9305      	str	r3, [sp, #20]
    c43a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; c514 <_vfiprintf_r+0x250>
    c43e:	7821      	ldrb	r1, [r4, #0]
    c440:	2203      	movs	r2, #3
    c442:	4650      	mov	r0, sl
    c444:	f7f3 fe5c 	bl	100 <memchr>
    c448:	b140      	cbz	r0, c45c <_vfiprintf_r+0x198>
    c44a:	2340      	movs	r3, #64	; 0x40
    c44c:	eba0 000a 	sub.w	r0, r0, sl
    c450:	fa03 f000 	lsl.w	r0, r3, r0
    c454:	9b04      	ldr	r3, [sp, #16]
    c456:	4303      	orrs	r3, r0
    c458:	3401      	adds	r4, #1
    c45a:	9304      	str	r3, [sp, #16]
    c45c:	f814 1b01 	ldrb.w	r1, [r4], #1
    c460:	482d      	ldr	r0, [pc, #180]	; (c518 <_vfiprintf_r+0x254>)
    c462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    c466:	2206      	movs	r2, #6
    c468:	f7f3 fe4a 	bl	100 <memchr>
    c46c:	2800      	cmp	r0, #0
    c46e:	d03f      	beq.n	c4f0 <_vfiprintf_r+0x22c>
    c470:	4b2a      	ldr	r3, [pc, #168]	; (c51c <_vfiprintf_r+0x258>)
    c472:	bb1b      	cbnz	r3, c4bc <_vfiprintf_r+0x1f8>
    c474:	9b03      	ldr	r3, [sp, #12]
    c476:	3307      	adds	r3, #7
    c478:	f023 0307 	bic.w	r3, r3, #7
    c47c:	3308      	adds	r3, #8
    c47e:	9303      	str	r3, [sp, #12]
    c480:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c482:	443b      	add	r3, r7
    c484:	9309      	str	r3, [sp, #36]	; 0x24
    c486:	e767      	b.n	c358 <_vfiprintf_r+0x94>
    c488:	fb0c 3202 	mla	r2, ip, r2, r3
    c48c:	460c      	mov	r4, r1
    c48e:	2001      	movs	r0, #1
    c490:	e7a5      	b.n	c3de <_vfiprintf_r+0x11a>
    c492:	2300      	movs	r3, #0
    c494:	3401      	adds	r4, #1
    c496:	9305      	str	r3, [sp, #20]
    c498:	4619      	mov	r1, r3
    c49a:	f04f 0c0a 	mov.w	ip, #10
    c49e:	4620      	mov	r0, r4
    c4a0:	f810 2b01 	ldrb.w	r2, [r0], #1
    c4a4:	3a30      	subs	r2, #48	; 0x30
    c4a6:	2a09      	cmp	r2, #9
    c4a8:	d903      	bls.n	c4b2 <_vfiprintf_r+0x1ee>
    c4aa:	2b00      	cmp	r3, #0
    c4ac:	d0c5      	beq.n	c43a <_vfiprintf_r+0x176>
    c4ae:	9105      	str	r1, [sp, #20]
    c4b0:	e7c3      	b.n	c43a <_vfiprintf_r+0x176>
    c4b2:	fb0c 2101 	mla	r1, ip, r1, r2
    c4b6:	4604      	mov	r4, r0
    c4b8:	2301      	movs	r3, #1
    c4ba:	e7f0      	b.n	c49e <_vfiprintf_r+0x1da>
    c4bc:	ab03      	add	r3, sp, #12
    c4be:	9300      	str	r3, [sp, #0]
    c4c0:	462a      	mov	r2, r5
    c4c2:	4b17      	ldr	r3, [pc, #92]	; (c520 <_vfiprintf_r+0x25c>)
    c4c4:	a904      	add	r1, sp, #16
    c4c6:	4630      	mov	r0, r6
    c4c8:	f7fe fc0a 	bl	ace0 <_printf_float>
    c4cc:	4607      	mov	r7, r0
    c4ce:	1c78      	adds	r0, r7, #1
    c4d0:	d1d6      	bne.n	c480 <_vfiprintf_r+0x1bc>
    c4d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    c4d4:	07d9      	lsls	r1, r3, #31
    c4d6:	d405      	bmi.n	c4e4 <_vfiprintf_r+0x220>
    c4d8:	89ab      	ldrh	r3, [r5, #12]
    c4da:	059a      	lsls	r2, r3, #22
    c4dc:	d402      	bmi.n	c4e4 <_vfiprintf_r+0x220>
    c4de:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c4e0:	f7f9 f978 	bl	57d4 <__retarget_lock_release_recursive>
    c4e4:	89ab      	ldrh	r3, [r5, #12]
    c4e6:	065b      	lsls	r3, r3, #25
    c4e8:	f53f af12 	bmi.w	c310 <_vfiprintf_r+0x4c>
    c4ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    c4ee:	e711      	b.n	c314 <_vfiprintf_r+0x50>
    c4f0:	ab03      	add	r3, sp, #12
    c4f2:	9300      	str	r3, [sp, #0]
    c4f4:	462a      	mov	r2, r5
    c4f6:	4b0a      	ldr	r3, [pc, #40]	; (c520 <_vfiprintf_r+0x25c>)
    c4f8:	a904      	add	r1, sp, #16
    c4fa:	4630      	mov	r0, r6
    c4fc:	f7fe fe1a 	bl	b134 <_printf_i>
    c500:	e7e4      	b.n	c4cc <_vfiprintf_r+0x208>
    c502:	bf00      	nop
    c504:	0000e814 	.word	0x0000e814
    c508:	0000e834 	.word	0x0000e834
    c50c:	0000e7f4 	.word	0x0000e7f4
    c510:	00010e7c 	.word	0x00010e7c
    c514:	00010e82 	.word	0x00010e82
    c518:	00010e86 	.word	0x00010e86
    c51c:	0000ace1 	.word	0x0000ace1
    c520:	0000df75 	.word	0x0000df75

0000c524 <__swbuf_r>:
    c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c526:	460e      	mov	r6, r1
    c528:	4614      	mov	r4, r2
    c52a:	4605      	mov	r5, r0
    c52c:	b118      	cbz	r0, c536 <__swbuf_r+0x12>
    c52e:	6983      	ldr	r3, [r0, #24]
    c530:	b90b      	cbnz	r3, c536 <__swbuf_r+0x12>
    c532:	f7ff fb25 	bl	bb80 <__sinit>
    c536:	4b21      	ldr	r3, [pc, #132]	; (c5bc <__swbuf_r+0x98>)
    c538:	429c      	cmp	r4, r3
    c53a:	d12b      	bne.n	c594 <__swbuf_r+0x70>
    c53c:	686c      	ldr	r4, [r5, #4]
    c53e:	69a3      	ldr	r3, [r4, #24]
    c540:	60a3      	str	r3, [r4, #8]
    c542:	89a3      	ldrh	r3, [r4, #12]
    c544:	071a      	lsls	r2, r3, #28
    c546:	d52f      	bpl.n	c5a8 <__swbuf_r+0x84>
    c548:	6923      	ldr	r3, [r4, #16]
    c54a:	b36b      	cbz	r3, c5a8 <__swbuf_r+0x84>
    c54c:	6923      	ldr	r3, [r4, #16]
    c54e:	6820      	ldr	r0, [r4, #0]
    c550:	1ac0      	subs	r0, r0, r3
    c552:	6963      	ldr	r3, [r4, #20]
    c554:	b2f6      	uxtb	r6, r6
    c556:	4283      	cmp	r3, r0
    c558:	4637      	mov	r7, r6
    c55a:	dc04      	bgt.n	c566 <__swbuf_r+0x42>
    c55c:	4621      	mov	r1, r4
    c55e:	4628      	mov	r0, r5
    c560:	f7ff fa52 	bl	ba08 <_fflush_r>
    c564:	bb30      	cbnz	r0, c5b4 <__swbuf_r+0x90>
    c566:	68a3      	ldr	r3, [r4, #8]
    c568:	3b01      	subs	r3, #1
    c56a:	60a3      	str	r3, [r4, #8]
    c56c:	6823      	ldr	r3, [r4, #0]
    c56e:	1c5a      	adds	r2, r3, #1
    c570:	6022      	str	r2, [r4, #0]
    c572:	701e      	strb	r6, [r3, #0]
    c574:	6963      	ldr	r3, [r4, #20]
    c576:	3001      	adds	r0, #1
    c578:	4283      	cmp	r3, r0
    c57a:	d004      	beq.n	c586 <__swbuf_r+0x62>
    c57c:	89a3      	ldrh	r3, [r4, #12]
    c57e:	07db      	lsls	r3, r3, #31
    c580:	d506      	bpl.n	c590 <__swbuf_r+0x6c>
    c582:	2e0a      	cmp	r6, #10
    c584:	d104      	bne.n	c590 <__swbuf_r+0x6c>
    c586:	4621      	mov	r1, r4
    c588:	4628      	mov	r0, r5
    c58a:	f7ff fa3d 	bl	ba08 <_fflush_r>
    c58e:	b988      	cbnz	r0, c5b4 <__swbuf_r+0x90>
    c590:	4638      	mov	r0, r7
    c592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c594:	4b0a      	ldr	r3, [pc, #40]	; (c5c0 <__swbuf_r+0x9c>)
    c596:	429c      	cmp	r4, r3
    c598:	d101      	bne.n	c59e <__swbuf_r+0x7a>
    c59a:	68ac      	ldr	r4, [r5, #8]
    c59c:	e7cf      	b.n	c53e <__swbuf_r+0x1a>
    c59e:	4b09      	ldr	r3, [pc, #36]	; (c5c4 <__swbuf_r+0xa0>)
    c5a0:	429c      	cmp	r4, r3
    c5a2:	bf08      	it	eq
    c5a4:	68ec      	ldreq	r4, [r5, #12]
    c5a6:	e7ca      	b.n	c53e <__swbuf_r+0x1a>
    c5a8:	4621      	mov	r1, r4
    c5aa:	4628      	mov	r0, r5
    c5ac:	f000 f80c 	bl	c5c8 <__swsetup_r>
    c5b0:	2800      	cmp	r0, #0
    c5b2:	d0cb      	beq.n	c54c <__swbuf_r+0x28>
    c5b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    c5b8:	e7ea      	b.n	c590 <__swbuf_r+0x6c>
    c5ba:	bf00      	nop
    c5bc:	0000e814 	.word	0x0000e814
    c5c0:	0000e834 	.word	0x0000e834
    c5c4:	0000e7f4 	.word	0x0000e7f4

0000c5c8 <__swsetup_r>:
    c5c8:	4b32      	ldr	r3, [pc, #200]	; (c694 <__swsetup_r+0xcc>)
    c5ca:	b570      	push	{r4, r5, r6, lr}
    c5cc:	681d      	ldr	r5, [r3, #0]
    c5ce:	4606      	mov	r6, r0
    c5d0:	460c      	mov	r4, r1
    c5d2:	b125      	cbz	r5, c5de <__swsetup_r+0x16>
    c5d4:	69ab      	ldr	r3, [r5, #24]
    c5d6:	b913      	cbnz	r3, c5de <__swsetup_r+0x16>
    c5d8:	4628      	mov	r0, r5
    c5da:	f7ff fad1 	bl	bb80 <__sinit>
    c5de:	4b2e      	ldr	r3, [pc, #184]	; (c698 <__swsetup_r+0xd0>)
    c5e0:	429c      	cmp	r4, r3
    c5e2:	d10f      	bne.n	c604 <__swsetup_r+0x3c>
    c5e4:	686c      	ldr	r4, [r5, #4]
    c5e6:	89a3      	ldrh	r3, [r4, #12]
    c5e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c5ec:	0719      	lsls	r1, r3, #28
    c5ee:	d42c      	bmi.n	c64a <__swsetup_r+0x82>
    c5f0:	06dd      	lsls	r5, r3, #27
    c5f2:	d411      	bmi.n	c618 <__swsetup_r+0x50>
    c5f4:	2309      	movs	r3, #9
    c5f6:	6033      	str	r3, [r6, #0]
    c5f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    c5fc:	81a3      	strh	r3, [r4, #12]
    c5fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c602:	e03e      	b.n	c682 <__swsetup_r+0xba>
    c604:	4b25      	ldr	r3, [pc, #148]	; (c69c <__swsetup_r+0xd4>)
    c606:	429c      	cmp	r4, r3
    c608:	d101      	bne.n	c60e <__swsetup_r+0x46>
    c60a:	68ac      	ldr	r4, [r5, #8]
    c60c:	e7eb      	b.n	c5e6 <__swsetup_r+0x1e>
    c60e:	4b24      	ldr	r3, [pc, #144]	; (c6a0 <__swsetup_r+0xd8>)
    c610:	429c      	cmp	r4, r3
    c612:	bf08      	it	eq
    c614:	68ec      	ldreq	r4, [r5, #12]
    c616:	e7e6      	b.n	c5e6 <__swsetup_r+0x1e>
    c618:	0758      	lsls	r0, r3, #29
    c61a:	d512      	bpl.n	c642 <__swsetup_r+0x7a>
    c61c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c61e:	b141      	cbz	r1, c632 <__swsetup_r+0x6a>
    c620:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c624:	4299      	cmp	r1, r3
    c626:	d002      	beq.n	c62e <__swsetup_r+0x66>
    c628:	4630      	mov	r0, r6
    c62a:	f7fe fab5 	bl	ab98 <_free_r>
    c62e:	2300      	movs	r3, #0
    c630:	6363      	str	r3, [r4, #52]	; 0x34
    c632:	89a3      	ldrh	r3, [r4, #12]
    c634:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c638:	81a3      	strh	r3, [r4, #12]
    c63a:	2300      	movs	r3, #0
    c63c:	6063      	str	r3, [r4, #4]
    c63e:	6923      	ldr	r3, [r4, #16]
    c640:	6023      	str	r3, [r4, #0]
    c642:	89a3      	ldrh	r3, [r4, #12]
    c644:	f043 0308 	orr.w	r3, r3, #8
    c648:	81a3      	strh	r3, [r4, #12]
    c64a:	6923      	ldr	r3, [r4, #16]
    c64c:	b94b      	cbnz	r3, c662 <__swsetup_r+0x9a>
    c64e:	89a3      	ldrh	r3, [r4, #12]
    c650:	f403 7320 	and.w	r3, r3, #640	; 0x280
    c654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c658:	d003      	beq.n	c662 <__swsetup_r+0x9a>
    c65a:	4621      	mov	r1, r4
    c65c:	4630      	mov	r0, r6
    c65e:	f000 f873 	bl	c748 <__smakebuf_r>
    c662:	89a0      	ldrh	r0, [r4, #12]
    c664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c668:	f010 0301 	ands.w	r3, r0, #1
    c66c:	d00a      	beq.n	c684 <__swsetup_r+0xbc>
    c66e:	2300      	movs	r3, #0
    c670:	60a3      	str	r3, [r4, #8]
    c672:	6963      	ldr	r3, [r4, #20]
    c674:	425b      	negs	r3, r3
    c676:	61a3      	str	r3, [r4, #24]
    c678:	6923      	ldr	r3, [r4, #16]
    c67a:	b943      	cbnz	r3, c68e <__swsetup_r+0xc6>
    c67c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    c680:	d1ba      	bne.n	c5f8 <__swsetup_r+0x30>
    c682:	bd70      	pop	{r4, r5, r6, pc}
    c684:	0781      	lsls	r1, r0, #30
    c686:	bf58      	it	pl
    c688:	6963      	ldrpl	r3, [r4, #20]
    c68a:	60a3      	str	r3, [r4, #8]
    c68c:	e7f4      	b.n	c678 <__swsetup_r+0xb0>
    c68e:	2000      	movs	r0, #0
    c690:	e7f7      	b.n	c682 <__swsetup_r+0xba>
    c692:	bf00      	nop
    c694:	20000188 	.word	0x20000188
    c698:	0000e814 	.word	0x0000e814
    c69c:	0000e834 	.word	0x0000e834
    c6a0:	0000e7f4 	.word	0x0000e7f4

0000c6a4 <__assert_func>:
    c6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c6a6:	4614      	mov	r4, r2
    c6a8:	461a      	mov	r2, r3
    c6aa:	4b09      	ldr	r3, [pc, #36]	; (c6d0 <__assert_func+0x2c>)
    c6ac:	681b      	ldr	r3, [r3, #0]
    c6ae:	4605      	mov	r5, r0
    c6b0:	68d8      	ldr	r0, [r3, #12]
    c6b2:	b14c      	cbz	r4, c6c8 <__assert_func+0x24>
    c6b4:	4b07      	ldr	r3, [pc, #28]	; (c6d4 <__assert_func+0x30>)
    c6b6:	9100      	str	r1, [sp, #0]
    c6b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
    c6bc:	4906      	ldr	r1, [pc, #24]	; (c6d8 <__assert_func+0x34>)
    c6be:	462b      	mov	r3, r5
    c6c0:	f000 f81e 	bl	c700 <fiprintf>
    c6c4:	f001 fcef 	bl	e0a6 <abort>
    c6c8:	4b04      	ldr	r3, [pc, #16]	; (c6dc <__assert_func+0x38>)
    c6ca:	461c      	mov	r4, r3
    c6cc:	e7f3      	b.n	c6b6 <__assert_func+0x12>
    c6ce:	bf00      	nop
    c6d0:	20000188 	.word	0x20000188
    c6d4:	00010e8d 	.word	0x00010e8d
    c6d8:	00010e9a 	.word	0x00010e9a
    c6dc:	00010365 	.word	0x00010365

0000c6e0 <_close_r>:
    c6e0:	b538      	push	{r3, r4, r5, lr}
    c6e2:	4d06      	ldr	r5, [pc, #24]	; (c6fc <_close_r+0x1c>)
    c6e4:	2300      	movs	r3, #0
    c6e6:	4604      	mov	r4, r0
    c6e8:	4608      	mov	r0, r1
    c6ea:	602b      	str	r3, [r5, #0]
    c6ec:	f000 fcae 	bl	d04c <_close>
    c6f0:	1c43      	adds	r3, r0, #1
    c6f2:	d102      	bne.n	c6fa <_close_r+0x1a>
    c6f4:	682b      	ldr	r3, [r5, #0]
    c6f6:	b103      	cbz	r3, c6fa <_close_r+0x1a>
    c6f8:	6023      	str	r3, [r4, #0]
    c6fa:	bd38      	pop	{r3, r4, r5, pc}
    c6fc:	20001118 	.word	0x20001118

0000c700 <fiprintf>:
    c700:	b40e      	push	{r1, r2, r3}
    c702:	b503      	push	{r0, r1, lr}
    c704:	4601      	mov	r1, r0
    c706:	ab03      	add	r3, sp, #12
    c708:	4805      	ldr	r0, [pc, #20]	; (c720 <fiprintf+0x20>)
    c70a:	f853 2b04 	ldr.w	r2, [r3], #4
    c70e:	6800      	ldr	r0, [r0, #0]
    c710:	9301      	str	r3, [sp, #4]
    c712:	f7ff fdd7 	bl	c2c4 <_vfiprintf_r>
    c716:	b002      	add	sp, #8
    c718:	f85d eb04 	ldr.w	lr, [sp], #4
    c71c:	b003      	add	sp, #12
    c71e:	4770      	bx	lr
    c720:	20000188 	.word	0x20000188

0000c724 <_lseek_r>:
    c724:	b538      	push	{r3, r4, r5, lr}
    c726:	4d07      	ldr	r5, [pc, #28]	; (c744 <_lseek_r+0x20>)
    c728:	4604      	mov	r4, r0
    c72a:	4608      	mov	r0, r1
    c72c:	4611      	mov	r1, r2
    c72e:	2200      	movs	r2, #0
    c730:	602a      	str	r2, [r5, #0]
    c732:	461a      	mov	r2, r3
    c734:	f000 fc8d 	bl	d052 <_lseek>
    c738:	1c43      	adds	r3, r0, #1
    c73a:	d102      	bne.n	c742 <_lseek_r+0x1e>
    c73c:	682b      	ldr	r3, [r5, #0]
    c73e:	b103      	cbz	r3, c742 <_lseek_r+0x1e>
    c740:	6023      	str	r3, [r4, #0]
    c742:	bd38      	pop	{r3, r4, r5, pc}
    c744:	20001118 	.word	0x20001118

0000c748 <__smakebuf_r>:
    c748:	898b      	ldrh	r3, [r1, #12]
    c74a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c74c:	079d      	lsls	r5, r3, #30
    c74e:	4606      	mov	r6, r0
    c750:	460c      	mov	r4, r1
    c752:	d507      	bpl.n	c764 <__smakebuf_r+0x1c>
    c754:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c758:	6023      	str	r3, [r4, #0]
    c75a:	6123      	str	r3, [r4, #16]
    c75c:	2301      	movs	r3, #1
    c75e:	6163      	str	r3, [r4, #20]
    c760:	b002      	add	sp, #8
    c762:	bd70      	pop	{r4, r5, r6, pc}
    c764:	ab01      	add	r3, sp, #4
    c766:	466a      	mov	r2, sp
    c768:	f001 fc59 	bl	e01e <__swhatbuf_r>
    c76c:	9900      	ldr	r1, [sp, #0]
    c76e:	4605      	mov	r5, r0
    c770:	4630      	mov	r0, r6
    c772:	f7fe fa5b 	bl	ac2c <_malloc_r>
    c776:	b948      	cbnz	r0, c78c <__smakebuf_r+0x44>
    c778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c77c:	059a      	lsls	r2, r3, #22
    c77e:	d4ef      	bmi.n	c760 <__smakebuf_r+0x18>
    c780:	f023 0303 	bic.w	r3, r3, #3
    c784:	f043 0302 	orr.w	r3, r3, #2
    c788:	81a3      	strh	r3, [r4, #12]
    c78a:	e7e3      	b.n	c754 <__smakebuf_r+0xc>
    c78c:	4b0d      	ldr	r3, [pc, #52]	; (c7c4 <__smakebuf_r+0x7c>)
    c78e:	62b3      	str	r3, [r6, #40]	; 0x28
    c790:	89a3      	ldrh	r3, [r4, #12]
    c792:	6020      	str	r0, [r4, #0]
    c794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c798:	81a3      	strh	r3, [r4, #12]
    c79a:	9b00      	ldr	r3, [sp, #0]
    c79c:	6163      	str	r3, [r4, #20]
    c79e:	9b01      	ldr	r3, [sp, #4]
    c7a0:	6120      	str	r0, [r4, #16]
    c7a2:	b15b      	cbz	r3, c7bc <__smakebuf_r+0x74>
    c7a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c7a8:	4630      	mov	r0, r6
    c7aa:	f000 f831 	bl	c810 <_isatty_r>
    c7ae:	b128      	cbz	r0, c7bc <__smakebuf_r+0x74>
    c7b0:	89a3      	ldrh	r3, [r4, #12]
    c7b2:	f023 0303 	bic.w	r3, r3, #3
    c7b6:	f043 0301 	orr.w	r3, r3, #1
    c7ba:	81a3      	strh	r3, [r4, #12]
    c7bc:	89a0      	ldrh	r0, [r4, #12]
    c7be:	4305      	orrs	r5, r0
    c7c0:	81a5      	strh	r5, [r4, #12]
    c7c2:	e7cd      	b.n	c760 <__smakebuf_r+0x18>
    c7c4:	0000bb45 	.word	0x0000bb45

0000c7c8 <_read_r>:
    c7c8:	b538      	push	{r3, r4, r5, lr}
    c7ca:	4d07      	ldr	r5, [pc, #28]	; (c7e8 <_read_r+0x20>)
    c7cc:	4604      	mov	r4, r0
    c7ce:	4608      	mov	r0, r1
    c7d0:	4611      	mov	r1, r2
    c7d2:	2200      	movs	r2, #0
    c7d4:	602a      	str	r2, [r5, #0]
    c7d6:	461a      	mov	r2, r3
    c7d8:	f000 fc30 	bl	d03c <_read>
    c7dc:	1c43      	adds	r3, r0, #1
    c7de:	d102      	bne.n	c7e6 <_read_r+0x1e>
    c7e0:	682b      	ldr	r3, [r5, #0]
    c7e2:	b103      	cbz	r3, c7e6 <_read_r+0x1e>
    c7e4:	6023      	str	r3, [r4, #0]
    c7e6:	bd38      	pop	{r3, r4, r5, pc}
    c7e8:	20001118 	.word	0x20001118

0000c7ec <_fstat_r>:
    c7ec:	b538      	push	{r3, r4, r5, lr}
    c7ee:	4d07      	ldr	r5, [pc, #28]	; (c80c <_fstat_r+0x20>)
    c7f0:	2300      	movs	r3, #0
    c7f2:	4604      	mov	r4, r0
    c7f4:	4608      	mov	r0, r1
    c7f6:	4611      	mov	r1, r2
    c7f8:	602b      	str	r3, [r5, #0]
    c7fa:	f000 fc35 	bl	d068 <_fstat>
    c7fe:	1c43      	adds	r3, r0, #1
    c800:	d102      	bne.n	c808 <_fstat_r+0x1c>
    c802:	682b      	ldr	r3, [r5, #0]
    c804:	b103      	cbz	r3, c808 <_fstat_r+0x1c>
    c806:	6023      	str	r3, [r4, #0]
    c808:	bd38      	pop	{r3, r4, r5, pc}
    c80a:	bf00      	nop
    c80c:	20001118 	.word	0x20001118

0000c810 <_isatty_r>:
    c810:	b538      	push	{r3, r4, r5, lr}
    c812:	4d06      	ldr	r5, [pc, #24]	; (c82c <_isatty_r+0x1c>)
    c814:	2300      	movs	r3, #0
    c816:	4604      	mov	r4, r0
    c818:	4608      	mov	r0, r1
    c81a:	602b      	str	r3, [r5, #0]
    c81c:	f000 fc1b 	bl	d056 <_isatty>
    c820:	1c43      	adds	r3, r0, #1
    c822:	d102      	bne.n	c82a <_isatty_r+0x1a>
    c824:	682b      	ldr	r3, [r5, #0]
    c826:	b103      	cbz	r3, c82a <_isatty_r+0x1a>
    c828:	6023      	str	r3, [r4, #0]
    c82a:	bd38      	pop	{r3, r4, r5, pc}
    c82c:	20001118 	.word	0x20001118

0000c830 <raise>:
    c830:	4b02      	ldr	r3, [pc, #8]	; (c83c <raise+0xc>)
    c832:	4601      	mov	r1, r0
    c834:	6818      	ldr	r0, [r3, #0]
    c836:	f001 bc3d 	b.w	e0b4 <_raise_r>
    c83a:	bf00      	nop
    c83c:	20000188 	.word	0x20000188

0000c840 <_kill_r>:
    c840:	b538      	push	{r3, r4, r5, lr}
    c842:	4d07      	ldr	r5, [pc, #28]	; (c860 <_kill_r+0x20>)
    c844:	2300      	movs	r3, #0
    c846:	4604      	mov	r4, r0
    c848:	4608      	mov	r0, r1
    c84a:	4611      	mov	r1, r2
    c84c:	602b      	str	r3, [r5, #0]
    c84e:	f000 fc07 	bl	d060 <_kill>
    c852:	1c43      	adds	r3, r0, #1
    c854:	d102      	bne.n	c85c <_kill_r+0x1c>
    c856:	682b      	ldr	r3, [r5, #0]
    c858:	b103      	cbz	r3, c85c <_kill_r+0x1c>
    c85a:	6023      	str	r3, [r4, #0]
    c85c:	bd38      	pop	{r3, r4, r5, pc}
    c85e:	bf00      	nop
    c860:	20001118 	.word	0x20001118

0000c864 <nrf_cc3xx_platform_init_no_rng>:
    c864:	b510      	push	{r4, lr}
    c866:	4c0a      	ldr	r4, [pc, #40]	; (c890 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    c868:	6823      	ldr	r3, [r4, #0]
    c86a:	b11b      	cbz	r3, c874 <nrf_cc3xx_platform_init_no_rng+0x10>
    c86c:	2301      	movs	r3, #1
    c86e:	6023      	str	r3, [r4, #0]
    c870:	2000      	movs	r0, #0
    c872:	bd10      	pop	{r4, pc}
    c874:	f000 f8ce 	bl	ca14 <CC_LibInitNoRng>
    c878:	2800      	cmp	r0, #0
    c87a:	d0f7      	beq.n	c86c <nrf_cc3xx_platform_init_no_rng+0x8>
    c87c:	3801      	subs	r0, #1
    c87e:	2806      	cmp	r0, #6
    c880:	d803      	bhi.n	c88a <nrf_cc3xx_platform_init_no_rng+0x26>
    c882:	4b04      	ldr	r3, [pc, #16]	; (c894 <nrf_cc3xx_platform_init_no_rng+0x30>)
    c884:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    c888:	bd10      	pop	{r4, pc}
    c88a:	4803      	ldr	r0, [pc, #12]	; (c898 <nrf_cc3xx_platform_init_no_rng+0x34>)
    c88c:	bd10      	pop	{r4, pc}
    c88e:	bf00      	nop
    c890:	2000111c 	.word	0x2000111c
    c894:	0000e860 	.word	0x0000e860
    c898:	ffff8ffe 	.word	0xffff8ffe

0000c89c <nrf_cc3xx_platform_abort>:
    c89c:	f3bf 8f4f 	dsb	sy
    c8a0:	4905      	ldr	r1, [pc, #20]	; (c8b8 <nrf_cc3xx_platform_abort+0x1c>)
    c8a2:	4b06      	ldr	r3, [pc, #24]	; (c8bc <nrf_cc3xx_platform_abort+0x20>)
    c8a4:	68ca      	ldr	r2, [r1, #12]
    c8a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c8aa:	4313      	orrs	r3, r2
    c8ac:	60cb      	str	r3, [r1, #12]
    c8ae:	f3bf 8f4f 	dsb	sy
    c8b2:	bf00      	nop
    c8b4:	e7fd      	b.n	c8b2 <nrf_cc3xx_platform_abort+0x16>
    c8b6:	bf00      	nop
    c8b8:	e000ed00 	.word	0xe000ed00
    c8bc:	05fa0004 	.word	0x05fa0004

0000c8c0 <CC_PalAbort>:
    c8c0:	b410      	push	{r4}
    c8c2:	4b09      	ldr	r3, [pc, #36]	; (c8e8 <CC_PalAbort+0x28>)
    c8c4:	4909      	ldr	r1, [pc, #36]	; (c8ec <CC_PalAbort+0x2c>)
    c8c6:	4c0a      	ldr	r4, [pc, #40]	; (c8f0 <CC_PalAbort+0x30>)
    c8c8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    c8cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    c8d0:	6849      	ldr	r1, [r1, #4]
    c8d2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    c8d6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    c8da:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    c8de:	2300      	movs	r3, #0
    c8e0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    c8e4:	bc10      	pop	{r4}
    c8e6:	4708      	bx	r1
    c8e8:	5002b000 	.word	0x5002b000
    c8ec:	20000358 	.word	0x20000358
    c8f0:	5002a000 	.word	0x5002a000

0000c8f4 <nrf_cc3xx_platform_set_abort>:
    c8f4:	e9d0 1200 	ldrd	r1, r2, [r0]
    c8f8:	4b01      	ldr	r3, [pc, #4]	; (c900 <nrf_cc3xx_platform_set_abort+0xc>)
    c8fa:	e9c3 1200 	strd	r1, r2, [r3]
    c8fe:	4770      	bx	lr
    c900:	20000358 	.word	0x20000358

0000c904 <mutex_free>:
    c904:	b510      	push	{r4, lr}
    c906:	4604      	mov	r4, r0
    c908:	b130      	cbz	r0, c918 <mutex_free+0x14>
    c90a:	6863      	ldr	r3, [r4, #4]
    c90c:	06db      	lsls	r3, r3, #27
    c90e:	d502      	bpl.n	c916 <mutex_free+0x12>
    c910:	2300      	movs	r3, #0
    c912:	6023      	str	r3, [r4, #0]
    c914:	6063      	str	r3, [r4, #4]
    c916:	bd10      	pop	{r4, pc}
    c918:	4b02      	ldr	r3, [pc, #8]	; (c924 <mutex_free+0x20>)
    c91a:	4803      	ldr	r0, [pc, #12]	; (c928 <mutex_free+0x24>)
    c91c:	685b      	ldr	r3, [r3, #4]
    c91e:	4798      	blx	r3
    c920:	e7f3      	b.n	c90a <mutex_free+0x6>
    c922:	bf00      	nop
    c924:	20000358 	.word	0x20000358
    c928:	0000e87c 	.word	0x0000e87c

0000c92c <mutex_lock>:
    c92c:	b1b0      	cbz	r0, c95c <mutex_lock+0x30>
    c92e:	6843      	ldr	r3, [r0, #4]
    c930:	b193      	cbz	r3, c958 <mutex_lock+0x2c>
    c932:	06db      	lsls	r3, r3, #27
    c934:	d50e      	bpl.n	c954 <mutex_lock+0x28>
    c936:	2301      	movs	r3, #1
    c938:	e850 2f00 	ldrex	r2, [r0]
    c93c:	4619      	mov	r1, r3
    c93e:	e840 1c00 	strex	ip, r1, [r0]
    c942:	f09c 0f00 	teq	ip, #0
    c946:	d1f7      	bne.n	c938 <mutex_lock+0xc>
    c948:	2a01      	cmp	r2, #1
    c94a:	d0f5      	beq.n	c938 <mutex_lock+0xc>
    c94c:	f3bf 8f5f 	dmb	sy
    c950:	2000      	movs	r0, #0
    c952:	4770      	bx	lr
    c954:	4803      	ldr	r0, [pc, #12]	; (c964 <mutex_lock+0x38>)
    c956:	4770      	bx	lr
    c958:	4803      	ldr	r0, [pc, #12]	; (c968 <mutex_lock+0x3c>)
    c95a:	4770      	bx	lr
    c95c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c960:	4770      	bx	lr
    c962:	bf00      	nop
    c964:	ffff8fe9 	.word	0xffff8fe9
    c968:	ffff8fea 	.word	0xffff8fea

0000c96c <mutex_unlock>:
    c96c:	b168      	cbz	r0, c98a <mutex_unlock+0x1e>
    c96e:	6843      	ldr	r3, [r0, #4]
    c970:	b13b      	cbz	r3, c982 <mutex_unlock+0x16>
    c972:	06db      	lsls	r3, r3, #27
    c974:	d507      	bpl.n	c986 <mutex_unlock+0x1a>
    c976:	f3bf 8f5f 	dmb	sy
    c97a:	2300      	movs	r3, #0
    c97c:	6003      	str	r3, [r0, #0]
    c97e:	4618      	mov	r0, r3
    c980:	4770      	bx	lr
    c982:	4803      	ldr	r0, [pc, #12]	; (c990 <mutex_unlock+0x24>)
    c984:	4770      	bx	lr
    c986:	4803      	ldr	r0, [pc, #12]	; (c994 <mutex_unlock+0x28>)
    c988:	4770      	bx	lr
    c98a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c98e:	4770      	bx	lr
    c990:	ffff8fea 	.word	0xffff8fea
    c994:	ffff8fe9 	.word	0xffff8fe9

0000c998 <mutex_init>:
    c998:	b510      	push	{r4, lr}
    c99a:	4604      	mov	r4, r0
    c99c:	b120      	cbz	r0, c9a8 <mutex_init+0x10>
    c99e:	2200      	movs	r2, #0
    c9a0:	2311      	movs	r3, #17
    c9a2:	6022      	str	r2, [r4, #0]
    c9a4:	6063      	str	r3, [r4, #4]
    c9a6:	bd10      	pop	{r4, pc}
    c9a8:	4801      	ldr	r0, [pc, #4]	; (c9b0 <mutex_init+0x18>)
    c9aa:	f7ff ff89 	bl	c8c0 <CC_PalAbort>
    c9ae:	e7f6      	b.n	c99e <mutex_init+0x6>
    c9b0:	0000e8a4 	.word	0x0000e8a4

0000c9b4 <nrf_cc3xx_platform_set_mutexes>:
    c9b4:	b570      	push	{r4, r5, r6, lr}
    c9b6:	e9d0 2300 	ldrd	r2, r3, [r0]
    c9ba:	4c13      	ldr	r4, [pc, #76]	; (ca08 <nrf_cc3xx_platform_set_mutexes+0x54>)
    c9bc:	4d13      	ldr	r5, [pc, #76]	; (ca0c <nrf_cc3xx_platform_set_mutexes+0x58>)
    c9be:	6063      	str	r3, [r4, #4]
    c9c0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    c9c4:	e9c4 3002 	strd	r3, r0, [r4, #8]
    c9c8:	6022      	str	r2, [r4, #0]
    c9ca:	4b11      	ldr	r3, [pc, #68]	; (ca10 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    c9cc:	6808      	ldr	r0, [r1, #0]
    c9ce:	6018      	str	r0, [r3, #0]
    c9d0:	6848      	ldr	r0, [r1, #4]
    c9d2:	6058      	str	r0, [r3, #4]
    c9d4:	6888      	ldr	r0, [r1, #8]
    c9d6:	6098      	str	r0, [r3, #8]
    c9d8:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    c9dc:	60d8      	str	r0, [r3, #12]
    c9de:	6119      	str	r1, [r3, #16]
    c9e0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    c9e4:	06db      	lsls	r3, r3, #27
    c9e6:	d50d      	bpl.n	ca04 <nrf_cc3xx_platform_set_mutexes+0x50>
    c9e8:	2300      	movs	r3, #0
    c9ea:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    c9ee:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    c9f2:	f505 708a 	add.w	r0, r5, #276	; 0x114
    c9f6:	4790      	blx	r2
    c9f8:	6823      	ldr	r3, [r4, #0]
    c9fa:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    c9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca02:	4718      	bx	r3
    ca04:	bd70      	pop	{r4, r5, r6, pc}
    ca06:	bf00      	nop
    ca08:	20000368 	.word	0x20000368
    ca0c:	20001134 	.word	0x20001134
    ca10:	20000378 	.word	0x20000378

0000ca14 <CC_LibInitNoRng>:
    ca14:	b538      	push	{r3, r4, r5, lr}
    ca16:	f000 f82f 	bl	ca78 <CC_HalInit>
    ca1a:	b120      	cbz	r0, ca26 <CC_LibInitNoRng+0x12>
    ca1c:	2403      	movs	r4, #3
    ca1e:	f000 f863 	bl	cae8 <CC_PalTerminate>
    ca22:	4620      	mov	r0, r4
    ca24:	bd38      	pop	{r3, r4, r5, pc}
    ca26:	f000 f831 	bl	ca8c <CC_PalInit>
    ca2a:	b998      	cbnz	r0, ca54 <CC_LibInitNoRng+0x40>
    ca2c:	f000 f8ac 	bl	cb88 <CC_PalPowerSaveModeSelect>
    ca30:	b998      	cbnz	r0, ca5a <CC_LibInitNoRng+0x46>
    ca32:	4d0f      	ldr	r5, [pc, #60]	; (ca70 <CC_LibInitNoRng+0x5c>)
    ca34:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    ca38:	0e1b      	lsrs	r3, r3, #24
    ca3a:	2bf0      	cmp	r3, #240	; 0xf0
    ca3c:	d108      	bne.n	ca50 <CC_LibInitNoRng+0x3c>
    ca3e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    ca42:	4b0c      	ldr	r3, [pc, #48]	; (ca74 <CC_LibInitNoRng+0x60>)
    ca44:	429a      	cmp	r2, r3
    ca46:	d00a      	beq.n	ca5e <CC_LibInitNoRng+0x4a>
    ca48:	2407      	movs	r4, #7
    ca4a:	f000 f817 	bl	ca7c <CC_HalTerminate>
    ca4e:	e7e6      	b.n	ca1e <CC_LibInitNoRng+0xa>
    ca50:	2406      	movs	r4, #6
    ca52:	e7fa      	b.n	ca4a <CC_LibInitNoRng+0x36>
    ca54:	2404      	movs	r4, #4
    ca56:	4620      	mov	r0, r4
    ca58:	bd38      	pop	{r3, r4, r5, pc}
    ca5a:	2400      	movs	r4, #0
    ca5c:	e7f5      	b.n	ca4a <CC_LibInitNoRng+0x36>
    ca5e:	2001      	movs	r0, #1
    ca60:	f000 f892 	bl	cb88 <CC_PalPowerSaveModeSelect>
    ca64:	4604      	mov	r4, r0
    ca66:	2800      	cmp	r0, #0
    ca68:	d1f7      	bne.n	ca5a <CC_LibInitNoRng+0x46>
    ca6a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    ca6e:	e7d8      	b.n	ca22 <CC_LibInitNoRng+0xe>
    ca70:	5002b000 	.word	0x5002b000
    ca74:	20e00000 	.word	0x20e00000

0000ca78 <CC_HalInit>:
    ca78:	2000      	movs	r0, #0
    ca7a:	4770      	bx	lr

0000ca7c <CC_HalTerminate>:
    ca7c:	2000      	movs	r0, #0
    ca7e:	4770      	bx	lr

0000ca80 <CC_HalMaskInterrupt>:
    ca80:	4b01      	ldr	r3, [pc, #4]	; (ca88 <CC_HalMaskInterrupt+0x8>)
    ca82:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    ca86:	4770      	bx	lr
    ca88:	5002b000 	.word	0x5002b000

0000ca8c <CC_PalInit>:
    ca8c:	b510      	push	{r4, lr}
    ca8e:	4811      	ldr	r0, [pc, #68]	; (cad4 <CC_PalInit+0x48>)
    ca90:	f000 f848 	bl	cb24 <CC_PalMutexCreate>
    ca94:	b100      	cbz	r0, ca98 <CC_PalInit+0xc>
    ca96:	bd10      	pop	{r4, pc}
    ca98:	480f      	ldr	r0, [pc, #60]	; (cad8 <CC_PalInit+0x4c>)
    ca9a:	f000 f843 	bl	cb24 <CC_PalMutexCreate>
    ca9e:	2800      	cmp	r0, #0
    caa0:	d1f9      	bne.n	ca96 <CC_PalInit+0xa>
    caa2:	4c0e      	ldr	r4, [pc, #56]	; (cadc <CC_PalInit+0x50>)
    caa4:	4620      	mov	r0, r4
    caa6:	f000 f83d 	bl	cb24 <CC_PalMutexCreate>
    caaa:	2800      	cmp	r0, #0
    caac:	d1f3      	bne.n	ca96 <CC_PalInit+0xa>
    caae:	4b0c      	ldr	r3, [pc, #48]	; (cae0 <CC_PalInit+0x54>)
    cab0:	480c      	ldr	r0, [pc, #48]	; (cae4 <CC_PalInit+0x58>)
    cab2:	601c      	str	r4, [r3, #0]
    cab4:	f000 f836 	bl	cb24 <CC_PalMutexCreate>
    cab8:	4601      	mov	r1, r0
    caba:	2800      	cmp	r0, #0
    cabc:	d1eb      	bne.n	ca96 <CC_PalInit+0xa>
    cabe:	f000 f82d 	bl	cb1c <CC_PalDmaInit>
    cac2:	4604      	mov	r4, r0
    cac4:	b108      	cbz	r0, caca <CC_PalInit+0x3e>
    cac6:	4620      	mov	r0, r4
    cac8:	bd10      	pop	{r4, pc}
    caca:	f000 f83f 	bl	cb4c <CC_PalPowerSaveModeInit>
    cace:	4620      	mov	r0, r4
    cad0:	e7fa      	b.n	cac8 <CC_PalInit+0x3c>
    cad2:	bf00      	nop
    cad4:	200003b0 	.word	0x200003b0
    cad8:	200003a4 	.word	0x200003a4
    cadc:	200003ac 	.word	0x200003ac
    cae0:	200003b4 	.word	0x200003b4
    cae4:	200003a8 	.word	0x200003a8

0000cae8 <CC_PalTerminate>:
    cae8:	b508      	push	{r3, lr}
    caea:	4808      	ldr	r0, [pc, #32]	; (cb0c <CC_PalTerminate+0x24>)
    caec:	f000 f824 	bl	cb38 <CC_PalMutexDestroy>
    caf0:	4807      	ldr	r0, [pc, #28]	; (cb10 <CC_PalTerminate+0x28>)
    caf2:	f000 f821 	bl	cb38 <CC_PalMutexDestroy>
    caf6:	4807      	ldr	r0, [pc, #28]	; (cb14 <CC_PalTerminate+0x2c>)
    caf8:	f000 f81e 	bl	cb38 <CC_PalMutexDestroy>
    cafc:	4806      	ldr	r0, [pc, #24]	; (cb18 <CC_PalTerminate+0x30>)
    cafe:	f000 f81b 	bl	cb38 <CC_PalMutexDestroy>
    cb02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cb06:	f000 b80b 	b.w	cb20 <CC_PalDmaTerminate>
    cb0a:	bf00      	nop
    cb0c:	200003b0 	.word	0x200003b0
    cb10:	200003a4 	.word	0x200003a4
    cb14:	200003ac 	.word	0x200003ac
    cb18:	200003a8 	.word	0x200003a8

0000cb1c <CC_PalDmaInit>:
    cb1c:	2000      	movs	r0, #0
    cb1e:	4770      	bx	lr

0000cb20 <CC_PalDmaTerminate>:
    cb20:	4770      	bx	lr
    cb22:	bf00      	nop

0000cb24 <CC_PalMutexCreate>:
    cb24:	b508      	push	{r3, lr}
    cb26:	4b03      	ldr	r3, [pc, #12]	; (cb34 <CC_PalMutexCreate+0x10>)
    cb28:	6802      	ldr	r2, [r0, #0]
    cb2a:	681b      	ldr	r3, [r3, #0]
    cb2c:	6810      	ldr	r0, [r2, #0]
    cb2e:	4798      	blx	r3
    cb30:	2000      	movs	r0, #0
    cb32:	bd08      	pop	{r3, pc}
    cb34:	20000368 	.word	0x20000368

0000cb38 <CC_PalMutexDestroy>:
    cb38:	b508      	push	{r3, lr}
    cb3a:	4b03      	ldr	r3, [pc, #12]	; (cb48 <CC_PalMutexDestroy+0x10>)
    cb3c:	6802      	ldr	r2, [r0, #0]
    cb3e:	685b      	ldr	r3, [r3, #4]
    cb40:	6810      	ldr	r0, [r2, #0]
    cb42:	4798      	blx	r3
    cb44:	2000      	movs	r0, #0
    cb46:	bd08      	pop	{r3, pc}
    cb48:	20000368 	.word	0x20000368

0000cb4c <CC_PalPowerSaveModeInit>:
    cb4c:	b570      	push	{r4, r5, r6, lr}
    cb4e:	4c09      	ldr	r4, [pc, #36]	; (cb74 <CC_PalPowerSaveModeInit+0x28>)
    cb50:	4d09      	ldr	r5, [pc, #36]	; (cb78 <CC_PalPowerSaveModeInit+0x2c>)
    cb52:	6920      	ldr	r0, [r4, #16]
    cb54:	68ab      	ldr	r3, [r5, #8]
    cb56:	4798      	blx	r3
    cb58:	b118      	cbz	r0, cb62 <CC_PalPowerSaveModeInit+0x16>
    cb5a:	4b08      	ldr	r3, [pc, #32]	; (cb7c <CC_PalPowerSaveModeInit+0x30>)
    cb5c:	4808      	ldr	r0, [pc, #32]	; (cb80 <CC_PalPowerSaveModeInit+0x34>)
    cb5e:	685b      	ldr	r3, [r3, #4]
    cb60:	4798      	blx	r3
    cb62:	4a08      	ldr	r2, [pc, #32]	; (cb84 <CC_PalPowerSaveModeInit+0x38>)
    cb64:	68eb      	ldr	r3, [r5, #12]
    cb66:	6920      	ldr	r0, [r4, #16]
    cb68:	2100      	movs	r1, #0
    cb6a:	6011      	str	r1, [r2, #0]
    cb6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cb70:	4718      	bx	r3
    cb72:	bf00      	nop
    cb74:	20000378 	.word	0x20000378
    cb78:	20000368 	.word	0x20000368
    cb7c:	20000358 	.word	0x20000358
    cb80:	0000e8c8 	.word	0x0000e8c8
    cb84:	20001130 	.word	0x20001130

0000cb88 <CC_PalPowerSaveModeSelect>:
    cb88:	b570      	push	{r4, r5, r6, lr}
    cb8a:	4d1b      	ldr	r5, [pc, #108]	; (cbf8 <CC_PalPowerSaveModeSelect+0x70>)
    cb8c:	4e1b      	ldr	r6, [pc, #108]	; (cbfc <CC_PalPowerSaveModeSelect+0x74>)
    cb8e:	4604      	mov	r4, r0
    cb90:	68b2      	ldr	r2, [r6, #8]
    cb92:	6928      	ldr	r0, [r5, #16]
    cb94:	4790      	blx	r2
    cb96:	b9f8      	cbnz	r0, cbd8 <CC_PalPowerSaveModeSelect+0x50>
    cb98:	b15c      	cbz	r4, cbb2 <CC_PalPowerSaveModeSelect+0x2a>
    cb9a:	4c19      	ldr	r4, [pc, #100]	; (cc00 <CC_PalPowerSaveModeSelect+0x78>)
    cb9c:	6823      	ldr	r3, [r4, #0]
    cb9e:	b1b3      	cbz	r3, cbce <CC_PalPowerSaveModeSelect+0x46>
    cba0:	2b01      	cmp	r3, #1
    cba2:	d01b      	beq.n	cbdc <CC_PalPowerSaveModeSelect+0x54>
    cba4:	3b01      	subs	r3, #1
    cba6:	6023      	str	r3, [r4, #0]
    cba8:	6928      	ldr	r0, [r5, #16]
    cbaa:	68f3      	ldr	r3, [r6, #12]
    cbac:	4798      	blx	r3
    cbae:	2000      	movs	r0, #0
    cbb0:	bd70      	pop	{r4, r5, r6, pc}
    cbb2:	4c13      	ldr	r4, [pc, #76]	; (cc00 <CC_PalPowerSaveModeSelect+0x78>)
    cbb4:	6821      	ldr	r1, [r4, #0]
    cbb6:	b941      	cbnz	r1, cbca <CC_PalPowerSaveModeSelect+0x42>
    cbb8:	4b12      	ldr	r3, [pc, #72]	; (cc04 <CC_PalPowerSaveModeSelect+0x7c>)
    cbba:	2201      	movs	r2, #1
    cbbc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    cbc0:	4a11      	ldr	r2, [pc, #68]	; (cc08 <CC_PalPowerSaveModeSelect+0x80>)
    cbc2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    cbc6:	2b00      	cmp	r3, #0
    cbc8:	d1fb      	bne.n	cbc2 <CC_PalPowerSaveModeSelect+0x3a>
    cbca:	3101      	adds	r1, #1
    cbcc:	6021      	str	r1, [r4, #0]
    cbce:	68f3      	ldr	r3, [r6, #12]
    cbd0:	6928      	ldr	r0, [r5, #16]
    cbd2:	4798      	blx	r3
    cbd4:	2000      	movs	r0, #0
    cbd6:	bd70      	pop	{r4, r5, r6, pc}
    cbd8:	480c      	ldr	r0, [pc, #48]	; (cc0c <CC_PalPowerSaveModeSelect+0x84>)
    cbda:	bd70      	pop	{r4, r5, r6, pc}
    cbdc:	4a0a      	ldr	r2, [pc, #40]	; (cc08 <CC_PalPowerSaveModeSelect+0x80>)
    cbde:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	d1fb      	bne.n	cbde <CC_PalPowerSaveModeSelect+0x56>
    cbe6:	4a07      	ldr	r2, [pc, #28]	; (cc04 <CC_PalPowerSaveModeSelect+0x7c>)
    cbe8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    cbec:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    cbf0:	f7ff ff46 	bl	ca80 <CC_HalMaskInterrupt>
    cbf4:	6823      	ldr	r3, [r4, #0]
    cbf6:	e7d5      	b.n	cba4 <CC_PalPowerSaveModeSelect+0x1c>
    cbf8:	20000378 	.word	0x20000378
    cbfc:	20000368 	.word	0x20000368
    cc00:	20001130 	.word	0x20001130
    cc04:	5002a000 	.word	0x5002a000
    cc08:	5002b000 	.word	0x5002b000
    cc0c:	ffff8fe9 	.word	0xffff8fe9

0000cc10 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    cc10:	4770      	bx	lr

0000cc12 <k_msleep.constprop.0.isra.0>:
	return z_impl_k_sleep(timeout);
    cc12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cc16:	2100      	movs	r1, #0
    cc18:	f7fd ba48 	b.w	a0ac <z_impl_k_sleep>

0000cc1c <nearObstSearch>:

/* Function to look for closeby obstacles */

int nearObstSearch(uint8_t imageBuf[IMGWIDTH][IMGWIDTH]) {
	int i, j;
	for(i=0; i < IMGWIDTH/2; i++) {
    cc1c:	f100 0260 	add.w	r2, r0, #96	; 0x60
    cc20:	f500 5001 	add.w	r0, r0, #8256	; 0x2040
    cc24:	3020      	adds	r0, #32
		for(j=IMGWIDTH/4; j < (IMGWIDTH/4)*3; j++) {
    cc26:	f1a2 0340 	sub.w	r3, r2, #64	; 0x40
			if(imageBuf[i][j] == OBSTACLE_COLOR && imageBuf[i][j-1] != OBSTACLE_COLOR) {
    cc2a:	f813 1b01 	ldrb.w	r1, [r3], #1
    cc2e:	2980      	cmp	r1, #128	; 0x80
    cc30:	d103      	bne.n	cc3a <nearObstSearch+0x1e>
    cc32:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    cc36:	2980      	cmp	r1, #128	; 0x80
    cc38:	d107      	bne.n	cc4a <nearObstSearch+0x2e>
		for(j=IMGWIDTH/4; j < (IMGWIDTH/4)*3; j++) {
    cc3a:	4293      	cmp	r3, r2
    cc3c:	d1f5      	bne.n	cc2a <nearObstSearch+0xe>
	for(i=0; i < IMGWIDTH/2; i++) {
    cc3e:	f103 0280 	add.w	r2, r3, #128	; 0x80
    cc42:	4282      	cmp	r2, r0
    cc44:	d1ef      	bne.n	cc26 <nearObstSearch+0xa>
				return 1;
			}			
		}
	}
	return 0;	
    cc46:	2000      	movs	r0, #0
}
    cc48:	4770      	bx	lr
				return 1;
    cc4a:	2001      	movs	r0, #1
    cc4c:	4770      	bx	lr

0000cc4e <obstCount>:

/* Function that counts obstacles. 
/* Crude version. Only works if one obstacle per row at max. */
int obstCount(uint8_t imageBuf[IMGWIDTH][IMGWIDTH]) {
    cc4e:	b510      	push	{r4, lr}
    cc50:	f100 0180 	add.w	r1, r0, #128	; 0x80
    cc54:	f500 4381 	add.w	r3, r0, #16512	; 0x4080
	int i, j, nobs;
	uint8_t anterior, atual;
		
	nobs=0;
    cc58:	2000      	movs	r0, #0
	anterior = 0;
	atual = 0;
		
	for(i=0; i < IMGWIDTH; i++) {
		for(j=1; j < IMGWIDTH; j++) {
    cc5a:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
			if(imageBuf[i][j] == OBSTACLE_COLOR && imageBuf[i][j-1] != OBSTACLE_COLOR) {
    cc5e:	f812 4b01 	ldrb.w	r4, [r2], #1
    cc62:	2c80      	cmp	r4, #128	; 0x80
    cc64:	d104      	bne.n	cc70 <obstCount+0x22>
    cc66:	f812 4c02 	ldrb.w	r4, [r2, #-2]
    cc6a:	2c80      	cmp	r4, #128	; 0x80
				nobs++;
    cc6c:	bf18      	it	ne
    cc6e:	3001      	addne	r0, #1
		for(j=1; j < IMGWIDTH; j++) {
    cc70:	428a      	cmp	r2, r1
    cc72:	d1f4      	bne.n	cc5e <obstCount+0x10>
	for(i=0; i < IMGWIDTH; i++) {
    cc74:	f102 0180 	add.w	r1, r2, #128	; 0x80
    cc78:	4299      	cmp	r1, r3
    cc7a:	d1ee      	bne.n	cc5a <obstCount+0xc>
			}			
		}
	}
	return nobs;
    cc7c:	bd10      	pop	{r4, pc}

0000cc7e <put_mes>:
	__asm__ volatile(
    cc7e:	f04f 0220 	mov.w	r2, #32
    cc82:	f3ef 8311 	mrs	r3, BASEPRI
    cc86:	f382 8812 	msr	BASEPRI_MAX, r2
    cc8a:	f3bf 8f6f 	isb	sy
    cab_id->img_last = s;
    cc8e:	6148      	str	r0, [r1, #20]
	__asm__ volatile(
    cc90:	f383 8811 	msr	BASEPRI, r3
    cc94:	f3bf 8f6f 	isb	sy
}
    cc98:	4770      	bx	lr

0000cc9a <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    cc9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc9e:	4607      	mov	r7, r0
    cca0:	460e      	mov	r6, r1
    cca2:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    cca4:	461d      	mov	r5, r3
    cca6:	b30b      	cbz	r3, ccec <cbpprintf_external+0x52>
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
	rws_nbr   = buf[3];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    cca8:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    ccaa:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    ccac:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    ccb0:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    ccb2:	441c      	add	r4, r3
    ccb4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    ccb8:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    ccba:	f04f 0900 	mov.w	r9, #0
    ccbe:	45d1      	cmp	r9, sl
    ccc0:	d308      	bcc.n	ccd4 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    ccc2:	686a      	ldr	r2, [r5, #4]
    ccc4:	f105 0308 	add.w	r3, r5, #8
    ccc8:	4641      	mov	r1, r8
    ccca:	4638      	mov	r0, r7
    cccc:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    ccce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    ccd2:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    ccd4:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    ccd8:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    ccdc:	4620      	mov	r0, r4
    ccde:	f7f4 f930 	bl	f42 <strlen>
    cce2:	3001      	adds	r0, #1
    cce4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    cce6:	f109 0901 	add.w	r9, r9, #1
    ccea:	e7e8      	b.n	ccbe <cbpprintf_external+0x24>
}
    ccec:	f06f 0015 	mvn.w	r0, #21
    ccf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ccf4 <sys_notify_validate>:
	if (notify == NULL) {
    ccf4:	4603      	mov	r3, r0
    ccf6:	b158      	cbz	r0, cd10 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ccf8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    ccfa:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    ccfe:	2a01      	cmp	r2, #1
    cd00:	d003      	beq.n	cd0a <sys_notify_validate+0x16>
    cd02:	2a03      	cmp	r2, #3
    cd04:	d104      	bne.n	cd10 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    cd06:	6802      	ldr	r2, [r0, #0]
    cd08:	b112      	cbz	r2, cd10 <sys_notify_validate+0x1c>
		notify->result = 0;
    cd0a:	2000      	movs	r0, #0
    cd0c:	6098      	str	r0, [r3, #8]
    cd0e:	4770      	bx	lr
		return -EINVAL;
    cd10:	f06f 0015 	mvn.w	r0, #21
}
    cd14:	4770      	bx	lr

0000cd16 <arch_printk_char_out>:
}
    cd16:	2000      	movs	r0, #0
    cd18:	4770      	bx	lr

0000cd1a <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    cd1a:	f000 b8c9 	b.w	ceb0 <z_log_vprintk>

0000cd1e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    cd1e:	b40f      	push	{r0, r1, r2, r3}
    cd20:	b507      	push	{r0, r1, r2, lr}
    cd22:	a904      	add	r1, sp, #16
    cd24:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    cd28:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    cd2a:	f000 f8c1 	bl	ceb0 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    cd2e:	b003      	add	sp, #12
    cd30:	f85d eb04 	ldr.w	lr, [sp], #4
    cd34:	b004      	add	sp, #16
    cd36:	4770      	bx	lr

0000cd38 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd38:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    cd3a:	f013 0307 	ands.w	r3, r3, #7
    cd3e:	d105      	bne.n	cd4c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    cd40:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    cd42:	2b00      	cmp	r3, #0
    cd44:	bf0c      	ite	eq
    cd46:	2000      	moveq	r0, #0
    cd48:	2003      	movne	r0, #3
    cd4a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    cd4c:	2b02      	cmp	r3, #2
    cd4e:	d105      	bne.n	cd5c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    cd50:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
    cd52:	2b00      	cmp	r3, #0
    cd54:	bf14      	ite	ne
    cd56:	2000      	movne	r0, #0
    cd58:	2004      	moveq	r0, #4
    cd5a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    cd5c:	2b01      	cmp	r3, #1
    cd5e:	d105      	bne.n	cd6c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    cd60:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    cd62:	2b00      	cmp	r3, #0
    cd64:	bf0c      	ite	eq
    cd66:	2000      	moveq	r0, #0
    cd68:	2005      	movne	r0, #5
    cd6a:	4770      	bx	lr
	int evt = EVT_NOP;
    cd6c:	2000      	movs	r0, #0
}
    cd6e:	4770      	bx	lr

0000cd70 <notify_one>:
{
    cd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd74:	460d      	mov	r5, r1
    cd76:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    cd78:	4619      	mov	r1, r3
    cd7a:	1d28      	adds	r0, r5, #4
{
    cd7c:	4690      	mov	r8, r2
    cd7e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    cd80:	f7f5 ff92 	bl	2ca8 <sys_notify_finalize>
	if (cb) {
    cd84:	4604      	mov	r4, r0
    cd86:	b138      	cbz	r0, cd98 <notify_one+0x28>
		cb(mgr, cli, state, res);
    cd88:	4633      	mov	r3, r6
    cd8a:	4642      	mov	r2, r8
    cd8c:	4629      	mov	r1, r5
    cd8e:	4638      	mov	r0, r7
    cd90:	46a4      	mov	ip, r4
}
    cd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    cd96:	4760      	bx	ip
}
    cd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cd9c <validate_args>:
{
    cd9c:	b510      	push	{r4, lr}
    cd9e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    cda0:	b140      	cbz	r0, cdb4 <validate_args+0x18>
    cda2:	b139      	cbz	r1, cdb4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    cda4:	1d08      	adds	r0, r1, #4
    cda6:	f7ff ffa5 	bl	ccf4 <sys_notify_validate>
	if ((rv == 0)
    cdaa:	b928      	cbnz	r0, cdb8 <validate_args+0x1c>
	    && ((cli->notify.flags
    cdac:	68a3      	ldr	r3, [r4, #8]
    cdae:	f033 0303 	bics.w	r3, r3, #3
    cdb2:	d001      	beq.n	cdb8 <validate_args+0x1c>
		rv = -EINVAL;
    cdb4:	f06f 0015 	mvn.w	r0, #21
}
    cdb8:	bd10      	pop	{r4, pc}

0000cdba <onoff_manager_init>:
{
    cdba:	b538      	push	{r3, r4, r5, lr}
    cdbc:	460c      	mov	r4, r1
	if ((mgr == NULL)
    cdbe:	4605      	mov	r5, r0
    cdc0:	b158      	cbz	r0, cdda <onoff_manager_init+0x20>
	    || (transitions == NULL)
    cdc2:	b151      	cbz	r1, cdda <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    cdc4:	680b      	ldr	r3, [r1, #0]
    cdc6:	b143      	cbz	r3, cdda <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    cdc8:	684b      	ldr	r3, [r1, #4]
    cdca:	b133      	cbz	r3, cdda <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    cdcc:	2220      	movs	r2, #32
    cdce:	2100      	movs	r1, #0
    cdd0:	f000 fe60 	bl	da94 <memset>
    cdd4:	612c      	str	r4, [r5, #16]
	return 0;
    cdd6:	2000      	movs	r0, #0
}
    cdd8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    cdda:	f06f 0015 	mvn.w	r0, #21
    cdde:	e7fb      	b.n	cdd8 <onoff_manager_init+0x1e>

0000cde0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    cde0:	4604      	mov	r4, r0
    cde2:	b508      	push	{r3, lr}
    cde4:	4608      	mov	r0, r1
    cde6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    cde8:	461a      	mov	r2, r3
    cdea:	47a0      	blx	r4
	return z_impl_z_current_get();
    cdec:	f7fd f996 	bl	a11c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    cdf0:	f7f8 fa84 	bl	52fc <z_impl_k_thread_abort>

0000cdf4 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    cdf4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    cdf8:	8840      	ldrh	r0, [r0, #2]
}
    cdfa:	0840      	lsrs	r0, r0, #1
    cdfc:	4770      	bx	lr

0000cdfe <free_list_add>:
{
    cdfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce00:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    ce02:	f7ff fff7 	bl	cdf4 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    ce06:	fab0 f080 	clz	r0, r0
    ce0a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    ce0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    ce12:	00ca      	lsls	r2, r1, #3
    ce14:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    ce18:	1d17      	adds	r7, r2, #4
{
    ce1a:	460c      	mov	r4, r1
    ce1c:	3206      	adds	r2, #6
    ce1e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    ce20:	b956      	cbnz	r6, ce38 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    ce22:	2101      	movs	r1, #1
    ce24:	fa01 f000 	lsl.w	r0, r1, r0
    ce28:	68d9      	ldr	r1, [r3, #12]
    ce2a:	4301      	orrs	r1, r0
    ce2c:	60d9      	str	r1, [r3, #12]
		b->next = c;
    ce2e:	f8cc 4010 	str.w	r4, [ip, #16]
    ce32:	53dd      	strh	r5, [r3, r7]
    ce34:	529d      	strh	r5, [r3, r2]
}
    ce36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    ce38:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    ce3a:	3104      	adds	r1, #4
    ce3c:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    ce3e:	53d8      	strh	r0, [r3, r7]
    ce40:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ce44:	529e      	strh	r6, [r3, r2]
    ce46:	80c5      	strh	r5, [r0, #6]
    ce48:	525d      	strh	r5, [r3, r1]
    ce4a:	e7f4      	b.n	ce36 <free_list_add+0x38>

0000ce4c <outs>:
{
    ce4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce50:	4607      	mov	r7, r0
    ce52:	4688      	mov	r8, r1
    ce54:	4615      	mov	r5, r2
    ce56:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ce58:	4614      	mov	r4, r2
    ce5a:	42b4      	cmp	r4, r6
    ce5c:	eba4 0005 	sub.w	r0, r4, r5
    ce60:	d302      	bcc.n	ce68 <outs+0x1c>
    ce62:	b93e      	cbnz	r6, ce74 <outs+0x28>
    ce64:	7823      	ldrb	r3, [r4, #0]
    ce66:	b12b      	cbz	r3, ce74 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    ce68:	f814 0b01 	ldrb.w	r0, [r4], #1
    ce6c:	4641      	mov	r1, r8
    ce6e:	47b8      	blx	r7
		if (rc < 0) {
    ce70:	2800      	cmp	r0, #0
    ce72:	daf2      	bge.n	ce5a <outs+0xe>
}
    ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ce78 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    ce78:	4040      	eors	r0, r0
    ce7a:	f380 8811 	msr	BASEPRI, r0
    ce7e:	f04f 0004 	mov.w	r0, #4
    ce82:	df02      	svc	2
}
    ce84:	4770      	bx	lr

0000ce86 <assert_print>:

void assert_print(const char *fmt, ...)
{
    ce86:	b40f      	push	{r0, r1, r2, r3}
    ce88:	b507      	push	{r0, r1, r2, lr}
    ce8a:	a904      	add	r1, sp, #16
    ce8c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    ce90:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    ce92:	f7ff ff42 	bl	cd1a <vprintk>

	va_end(ap);
}
    ce96:	b003      	add	sp, #12
    ce98:	f85d eb04 	ldr.w	lr, [sp], #4
    ce9c:	b004      	add	sp, #16
    ce9e:	4770      	bx	lr

0000cea0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    cea0:	4770      	bx	lr

0000cea2 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    cea2:	6843      	ldr	r3, [r0, #4]
}
    cea4:	7958      	ldrb	r0, [r3, #5]
    cea6:	4770      	bx	lr

0000cea8 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    cea8:	f000 bba1 	b.w	d5ee <sys_clock_cycle_get_32>

0000ceac <dummy_timestamp>:
    ceac:	2000      	movs	r0, #0
    ceae:	4770      	bx	lr

0000ceb0 <z_log_vprintk>:
{
    ceb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ceb2:	2300      	movs	r3, #0
    ceb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ceb8:	e9cd 3300 	strd	r3, r3, [sp]
    cebc:	461a      	mov	r2, r3
    cebe:	4619      	mov	r1, r3
    cec0:	4618      	mov	r0, r3
    cec2:	f7f7 f961 	bl	4188 <z_impl_z_log_msg2_runtime_vcreate>
}
    cec6:	b005      	add	sp, #20
    cec8:	f85d fb04 	ldr.w	pc, [sp], #4

0000cecc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    cecc:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    cece:	f7f6 febb 	bl	3c48 <log_init>
	}

	return 0;
}
    ced2:	2000      	movs	r0, #0
    ced4:	bd08      	pop	{r3, pc}

0000ced6 <z_log_get_tag>:
}
    ced6:	2000      	movs	r0, #0
    ced8:	4770      	bx	lr

0000ceda <out_func>:
{
    ceda:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    cedc:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    cee0:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    cee4:	6852      	ldr	r2, [r2, #4]
    cee6:	2101      	movs	r1, #1
    cee8:	f10d 0007 	add.w	r0, sp, #7
    ceec:	4798      	blx	r3
}
    ceee:	2000      	movs	r0, #0
    cef0:	b003      	add	sp, #12
    cef2:	f85d fb04 	ldr.w	pc, [sp], #4

0000cef6 <cr_out_func>:
{
    cef6:	b538      	push	{r3, r4, r5, lr}
    cef8:	4605      	mov	r5, r0
    cefa:	460c      	mov	r4, r1
	out_func(c, ctx);
    cefc:	f7ff ffed 	bl	ceda <out_func>
	if (c == '\n') {
    cf00:	2d0a      	cmp	r5, #10
    cf02:	d103      	bne.n	cf0c <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    cf04:	4621      	mov	r1, r4
    cf06:	200d      	movs	r0, #13
    cf08:	f7ff ffe7 	bl	ceda <out_func>
}
    cf0c:	2000      	movs	r0, #0
    cf0e:	bd38      	pop	{r3, r4, r5, pc}

0000cf10 <buffer_write>:
{
    cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf12:	4606      	mov	r6, r0
    cf14:	460d      	mov	r5, r1
    cf16:	4614      	mov	r4, r2
    cf18:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    cf1a:	4621      	mov	r1, r4
    cf1c:	4628      	mov	r0, r5
    cf1e:	463a      	mov	r2, r7
    cf20:	47b0      	blx	r6
	} while (len != 0);
    cf22:	1a24      	subs	r4, r4, r0
		buf += processed;
    cf24:	4405      	add	r5, r0
	} while (len != 0);
    cf26:	d1f8      	bne.n	cf1a <buffer_write+0xa>
}
    cf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cf2a <log_output_flush>:
		     output->control_block->offset,
    cf2a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    cf2c:	6881      	ldr	r1, [r0, #8]
{
    cf2e:	b510      	push	{r4, lr}
    cf30:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    cf32:	e9d2 2300 	ldrd	r2, r3, [r2]
    cf36:	6800      	ldr	r0, [r0, #0]
    cf38:	f7ff ffea 	bl	cf10 <buffer_write>
	output->control_block->offset = 0;
    cf3c:	6863      	ldr	r3, [r4, #4]
    cf3e:	2200      	movs	r2, #0
    cf40:	601a      	str	r2, [r3, #0]
}
    cf42:	bd10      	pop	{r4, pc}

0000cf44 <z_log_msg2_finalize>:
{
    cf44:	b570      	push	{r4, r5, r6, lr}
    cf46:	460e      	mov	r6, r1
    cf48:	4615      	mov	r5, r2
    cf4a:	4619      	mov	r1, r3
	if (!msg) {
    cf4c:	4604      	mov	r4, r0
    cf4e:	b918      	cbnz	r0, cf58 <z_log_msg2_finalize+0x14>
}
    cf50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    cf54:	f7f6 bede 	b.w	3d14 <z_log_dropped>
	if (data) {
    cf58:	b143      	cbz	r3, cf6c <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    cf5a:	f100 0310 	add.w	r3, r0, #16
    cf5e:	f3c2 2049 	ubfx	r0, r2, #9, #10
    cf62:	4418      	add	r0, r3
    cf64:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    cf68:	f000 fd86 	bl	da78 <memcpy>
	msg->hdr.source = source;
    cf6c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    cf70:	4620      	mov	r0, r4
}
    cf72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    cf76:	f7f6 beeb 	b.w	3d50 <z_log_msg2_commit>

0000cf7a <abort_function>:
{
    cf7a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    cf7c:	2000      	movs	r0, #0
    cf7e:	f7f6 fe01 	bl	3b84 <sys_reboot>

0000cf82 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    cf82:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    cf84:	ab0b      	add	r3, sp, #44	; 0x2c
    cf86:	9305      	str	r3, [sp, #20]
    cf88:	9303      	str	r3, [sp, #12]
    cf8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf8c:	9302      	str	r3, [sp, #8]
    cf8e:	2300      	movs	r3, #0
    cf90:	e9cd 3300 	strd	r3, r3, [sp]
    cf94:	2201      	movs	r2, #1
    cf96:	4618      	mov	r0, r3
    cf98:	f7f7 f8f6 	bl	4188 <z_impl_z_log_msg2_runtime_vcreate>
}
    cf9c:	b007      	add	sp, #28
    cf9e:	f85d fb04 	ldr.w	pc, [sp], #4

0000cfa2 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    cfa2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    cfa4:	6800      	ldr	r0, [r0, #0]
    cfa6:	f7f7 bc85 	b.w	48b4 <z_arm_fatal_error>

0000cfaa <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    cfaa:	2100      	movs	r1, #0
    cfac:	2001      	movs	r0, #1
    cfae:	f7f7 bc81 	b.w	48b4 <z_arm_fatal_error>

0000cfb2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    cfb2:	b508      	push	{r3, lr}
	handler();
    cfb4:	f7f7 fd20 	bl	49f8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    cfb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    cfbc:	f7f7 bdf8 	b.w	4bb0 <z_arm_exc_exit>

0000cfc0 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    cfc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    cfc2:	ab0b      	add	r3, sp, #44	; 0x2c
    cfc4:	9305      	str	r3, [sp, #20]
    cfc6:	9303      	str	r3, [sp, #12]
    cfc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cfca:	9302      	str	r3, [sp, #8]
    cfcc:	2300      	movs	r3, #0
    cfce:	e9cd 3300 	strd	r3, r3, [sp]
    cfd2:	2201      	movs	r2, #1
    cfd4:	4618      	mov	r0, r3
    cfd6:	f7f7 f8d7 	bl	4188 <z_impl_z_log_msg2_runtime_vcreate>
}
    cfda:	b007      	add	sp, #28
    cfdc:	f85d fb04 	ldr.w	pc, [sp], #4

0000cfe0 <arch_timing_cycles_get>:
{
    cfe0:	b530      	push	{r4, r5, lr}
	return (*end - *start);
    cfe2:	e9d1 4500 	ldrd	r4, r5, [r1]
    cfe6:	e9d0 2300 	ldrd	r2, r3, [r0]
    cfea:	1aa0      	subs	r0, r4, r2
    cfec:	eb65 0103 	sbc.w	r1, r5, r3
}
    cff0:	bd30      	pop	{r4, r5, pc}

0000cff2 <arch_timing_cycles_to_ns>:
{
    cff2:	b570      	push	{r4, r5, r6, lr}
    cff4:	460d      	mov	r5, r1
    cff6:	4604      	mov	r4, r0
	return (cycles) * (NSEC_PER_USEC) / arch_timing_freq_get_mhz();
    cff8:	f7f8 f9d4 	bl	53a4 <arch_timing_freq_get_mhz>
    cffc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    d000:	4602      	mov	r2, r0
    d002:	fba4 0106 	umull	r0, r1, r4, r6
    d006:	2300      	movs	r3, #0
    d008:	fb06 1105 	mla	r1, r6, r5, r1
    d00c:	f7f3 fd5c 	bl	ac8 <__aeabi_uldivmod>
}
    d010:	bd70      	pop	{r4, r5, r6, pc}

0000d012 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    d012:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    d014:	ab0b      	add	r3, sp, #44	; 0x2c
    d016:	9305      	str	r3, [sp, #20]
    d018:	9303      	str	r3, [sp, #12]
    d01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d01c:	9302      	str	r3, [sp, #8]
    d01e:	2300      	movs	r3, #0
    d020:	e9cd 3300 	strd	r3, r3, [sp]
    d024:	2201      	movs	r2, #1
    d026:	4618      	mov	r0, r3
    d028:	f7f7 f8ae 	bl	4188 <z_impl_z_log_msg2_runtime_vcreate>
}
    d02c:	b007      	add	sp, #28
    d02e:	f85d fb04 	ldr.w	pc, [sp], #4

0000d032 <_stdout_hook_default>:
}
    d032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d036:	4770      	bx	lr

0000d038 <_stdin_hook_default>:
}
    d038:	2000      	movs	r0, #0
    d03a:	4770      	bx	lr

0000d03c <_read>:
{
    d03c:	4608      	mov	r0, r1
    d03e:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
    d040:	f7f8 bb30 	b.w	56a4 <z_impl_zephyr_read_stdin>

0000d044 <_write>:
{
    d044:	4608      	mov	r0, r1
    d046:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
    d048:	f7f8 bb40 	b.w	56cc <z_impl_zephyr_write_stdout>

0000d04c <_close>:
    d04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d050:	4770      	bx	lr

0000d052 <_lseek>:
}
    d052:	2000      	movs	r0, #0
    d054:	4770      	bx	lr

0000d056 <_isatty>:
}
    d056:	2802      	cmp	r0, #2
    d058:	bfcc      	ite	gt
    d05a:	2000      	movgt	r0, #0
    d05c:	2001      	movle	r0, #1
    d05e:	4770      	bx	lr

0000d060 <_kill>:
}
    d060:	2000      	movs	r0, #0
    d062:	4770      	bx	lr

0000d064 <_getpid>:
}
    d064:	2000      	movs	r0, #0
    d066:	4770      	bx	lr

0000d068 <_fstat>:
	st->st_mode = S_IFCHR;
    d068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    d06c:	604b      	str	r3, [r1, #4]
}
    d06e:	2000      	movs	r0, #0
    d070:	4770      	bx	lr

0000d072 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    d072:	2806      	cmp	r0, #6
    d074:	d108      	bne.n	d088 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    d076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d07a:	2201      	movs	r2, #1
    d07c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    d080:	f3bf 8f4f 	dsb	sy
        __WFE();
    d084:	bf20      	wfe
    while (true)
    d086:	e7fd      	b.n	d084 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    d088:	4770      	bx	lr

0000d08a <pm_state_exit_post_ops>:
    d08a:	2300      	movs	r3, #0
    d08c:	f383 8811 	msr	BASEPRI, r3
    d090:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    d094:	4770      	bx	lr

0000d096 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    d096:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    d098:	ab0b      	add	r3, sp, #44	; 0x2c
    d09a:	9305      	str	r3, [sp, #20]
    d09c:	9303      	str	r3, [sp, #12]
    d09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d0a0:	9302      	str	r3, [sp, #8]
    d0a2:	2300      	movs	r3, #0
    d0a4:	e9cd 3300 	strd	r3, r3, [sp]
    d0a8:	2201      	movs	r2, #1
    d0aa:	4618      	mov	r0, r3
    d0ac:	f7f7 f86c 	bl	4188 <z_impl_z_log_msg2_runtime_vcreate>
}
    d0b0:	b007      	add	sp, #28
    d0b2:	f85d fb04 	ldr.w	pc, [sp], #4

0000d0b6 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d0b6:	f1a0 0308 	sub.w	r3, r0, #8
    d0ba:	f3bf 8f5b 	dmb	ish
    d0be:	e853 2f00 	ldrex	r2, [r3]
    d0c2:	1c51      	adds	r1, r2, #1
    d0c4:	e843 1c00 	strex	ip, r1, [r3]
    d0c8:	f1bc 0f00 	cmp.w	ip, #0
    d0cc:	d1f7      	bne.n	d0be <adc_context_on_timer_expired+0x8>
    d0ce:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    d0d2:	b91a      	cbnz	r2, d0dc <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    d0d4:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    d0d8:	f7f8 bc88 	b.w	59ec <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    d0dc:	f06f 030f 	mvn.w	r3, #15
    d0e0:	6583      	str	r3, [r0, #88]	; 0x58
}
    d0e2:	4770      	bx	lr

0000d0e4 <set_on_state>:
	__asm__ volatile(
    d0e4:	f04f 0320 	mov.w	r3, #32
    d0e8:	f3ef 8211 	mrs	r2, BASEPRI
    d0ec:	f383 8812 	msr	BASEPRI_MAX, r3
    d0f0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    d0f4:	6803      	ldr	r3, [r0, #0]
    d0f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d0fa:	f043 0302 	orr.w	r3, r3, #2
    d0fe:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    d100:	f382 8811 	msr	BASEPRI, r2
    d104:	f3bf 8f6f 	isb	sy
}
    d108:	4770      	bx	lr

0000d10a <async_start>:
{
    d10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d10c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    d10e:	6904      	ldr	r4, [r0, #16]
{
    d110:	4605      	mov	r5, r0
    d112:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    d114:	f04f 0020 	mov.w	r0, #32
    d118:	f3ef 8c11 	mrs	ip, BASEPRI
    d11c:	f380 8812 	msr	BASEPRI_MAX, r0
    d120:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d124:	260c      	movs	r6, #12
    d126:	fb06 4601 	mla	r6, r6, r1, r4
    d12a:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    d12c:	f000 0e07 	and.w	lr, r0, #7
    d130:	f1be 0f01 	cmp.w	lr, #1
    d134:	d110      	bne.n	d158 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    d136:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    d138:	2600      	movs	r6, #0
	__asm__ volatile(
    d13a:	f38c 8811 	msr	BASEPRI, ip
    d13e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    d142:	b93e      	cbnz	r6, d154 <async_start+0x4a>
	subdata->cb = cb;
    d144:	200c      	movs	r0, #12
    d146:	4341      	muls	r1, r0
    d148:	440c      	add	r4, r1
	subdata->user_data = user_data;
    d14a:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    d14e:	686b      	ldr	r3, [r5, #4]
    d150:	585b      	ldr	r3, [r3, r1]
    d152:	4798      	blx	r3
}
    d154:	4630      	mov	r0, r6
    d156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    d158:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    d15c:	4287      	cmp	r7, r0
    d15e:	bf14      	ite	ne
    d160:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    d164:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    d168:	e7e7      	b.n	d13a <async_start+0x30>

0000d16a <api_start>:
{
    d16a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    d16c:	2480      	movs	r4, #128	; 0x80
    d16e:	9400      	str	r4, [sp, #0]
    d170:	f7ff ffcb 	bl	d10a <async_start>
}
    d174:	b002      	add	sp, #8
    d176:	bd10      	pop	{r4, pc}

0000d178 <onoff_started_callback>:
	return &data->mgr[type];
    d178:	6900      	ldr	r0, [r0, #16]
    d17a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    d17c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    d180:	2100      	movs	r1, #0
    d182:	4710      	bx	r2

0000d184 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    d184:	2000      	movs	r0, #0
    d186:	f7fa bb43 	b.w	7810 <nrfx_clock_start>

0000d18a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d18a:	2000      	movs	r0, #0
    d18c:	f7fa bba4 	b.w	78d8 <nrfx_clock_stop>

0000d190 <api_stop>:
	return stop(dev, subsys, CTX_API);
    d190:	2280      	movs	r2, #128	; 0x80
    d192:	f7f8 bdf9 	b.w	5d88 <stop>

0000d196 <blocking_start_callback>:
{
    d196:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    d198:	f7fb be62 	b.w	8e60 <z_impl_k_sem_give>

0000d19c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d19c:	6843      	ldr	r3, [r0, #4]
    d19e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    d1a0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    d1a4:	600b      	str	r3, [r1, #0]
}
    d1a6:	2000      	movs	r0, #0
    d1a8:	4770      	bx	lr

0000d1aa <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d1aa:	6843      	ldr	r3, [r0, #4]
    d1ac:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    d1ae:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    d1b2:	4042      	eors	r2, r0
    d1b4:	400a      	ands	r2, r1
    d1b6:	4042      	eors	r2, r0
    p_reg->OUT = value;
    d1b8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    d1bc:	2000      	movs	r0, #0
    d1be:	4770      	bx	lr

0000d1c0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d1c0:	6843      	ldr	r3, [r0, #4]
    d1c2:	685b      	ldr	r3, [r3, #4]
}
    d1c4:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    d1c6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    d1ca:	4770      	bx	lr

0000d1cc <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d1cc:	6843      	ldr	r3, [r0, #4]
    d1ce:	685b      	ldr	r3, [r3, #4]
}
    d1d0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    d1d2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    d1d6:	4770      	bx	lr

0000d1d8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d1d8:	6843      	ldr	r3, [r0, #4]
    d1da:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    d1dc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    d1e0:	404b      	eors	r3, r1
    p_reg->OUT = value;
    d1e2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    d1e6:	2000      	movs	r0, #0
    d1e8:	4770      	bx	lr

0000d1ea <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    d1ea:	6902      	ldr	r2, [r0, #16]
{
    d1ec:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    d1ee:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    d1f2:	e883 0003 	stmia.w	r3, {r0, r1}
}
    d1f6:	2000      	movs	r0, #0
    d1f8:	4770      	bx	lr

0000d1fa <uarte_nrfx_err_check>:
	return config->uarte_regs;
    d1fa:	6843      	ldr	r3, [r0, #4]
    d1fc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    d1fe:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    d202:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    d206:	4770      	bx	lr

0000d208 <tx_start>:
{
    d208:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    d20a:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    d20c:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    d20e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    d212:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d216:	2200      	movs	r2, #0
    d218:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d21c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    d220:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    d224:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d228:	6862      	ldr	r2, [r4, #4]
    d22a:	06d2      	lsls	r2, r2, #27
    d22c:	d50f      	bpl.n	d24e <tx_start+0x46>
	if (data->async) {
    d22e:	6902      	ldr	r2, [r0, #16]
    d230:	68d2      	ldr	r2, [r2, #12]
    d232:	b12a      	cbz	r2, d240 <tx_start+0x38>
		data->async->low_power_mask |= mask;
    d234:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    d238:	f041 0101 	orr.w	r1, r1, #1
    d23c:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    d240:	2208      	movs	r2, #8
    d242:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    d246:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    d24a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d24e:	2201      	movs	r2, #1
    d250:	609a      	str	r2, [r3, #8]
}
    d252:	bd10      	pop	{r4, pc}

0000d254 <user_callback>:
	if (data->async->user_callback) {
    d254:	6903      	ldr	r3, [r0, #16]
    d256:	68da      	ldr	r2, [r3, #12]
    d258:	6813      	ldr	r3, [r2, #0]
    d25a:	b10b      	cbz	r3, d260 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    d25c:	6852      	ldr	r2, [r2, #4]
    d25e:	4718      	bx	r3
}
    d260:	4770      	bx	lr

0000d262 <notify_uart_rx_rdy>:
{
    d262:	b570      	push	{r4, r5, r6, lr}
    d264:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
    d266:	6906      	ldr	r6, [r0, #16]
{
    d268:	4604      	mov	r4, r0
    d26a:	460d      	mov	r5, r1
	struct uart_event evt = {
    d26c:	2214      	movs	r2, #20
    d26e:	2100      	movs	r1, #0
    d270:	a801      	add	r0, sp, #4
    d272:	f000 fc0f 	bl	da94 <memset>
    d276:	2302      	movs	r3, #2
    d278:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    d27c:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    d27e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    d282:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    d284:	a901      	add	r1, sp, #4
    d286:	4620      	mov	r0, r4
	struct uart_event evt = {
    d288:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    d28c:	f7ff ffe2 	bl	d254 <user_callback>
}
    d290:	b006      	add	sp, #24
    d292:	bd70      	pop	{r4, r5, r6, pc}

0000d294 <rx_buf_release>:
{
    d294:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
    d296:	680e      	ldr	r6, [r1, #0]
{
    d298:	b086      	sub	sp, #24
    d29a:	4605      	mov	r5, r0
    d29c:	460c      	mov	r4, r1
	if (*buf) {
    d29e:	b17e      	cbz	r6, d2c0 <rx_buf_release+0x2c>
		struct uart_event evt = {
    d2a0:	2214      	movs	r2, #20
    d2a2:	2100      	movs	r1, #0
    d2a4:	a801      	add	r0, sp, #4
    d2a6:	f000 fbf5 	bl	da94 <memset>
    d2aa:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    d2ac:	eb0d 0103 	add.w	r1, sp, r3
    d2b0:	4628      	mov	r0, r5
		struct uart_event evt = {
    d2b2:	f88d 3004 	strb.w	r3, [sp, #4]
    d2b6:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
    d2b8:	f7ff ffcc 	bl	d254 <user_callback>
		*buf = NULL;
    d2bc:	2300      	movs	r3, #0
    d2be:	6023      	str	r3, [r4, #0]
}
    d2c0:	b006      	add	sp, #24
    d2c2:	bd70      	pop	{r4, r5, r6, pc}

0000d2c4 <notify_rx_disable>:
{
    d2c4:	b510      	push	{r4, lr}
    d2c6:	b086      	sub	sp, #24
    d2c8:	4604      	mov	r4, r0
	struct uart_event evt = {
    d2ca:	2214      	movs	r2, #20
    d2cc:	2100      	movs	r1, #0
    d2ce:	a801      	add	r0, sp, #4
    d2d0:	f000 fbe0 	bl	da94 <memset>
    d2d4:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    d2d6:	a901      	add	r1, sp, #4
    d2d8:	4620      	mov	r0, r4
	struct uart_event evt = {
    d2da:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    d2de:	f7ff ffb9 	bl	d254 <user_callback>
}
    d2e2:	b006      	add	sp, #24
    d2e4:	bd10      	pop	{r4, pc}

0000d2e6 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    d2e6:	6843      	ldr	r3, [r0, #4]
{
    d2e8:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    d2ea:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    d2ec:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    d2ee:	f04f 0020 	mov.w	r0, #32
    d2f2:	f3ef 8511 	mrs	r5, BASEPRI
    d2f6:	f380 8812 	msr	BASEPRI_MAX, r0
    d2fa:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    d2fe:	68e4      	ldr	r4, [r4, #12]
    d300:	6e20      	ldr	r0, [r4, #96]	; 0x60
    d302:	b190      	cbz	r0, d32a <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    d304:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    d306:	b998      	cbnz	r0, d330 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    d308:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    d30c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    d310:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    d314:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d318:	f042 0220 	orr.w	r2, r2, #32
    d31c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    d320:	f385 8811 	msr	BASEPRI, r5
    d324:	f3bf 8f6f 	isb	sy
}
    d328:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    d32a:	f06f 000c 	mvn.w	r0, #12
    d32e:	e7f7      	b.n	d320 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    d330:	f06f 000f 	mvn.w	r0, #15
    d334:	e7f4      	b.n	d320 <uarte_nrfx_rx_buf_rsp+0x3a>

0000d336 <uarte_nrfx_callback_set>:
	if (!data->async) {
    d336:	6903      	ldr	r3, [r0, #16]
    d338:	68db      	ldr	r3, [r3, #12]
    d33a:	b11b      	cbz	r3, d344 <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    d33c:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    d340:	2000      	movs	r0, #0
    d342:	4770      	bx	lr
		return -ENOTSUP;
    d344:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    d348:	4770      	bx	lr

0000d34a <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    d34a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    d34c:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    d34e:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    d350:	681b      	ldr	r3, [r3, #0]
{
    d352:	b510      	push	{r4, lr}
	if (data->async) {
    d354:	b958      	cbnz	r0, d36e <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d356:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d35a:	b15c      	cbz	r4, d374 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    d35c:	7d52      	ldrb	r2, [r2, #21]
    d35e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d360:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    d364:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d368:	2201      	movs	r2, #1
    d36a:	601a      	str	r2, [r3, #0]
}
    d36c:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    d36e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d372:	e7fb      	b.n	d36c <uarte_nrfx_poll_in+0x22>
		return -1;
    d374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d378:	e7f8      	b.n	d36c <uarte_nrfx_poll_in+0x22>

0000d37a <uarte_nrfx_rx_disable>:
{
    d37a:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    d37c:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    d37e:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    d380:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    d382:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    d384:	6e03      	ldr	r3, [r0, #96]	; 0x60
    d386:	b1b3      	cbz	r3, d3b6 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    d388:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    d38a:	b153      	cbz	r3, d3a2 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    d38c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    d390:	f023 0320 	bic.w	r3, r3, #32
    d394:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d398:	2300      	movs	r3, #0
    d39a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    d39e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	z_impl_k_timer_stop(timer);
    d3a2:	3088      	adds	r0, #136	; 0x88
    d3a4:	f000 fb3e 	bl	da24 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    d3a8:	68eb      	ldr	r3, [r5, #12]
    d3aa:	2000      	movs	r0, #0
    d3ac:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d3b0:	2301      	movs	r3, #1
    d3b2:	6063      	str	r3, [r4, #4]
}
    d3b4:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    d3b6:	f06f 000d 	mvn.w	r0, #13
    d3ba:	e7fb      	b.n	d3b4 <uarte_nrfx_rx_disable+0x3a>

0000d3bc <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    d3bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
    d3be:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    d3c0:	4614      	mov	r4, r2
    return p_reg->RXD.AMOUNT;
    d3c2:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    d3c6:	460b      	mov	r3, r1
    d3c8:	bb31      	cbnz	r1, d418 <rx_flush.isra.0+0x5c>
    d3ca:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
    d3cc:	4669      	mov	r1, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    d3ce:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d3d2:	2100      	movs	r1, #0
    p_reg->RXD.MAXCNT = length;
    d3d4:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d3d8:	2001      	movs	r0, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d3da:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    d3de:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d3e2:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d3e4:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d3e8:	2800      	cmp	r0, #0
    d3ea:	d0fb      	beq.n	d3e4 <rx_flush.isra.0+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d3ec:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    d3f0:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    d3f4:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
    d3f8:	b913      	cbnz	r3, d400 <rx_flush.isra.0+0x44>
			return rx_amount;
    d3fa:	b2c0      	uxtb	r0, r0
}
    d3fc:	b002      	add	sp, #8
    d3fe:	bd70      	pop	{r4, r5, r6, pc}
	if (rx_amount != prev_rx_amount) {
    d400:	4285      	cmp	r5, r0
    d402:	d1fa      	bne.n	d3fa <rx_flush.isra.0+0x3e>
    d404:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
    d406:	429a      	cmp	r2, r3
    d408:	d101      	bne.n	d40e <rx_flush.isra.0+0x52>
	return 0;
    d40a:	2000      	movs	r0, #0
    d40c:	e7f6      	b.n	d3fc <rx_flush.isra.0+0x40>
		if (buf[i] != dirty) {
    d40e:	f813 1b01 	ldrb.w	r1, [r3], #1
    d412:	2900      	cmp	r1, #0
    d414:	d0f7      	beq.n	d406 <rx_flush.isra.0+0x4a>
    d416:	e7f0      	b.n	d3fa <rx_flush.isra.0+0x3e>
__ssp_bos_icheck3(memset, void *, int)
    d418:	2100      	movs	r1, #0
    d41a:	4618      	mov	r0, r3
    d41c:	f000 fb3a 	bl	da94 <memset>
    d420:	4603      	mov	r3, r0
    d422:	4601      	mov	r1, r0
    d424:	e7d3      	b.n	d3ce <rx_flush.isra.0+0x12>

0000d426 <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    d426:	68c2      	ldr	r2, [r0, #12]
    d428:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    d42a:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    d42c:	b508      	push	{r3, lr}
    d42e:	4603      	mov	r3, r0
	if (!remaining) {
    d430:	d00b      	beq.n	d44a <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    d432:	2a08      	cmp	r2, #8
    d434:	bf28      	it	cs
    d436:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    d438:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    d43a:	3018      	adds	r0, #24
    d43c:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    d43e:	689b      	ldr	r3, [r3, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d440:	4419      	add	r1, r3
    d442:	f000 fb19 	bl	da78 <memcpy>
	return true;
    d446:	2001      	movs	r0, #1
}
    d448:	bd08      	pop	{r3, pc}
		return false;
    d44a:	4610      	mov	r0, r2
    d44c:	e7fc      	b.n	d448 <setup_tx_cache.isra.0+0x22>

0000d44e <async_uart_release>:
{
    d44e:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    d450:	6903      	ldr	r3, [r0, #16]
{
    d452:	4604      	mov	r4, r0
	__asm__ volatile(
    d454:	f04f 0220 	mov.w	r2, #32
    d458:	f3ef 8611 	mrs	r6, BASEPRI
    d45c:	f382 8812 	msr	BASEPRI_MAX, r2
    d460:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    d464:	68dd      	ldr	r5, [r3, #12]
    d466:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    d46a:	ea23 0301 	bic.w	r3, r3, r1
    d46e:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    d472:	b973      	cbnz	r3, d492 <async_uart_release+0x44>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    d474:	2902      	cmp	r1, #2
    d476:	d107      	bne.n	d488 <async_uart_release+0x3a>
				rx_flush(dev, data->async->rx_flush_buffer,
    d478:	6840      	ldr	r0, [r0, #4]
    d47a:	2205      	movs	r2, #5
    d47c:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    d480:	f7ff ff9c 	bl	d3bc <rx_flush.isra.0>
			data->async->rx_flush_cnt =
    d484:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    d488:	6863      	ldr	r3, [r4, #4]
    d48a:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    d48c:	2200      	movs	r2, #0
    d48e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    d492:	f386 8811 	msr	BASEPRI, r6
    d496:	f3bf 8f6f 	isb	sy
}
    d49a:	bd70      	pop	{r4, r5, r6, pc}

0000d49c <is_tx_ready.isra.0>:
	return config->uarte_regs;
    d49c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    d49e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d4a0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    d4a4:	b940      	cbnz	r0, d4b8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    d4a6:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    d4a8:	079b      	lsls	r3, r3, #30
    d4aa:	d406      	bmi.n	d4ba <is_tx_ready.isra.0+0x1e>
    d4ac:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    d4b0:	3800      	subs	r0, #0
    d4b2:	bf18      	it	ne
    d4b4:	2001      	movne	r0, #1
    d4b6:	4770      	bx	lr
    d4b8:	2001      	movs	r0, #1
}
    d4ba:	4770      	bx	lr

0000d4bc <start_tx_locked>:
{
    d4bc:	b510      	push	{r4, lr}
    d4be:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    d4c0:	6840      	ldr	r0, [r0, #4]
    d4c2:	f7ff ffeb 	bl	d49c <is_tx_ready.isra.0>
		data->async->pending_tx = true;
    d4c6:	68cb      	ldr	r3, [r1, #12]
	if (!is_tx_ready(dev)) {
    d4c8:	b918      	cbnz	r0, d4d2 <start_tx_locked+0x16>
		data->async->pending_tx = true;
    d4ca:	2201      	movs	r2, #1
    d4cc:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    d4d0:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    d4d2:	2200      	movs	r2, #0
    d4d4:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    d4d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d4dc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    d4e0:	4620      	mov	r0, r4
    d4e2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    d4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    d4ea:	f7ff be8d 	b.w	d208 <tx_start>

0000d4ee <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    d4ee:	b510      	push	{r4, lr}
    d4f0:	2200      	movs	r2, #0
    d4f2:	4604      	mov	r4, r0
    d4f4:	2101      	movs	r1, #1
    d4f6:	2028      	movs	r0, #40	; 0x28
    d4f8:	f7f7 fa4a 	bl	4990 <z_arm_irq_priority_set>
    d4fc:	2028      	movs	r0, #40	; 0x28
    d4fe:	f7f7 fa29 	bl	4954 <arch_irq_enable>
    d502:	4620      	mov	r0, r4
    d504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d508:	f7f9 b950 	b.w	67ac <uarte_instance_init.constprop.0>

0000d50c <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    d50c:	b510      	push	{r4, lr}
    d50e:	2200      	movs	r2, #0
    d510:	4604      	mov	r4, r0
    d512:	2101      	movs	r1, #1
    d514:	2002      	movs	r0, #2
    d516:	f7f7 fa3b 	bl	4990 <z_arm_irq_priority_set>
    d51a:	2002      	movs	r0, #2
    d51c:	f7f7 fa1a 	bl	4954 <arch_irq_enable>
    d520:	4620      	mov	r0, r4
    d522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d526:	f7f9 b941 	b.w	67ac <uarte_instance_init.constprop.0>

0000d52a <rx_timeout>:
{
    d52a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
    d52c:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    d52e:	68f3      	ldr	r3, [r6, #12]
    d530:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    d534:	f002 07ff 	and.w	r7, r2, #255	; 0xff
    d538:	bb42      	cbnz	r2, d58c <rx_timeout+0x62>
	const struct device *dev = data->dev;
    d53a:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
    d53c:	686a      	ldr	r2, [r5, #4]
    d53e:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    d540:	2110      	movs	r1, #16
    d542:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    d546:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    d54a:	6f59      	ldr	r1, [r3, #116]	; 0x74
    d54c:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    d54e:	bf1e      	ittt	ne
    d550:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    d552:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    d554:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    d558:	e9d3 421d 	ldrd	r4, r2, [r3, #116]	; 0x74
	if (!HW_RX_COUNTING_ENABLED(data) &&
    d55c:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    d55e:	bf48      	it	mi
    d560:	f8c3 20c0 	strmi.w	r2, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    d564:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
		len = 0;
    d568:	bf48      	it	mi
    d56a:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    d56c:	18a0      	adds	r0, r4, r2
    d56e:	4288      	cmp	r0, r1
    d570:	d90d      	bls.n	d58e <rx_timeout+0x64>
		len = data->async->rx_buf_len - data->async->rx_offset;
    d572:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
    d574:	2c00      	cmp	r4, #0
    d576:	dd04      	ble.n	d582 <rx_timeout+0x58>
		clipped = true;
    d578:	2701      	movs	r7, #1
    d57a:	e00e      	b.n	d59a <rx_timeout+0x70>
			data->async->rx_timeout_left -=
    d57c:	1a52      	subs	r2, r2, r1
    d57e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
    d582:	686b      	ldr	r3, [r5, #4]
    d584:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    d586:	2210      	movs	r2, #16
    d588:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
    d58e:	2c00      	cmp	r4, #0
    d590:	d0f7      	beq.n	d582 <rx_timeout+0x58>
				< data->async->rx_timeout_slab)) {
    d592:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    d596:	428a      	cmp	r2, r1
    d598:	daf0      	bge.n	d57c <rx_timeout+0x52>
			notify_uart_rx_rdy(dev, len);
    d59a:	4628      	mov	r0, r5
    d59c:	4621      	mov	r1, r4
    d59e:	f7ff fe60 	bl	d262 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    d5a2:	68f0      	ldr	r0, [r6, #12]
    d5a4:	6e83      	ldr	r3, [r0, #104]	; 0x68
    d5a6:	4423      	add	r3, r4
    d5a8:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    d5aa:	6f83      	ldr	r3, [r0, #120]	; 0x78
    d5ac:	4423      	add	r3, r4
    d5ae:	6783      	str	r3, [r0, #120]	; 0x78
		if (clipped) {
    d5b0:	2f00      	cmp	r7, #0
    d5b2:	d0e6      	beq.n	d582 <rx_timeout+0x58>
    d5b4:	3088      	adds	r0, #136	; 0x88
    d5b6:	f000 fa35 	bl	da24 <z_impl_k_timer_stop>
}
    d5ba:	e7e2      	b.n	d582 <rx_timeout+0x58>

0000d5bc <uarte_nrfx_tx_abort>:
{
    d5bc:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    d5be:	6843      	ldr	r3, [r0, #4]
    d5c0:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    d5c2:	6903      	ldr	r3, [r0, #16]
    d5c4:	68d8      	ldr	r0, [r3, #12]
    d5c6:	6883      	ldr	r3, [r0, #8]
    d5c8:	b14b      	cbz	r3, d5de <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    d5ca:	2400      	movs	r4, #0
    d5cc:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    d5d0:	3028      	adds	r0, #40	; 0x28
    d5d2:	f000 fa27 	bl	da24 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d5d6:	2301      	movs	r3, #1
    d5d8:	60eb      	str	r3, [r5, #12]
	return 0;
    d5da:	4620      	mov	r0, r4
}
    d5dc:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    d5de:	f06f 000d 	mvn.w	r0, #13
    d5e2:	e7fb      	b.n	d5dc <uarte_nrfx_tx_abort+0x20>

0000d5e4 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    d5e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    d5e6:	6818      	ldr	r0, [r3, #0]
    d5e8:	f7ff bfe8 	b.w	d5bc <uarte_nrfx_tx_abort>

0000d5ec <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    d5ec:	4770      	bx	lr

0000d5ee <sys_clock_cycle_get_32>:
{
    d5ee:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    d5f0:	f7f9 fcdc 	bl	6fac <z_nrf_rtc_timer_read>
}
    d5f4:	bd08      	pop	{r3, pc}

0000d5f6 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    d5f6:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    d5f8:	6843      	ldr	r3, [r0, #4]
    d5fa:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    d5fc:	7a03      	ldrb	r3, [r0, #8]
    d5fe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    d602:	3b01      	subs	r3, #1
    d604:	00db      	lsls	r3, r3, #3
    d606:	6845      	ldr	r5, [r0, #4]
    d608:	6814      	ldr	r4, [r2, #0]
    d60a:	441d      	add	r5, r3
    d60c:	42ac      	cmp	r4, r5
    d60e:	d902      	bls.n	d616 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    d610:	f06f 0001 	mvn.w	r0, #1
}
    d614:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    d616:	7965      	ldrb	r5, [r4, #5]
    d618:	428d      	cmp	r5, r1
    d61a:	d002      	beq.n	d622 <pinctrl_lookup_state+0x2c>
		(*state)++;
    d61c:	3408      	adds	r4, #8
    d61e:	6014      	str	r4, [r2, #0]
    d620:	e7f1      	b.n	d606 <pinctrl_lookup_state+0x10>
			return 0;
    d622:	2000      	movs	r0, #0
    d624:	e7f6      	b.n	d614 <pinctrl_lookup_state+0x1e>

0000d626 <nrf_gpio_pin_clear>:
{
    d626:	b507      	push	{r0, r1, r2, lr}
    d628:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d62a:	a801      	add	r0, sp, #4
    d62c:	f7f9 fe76 	bl	731c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d630:	9a01      	ldr	r2, [sp, #4]
    d632:	2301      	movs	r3, #1
    d634:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    d636:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    d63a:	b003      	add	sp, #12
    d63c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d640 <nrf_gpio_pin_set>:
{
    d640:	b507      	push	{r0, r1, r2, lr}
    d642:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d644:	a801      	add	r0, sp, #4
    d646:	f7f9 fe69 	bl	731c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d64a:	9a01      	ldr	r2, [sp, #4]
    d64c:	2301      	movs	r3, #1
    d64e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    d650:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    d654:	b003      	add	sp, #12
    d656:	f85d fb04 	ldr.w	pc, [sp], #4

0000d65a <nrf_gpio_pin_write>:
    if (value == 0)
    d65a:	b909      	cbnz	r1, d660 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    d65c:	f7ff bfe3 	b.w	d626 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    d660:	f7ff bfee 	b.w	d640 <nrf_gpio_pin_set>

0000d664 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    d664:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    d666:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d66a:	2b00      	cmp	r3, #0
{
    d66c:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    d66e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d672:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d674:	bf0b      	itete	eq
    d676:	4615      	moveq	r5, r2
    d678:	2501      	movne	r5, #1
    d67a:	460e      	moveq	r6, r1
    d67c:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    d67e:	9301      	str	r3, [sp, #4]
    d680:	f7f9 fe4c 	bl	731c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    d684:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d686:	f3c4 1281 	ubfx	r2, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    d68a:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d68e:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
    d692:	4332      	orrs	r2, r6
    reg->PIN_CNF[pin_number] = cnf;
    d694:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d698:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    d69c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    d6a0:	b002      	add	sp, #8
    d6a2:	bd70      	pop	{r4, r5, r6, pc}

0000d6a4 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    d6a4:	b570      	push	{r4, r5, r6, lr}
    d6a6:	4615      	mov	r5, r2
    d6a8:	4604      	mov	r4, r0
    d6aa:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    d6ae:	42a6      	cmp	r6, r4
    d6b0:	d101      	bne.n	d6b6 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    d6b2:	2000      	movs	r0, #0
}
    d6b4:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    d6b6:	6823      	ldr	r3, [r4, #0]
    d6b8:	0c1a      	lsrs	r2, r3, #16
    d6ba:	2a22      	cmp	r2, #34	; 0x22
    d6bc:	f200 808e 	bhi.w	d7dc <pinctrl_configure_pins+0x138>
    d6c0:	e8df f002 	tbb	[pc, r2]
    d6c4:	43241d12 	.word	0x43241d12
    d6c8:	8c433929 	.word	0x8c433929
    d6cc:	488c8c8c 	.word	0x488c8c8c
    d6d0:	8c8c8c4d 	.word	0x8c8c8c4d
    d6d4:	8c8c8c8c 	.word	0x8c8c8c8c
    d6d8:	5e528c8c 	.word	0x5e528c8c
    d6dc:	8c8c6863 	.word	0x8c8c6863
    d6e0:	78736d8c 	.word	0x78736d8c
    d6e4:	827d      	.short	0x827d
    d6e6:	87          	.byte	0x87
    d6e7:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    d6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d6ec:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    d6f0:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    d6f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d6f6:	f7ff ffa3 	bl	d640 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    d6fa:	2201      	movs	r2, #1
    d6fc:	e015      	b.n	d72a <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    d6fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d702:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    d706:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    d708:	2100      	movs	r1, #0
    d70a:	e00f      	b.n	d72c <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    d70c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d710:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    d714:	e7ec      	b.n	d6f0 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    d716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d71a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    d71e:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    d720:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d724:	f7ff ff7f 	bl	d626 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    d728:	2200      	movs	r2, #0
    d72a:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    d72c:	6820      	ldr	r0, [r4, #0]
    d72e:	f7ff ff99 	bl	d664 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    d732:	3404      	adds	r4, #4
    d734:	e7bb      	b.n	d6ae <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    d736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d73a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    d73e:	6820      	ldr	r0, [r4, #0]
    d740:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d744:	f7ff ff6f 	bl	d626 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    d748:	e7d7      	b.n	d6fa <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    d74a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d74e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    d752:	e7d8      	b.n	d706 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    d754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d758:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    d75c:	e7d3      	b.n	d706 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    d75e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d762:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    d766:	e7ce      	b.n	d706 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    d768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d76c:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    d770:	6820      	ldr	r0, [r4, #0]
    d772:	f3c0 3140 	ubfx	r1, r0, #13, #1
    d776:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d77a:	f7ff ff6e 	bl	d65a <nrf_gpio_pin_write>
    d77e:	e7bc      	b.n	d6fa <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    d780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d784:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    d788:	e7f2      	b.n	d770 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    d78a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d78e:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    d792:	e7ed      	b.n	d770 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    d794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d798:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    d79c:	e7e8      	b.n	d770 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    d79e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d7a2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    d7a6:	2201      	movs	r2, #1
    d7a8:	e7ae      	b.n	d708 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    d7aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d7ae:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    d7b2:	e7f8      	b.n	d7a6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    d7b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d7b8:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    d7bc:	e7f3      	b.n	d7a6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    d7be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d7c2:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    d7c6:	e7ee      	b.n	d7a6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    d7c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d7cc:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    d7d0:	e7e9      	b.n	d7a6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    d7d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d7d6:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    d7da:	e7e4      	b.n	d7a6 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    d7dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d7e0:	e768      	b.n	d6b4 <pinctrl_configure_pins+0x10>

0000d7e2 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    d7e2:	f7ff b83f 	b.w	c864 <nrf_cc3xx_platform_init_no_rng>

0000d7e6 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    d7e6:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    d7e8:	f7f6 ff7c 	bl	46e4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    d7ec:	f7f7 f82e 	bl	484c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    d7f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    d7f4:	f7ff b836 	b.w	c864 <nrf_cc3xx_platform_init_no_rng>

0000d7f8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    d7f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    d7fc:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    d800:	f1a0 0308 	sub.w	r3, r0, #8
    d804:	4258      	negs	r0, r3
    d806:	4158      	adcs	r0, r3
    d808:	4770      	bx	lr

0000d80a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    d80a:	4700      	bx	r0

0000d80c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    d80c:	f000 b8fa 	b.w	da04 <z_impl_k_busy_wait>

0000d810 <nrf_gpio_pin_present_check>:
    switch (port)
    d810:	0943      	lsrs	r3, r0, #5
    d812:	d00b      	beq.n	d82c <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    d814:	2b01      	cmp	r3, #1
    d816:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d81a:	bf18      	it	ne
    d81c:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    d81e:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d822:	fa23 f000 	lsr.w	r0, r3, r0
}
    d826:	f000 0001 	and.w	r0, r0, #1
    d82a:	4770      	bx	lr
    switch (port)
    d82c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d830:	e7f5      	b.n	d81e <nrf_gpio_pin_present_check+0xe>

0000d832 <pin_is_task_output>:
{
    d832:	b508      	push	{r3, lr}
    d834:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    d836:	f7fa f8b7 	bl	79a8 <pin_is_output>
    d83a:	b110      	cbz	r0, d842 <pin_is_task_output+0x10>
    d83c:	4610      	mov	r0, r2
    d83e:	f7fa f89d 	bl	797c <pin_in_use_by_te>
}
    d842:	f000 0001 	and.w	r0, r0, #1
    d846:	bd08      	pop	{r3, pc}

0000d848 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    d848:	0080      	lsls	r0, r0, #2
}
    d84a:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d84e:	4770      	bx	lr

0000d850 <nrf_gpio_reconfigure>:
{
    d850:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d854:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d856:	a801      	add	r0, sp, #4
{
    d858:	460e      	mov	r6, r1
    d85a:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    d85e:	4690      	mov	r8, r2
    d860:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d862:	f7fa f925 	bl	7ab0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d866:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    d868:	f1b8 0f00 	cmp.w	r8, #0
    d86c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    d870:	bf14      	ite	ne
    d872:	2302      	movne	r3, #2
    d874:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    d876:	2e00      	cmp	r6, #0
    d878:	bf18      	it	ne
    d87a:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    d87e:	2d00      	cmp	r5, #0
    d880:	bf14      	ite	ne
    d882:	210c      	movne	r1, #12
    d884:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    d886:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    d888:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    d88c:	bf14      	ite	ne
    d88e:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    d892:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    d894:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    d896:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d89a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    d89e:	bf14      	ite	ne
    d8a0:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    d8a4:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    d8a6:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    d8a8:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    d8ac:	b106      	cbz	r6, d8b0 <nrf_gpio_reconfigure+0x60>
    d8ae:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    d8b0:	f1b8 0f00 	cmp.w	r8, #0
    d8b4:	d003      	beq.n	d8be <nrf_gpio_reconfigure+0x6e>
    d8b6:	f898 8000 	ldrb.w	r8, [r8]
    d8ba:	ea4f 0848 	mov.w	r8, r8, lsl #1
    d8be:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    d8c0:	b10d      	cbz	r5, d8c6 <nrf_gpio_reconfigure+0x76>
    d8c2:	782d      	ldrb	r5, [r5, #0]
    d8c4:	00ad      	lsls	r5, r5, #2
    d8c6:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    d8ca:	b10c      	cbz	r4, d8d0 <nrf_gpio_reconfigure+0x80>
    d8cc:	7822      	ldrb	r2, [r4, #0]
    d8ce:	0214      	lsls	r4, r2, #8
    d8d0:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    d8d2:	b10f      	cbz	r7, d8d8 <nrf_gpio_reconfigure+0x88>
    d8d4:	783f      	ldrb	r7, [r7, #0]
    d8d6:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    d8d8:	432c      	orrs	r4, r5
    d8da:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    d8dc:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    d8e0:	b002      	add	sp, #8
    d8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d8e6 <nrf_gpio_cfg_sense_set>:
{
    d8e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    d8e8:	f10d 030f 	add.w	r3, sp, #15
    d8ec:	9301      	str	r3, [sp, #4]
    d8ee:	2300      	movs	r3, #0
{
    d8f0:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    d8f4:	9300      	str	r3, [sp, #0]
    d8f6:	461a      	mov	r2, r3
    d8f8:	4619      	mov	r1, r3
    d8fa:	f7ff ffa9 	bl	d850 <nrf_gpio_reconfigure>
}
    d8fe:	b005      	add	sp, #20
    d900:	f85d fb04 	ldr.w	pc, [sp], #4

0000d904 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    d904:	f7fa bc3a 	b.w	817c <_DoInit>

0000d908 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    d908:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    d90a:	f7ff fffb 	bl	d904 <SEGGER_RTT_Init>

	return 0;
}
    d90e:	2000      	movs	r0, #0
    d910:	bd08      	pop	{r3, pc}

0000d912 <z_device_state_init>:
}
    d912:	4770      	bx	lr

0000d914 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    d914:	b138      	cbz	r0, d926 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    d916:	68c3      	ldr	r3, [r0, #12]
    d918:	8818      	ldrh	r0, [r3, #0]
    d91a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d91e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    d922:	4258      	negs	r0, r3
    d924:	4158      	adcs	r0, r3
}
    d926:	4770      	bx	lr

0000d928 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    d928:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    d92a:	ab0b      	add	r3, sp, #44	; 0x2c
    d92c:	9305      	str	r3, [sp, #20]
    d92e:	9303      	str	r3, [sp, #12]
    d930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d932:	9302      	str	r3, [sp, #8]
    d934:	2300      	movs	r3, #0
    d936:	e9cd 3300 	strd	r3, r3, [sp]
    d93a:	2201      	movs	r2, #1
    d93c:	4618      	mov	r0, r3
    d93e:	f7f6 fc23 	bl	4188 <z_impl_z_log_msg2_runtime_vcreate>
}
    d942:	b007      	add	sp, #28
    d944:	f85d fb04 	ldr.w	pc, [sp], #4

0000d948 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    d948:	f000 b8a4 	b.w	da94 <memset>

0000d94c <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d94c:	f000 b894 	b.w	da78 <memcpy>

0000d950 <k_mem_slab_init>:
{
    d950:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    d952:	2400      	movs	r4, #0
    d954:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    d956:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    d958:	ea41 0402 	orr.w	r4, r1, r2
    d95c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    d960:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    d964:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    d966:	d10c      	bne.n	d982 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    d968:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    d96a:	42a3      	cmp	r3, r4
    d96c:	d103      	bne.n	d976 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    d96e:	e9c0 0000 	strd	r0, r0, [r0]
}
    d972:	2000      	movs	r0, #0
}
    d974:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    d976:	6985      	ldr	r5, [r0, #24]
    d978:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    d97a:	3401      	adds	r4, #1
		slab->free_list = p;
    d97c:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    d97e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    d980:	e7f3      	b.n	d96a <k_mem_slab_init+0x1a>
		return -EINVAL;
    d982:	f06f 0015 	mvn.w	r0, #21
	return rc;
    d986:	e7f5      	b.n	d974 <k_mem_slab_init+0x24>

0000d988 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d988:	f3ef 8005 	mrs	r0, IPSR
}
    d98c:	3800      	subs	r0, #0
    d98e:	bf18      	it	ne
    d990:	2001      	movne	r0, #1
    d992:	4770      	bx	lr

0000d994 <k_thread_name_get>:
}
    d994:	2000      	movs	r0, #0
    d996:	4770      	bx	lr

0000d998 <z_pm_save_idle_exit>:
{
    d998:	b508      	push	{r3, lr}
	pm_system_resume();
    d99a:	f7f6 fd8b 	bl	44b4 <pm_system_resume>
}
    d99e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    d9a2:	f7ff be23 	b.w	d5ec <sys_clock_idle_exit>

0000d9a6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    d9a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    d9aa:	428b      	cmp	r3, r1
    d9ac:	d001      	beq.n	d9b2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    d9ae:	f7fc b80d 	b.w	99cc <z_set_prio>
}
    d9b2:	2000      	movs	r0, #0
    d9b4:	4770      	bx	lr

0000d9b6 <z_impl_k_mutex_init>:
{
    d9b6:	4603      	mov	r3, r0
	mutex->owner = NULL;
    d9b8:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    d9ba:	e9c3 0002 	strd	r0, r0, [r3, #8]
    d9be:	e9c3 3300 	strd	r3, r3, [r3]
}
    d9c2:	4770      	bx	lr

0000d9c4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d9c4:	4603      	mov	r3, r0
    d9c6:	b920      	cbnz	r0, d9d2 <z_reschedule_irqlock+0xe>
    d9c8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    d9cc:	b90a      	cbnz	r2, d9d2 <z_reschedule_irqlock+0xe>
    d9ce:	f7f7 b833 	b.w	4a38 <arch_swap>
    d9d2:	f383 8811 	msr	BASEPRI, r3
    d9d6:	f3bf 8f6f 	isb	sy
}
    d9da:	4770      	bx	lr

0000d9dc <z_reschedule_unlocked>:
	__asm__ volatile(
    d9dc:	f04f 0320 	mov.w	r3, #32
    d9e0:	f3ef 8011 	mrs	r0, BASEPRI
    d9e4:	f383 8812 	msr	BASEPRI_MAX, r3
    d9e8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d9ec:	f7ff bfea 	b.w	d9c4 <z_reschedule_irqlock>

0000d9f0 <z_priq_dumb_best>:
{
    d9f0:	4603      	mov	r3, r0
	return list->head == list;
    d9f2:	6800      	ldr	r0, [r0, #0]
}
    d9f4:	4283      	cmp	r3, r0
    d9f6:	bf08      	it	eq
    d9f8:	2000      	moveq	r0, #0
    d9fa:	4770      	bx	lr

0000d9fc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    d9fc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    d9fe:	f7fc ff13 	bl	a828 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    da02:	bd08      	pop	{r3, pc}

0000da04 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    da04:	b108      	cbz	r0, da0a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    da06:	f7f7 bf45 	b.w	5894 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    da0a:	4770      	bx	lr

0000da0c <k_timer_init>:
	timer->status = 0U;
    da0c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    da0e:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    da12:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    da16:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    da1a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    da1e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    da20:	6343      	str	r3, [r0, #52]	; 0x34
}
    da22:	4770      	bx	lr

0000da24 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    da24:	b510      	push	{r4, lr}
    da26:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    da28:	f7fc fd5e 	bl	a4e8 <z_abort_timeout>

	if (inactive) {
    da2c:	b9b0      	cbnz	r0, da5c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    da2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    da30:	b10b      	cbz	r3, da36 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    da32:	4620      	mov	r0, r4
    da34:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    da36:	f104 0018 	add.w	r0, r4, #24
    da3a:	f7fc f945 	bl	9cc8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    da3e:	b168      	cbz	r0, da5c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    da40:	f7fb fde4 	bl	960c <z_ready_thread>
    da44:	f04f 0320 	mov.w	r3, #32
    da48:	f3ef 8011 	mrs	r0, BASEPRI
    da4c:	f383 8812 	msr	BASEPRI_MAX, r3
    da50:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    da54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da58:	f7ff bfb4 	b.w	d9c4 <z_reschedule_irqlock>
    da5c:	bd10      	pop	{r4, pc}

0000da5e <k_heap_init>:
{
    da5e:	b410      	push	{r4}
    da60:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    da64:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    da68:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    da6a:	f7f5 bbfb 	b.w	3264 <sys_heap_init>

0000da6e <atan2>:
    da6e:	f7f3 bb03 	b.w	1078 <__ieee754_atan2>

0000da72 <fabs>:
    da72:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    da76:	4770      	bx	lr

0000da78 <memcpy>:
    da78:	440a      	add	r2, r1
    da7a:	4291      	cmp	r1, r2
    da7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    da80:	d100      	bne.n	da84 <memcpy+0xc>
    da82:	4770      	bx	lr
    da84:	b510      	push	{r4, lr}
    da86:	f811 4b01 	ldrb.w	r4, [r1], #1
    da8a:	f803 4f01 	strb.w	r4, [r3, #1]!
    da8e:	4291      	cmp	r1, r2
    da90:	d1f9      	bne.n	da86 <memcpy+0xe>
    da92:	bd10      	pop	{r4, pc}

0000da94 <memset>:
    da94:	4402      	add	r2, r0
    da96:	4603      	mov	r3, r0
    da98:	4293      	cmp	r3, r2
    da9a:	d100      	bne.n	da9e <memset+0xa>
    da9c:	4770      	bx	lr
    da9e:	f803 1b01 	strb.w	r1, [r3], #1
    daa2:	e7f9      	b.n	da98 <memset+0x4>

0000daa4 <__cvt>:
    daa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    daa8:	b088      	sub	sp, #32
    daaa:	2b00      	cmp	r3, #0
    daac:	461f      	mov	r7, r3
    daae:	4614      	mov	r4, r2
    dab0:	bfb8      	it	lt
    dab2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
    dab6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dab8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    daba:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    dabe:	bfb6      	itet	lt
    dac0:	461f      	movlt	r7, r3
    dac2:	2300      	movge	r3, #0
    dac4:	232d      	movlt	r3, #45	; 0x2d
    dac6:	7013      	strb	r3, [r2, #0]
    dac8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    daca:	f023 0820 	bic.w	r8, r3, #32
    dace:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    dad2:	d005      	beq.n	dae0 <__cvt+0x3c>
    dad4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
    dad8:	d100      	bne.n	dadc <__cvt+0x38>
    dada:	3501      	adds	r5, #1
    dadc:	2302      	movs	r3, #2
    dade:	e000      	b.n	dae2 <__cvt+0x3e>
    dae0:	2303      	movs	r3, #3
    dae2:	aa07      	add	r2, sp, #28
    dae4:	9204      	str	r2, [sp, #16]
    dae6:	aa06      	add	r2, sp, #24
    dae8:	e9cd a202 	strd	sl, r2, [sp, #8]
    daec:	e9cd 3500 	strd	r3, r5, [sp]
    daf0:	4622      	mov	r2, r4
    daf2:	463b      	mov	r3, r7
    daf4:	f7f3 fd20 	bl	1538 <_dtoa_r>
    daf8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    dafc:	4606      	mov	r6, r0
    dafe:	d102      	bne.n	db06 <__cvt+0x62>
    db00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    db02:	07db      	lsls	r3, r3, #31
    db04:	d522      	bpl.n	db4c <__cvt+0xa8>
    db06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    db0a:	eb06 0905 	add.w	r9, r6, r5
    db0e:	d110      	bne.n	db32 <__cvt+0x8e>
    db10:	7833      	ldrb	r3, [r6, #0]
    db12:	2b30      	cmp	r3, #48	; 0x30
    db14:	d10a      	bne.n	db2c <__cvt+0x88>
    db16:	2200      	movs	r2, #0
    db18:	2300      	movs	r3, #0
    db1a:	4620      	mov	r0, r4
    db1c:	4639      	mov	r1, r7
    db1e:	f7f3 f843 	bl	ba8 <__aeabi_dcmpeq>
    db22:	b918      	cbnz	r0, db2c <__cvt+0x88>
    db24:	f1c5 0501 	rsb	r5, r5, #1
    db28:	f8ca 5000 	str.w	r5, [sl]
    db2c:	f8da 3000 	ldr.w	r3, [sl]
    db30:	4499      	add	r9, r3
    db32:	2200      	movs	r2, #0
    db34:	2300      	movs	r3, #0
    db36:	4620      	mov	r0, r4
    db38:	4639      	mov	r1, r7
    db3a:	f7f3 f835 	bl	ba8 <__aeabi_dcmpeq>
    db3e:	b108      	cbz	r0, db44 <__cvt+0xa0>
    db40:	f8cd 901c 	str.w	r9, [sp, #28]
    db44:	2230      	movs	r2, #48	; 0x30
    db46:	9b07      	ldr	r3, [sp, #28]
    db48:	454b      	cmp	r3, r9
    db4a:	d307      	bcc.n	db5c <__cvt+0xb8>
    db4c:	9b07      	ldr	r3, [sp, #28]
    db4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    db50:	1b9b      	subs	r3, r3, r6
    db52:	4630      	mov	r0, r6
    db54:	6013      	str	r3, [r2, #0]
    db56:	b008      	add	sp, #32
    db58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db5c:	1c59      	adds	r1, r3, #1
    db5e:	9107      	str	r1, [sp, #28]
    db60:	701a      	strb	r2, [r3, #0]
    db62:	e7f0      	b.n	db46 <__cvt+0xa2>

0000db64 <__exponent>:
    db64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    db66:	4603      	mov	r3, r0
    db68:	2900      	cmp	r1, #0
    db6a:	bfb8      	it	lt
    db6c:	4249      	neglt	r1, r1
    db6e:	f803 2b02 	strb.w	r2, [r3], #2
    db72:	bfb4      	ite	lt
    db74:	222d      	movlt	r2, #45	; 0x2d
    db76:	222b      	movge	r2, #43	; 0x2b
    db78:	2909      	cmp	r1, #9
    db7a:	7042      	strb	r2, [r0, #1]
    db7c:	dd2a      	ble.n	dbd4 <__exponent+0x70>
    db7e:	f10d 0407 	add.w	r4, sp, #7
    db82:	46a4      	mov	ip, r4
    db84:	270a      	movs	r7, #10
    db86:	46a6      	mov	lr, r4
    db88:	460a      	mov	r2, r1
    db8a:	fb91 f6f7 	sdiv	r6, r1, r7
    db8e:	fb07 1516 	mls	r5, r7, r6, r1
    db92:	3530      	adds	r5, #48	; 0x30
    db94:	2a63      	cmp	r2, #99	; 0x63
    db96:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    db9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
    db9e:	4631      	mov	r1, r6
    dba0:	dcf1      	bgt.n	db86 <__exponent+0x22>
    dba2:	3130      	adds	r1, #48	; 0x30
    dba4:	f1ae 0502 	sub.w	r5, lr, #2
    dba8:	f804 1c01 	strb.w	r1, [r4, #-1]
    dbac:	1c44      	adds	r4, r0, #1
    dbae:	4629      	mov	r1, r5
    dbb0:	4561      	cmp	r1, ip
    dbb2:	d30a      	bcc.n	dbca <__exponent+0x66>
    dbb4:	f10d 0209 	add.w	r2, sp, #9
    dbb8:	eba2 020e 	sub.w	r2, r2, lr
    dbbc:	4565      	cmp	r5, ip
    dbbe:	bf88      	it	hi
    dbc0:	2200      	movhi	r2, #0
    dbc2:	4413      	add	r3, r2
    dbc4:	1a18      	subs	r0, r3, r0
    dbc6:	b003      	add	sp, #12
    dbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dbca:	f811 2b01 	ldrb.w	r2, [r1], #1
    dbce:	f804 2f01 	strb.w	r2, [r4, #1]!
    dbd2:	e7ed      	b.n	dbb0 <__exponent+0x4c>
    dbd4:	2330      	movs	r3, #48	; 0x30
    dbd6:	3130      	adds	r1, #48	; 0x30
    dbd8:	7083      	strb	r3, [r0, #2]
    dbda:	70c1      	strb	r1, [r0, #3]
    dbdc:	1d03      	adds	r3, r0, #4
    dbde:	e7f1      	b.n	dbc4 <__exponent+0x60>

0000dbe0 <_printf_common>:
    dbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbe4:	4616      	mov	r6, r2
    dbe6:	4699      	mov	r9, r3
    dbe8:	688a      	ldr	r2, [r1, #8]
    dbea:	690b      	ldr	r3, [r1, #16]
    dbec:	f8dd 8020 	ldr.w	r8, [sp, #32]
    dbf0:	4293      	cmp	r3, r2
    dbf2:	bfb8      	it	lt
    dbf4:	4613      	movlt	r3, r2
    dbf6:	6033      	str	r3, [r6, #0]
    dbf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    dbfc:	4607      	mov	r7, r0
    dbfe:	460c      	mov	r4, r1
    dc00:	b10a      	cbz	r2, dc06 <_printf_common+0x26>
    dc02:	3301      	adds	r3, #1
    dc04:	6033      	str	r3, [r6, #0]
    dc06:	6823      	ldr	r3, [r4, #0]
    dc08:	0699      	lsls	r1, r3, #26
    dc0a:	bf42      	ittt	mi
    dc0c:	6833      	ldrmi	r3, [r6, #0]
    dc0e:	3302      	addmi	r3, #2
    dc10:	6033      	strmi	r3, [r6, #0]
    dc12:	6825      	ldr	r5, [r4, #0]
    dc14:	f015 0506 	ands.w	r5, r5, #6
    dc18:	d106      	bne.n	dc28 <_printf_common+0x48>
    dc1a:	f104 0a19 	add.w	sl, r4, #25
    dc1e:	68e3      	ldr	r3, [r4, #12]
    dc20:	6832      	ldr	r2, [r6, #0]
    dc22:	1a9b      	subs	r3, r3, r2
    dc24:	42ab      	cmp	r3, r5
    dc26:	dc26      	bgt.n	dc76 <_printf_common+0x96>
    dc28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    dc2c:	1e13      	subs	r3, r2, #0
    dc2e:	6822      	ldr	r2, [r4, #0]
    dc30:	bf18      	it	ne
    dc32:	2301      	movne	r3, #1
    dc34:	0692      	lsls	r2, r2, #26
    dc36:	d42b      	bmi.n	dc90 <_printf_common+0xb0>
    dc38:	f104 0243 	add.w	r2, r4, #67	; 0x43
    dc3c:	4649      	mov	r1, r9
    dc3e:	4638      	mov	r0, r7
    dc40:	47c0      	blx	r8
    dc42:	3001      	adds	r0, #1
    dc44:	d01e      	beq.n	dc84 <_printf_common+0xa4>
    dc46:	6823      	ldr	r3, [r4, #0]
    dc48:	68e5      	ldr	r5, [r4, #12]
    dc4a:	6832      	ldr	r2, [r6, #0]
    dc4c:	f003 0306 	and.w	r3, r3, #6
    dc50:	2b04      	cmp	r3, #4
    dc52:	bf08      	it	eq
    dc54:	1aad      	subeq	r5, r5, r2
    dc56:	68a3      	ldr	r3, [r4, #8]
    dc58:	6922      	ldr	r2, [r4, #16]
    dc5a:	bf0c      	ite	eq
    dc5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    dc60:	2500      	movne	r5, #0
    dc62:	4293      	cmp	r3, r2
    dc64:	bfc4      	itt	gt
    dc66:	1a9b      	subgt	r3, r3, r2
    dc68:	18ed      	addgt	r5, r5, r3
    dc6a:	2600      	movs	r6, #0
    dc6c:	341a      	adds	r4, #26
    dc6e:	42b5      	cmp	r5, r6
    dc70:	d11a      	bne.n	dca8 <_printf_common+0xc8>
    dc72:	2000      	movs	r0, #0
    dc74:	e008      	b.n	dc88 <_printf_common+0xa8>
    dc76:	2301      	movs	r3, #1
    dc78:	4652      	mov	r2, sl
    dc7a:	4649      	mov	r1, r9
    dc7c:	4638      	mov	r0, r7
    dc7e:	47c0      	blx	r8
    dc80:	3001      	adds	r0, #1
    dc82:	d103      	bne.n	dc8c <_printf_common+0xac>
    dc84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc8c:	3501      	adds	r5, #1
    dc8e:	e7c6      	b.n	dc1e <_printf_common+0x3e>
    dc90:	18e1      	adds	r1, r4, r3
    dc92:	1c5a      	adds	r2, r3, #1
    dc94:	2030      	movs	r0, #48	; 0x30
    dc96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    dc9a:	4422      	add	r2, r4
    dc9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    dca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    dca4:	3302      	adds	r3, #2
    dca6:	e7c7      	b.n	dc38 <_printf_common+0x58>
    dca8:	2301      	movs	r3, #1
    dcaa:	4622      	mov	r2, r4
    dcac:	4649      	mov	r1, r9
    dcae:	4638      	mov	r0, r7
    dcb0:	47c0      	blx	r8
    dcb2:	3001      	adds	r0, #1
    dcb4:	d0e6      	beq.n	dc84 <_printf_common+0xa4>
    dcb6:	3601      	adds	r6, #1
    dcb8:	e7d9      	b.n	dc6e <_printf_common+0x8e>

0000dcba <strcpy>:
    dcba:	4603      	mov	r3, r0
    dcbc:	f811 2b01 	ldrb.w	r2, [r1], #1
    dcc0:	f803 2b01 	strb.w	r2, [r3], #1
    dcc4:	2a00      	cmp	r2, #0
    dcc6:	d1f9      	bne.n	dcbc <strcpy+0x2>
    dcc8:	4770      	bx	lr

0000dcca <strnlen>:
    dcca:	b510      	push	{r4, lr}
    dccc:	4602      	mov	r2, r0
    dcce:	4401      	add	r1, r0
    dcd0:	428a      	cmp	r2, r1
    dcd2:	4613      	mov	r3, r2
    dcd4:	d003      	beq.n	dcde <strnlen+0x14>
    dcd6:	781c      	ldrb	r4, [r3, #0]
    dcd8:	3201      	adds	r2, #1
    dcda:	2c00      	cmp	r4, #0
    dcdc:	d1f8      	bne.n	dcd0 <strnlen+0x6>
    dcde:	1a18      	subs	r0, r3, r0
    dce0:	bd10      	pop	{r4, pc}

0000dce2 <_user_strerror>:
    dce2:	2000      	movs	r0, #0
    dce4:	4770      	bx	lr

0000dce6 <quorem>:
    dce6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcea:	6903      	ldr	r3, [r0, #16]
    dcec:	690c      	ldr	r4, [r1, #16]
    dcee:	42a3      	cmp	r3, r4
    dcf0:	4607      	mov	r7, r0
    dcf2:	db7d      	blt.n	ddf0 <quorem+0x10a>
    dcf4:	3c01      	subs	r4, #1
    dcf6:	f101 0814 	add.w	r8, r1, #20
    dcfa:	f100 0514 	add.w	r5, r0, #20
    dcfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    dd02:	9301      	str	r3, [sp, #4]
    dd04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    dd08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    dd0c:	3301      	adds	r3, #1
    dd0e:	429a      	cmp	r2, r3
    dd10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
    dd14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
    dd18:	fbb2 f6f3 	udiv	r6, r2, r3
    dd1c:	d32e      	bcc.n	dd7c <quorem+0x96>
    dd1e:	f04f 0e00 	mov.w	lr, #0
    dd22:	4640      	mov	r0, r8
    dd24:	46ac      	mov	ip, r5
    dd26:	46f2      	mov	sl, lr
    dd28:	f850 2b04 	ldr.w	r2, [r0], #4
    dd2c:	b293      	uxth	r3, r2
    dd2e:	fb06 e303 	mla	r3, r6, r3, lr
    dd32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    dd36:	0c12      	lsrs	r2, r2, #16
    dd38:	b29b      	uxth	r3, r3
    dd3a:	fb06 e202 	mla	r2, r6, r2, lr
    dd3e:	ebaa 0303 	sub.w	r3, sl, r3
    dd42:	f8dc a000 	ldr.w	sl, [ip]
    dd46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    dd4a:	b292      	uxth	r2, r2
    dd4c:	fa13 f38a 	uxtah	r3, r3, sl
    dd50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
    dd54:	eb02 4223 	add.w	r2, r2, r3, asr #16
    dd58:	b29b      	uxth	r3, r3
    dd5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    dd5e:	4581      	cmp	r9, r0
    dd60:	f84c 3b04 	str.w	r3, [ip], #4
    dd64:	ea4f 4a22 	mov.w	sl, r2, asr #16
    dd68:	d2de      	bcs.n	dd28 <quorem+0x42>
    dd6a:	f855 300b 	ldr.w	r3, [r5, fp]
    dd6e:	b92b      	cbnz	r3, dd7c <quorem+0x96>
    dd70:	9b01      	ldr	r3, [sp, #4]
    dd72:	3b04      	subs	r3, #4
    dd74:	429d      	cmp	r5, r3
    dd76:	461a      	mov	r2, r3
    dd78:	d32e      	bcc.n	ddd8 <quorem+0xf2>
    dd7a:	613c      	str	r4, [r7, #16]
    dd7c:	4638      	mov	r0, r7
    dd7e:	f000 f8bb 	bl	def8 <__mcmp>
    dd82:	2800      	cmp	r0, #0
    dd84:	db24      	blt.n	ddd0 <quorem+0xea>
    dd86:	3601      	adds	r6, #1
    dd88:	4628      	mov	r0, r5
    dd8a:	f04f 0c00 	mov.w	ip, #0
    dd8e:	f858 2b04 	ldr.w	r2, [r8], #4
    dd92:	f8d0 e000 	ldr.w	lr, [r0]
    dd96:	b293      	uxth	r3, r2
    dd98:	ebac 0303 	sub.w	r3, ip, r3
    dd9c:	0c12      	lsrs	r2, r2, #16
    dd9e:	fa13 f38e 	uxtah	r3, r3, lr
    dda2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
    dda6:	eb02 4223 	add.w	r2, r2, r3, asr #16
    ddaa:	b29b      	uxth	r3, r3
    ddac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ddb0:	45c1      	cmp	r9, r8
    ddb2:	f840 3b04 	str.w	r3, [r0], #4
    ddb6:	ea4f 4c22 	mov.w	ip, r2, asr #16
    ddba:	d2e8      	bcs.n	dd8e <quorem+0xa8>
    ddbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    ddc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    ddc4:	b922      	cbnz	r2, ddd0 <quorem+0xea>
    ddc6:	3b04      	subs	r3, #4
    ddc8:	429d      	cmp	r5, r3
    ddca:	461a      	mov	r2, r3
    ddcc:	d30a      	bcc.n	dde4 <quorem+0xfe>
    ddce:	613c      	str	r4, [r7, #16]
    ddd0:	4630      	mov	r0, r6
    ddd2:	b003      	add	sp, #12
    ddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddd8:	6812      	ldr	r2, [r2, #0]
    ddda:	3b04      	subs	r3, #4
    dddc:	2a00      	cmp	r2, #0
    ddde:	d1cc      	bne.n	dd7a <quorem+0x94>
    dde0:	3c01      	subs	r4, #1
    dde2:	e7c7      	b.n	dd74 <quorem+0x8e>
    dde4:	6812      	ldr	r2, [r2, #0]
    dde6:	3b04      	subs	r3, #4
    dde8:	2a00      	cmp	r2, #0
    ddea:	d1f0      	bne.n	ddce <quorem+0xe8>
    ddec:	3c01      	subs	r4, #1
    ddee:	e7eb      	b.n	ddc8 <quorem+0xe2>
    ddf0:	2000      	movs	r0, #0
    ddf2:	e7ee      	b.n	ddd2 <quorem+0xec>

0000ddf4 <__sfmoreglue>:
    ddf4:	b570      	push	{r4, r5, r6, lr}
    ddf6:	2268      	movs	r2, #104	; 0x68
    ddf8:	1e4d      	subs	r5, r1, #1
    ddfa:	4355      	muls	r5, r2
    ddfc:	460e      	mov	r6, r1
    ddfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
    de02:	f7fc ff13 	bl	ac2c <_malloc_r>
    de06:	4604      	mov	r4, r0
    de08:	b140      	cbz	r0, de1c <__sfmoreglue+0x28>
    de0a:	2100      	movs	r1, #0
    de0c:	e9c0 1600 	strd	r1, r6, [r0]
    de10:	300c      	adds	r0, #12
    de12:	60a0      	str	r0, [r4, #8]
    de14:	f105 0268 	add.w	r2, r5, #104	; 0x68
    de18:	f7ff fe3c 	bl	da94 <memset>
    de1c:	4620      	mov	r0, r4
    de1e:	bd70      	pop	{r4, r5, r6, pc}

0000de20 <_fwalk_reent>:
    de20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    de24:	4606      	mov	r6, r0
    de26:	4688      	mov	r8, r1
    de28:	f100 0448 	add.w	r4, r0, #72	; 0x48
    de2c:	2700      	movs	r7, #0
    de2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    de32:	f1b9 0901 	subs.w	r9, r9, #1
    de36:	d505      	bpl.n	de44 <_fwalk_reent+0x24>
    de38:	6824      	ldr	r4, [r4, #0]
    de3a:	2c00      	cmp	r4, #0
    de3c:	d1f7      	bne.n	de2e <_fwalk_reent+0xe>
    de3e:	4638      	mov	r0, r7
    de40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    de44:	89ab      	ldrh	r3, [r5, #12]
    de46:	2b01      	cmp	r3, #1
    de48:	d907      	bls.n	de5a <_fwalk_reent+0x3a>
    de4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    de4e:	3301      	adds	r3, #1
    de50:	d003      	beq.n	de5a <_fwalk_reent+0x3a>
    de52:	4629      	mov	r1, r5
    de54:	4630      	mov	r0, r6
    de56:	47c0      	blx	r8
    de58:	4307      	orrs	r7, r0
    de5a:	3568      	adds	r5, #104	; 0x68
    de5c:	e7e9      	b.n	de32 <_fwalk_reent+0x12>

0000de5e <__hi0bits>:
    de5e:	0c02      	lsrs	r2, r0, #16
    de60:	0412      	lsls	r2, r2, #16
    de62:	4603      	mov	r3, r0
    de64:	b9ca      	cbnz	r2, de9a <__hi0bits+0x3c>
    de66:	0403      	lsls	r3, r0, #16
    de68:	2010      	movs	r0, #16
    de6a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    de6e:	bf04      	itt	eq
    de70:	021b      	lsleq	r3, r3, #8
    de72:	3008      	addeq	r0, #8
    de74:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    de78:	bf04      	itt	eq
    de7a:	011b      	lsleq	r3, r3, #4
    de7c:	3004      	addeq	r0, #4
    de7e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    de82:	bf04      	itt	eq
    de84:	009b      	lsleq	r3, r3, #2
    de86:	3002      	addeq	r0, #2
    de88:	2b00      	cmp	r3, #0
    de8a:	db05      	blt.n	de98 <__hi0bits+0x3a>
    de8c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    de90:	f100 0001 	add.w	r0, r0, #1
    de94:	bf08      	it	eq
    de96:	2020      	moveq	r0, #32
    de98:	4770      	bx	lr
    de9a:	2000      	movs	r0, #0
    de9c:	e7e5      	b.n	de6a <__hi0bits+0xc>

0000de9e <__lo0bits>:
    de9e:	6803      	ldr	r3, [r0, #0]
    dea0:	4602      	mov	r2, r0
    dea2:	f013 0007 	ands.w	r0, r3, #7
    dea6:	d00b      	beq.n	dec0 <__lo0bits+0x22>
    dea8:	07d9      	lsls	r1, r3, #31
    deaa:	d421      	bmi.n	def0 <__lo0bits+0x52>
    deac:	0798      	lsls	r0, r3, #30
    deae:	bf49      	itett	mi
    deb0:	085b      	lsrmi	r3, r3, #1
    deb2:	089b      	lsrpl	r3, r3, #2
    deb4:	2001      	movmi	r0, #1
    deb6:	6013      	strmi	r3, [r2, #0]
    deb8:	bf5c      	itt	pl
    deba:	6013      	strpl	r3, [r2, #0]
    debc:	2002      	movpl	r0, #2
    debe:	4770      	bx	lr
    dec0:	b299      	uxth	r1, r3
    dec2:	b909      	cbnz	r1, dec8 <__lo0bits+0x2a>
    dec4:	0c1b      	lsrs	r3, r3, #16
    dec6:	2010      	movs	r0, #16
    dec8:	b2d9      	uxtb	r1, r3
    deca:	b909      	cbnz	r1, ded0 <__lo0bits+0x32>
    decc:	3008      	adds	r0, #8
    dece:	0a1b      	lsrs	r3, r3, #8
    ded0:	0719      	lsls	r1, r3, #28
    ded2:	bf04      	itt	eq
    ded4:	091b      	lsreq	r3, r3, #4
    ded6:	3004      	addeq	r0, #4
    ded8:	0799      	lsls	r1, r3, #30
    deda:	bf04      	itt	eq
    dedc:	089b      	lsreq	r3, r3, #2
    dede:	3002      	addeq	r0, #2
    dee0:	07d9      	lsls	r1, r3, #31
    dee2:	d403      	bmi.n	deec <__lo0bits+0x4e>
    dee4:	085b      	lsrs	r3, r3, #1
    dee6:	f100 0001 	add.w	r0, r0, #1
    deea:	d003      	beq.n	def4 <__lo0bits+0x56>
    deec:	6013      	str	r3, [r2, #0]
    deee:	4770      	bx	lr
    def0:	2000      	movs	r0, #0
    def2:	4770      	bx	lr
    def4:	2020      	movs	r0, #32
    def6:	4770      	bx	lr

0000def8 <__mcmp>:
    def8:	690a      	ldr	r2, [r1, #16]
    defa:	4603      	mov	r3, r0
    defc:	6900      	ldr	r0, [r0, #16]
    defe:	1a80      	subs	r0, r0, r2
    df00:	b530      	push	{r4, r5, lr}
    df02:	d10d      	bne.n	df20 <__mcmp+0x28>
    df04:	3314      	adds	r3, #20
    df06:	3114      	adds	r1, #20
    df08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    df0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    df10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
    df14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    df18:	4295      	cmp	r5, r2
    df1a:	d002      	beq.n	df22 <__mcmp+0x2a>
    df1c:	d304      	bcc.n	df28 <__mcmp+0x30>
    df1e:	2001      	movs	r0, #1
    df20:	bd30      	pop	{r4, r5, pc}
    df22:	42a3      	cmp	r3, r4
    df24:	d3f4      	bcc.n	df10 <__mcmp+0x18>
    df26:	e7fb      	b.n	df20 <__mcmp+0x28>
    df28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    df2c:	e7f8      	b.n	df20 <__mcmp+0x28>

0000df2e <_calloc_r>:
    df2e:	b538      	push	{r3, r4, r5, lr}
    df30:	fb02 f501 	mul.w	r5, r2, r1
    df34:	4629      	mov	r1, r5
    df36:	f7fc fe79 	bl	ac2c <_malloc_r>
    df3a:	4604      	mov	r4, r0
    df3c:	b118      	cbz	r0, df46 <_calloc_r+0x18>
    df3e:	462a      	mov	r2, r5
    df40:	2100      	movs	r1, #0
    df42:	f7ff fda7 	bl	da94 <memset>
    df46:	4620      	mov	r0, r4
    df48:	bd38      	pop	{r3, r4, r5, pc}

0000df4a <__sfputc_r>:
    df4a:	6893      	ldr	r3, [r2, #8]
    df4c:	3b01      	subs	r3, #1
    df4e:	2b00      	cmp	r3, #0
    df50:	b410      	push	{r4}
    df52:	6093      	str	r3, [r2, #8]
    df54:	da07      	bge.n	df66 <__sfputc_r+0x1c>
    df56:	6994      	ldr	r4, [r2, #24]
    df58:	42a3      	cmp	r3, r4
    df5a:	db01      	blt.n	df60 <__sfputc_r+0x16>
    df5c:	290a      	cmp	r1, #10
    df5e:	d102      	bne.n	df66 <__sfputc_r+0x1c>
    df60:	bc10      	pop	{r4}
    df62:	f7fe badf 	b.w	c524 <__swbuf_r>
    df66:	6813      	ldr	r3, [r2, #0]
    df68:	1c58      	adds	r0, r3, #1
    df6a:	6010      	str	r0, [r2, #0]
    df6c:	7019      	strb	r1, [r3, #0]
    df6e:	4608      	mov	r0, r1
    df70:	bc10      	pop	{r4}
    df72:	4770      	bx	lr

0000df74 <__sfputs_r>:
    df74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df76:	4606      	mov	r6, r0
    df78:	460f      	mov	r7, r1
    df7a:	4614      	mov	r4, r2
    df7c:	18d5      	adds	r5, r2, r3
    df7e:	42ac      	cmp	r4, r5
    df80:	d101      	bne.n	df86 <__sfputs_r+0x12>
    df82:	2000      	movs	r0, #0
    df84:	e007      	b.n	df96 <__sfputs_r+0x22>
    df86:	f814 1b01 	ldrb.w	r1, [r4], #1
    df8a:	463a      	mov	r2, r7
    df8c:	4630      	mov	r0, r6
    df8e:	f7ff ffdc 	bl	df4a <__sfputc_r>
    df92:	1c43      	adds	r3, r0, #1
    df94:	d1f3      	bne.n	df7e <__sfputs_r+0xa>
    df96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000df98 <__sread>:
    df98:	b510      	push	{r4, lr}
    df9a:	460c      	mov	r4, r1
    df9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dfa0:	f7fe fc12 	bl	c7c8 <_read_r>
    dfa4:	2800      	cmp	r0, #0
    dfa6:	bfab      	itete	ge
    dfa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    dfaa:	89a3      	ldrhlt	r3, [r4, #12]
    dfac:	181b      	addge	r3, r3, r0
    dfae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    dfb2:	bfac      	ite	ge
    dfb4:	6563      	strge	r3, [r4, #84]	; 0x54
    dfb6:	81a3      	strhlt	r3, [r4, #12]
    dfb8:	bd10      	pop	{r4, pc}

0000dfba <__swrite>:
    dfba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfbe:	461f      	mov	r7, r3
    dfc0:	898b      	ldrh	r3, [r1, #12]
    dfc2:	05db      	lsls	r3, r3, #23
    dfc4:	4605      	mov	r5, r0
    dfc6:	460c      	mov	r4, r1
    dfc8:	4616      	mov	r6, r2
    dfca:	d505      	bpl.n	dfd8 <__swrite+0x1e>
    dfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dfd0:	2302      	movs	r3, #2
    dfd2:	2200      	movs	r2, #0
    dfd4:	f7fe fba6 	bl	c724 <_lseek_r>
    dfd8:	89a3      	ldrh	r3, [r4, #12]
    dfda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    dfde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    dfe2:	81a3      	strh	r3, [r4, #12]
    dfe4:	4632      	mov	r2, r6
    dfe6:	463b      	mov	r3, r7
    dfe8:	4628      	mov	r0, r5
    dfea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dfee:	f7fd bc77 	b.w	b8e0 <_write_r>

0000dff2 <__sseek>:
    dff2:	b510      	push	{r4, lr}
    dff4:	460c      	mov	r4, r1
    dff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dffa:	f7fe fb93 	bl	c724 <_lseek_r>
    dffe:	1c43      	adds	r3, r0, #1
    e000:	89a3      	ldrh	r3, [r4, #12]
    e002:	bf15      	itete	ne
    e004:	6560      	strne	r0, [r4, #84]	; 0x54
    e006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    e00a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    e00e:	81a3      	strheq	r3, [r4, #12]
    e010:	bf18      	it	ne
    e012:	81a3      	strhne	r3, [r4, #12]
    e014:	bd10      	pop	{r4, pc}

0000e016 <__sclose>:
    e016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e01a:	f7fe bb61 	b.w	c6e0 <_close_r>

0000e01e <__swhatbuf_r>:
    e01e:	b570      	push	{r4, r5, r6, lr}
    e020:	460e      	mov	r6, r1
    e022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e026:	2900      	cmp	r1, #0
    e028:	b096      	sub	sp, #88	; 0x58
    e02a:	4614      	mov	r4, r2
    e02c:	461d      	mov	r5, r3
    e02e:	da08      	bge.n	e042 <__swhatbuf_r+0x24>
    e030:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
    e034:	2200      	movs	r2, #0
    e036:	602a      	str	r2, [r5, #0]
    e038:	061a      	lsls	r2, r3, #24
    e03a:	d410      	bmi.n	e05e <__swhatbuf_r+0x40>
    e03c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e040:	e00e      	b.n	e060 <__swhatbuf_r+0x42>
    e042:	466a      	mov	r2, sp
    e044:	f7fe fbd2 	bl	c7ec <_fstat_r>
    e048:	2800      	cmp	r0, #0
    e04a:	dbf1      	blt.n	e030 <__swhatbuf_r+0x12>
    e04c:	9a01      	ldr	r2, [sp, #4]
    e04e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    e052:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    e056:	425a      	negs	r2, r3
    e058:	415a      	adcs	r2, r3
    e05a:	602a      	str	r2, [r5, #0]
    e05c:	e7ee      	b.n	e03c <__swhatbuf_r+0x1e>
    e05e:	2340      	movs	r3, #64	; 0x40
    e060:	2000      	movs	r0, #0
    e062:	6023      	str	r3, [r4, #0]
    e064:	b016      	add	sp, #88	; 0x58
    e066:	bd70      	pop	{r4, r5, r6, pc}

0000e068 <__ascii_mbtowc>:
    e068:	b082      	sub	sp, #8
    e06a:	b901      	cbnz	r1, e06e <__ascii_mbtowc+0x6>
    e06c:	a901      	add	r1, sp, #4
    e06e:	b142      	cbz	r2, e082 <__ascii_mbtowc+0x1a>
    e070:	b14b      	cbz	r3, e086 <__ascii_mbtowc+0x1e>
    e072:	7813      	ldrb	r3, [r2, #0]
    e074:	600b      	str	r3, [r1, #0]
    e076:	7812      	ldrb	r2, [r2, #0]
    e078:	1e10      	subs	r0, r2, #0
    e07a:	bf18      	it	ne
    e07c:	2001      	movne	r0, #1
    e07e:	b002      	add	sp, #8
    e080:	4770      	bx	lr
    e082:	4610      	mov	r0, r2
    e084:	e7fb      	b.n	e07e <__ascii_mbtowc+0x16>
    e086:	f06f 0001 	mvn.w	r0, #1
    e08a:	e7f8      	b.n	e07e <__ascii_mbtowc+0x16>

0000e08c <__ascii_wctomb>:
    e08c:	4603      	mov	r3, r0
    e08e:	4608      	mov	r0, r1
    e090:	b141      	cbz	r1, e0a4 <__ascii_wctomb+0x18>
    e092:	2aff      	cmp	r2, #255	; 0xff
    e094:	d904      	bls.n	e0a0 <__ascii_wctomb+0x14>
    e096:	228a      	movs	r2, #138	; 0x8a
    e098:	601a      	str	r2, [r3, #0]
    e09a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e09e:	4770      	bx	lr
    e0a0:	700a      	strb	r2, [r1, #0]
    e0a2:	2001      	movs	r0, #1
    e0a4:	4770      	bx	lr

0000e0a6 <abort>:
    e0a6:	b508      	push	{r3, lr}
    e0a8:	2006      	movs	r0, #6
    e0aa:	f7fe fbc1 	bl	c830 <raise>
    e0ae:	2001      	movs	r0, #1
    e0b0:	f7f7 fb24 	bl	56fc <_exit>

0000e0b4 <_raise_r>:
    e0b4:	291f      	cmp	r1, #31
    e0b6:	b538      	push	{r3, r4, r5, lr}
    e0b8:	4604      	mov	r4, r0
    e0ba:	460d      	mov	r5, r1
    e0bc:	d904      	bls.n	e0c8 <_raise_r+0x14>
    e0be:	2316      	movs	r3, #22
    e0c0:	6003      	str	r3, [r0, #0]
    e0c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e0c6:	bd38      	pop	{r3, r4, r5, pc}
    e0c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e0ca:	b112      	cbz	r2, e0d2 <_raise_r+0x1e>
    e0cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    e0d0:	b94b      	cbnz	r3, e0e6 <_raise_r+0x32>
    e0d2:	4620      	mov	r0, r4
    e0d4:	f000 f816 	bl	e104 <_getpid_r>
    e0d8:	462a      	mov	r2, r5
    e0da:	4601      	mov	r1, r0
    e0dc:	4620      	mov	r0, r4
    e0de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e0e2:	f7fe bbad 	b.w	c840 <_kill_r>
    e0e6:	2b01      	cmp	r3, #1
    e0e8:	d00a      	beq.n	e100 <_raise_r+0x4c>
    e0ea:	1c59      	adds	r1, r3, #1
    e0ec:	d103      	bne.n	e0f6 <_raise_r+0x42>
    e0ee:	2316      	movs	r3, #22
    e0f0:	6003      	str	r3, [r0, #0]
    e0f2:	2001      	movs	r0, #1
    e0f4:	e7e7      	b.n	e0c6 <_raise_r+0x12>
    e0f6:	2400      	movs	r4, #0
    e0f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    e0fc:	4628      	mov	r0, r5
    e0fe:	4798      	blx	r3
    e100:	2000      	movs	r0, #0
    e102:	e7e0      	b.n	e0c6 <_raise_r+0x12>

0000e104 <_getpid_r>:
    e104:	f7fe bfae 	b.w	d064 <_getpid>

0000e108 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    e108:	f7f9 b994 	b.w	7434 <SystemInit>
